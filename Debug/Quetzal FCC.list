
Quetzal FCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015348  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000095bc  08015518  08015518  00025518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ead4  0801ead4  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  0801ead4  0801ead4  0002ead4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eadc  0801eadc  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0801eadc  0801eadc  0002eadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000024  0801eb00  0801eb00  0002eb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801eb24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021d0  20000360  0801ee84  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002530  0801ee84  00032530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00083a1f  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a5ce  00000000  00000000  000b3daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c80  00000000  00000000  000be380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a50  00000000  00000000  000c1000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000317a6  00000000  00000000  000c3a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034cee  00000000  00000000  000f51f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118190  00000000  00000000  00129ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00242074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e944  00000000  00000000  002420c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000360 	.word	0x20000360
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015500 	.word	0x08015500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000364 	.word	0x20000364
 800020c:	08015500 	.word	0x08015500

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_ZNSt7__cxx119to_stringEi+0x24>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <_ZNSt7__cxx119to_stringEi+0x28>)
 8000ef6:	f000 fec1 	bl	8001c7c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08015518 	.word	0x08015518
 8000f08:	0801333d 	.word	0x0801333d

08000f0c <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	ed87 0a00 	vstr	s0, [r7]
    const int __n =
 8000f18:	233a      	movs	r3, #58	; 0x3a
 8000f1a:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8000f1c:	6838      	ldr	r0, [r7, #0]
 8000f1e:	f7ff fb33 	bl	8000588 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	e9cd 2300 	strd	r2, r3, [sp]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <_ZNSt7__cxx119to_stringEf+0x34>)
 8000f2e:	223a      	movs	r2, #58	; 0x3a
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <_ZNSt7__cxx119to_stringEf+0x38>)
 8000f32:	f000 fea3 	bl	8001c7c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0801551c 	.word	0x0801551c
 8000f44:	0801333d 	.word	0x0801333d

08000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
}

// Print string with new line.
static void println(std::string s)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f011 faa3 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f56:	4604      	mov	r4, r0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f011 f965 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	4621      	mov	r1, r4
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f6a:	f00b fff6 	bl	800cf5a <HAL_UART_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8000f72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f76:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8000f78:	f107 010c 	add.w	r1, r7, #12
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	2202      	movs	r2, #2
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f84:	f00b ffe9 	bl	800cf5a <HAL_UART_Transmit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	20000928 	.word	0x20000928

08000f98 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *  Created on: Sep 16, 2022
 *      Author: heapr0ll
 */
#include "BMI088Driver.hpp"

BMI088::BMI088(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08d      	sub	sp, #52	; 0x34
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6178      	str	r0, [r7, #20]
 8000fa0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fa4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fa8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fac:	460b      	mov	r3, r1
 8000fae:	603a      	str	r2, [r7, #0]
 8000fb0:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 8000fb2:	697c      	ldr	r4, [r7, #20]
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f011 fa94 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000fc0:	f107 0218 	add.w	r2, r7, #24
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	ed97 1a02 	vldr	s2, [r7, #8]
 8000fcc:	edd7 0a03 	vldr	s1, [r7, #12]
 8000fd0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f004 fd97 	bl	8005b08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f011 f914 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	601a      	str	r2, [r3, #0]
{
	devAddrAcc = BMI088_ACC_ADDRESS;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2218      	movs	r2, #24
 8000fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	devAddrGyro = BMI088_GYRO_ADDRESS;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2268      	movs	r2, #104	; 0x68
 8000ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gcal_x = 0;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
	gcal_y = 0;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	641a      	str	r2, [r3, #64]	; 0x40
	gcal_z = 0;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4618      	mov	r0, r3
 8001016:	3734      	adds	r7, #52	; 0x34
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	0801e528 	.word	0x0801e528

08001020 <_ZN6BMI08812consoleFuncaEv>:

bool BMI088::consoleFunca()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f010 fe76 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001032:	f107 0220 	add.w	r2, r7, #32
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4936      	ldr	r1, [pc, #216]	; (8001114 <_ZN6BMI08812consoleFuncaEv+0xf4>)
 800103c:	4618      	mov	r0, r3
 800103e:	f011 fa87 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff7e 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4618      	mov	r0, r3
 8001052:	f011 f8db 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001056:	f107 0320 	add.w	r3, r7, #32
 800105a:	4618      	mov	r0, r3
 800105c:	f010 fe60 	bl	8011d20 <_ZNSaIcED1Ev>
	println("Read BMI088 accel, gyro, and temp data @ 800Hz.");
 8001060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001064:	4618      	mov	r0, r3
 8001066:	f010 fe5a 	bl	8011d1e <_ZNSaIcEC1Ev>
 800106a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4929      	ldr	r1, [pc, #164]	; (8001118 <_ZN6BMI08812consoleFuncaEv+0xf8>)
 8001074:	4618      	mov	r0, r3
 8001076:	f011 fa6b 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff62 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4618      	mov	r0, r3
 800108a:	f011 f8bf 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800108e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001092:	4618      	mov	r0, r3
 8001094:	f010 fe44 	bl	8011d20 <_ZNSaIcED1Ev>
	println("\tArgs");
 8001098:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800109c:	4618      	mov	r0, r3
 800109e:	f010 fe3e 	bl	8011d1e <_ZNSaIcEC1Ev>
 80010a2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010aa:	491c      	ldr	r1, [pc, #112]	; (800111c <_ZN6BMI08812consoleFuncaEv+0xfc>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f011 fa4f 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff46 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80010bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c0:	4618      	mov	r0, r3
 80010c2:	f011 f8a3 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80010c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ca:	4618      	mov	r0, r3
 80010cc:	f010 fe28 	bl	8011d20 <_ZNSaIcED1Ev>
	println("\t* status - Show most recent accel, gyro, and temp data.");
 80010d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010d4:	4618      	mov	r0, r3
 80010d6:	f010 fe22 	bl	8011d1e <_ZNSaIcEC1Ev>
 80010da:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80010de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e2:	490f      	ldr	r1, [pc, #60]	; (8001120 <_ZN6BMI08812consoleFuncaEv+0x100>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f011 fa33 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff2a 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80010f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f8:	4618      	mov	r0, r3
 80010fa:	f011 f887 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80010fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001102:	4618      	mov	r0, r3
 8001104:	f010 fe0c 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	3778      	adds	r7, #120	; 0x78
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08015524 	.word	0x08015524
 8001118:	08015534 	.word	0x08015534
 800111c:	08015564 	.word	0x08015564
 8001120:	0801556c 	.word	0x0801556c

08001124 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BMI088::consoleFuncb(std::string& s)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800112a:	af00      	add	r7, sp, #0
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	463b      	mov	r3, r7
 8001132:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 8001134:	463b      	mov	r3, r7
 8001136:	49c8      	ldr	r1, [pc, #800]	; (8001458 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x334>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f000 fdd7 	bl	8001cec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 815e 	beq.w	8001402 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2de>
	{
		println("BMI088 Units - [rads, m/s^2, C]");
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4618      	mov	r0, r3
 800114c:	f010 fde7 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001150:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	49c0      	ldr	r1, [pc, #768]	; (800145c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x338>)
 800115a:	4618      	mov	r0, r3
 800115c:	f011 f9f8 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff feef 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f011 f84c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4618      	mov	r0, r3
 800117a:	f010 fdd1 	bl	8011d20 <_ZNSaIcED1Ev>
		println("BMI088 Frmt  - [gx, gy, gz, ax, ay, az, temp]");
 800117e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001182:	4618      	mov	r0, r3
 8001184:	f010 fdcb 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001188:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	49b3      	ldr	r1, [pc, #716]	; (8001460 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x33c>)
 8001192:	4618      	mov	r0, r3
 8001194:	f011 f9dc 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fed3 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	4618      	mov	r0, r3
 80011a8:	f011 f830 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b0:	4618      	mov	r0, r3
 80011b2:	f010 fdb5 	bl	8011d20 <_ZNSaIcED1Ev>
		println("BMI088 Data  - " +
				std::to_string(gyroData.gx) + " " +
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80011be:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fea0 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
		println("BMI088 Data  - " +
 80011cc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80011d0:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 80011d4:	49a3      	ldr	r1, [pc, #652]	; (8001464 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fd9b 	bl	8001d12 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
				std::to_string(gyroData.gx) + " " +
 80011dc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80011e0:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 80011e4:	4aa0      	ldr	r2, [pc, #640]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fdab 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(gyroData.gy) + " " +
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80011f4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe85 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(gyroData.gx) + " " +
 8001202:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001206:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 800120a:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fdae 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(gyroData.gy) + " " +
 8001214:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001218:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800121c:	4a92      	ldr	r2, [pc, #584]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd8f 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(gyroData.gz) + " " +
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800122c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe69 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(gyroData.gy) + " " +
 800123a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800123e:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001242:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fd92 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(gyroData.gz) + " " +
 800124c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001250:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001254:	4a84      	ldr	r2, [pc, #528]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fd73 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(accelData.ax) + " " +
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001264:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe4d 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(gyroData.gz) + " " +
 8001272:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001276:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800127a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fd76 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(accelData.ax) + " " +
 8001284:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001288:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800128c:	4a76      	ldr	r2, [pc, #472]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fd57 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(accelData.ay) + " " +
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800129c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe31 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(accelData.ax) + " " +
 80012aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ae:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80012b2:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd5a 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(accelData.ay) + " " +
 80012bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012c0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80012c4:	4a68      	ldr	r2, [pc, #416]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fd3b 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(accelData.az) + " " +
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80012d4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe15 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(accelData.ay) + " " +
 80012e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e6:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80012ea:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fd3e 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(accelData.az) + " " +
 80012f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012f8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80012fc:	4a5a      	ldr	r2, [pc, #360]	; (8001468 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd1f 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(temp));
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800130c:	461a      	mov	r2, r3
 800130e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fde3 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
				std::to_string(accelData.az) + " " +
 800131a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800131e:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001322:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fd22 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
		println("BMI088 Data  - " +
 800132c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe09 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
				std::to_string(temp));
 8001336:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800133a:	4618      	mov	r0, r3
 800133c:	f010 ff66 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001340:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001344:	4618      	mov	r0, r3
 8001346:	f010 ff61 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(accelData.az) + " " +
 800134a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800134e:	4618      	mov	r0, r3
 8001350:	f010 ff5c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001354:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001358:	4618      	mov	r0, r3
 800135a:	f010 ff57 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800135e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8001362:	4618      	mov	r0, r3
 8001364:	f010 ff52 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(accelData.ay) + " " +
 8001368:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800136c:	4618      	mov	r0, r3
 800136e:	f010 ff4d 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001372:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001376:	4618      	mov	r0, r3
 8001378:	f010 ff48 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800137c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001380:	4618      	mov	r0, r3
 8001382:	f010 ff43 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(accelData.ax) + " " +
 8001386:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800138a:	4618      	mov	r0, r3
 800138c:	f010 ff3e 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001390:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001394:	4618      	mov	r0, r3
 8001396:	f010 ff39 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800139a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800139e:	4618      	mov	r0, r3
 80013a0:	f010 ff34 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(gyroData.gz) + " " +
 80013a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013a8:	4618      	mov	r0, r3
 80013aa:	f010 ff2f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013ae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013b2:	4618      	mov	r0, r3
 80013b4:	f010 ff2a 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013b8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80013bc:	4618      	mov	r0, r3
 80013be:	f010 ff25 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(gyroData.gy) + " " +
 80013c2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80013c6:	4618      	mov	r0, r3
 80013c8:	f010 ff20 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013cc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80013d0:	4618      	mov	r0, r3
 80013d2:	f010 ff1b 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013d6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80013da:	4618      	mov	r0, r3
 80013dc:	f010 ff16 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(gyroData.gx) + " " +
 80013e0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f010 ff11 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013ea:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80013ee:	4618      	mov	r0, r3
 80013f0:	f010 ff0c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013f4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f010 ff07 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		println("Invalid parameter!");
		consoleFunca();
		return false;
	}

	return true;
 80013fe:	2301      	movs	r3, #1
 8001400:	e024      	b.n	800144c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x328>
		println("Invalid parameter!");
 8001402:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001406:	4618      	mov	r0, r3
 8001408:	f010 fc89 	bl	8011d1e <_ZNSaIcEC1Ev>
 800140c:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8001410:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001414:	4915      	ldr	r1, [pc, #84]	; (800146c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 8001416:	4618      	mov	r0, r3
 8001418:	f011 f89a 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800141c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd91 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001426:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800142a:	4618      	mov	r0, r3
 800142c:	f010 feee 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001430:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001434:	4618      	mov	r0, r3
 8001436:	f010 fc73 	bl	8011d20 <_ZNSaIcED1Ev>
		consoleFunca();
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3304      	adds	r3, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	1d3a      	adds	r2, r7, #4
 8001446:	6810      	ldr	r0, [r2, #0]
 8001448:	4798      	blx	r3
		return false;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	080155a8 	.word	0x080155a8
 800145c:	080155b0 	.word	0x080155b0
 8001460:	080155d0 	.word	0x080155d0
 8001464:	08015600 	.word	0x08015600
 8001468:	08015610 	.word	0x08015610
 800146c:	08015614 	.word	0x08015614

08001470 <_ZN6BMI08812taskFunctionEv>:

bool BMI088::taskFunction()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	getGyroscope(&gyroData.gx, &gyroData.gy, &gyroData.gz);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3354      	adds	r3, #84	; 0x54
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fa77 	bl	800197c <_ZN6BMI08812getGyroscopeEPfS0_S0_>
	getAcceleration(&accelData.ax, &accelData.ay, &accelData.az);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3360      	adds	r3, #96	; 0x60
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f9ee 	bl	8001880 <_ZN6BMI08815getAccelerationEPfS0_S0_>
	temp = getTemperature();
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 faf5 	bl	8001a94 <_ZN6BMI08814getTemperatureEv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	return true;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>:

bool BMI088::initialize(FMPI2C_HandleTypeDef* i) {
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]

	i2c = i;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	649a      	str	r2, [r3, #72]	; 0x48

	// Check if is connected.
	if (!isConnection()) return false;
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f88f 	bl	80015f2 <_ZN6BMI08812isConnectionEv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f083 0301 	eor.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x26>
 80014e0:	2300      	movs	r3, #0
 80014e2:	e021      	b.n	8001528 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x6a>

    setAccScaleRange(RANGE_3G);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f906 	bl	80016f8 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>
    setAccOutputDataRate(ODR_1600);
 80014ec:	210c      	movs	r1, #12
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f936 	bl	8001760 <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>
    setAccLowPassFilterBandwidth(BWP_4_FOLD);   // Refer to data sheet to see how Low Pass Filter is set based on Output Data Rate and this register value.
 80014f4:	2108      	movs	r1, #8
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f953 	bl	80017a2 <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>
    setAccPoweMode(ACC_ACTIVE);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f8aa 	bl	8001658 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>

    setGyroScaleRange(RANGE_500);
 8001504:	2102      	movs	r1, #2
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f96e 	bl	80017e8 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>
    setGyroOutputDataRate(ODR_2000_BW_230);
 800150c:	2101      	movs	r1, #1
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f9a6 	bl	8001860 <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>
    setGyroPoweMode(GYRO_NORMAL);
 8001514:	2100      	movs	r1, #0
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f8c7 	bl	80016aa <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>

    calibrateGyro(5000);
 800151c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f805 	bl	8001530 <_ZN6BMI08813calibrateGyroEi>

    return true;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN6BMI08813calibrateGyroEi>:

void BMI088::calibrateGyro(int count){
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    float x_tot = 0, y_tot = 0, z_tot = 0;
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++){
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	da24      	bge.n	80015a2 <_ZN6BMI08813calibrateGyroEi+0x72>
      float gx, gy, gz;
      getGyroscope(&gx, &gy, &gz);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	f107 0210 	add.w	r2, r7, #16
 8001560:	f107 0114 	add.w	r1, r7, #20
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fa09 	bl	800197c <_ZN6BMI08812getGyroscopeEPfS0_S0_>
      x_tot += gx;
 800156a:	edd7 7a05 	vldr	s15, [r7, #20]
 800156e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      y_tot += gy;
 800157a:	edd7 7a04 	vldr	s15, [r7, #16]
 800157e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001586:	edc7 7a08 	vstr	s15, [r7, #32]
      z_tot += gz;
 800158a:	edd7 7a03 	vldr	s15, [r7, #12]
 800158e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int i = 0; i < count; i++){
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3301      	adds	r3, #1
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	e7d6      	b.n	8001550 <_ZN6BMI08813calibrateGyroEi+0x20>
    }
    gcal_x = x_tot / count;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    gcal_y = y_tot / count;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    gcal_z = z_tot / count;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80015e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZN6BMI08812isConnectionEv>:

bool BMI088::isConnection(void) {
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
    return ((getAccID() == 0x1E) && (getGyroID() == 0x0F));
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f810 	bl	8001620 <_ZN6BMI0888getAccIDEv>
 8001600:	4603      	mov	r3, r0
 8001602:	2b1e      	cmp	r3, #30
 8001604:	d107      	bne.n	8001616 <_ZN6BMI08812isConnectionEv+0x24>
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f818 	bl	800163c <_ZN6BMI0889getGyroIDEv>
 800160c:	4603      	mov	r3, r0
 800160e:	2b0f      	cmp	r3, #15
 8001610:	d101      	bne.n	8001616 <_ZN6BMI08812isConnectionEv+0x24>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <_ZN6BMI08812isConnectionEv+0x26>
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN6BMI0888getAccIDEv>:

void BMI088::resetGyro(void) {
    write8(GYRO, BMI088_GYRO_SOFT_RESET, 0xB6);
}

uint8_t BMI088::getAccID(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    return read8(ACC, BMI088_ACC_CHIP_ID);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fa85 	bl	8001b3c <_ZN6BMI0885read8E13device_type_th>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN6BMI0889getGyroIDEv>:

uint8_t BMI088::getGyroID(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    return read8(GYRO, BMI088_GYRO_CHIP_ID);
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa77 	bl	8001b3c <_ZN6BMI0885read8E13device_type_th>
 800164e:	4603      	mov	r3, r0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>:

void BMI088::setAccPoweMode(acc_power_type_t mode) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
    if (mode == ACC_ACTIVE) {
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x2c>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x04);
 800166a:	2304      	movs	r3, #4
 800166c:	227d      	movs	r2, #125	; 0x7d
 800166e:	2100      	movs	r1, #0
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fa31 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x00);
 8001676:	2300      	movs	r3, #0
 8001678:	227c      	movs	r2, #124	; 0x7c
 800167a:	2100      	movs	r1, #0
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fa2b 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == ACC_SUSPEND) {
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
    }
}
 8001682:	e00e      	b.n	80016a2 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
    } else if (mode == ACC_SUSPEND) {
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d10b      	bne.n	80016a2 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
 800168a:	2303      	movs	r3, #3
 800168c:	227c      	movs	r2, #124	; 0x7c
 800168e:	2100      	movs	r1, #0
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa21 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
 8001696:	2300      	movs	r3, #0
 8001698:	227d      	movs	r2, #125	; 0x7d
 800169a:	2100      	movs	r1, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fa1b 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>:

void BMI088::setGyroPoweMode(gyro_power_type_t mode) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	460b      	mov	r3, r1
 80016b4:	70fb      	strb	r3, [r7, #3]
    if (mode == GYRO_NORMAL) {
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x20>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_NORMAL);
 80016bc:	2300      	movs	r3, #0
 80016be:	2211      	movs	r2, #17
 80016c0:	2101      	movs	r1, #1
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fa08 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == GYRO_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
    } else if (mode == GYRO_DEEP_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
    }
}
 80016c8:	e012      	b.n	80016f0 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_SUSPEND) {
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	d106      	bne.n	80016de <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x34>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	2211      	movs	r2, #17
 80016d4:	2101      	movs	r1, #1
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f9fe 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 80016dc:	e008      	b.n	80016f0 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_DEEP_SUSPEND) {
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d105      	bne.n	80016f0 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
 80016e4:	2320      	movs	r3, #32
 80016e6:	2211      	movs	r2, #17
 80016e8:	2101      	movs	r1, #1
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f9f4 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>:

void BMI088::setAccScaleRange(acc_scale_type_t range) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_3G) {
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x1a>
        accRange = 3;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a10      	ldr	r2, [pc, #64]	; (8001750 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x58>)
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
 8001710:	e013      	b.n	800173a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_6G) {
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d103      	bne.n	8001720 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x28>
        accRange = 6;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x5c>)
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e00c      	b.n	800173a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_12G) {
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d103      	bne.n	800172e <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x36>
        accRange = 12;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x60>)
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
 800172c:	e005      	b.n	800173a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_24G) {
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d102      	bne.n	800173a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
        accRange = 24;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x64>)
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
    }

    write8(ACC, BMI088_ACC_RANGE, (uint8_t)range);
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2241      	movs	r2, #65	; 0x41
 800173e:	2100      	movs	r1, #0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f9c9 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40400000 	.word	0x40400000
 8001754:	40c00000 	.word	0x40c00000
 8001758:	41400000 	.word	0x41400000
 800175c:	41c00000 	.word	0x41c00000

08001760 <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>:

void BMI088::setAccOutputDataRate(acc_odr_type_t odr) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f9e1 	bl	8001b3c <_ZN6BMI0885read8E13device_type_th>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
    data = data & 0xf0;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f023 030f 	bic.w	r3, r3, #15
 8001784:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)odr;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	4313      	orrs	r3, r2
 800178c:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	2100      	movs	r1, #0
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f99f 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>:

void BMI088::setAccLowPassFilterBandwidth(acc_bwp_type_t bwp) {
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	2100      	movs	r1, #0
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f9c0 	bl	8001b3c <_ZN6BMI0885read8E13device_type_th>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
    data = data & 0x0f;                   // Wipe only top 4 bits
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)(bwp << 4);    // Low pass filter is bits [7:4]
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f97c 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>:


void BMI088::setGyroScaleRange(gyro_scale_type_t range) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_2000) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x1a>
        gyroRange = 2000;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a13      	ldr	r2, [pc, #76]	; (800184c <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x64>)
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	e01a      	b.n	8001838 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_1000) {
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d103      	bne.n	8001810 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x28>
        gyroRange = 1000;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x68>)
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	e013      	b.n	8001838 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_500) {
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d103      	bne.n	800181e <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x36>
        gyroRange = 500;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x6c>)
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
 800181c:	e00c      	b.n	8001838 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_250) {
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d103      	bne.n	800182c <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x44>
        gyroRange = 250;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x70>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
 800182a:	e005      	b.n	8001838 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_125) {
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d102      	bne.n	8001838 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
        gyroRange = 125;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x74>)
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
    }

    write8(GYRO, BMI088_GYRO_RANGE, (uint8_t)range);
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	220f      	movs	r2, #15
 800183c:	2101      	movs	r1, #1
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f94a 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	44fa0000 	.word	0x44fa0000
 8001850:	447a0000 	.word	0x447a0000
 8001854:	43fa0000 	.word	0x43fa0000
 8001858:	437a0000 	.word	0x437a0000
 800185c:	42fa0000 	.word	0x42fa0000

08001860 <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>:

void BMI088::setGyroOutputDataRate(gyro_odr_type_t odr) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
    write8(GYRO, BMI088_GYRO_BAND_WIDTH, (uint8_t)odr);
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2210      	movs	r2, #16
 8001870:	2101      	movs	r1, #1
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f930 	bl	8001ad8 <_ZN6BMI0886write8E13device_type_thh>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN6BMI08815getAccelerationEPfS0_S0_>:

void BMI088::getAcceleration(float* x, float* y, float* z) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	2300      	movs	r3, #0
 8001894:	833b      	strh	r3, [r7, #24]
    uint16_t ax = 0, ay = 0, az = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	84fb      	strh	r3, [r7, #38]	; 0x26
 800189a:	2300      	movs	r3, #0
 800189c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]

    read(ACC, BMI088_ACC_X_LSB, buf, 6);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2206      	movs	r2, #6
 80018ae:	9200      	str	r2, [sp, #0]
 80018b0:	2212      	movs	r2, #18
 80018b2:	2100      	movs	r1, #0
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f9b4 	bl	8001c22 <_ZN6BMI0884readE13device_type_thPht>

    ax = buf[0] | (buf[1] << 8);
 80018ba:	7d3b      	ldrb	r3, [r7, #20]
 80018bc:	b21a      	sxth	r2, r3
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    ay = buf[2] | (buf[3] << 8);
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    az = buf[4] | (buf[5] << 8);
 80018da:	7e3b      	ldrb	r3, [r7, #24]
 80018dc:	b21a      	sxth	r2, r3
 80018de:	7e7b      	ldrb	r3, [r7, #25]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)ax;
 80018ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f6:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = accRange * value / 32768;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001900:	edd7 7a07 	vldr	s15, [r7, #28]
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001978 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 800190c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)ay;
 8001916:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = accRange * value / 32768;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800192c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001978 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)az;
 8001942:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194e:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = accRange * value / 32768;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001958:	edd7 7a07 	vldr	s15, [r7, #28]
 800195c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001960:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001978 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	edc3 7a00 	vstr	s15, [r3]
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	47000000 	.word	0x47000000

0800197c <_ZN6BMI08812getGyroscopeEPfS0_S0_>:
    value = accRange * value / 32768;

    return value;
}

void BMI088::getGyroscope(float* x, float* y, float* z) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	2300      	movs	r3, #0
 8001990:	833b      	strh	r3, [r7, #24]
    uint16_t gx = 0, gy = 0, gz = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001996:	2300      	movs	r3, #0
 8001998:	84bb      	strh	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]

    read(GYRO, BMI088_GYRO_RATE_X_LSB, buf, 6);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2206      	movs	r2, #6
 80019aa:	9200      	str	r2, [sp, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	2101      	movs	r1, #1
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f936 	bl	8001c22 <_ZN6BMI0884readE13device_type_thPht>

    gx = buf[0] | (buf[1] << 8);
 80019b6:	7d3b      	ldrb	r3, [r7, #20]
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	7d7b      	ldrb	r3, [r7, #21]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    gy = buf[2] | (buf[3] << 8);
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	84bb      	strh	r3, [r7, #36]	; 0x24
    gz = buf[4] | (buf[5] << 8);
 80019d6:	7e3b      	ldrb	r3, [r7, #24]
 80019d8:	b21a      	sxth	r2, r3
 80019da:	7e7b      	ldrb	r3, [r7, #25]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)gx;
 80019e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = (gyroRange * value / 32768) - gcal_x;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80019fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001a90 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x114>
 8001a08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gy;
 8001a1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = (gyroRange * value / 32768) - gcal_y;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001a90 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x114>
 8001a3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gz;
 8001a52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = (gyroRange * value / 32768) - gcal_z;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a90 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x114>
 8001a74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	edc3 7a00 	vstr	s15, [r3]
}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	47000000 	.word	0x47000000

08001a94 <_ZN6BMI08814getTemperatureEv>:
    value = (gyroRange * value / 32768) - gcal_z;

    return value;
}

int16_t BMI088::getTemperature(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    uint16_t data = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	81fb      	strh	r3, [r7, #14]

    data = read16Be(ACC, BMI088_ACC_TEMP_MSB);
 8001aa0:	2222      	movs	r2, #34	; 0x22
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f887 	bl	8001bb8 <_ZN6BMI0888read16BeE13device_type_th>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	81fb      	strh	r3, [r7, #14]
    data = data >> 5;
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	115b      	asrs	r3, r3, #5
 8001ab2:	81fb      	strh	r3, [r7, #14]

    if (data > 1023) {
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d303      	bcc.n	8001ac4 <_ZN6BMI08814getTemperatureEv+0x30>
        data = data - 2048;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001ac2:	81fb      	strh	r3, [r7, #14]
    }

    return (int16_t)(data / 8 + 23);
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3317      	adds	r3, #23
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b21b      	sxth	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN6BMI0886write8E13device_type_thh>:

void BMI088::write8(device_type_t dev, uint8_t reg, uint8_t val) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	70fb      	strb	r3, [r7, #3]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70bb      	strb	r3, [r7, #2]
 8001aee:	4613      	mov	r3, r2
 8001af0:	707b      	strb	r3, [r7, #1]
    uint8_t addr = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]

    if (dev) {
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <_ZN6BMI0886write8E13device_type_thh+0x2e>
        addr = devAddrGyro;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e003      	b.n	8001b0e <_ZN6BMI0886write8E13device_type_thh+0x36>
    } else {
        addr = devAddrAcc;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b0c:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Write(i2c, (uint16_t)(addr<<1), reg, 1, &val, 1, HAL_MAX_DELAY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	78bb      	ldrb	r3, [r7, #2]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	1c7b      	adds	r3, r7, #1
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f006 ff2f 	bl	8008990 <HAL_FMPI2C_Mem_Write>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <_ZN6BMI0885read8E13device_type_th>:

uint8_t BMI088::read8(device_type_t dev, uint8_t reg) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af04      	add	r7, sp, #16
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0, data = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	2300      	movs	r3, #0
 8001b52:	737b      	strb	r3, [r7, #13]

    if (dev) {
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <_ZN6BMI0885read8E13device_type_th+0x28>
        addr = devAddrGyro;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e003      	b.n	8001b6c <_ZN6BMI0885read8E13device_type_th+0x30>
    } else {
        addr = devAddrAcc;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b6a:	73fb      	strb	r3, [r7, #15]
    }

    HAL_StatusTypeDef code = HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, &data, 1, HAL_MAX_DELAY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b299      	uxth	r1, r3
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f107 030d 	add.w	r3, r7, #13
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f007 f813 	bl	8008bb8 <HAL_FMPI2C_Mem_Read>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73bb      	strb	r3, [r7, #14]
    if (code != HAL_OK)
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <_ZN6BMI0885read8E13device_type_th+0x6c>
    {
    	printf("[BMI088] - Error %d while trying to read %d bytes from REG %d\r\n", code, 1, reg);
 8001b9c:	7bb9      	ldrb	r1, [r7, #14]
 8001b9e:	78bb      	ldrb	r3, [r7, #2]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <_ZN6BMI0885read8E13device_type_th+0x78>)
 8001ba4:	f011 fabc 	bl	8013120 <iprintf>
    }

    return data;
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	08015628 	.word	0x08015628

08001bb8 <_ZN6BMI0888read16BeE13device_type_th>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8));
}

uint16_t BMI088::read16Be(device_type_t dev, uint8_t reg) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    if (dev) {
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <_ZN6BMI0888read16BeE13device_type_th+0x24>
        addr = devAddrGyro;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e003      	b.n	8001be4 <_ZN6BMI0888read16BeE13device_type_th+0x2c>
    } else {
        addr = devAddrAcc;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be2:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	f006 ffd7 	bl	8008bb8 <HAL_FMPI2C_Mem_Read>

    return (data[1] | (data[0] << 8));
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	7b3b      	ldrb	r3, [r7, #12]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	b29b      	uxth	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZN6BMI0884readE13device_type_thPht>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 3, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8) | (data[2] << 16));
}

void BMI088::read(device_type_t dev, uint8_t reg, uint8_t* buf, uint16_t len) {
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b08a      	sub	sp, #40	; 0x28
 8001c26:	af04      	add	r7, sp, #16
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	72fb      	strb	r3, [r7, #11]
 8001c30:	4613      	mov	r3, r2
 8001c32:	72bb      	strb	r3, [r7, #10]
    uint8_t addr = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	75fb      	strb	r3, [r7, #23]

    if (dev) {
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <_ZN6BMI0884readE13device_type_thPht+0x26>
        addr = devAddrGyro;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c44:	75fb      	strb	r3, [r7, #23]
 8001c46:	e003      	b.n	8001c50 <_ZN6BMI0884readE13device_type_thPht+0x2e>
    } else {
        addr = devAddrAcc;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c4e:	75fb      	strb	r3, [r7, #23]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, buf, len, HAL_MAX_DELAY);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	b299      	uxth	r1, r3
 8001c5c:	7abb      	ldrb	r3, [r7, #10]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	8c3b      	ldrh	r3, [r7, #32]
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f006 ffa2 	bl	8008bb8 <HAL_FMPI2C_Mem_Read>
}
 8001c74:	bf00      	nop
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001c7c:	b408      	push	{r3}
 8001c7e:	b590      	push	{r4, r7, lr}
 8001c80:	b088      	sub	sp, #32
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	ebad 0d03 	sub.w	sp, sp, r3
 8001c96:	466b      	mov	r3, sp
 8001c98:	3307      	adds	r3, #7
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca4:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001ca6:	68bc      	ldr	r4, [r7, #8]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	69f8      	ldr	r0, [r7, #28]
 8001cb0:	47a0      	blx	r4
 8001cb2:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	18d4      	adds	r4, r2, r3
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f010 f82d 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4622      	mov	r2, r4
 8001cca:	69f9      	ldr	r1, [r7, #28]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f890 	bl	8001df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f010 f822 	bl	8011d20 <_ZNSaIcED1Ev>
 8001cdc:	bf00      	nop
    }
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ce8:	b001      	add	sp, #4
 8001cea:	4770      	bx	lr

08001cec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f010 fbdf 	bl	80124bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f010 fb5c 	bl	80123e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f88b 	bl	8001e46 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f010 fa4f 	bl	80121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f010 fb8d 	bl	8012470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f874 	bl	8001e46 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4619      	mov	r1, r3
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f010 fa38 	bl	80121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
      const auto __size = __lhs.size() + __rhs.size();
 8001d7c:	68b8      	ldr	r0, [r7, #8]
 8001d7e:	f010 fa51 	bl	8012224 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001d82:	4604      	mov	r4, r0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f010 fa4d 	bl	8012224 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4423      	add	r3, r4
 8001d8e:	617b      	str	r3, [r7, #20]
      const bool __cond = (__size > __lhs.capacity()
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f010 fa4b 	bl	801222c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001d96:	4602      	mov	r2, r0
			   && __size <= __rhs.capacity());
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d908      	bls.n	8001db0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f010 fa44 	bl	801222c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d801      	bhi.n	8001db0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x42>
 8001db0:	2300      	movs	r3, #0
      const bool __cond = (__size > __lhs.capacity()
 8001db2:	74fb      	strb	r3, [r7, #19]
	            : std::move(__lhs.append(__rhs));
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x60>
      return __cond ? std::move(__rhs.insert(0, __lhs))
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f010 fb04 	bl	80123cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f83d 	bl	8001e46 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	e008      	b.n	8001de2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x72>
	            : std::move(__lhs.append(__rhs));
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f010 fb36 	bl	8012444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f833 	bl	8001e46 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f010 f9f7 	bl	80121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}

08001df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001e00:	68fc      	ldr	r4, [r7, #12]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f010 f906 	bl	8012014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f010 fb68 	bl	80124e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f805 	bl	8001e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f80f 	bl	8001e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f805 	bl	8001e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
	...

08001e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001e8e:	68b8      	ldr	r0, [r7, #8]
 8001e90:	f000 f83e 	bl	8001f10 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001eac:	4817      	ldr	r0, [pc, #92]	; (8001f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001eae:	f00f ffef 	bl	8011e90 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	68b8      	ldr	r0, [r7, #8]
 8001eb6:	f000 f83b 	bl	8001f30 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d910      	bls.n	8001ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f010 f8ab 	bl	8012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f010 f898 	bl	801200c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f010 f899 	bl	8012018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f010 f892 	bl	8012010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001eec:	4603      	mov	r3, r0
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f010 f8fd 	bl	80120f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	4619      	mov	r1, r3
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f010 f88d 	bl	801201c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08015668 	.word	0x08015668

08001f10 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001f3a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f80a 	bl	8001f58 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001f44:	462a      	mov	r2, r5
 8001f46:	6839      	ldr	r1, [r7, #0]
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 f80f 	bl	8001f6c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001f4e:	4603      	mov	r3, r0
    }
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}

08001f58 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
    }
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_Z41__static_initialization_and_destruction_0ii>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d126      	bne.n	8001fea <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d121      	bne.n	8001fea <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00f feb7 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4916      	ldr	r1, [pc, #88]	; (8002010 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001fb8:	4816      	ldr	r0, [pc, #88]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001fba:	f010 fac9 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00f feac 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00f fea6 	bl	8011d1e <_ZNSaIcEC1Ev>
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	490f      	ldr	r1, [pc, #60]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001fda:	4810      	ldr	r0, [pc, #64]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001fdc:	f010 fab8 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00f fe9b 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d105      	bne.n	8002006 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8001ffa:	4808      	ldr	r0, [pc, #32]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001ffc:	f010 f906 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002002:	f010 f903 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	08015694 	.word	0x08015694
 8002014:	2000037c 	.word	0x2000037c
 8002018:	08015698 	.word	0x08015698
 800201c:	20000394 	.word	0x20000394

08002020 <_GLOBAL__sub_I__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
 8002024:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff ffaf 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 800202e:	bd80      	pop	{r7, pc}

08002030 <_GLOBAL__sub_D__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
 8002034:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff ffa7 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f010 fa27 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800204e:	4604      	mov	r4, r0
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f010 f8e9 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002056:	4603      	mov	r3, r0
 8002058:	b29a      	uxth	r2, r3
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	4621      	mov	r1, r4
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002062:	f00a ff7a 	bl	800cf5a <HAL_UART_Transmit>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 800206a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800206e:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8002070:	f107 010c 	add.w	r1, r7, #12
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	2202      	movs	r2, #2
 800207a:	4804      	ldr	r0, [pc, #16]	; (800208c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800207c:	f00a ff6d 	bl	800cf5a <HAL_UART_Transmit>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	20000928 	.word	0x20000928

08002090 <_ZN4Task12taskFunctionEv>:
	// Move assignment operator.
	Task& operator=(Task&& other) noexcept;
	Task& operator=(const Task& other) = delete;	// Disabling copy constructor so you can only move objects.

	// Callback function for Task object within scheduler.
	virtual bool taskFunction()
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	{
		return true;
 8002098:	2301      	movs	r3, #1
	}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <_ZN4Task12consoleFuncaEv>:

	// Callback functions for Task object within console.
	virtual bool consoleFunca()
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	{
		println("Function not implemented by Task!");
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f00f fe32 	bl	8011d1e <_ZNSaIcEC1Ev>
 80020ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	490c      	ldr	r1, [pc, #48]	; (80020f4 <_ZN4Task12consoleFuncaEv+0x4c>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f010 fa43 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ffb6 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4618      	mov	r0, r3
 80020da:	f010 f897 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00f fe1c 	bl	8011d20 <_ZNSaIcED1Ev>
		return true;
 80020e8:	2301      	movs	r3, #1
	}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08016800 	.word	0x08016800

080020f8 <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

	virtual bool consoleFuncb(std::string& s)
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
	{
		println("Function not implemented by Task!");
 8002102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f00f fe09 	bl	8011d1e <_ZNSaIcEC1Ev>
 800210c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	490b      	ldr	r1, [pc, #44]	; (8002144 <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002116:	4618      	mov	r0, r3
 8002118:	f010 fa1a 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff8d 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	4618      	mov	r0, r3
 800212c:	f010 f86e 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4618      	mov	r0, r3
 8002136:	f00f fdf3 	bl	8011d20 <_ZNSaIcED1Ev>
		return true;
 800213a:	2301      	movs	r3, #1
	}
 800213c:	4618      	mov	r0, r3
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	08016800 	.word	0x08016800

08002148 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BatteryMon.hpp"

BattMon::BattMon(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b08d      	sub	sp, #52	; 0x34
 800214c:	af00      	add	r7, sp, #0
 800214e:	6178      	str	r0, [r7, #20]
 8002150:	ed87 0a04 	vstr	s0, [r7, #16]
 8002154:	edc7 0a03 	vstr	s1, [r7, #12]
 8002158:	ed87 1a02 	vstr	s2, [r7, #8]
 800215c:	460b      	mov	r3, r1
 800215e:	603a      	str	r2, [r7, #0]
 8002160:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 8002162:	697c      	ldr	r4, [r7, #20]
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f010 f9bc 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002170:	f107 0218 	add.w	r2, r7, #24
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4619      	mov	r1, r3
 8002178:	ed97 1a02 	vldr	s2, [r7, #8]
 800217c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002180:	ed97 0a04 	vldr	s0, [r7, #16]
 8002184:	4620      	mov	r0, r4
 8002186:	f003 fcbf 	bl	8005b08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800218a:	f107 0318 	add.w	r3, r7, #24
 800218e:	4618      	mov	r0, r3
 8002190:	f010 f83c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
{

}
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4618      	mov	r0, r3
 80021a6:	3734      	adds	r7, #52	; 0x34
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	0801e53c 	.word	0x0801e53c

080021b0 <_ZN7BattMon4initEP17ADC_HandleTypeDef>:
{

}

void BattMon::init(ADC_HandleTypeDef* adc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	hadc = adc;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_ZN7BattMon12consoleFuncaEv>:

bool BattMon::consoleFunca()
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b09e      	sub	sp, #120	; 0x78
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	4618      	mov	r0, r3
 80021da:	f00f fda0 	bl	8011d1e <_ZNSaIcEC1Ev>
 80021de:	f107 0220 	add.w	r2, r7, #32
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4936      	ldr	r1, [pc, #216]	; (80022c0 <_ZN7BattMon12consoleFuncaEv+0xf4>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f010 f9b1 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff24 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4618      	mov	r0, r3
 80021fe:	f010 f805 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	4618      	mov	r0, r3
 8002208:	f00f fd8a 	bl	8011d20 <_ZNSaIcED1Ev>
	println("Read 4s Lipo Cell Voltages @ 4Hz.");
 800220c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002210:	4618      	mov	r0, r3
 8002212:	f00f fd84 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002216:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	4929      	ldr	r1, [pc, #164]	; (80022c4 <_ZN7BattMon12consoleFuncaEv+0xf8>)
 8002220:	4618      	mov	r0, r3
 8002222:	f010 f995 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff08 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4618      	mov	r0, r3
 8002236:	f00f ffe9 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800223a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800223e:	4618      	mov	r0, r3
 8002240:	f00f fd6e 	bl	8011d20 <_ZNSaIcED1Ev>
	println("\tArgs");
 8002244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002248:	4618      	mov	r0, r3
 800224a:	f00f fd68 	bl	8011d1e <_ZNSaIcEC1Ev>
 800224e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002256:	491c      	ldr	r1, [pc, #112]	; (80022c8 <_ZN7BattMon12consoleFuncaEv+0xfc>)
 8002258:	4618      	mov	r0, r3
 800225a:	f010 f979 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800225e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff feec 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800226c:	4618      	mov	r0, r3
 800226e:	f00f ffcd 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002272:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002276:	4618      	mov	r0, r3
 8002278:	f00f fd52 	bl	8011d20 <_ZNSaIcED1Ev>
	println("\t* status - Shows most recent pack voltage and individual cell voltages.");
 800227c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002280:	4618      	mov	r0, r3
 8002282:	f00f fd4c 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002286:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800228a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800228e:	490f      	ldr	r1, [pc, #60]	; (80022cc <_ZN7BattMon12consoleFuncaEv+0x100>)
 8002290:	4618      	mov	r0, r3
 8002292:	f010 f95d 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002296:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fed0 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80022a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00f ffb1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00f fd36 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3778      	adds	r7, #120	; 0x78
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08016824 	.word	0x08016824
 80022c4:	08016834 	.word	0x08016834
 80022c8:	08016858 	.word	0x08016858
 80022cc:	08016860 	.word	0x08016860

080022d0 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BattMon::consoleFuncb(std::string& s)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0ec      	sub	sp, #432	; 0x1b0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	6018      	str	r0, [r3, #0]
 80022da:	463b      	mov	r3, r7
 80022dc:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 80022de:	463b      	mov	r3, r7
 80022e0:	499c      	ldr	r1, [pc, #624]	; (8002554 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x284>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	f7ff fd02 	bl	8001cec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8108 	beq.w	8002500 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>
	{
		println("Lipo Pack Units - [Volts]");
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00f fd12 	bl	8011d1e <_ZNSaIcEC1Ev>
 80022fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4995      	ldr	r1, [pc, #596]	; (8002558 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x288>)
 8002304:	4618      	mov	r0, r3
 8002306:	f010 f923 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fe96 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4618      	mov	r0, r3
 800231a:	f00f ff77 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	4618      	mov	r0, r3
 8002324:	f00f fcfc 	bl	8011d20 <_ZNSaIcED1Ev>
		println("Lipo Pack Frmt  - [c1, c2, c3, c4, total]");
 8002328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800232c:	4618      	mov	r0, r3
 800232e:	f00f fcf6 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002332:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233a:	4988      	ldr	r1, [pc, #544]	; (800255c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28c>)
 800233c:	4618      	mov	r0, r3
 800233e:	f010 f907 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fe7a 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800234c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002350:	4618      	mov	r0, r3
 8002352:	f00f ff5b 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800235a:	4618      	mov	r0, r3
 800235c:	f00f fce0 	bl	8011d20 <_ZNSaIcED1Ev>
		println("Lipo Pack Data  - " +
				std::to_string(cell_voltages.cell1) + " " +
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002368:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fdcb 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
		println("Lipo Pack Data  - " +
 8002376:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800237a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800237e:	4978      	ldr	r1, [pc, #480]	; (8002560 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x290>)
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fcc6 	bl	8001d12 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
				std::to_string(cell_voltages.cell1) + " " +
 8002386:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800238a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x294>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fcd6 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(cell_voltages.cell2) + " " +
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800239e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fdb0 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(cell_voltages.cell1) + " " +
 80023ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023b0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80023b4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fcd9 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(cell_voltages.cell2) + " " +
 80023be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023c2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80023c6:	4a67      	ldr	r2, [pc, #412]	; (8002564 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x294>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fcba 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(cell_voltages.cell3) + " " +
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80023d6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80023da:	eeb0 0a67 	vmov.f32	s0, s15
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fd94 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(cell_voltages.cell2) + " " +
 80023e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023e8:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80023ec:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fcbd 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(cell_voltages.cell3) + " " +
 80023f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023fa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x294>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fc9e 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(cell_voltages.cell4) + " " +
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800240e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fd78 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(cell_voltages.cell3) + " " +
 800241c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002420:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002424:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fca1 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
				std::to_string(cell_voltages.cell4) + " " +
 800242e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002432:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002436:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x294>)
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc82 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
				std::to_string(pack_volt));
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002446:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800244a:	eeb0 0a67 	vmov.f32	s0, s15
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fd5c 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
				std::to_string(cell_voltages.cell4) + " " +
 8002454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002458:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800245c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fc85 	bl	8001d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
		println("Lipo Pack Data  - " +
 8002466:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fde8 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
				std::to_string(pack_volt));
 8002470:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002474:	4618      	mov	r0, r3
 8002476:	f00f fec9 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800247a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800247e:	4618      	mov	r0, r3
 8002480:	f00f fec4 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(cell_voltages.cell4) + " " +
 8002484:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002488:	4618      	mov	r0, r3
 800248a:	f00f febf 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800248e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002492:	4618      	mov	r0, r3
 8002494:	f00f feba 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002498:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800249c:	4618      	mov	r0, r3
 800249e:	f00f feb5 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(cell_voltages.cell3) + " " +
 80024a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00f feb0 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00f feab 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024b6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00f fea6 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(cell_voltages.cell2) + " " +
 80024c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00f fea1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00f fe9c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024d4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80024d8:	4618      	mov	r0, r3
 80024da:	f00f fe97 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::to_string(cell_voltages.cell1) + " " +
 80024de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024e2:	4618      	mov	r0, r3
 80024e4:	f00f fe92 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80024ec:	4618      	mov	r0, r3
 80024ee:	f00f fe8d 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80024f2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00f fe88 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		println("Invalid parameter!");
		consoleFunca();
		return false;
	}

	return true;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e024      	b.n	800254a <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x27a>
		println("Invalid parameter!");
 8002500:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002504:	4618      	mov	r0, r3
 8002506:	f00f fc0a 	bl	8011d1e <_ZNSaIcEC1Ev>
 800250a:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800250e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002512:	4915      	ldr	r1, [pc, #84]	; (8002568 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x298>)
 8002514:	4618      	mov	r0, r3
 8002516:	f010 f81b 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800251a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fd8e 	bl	8002040 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002524:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002528:	4618      	mov	r0, r3
 800252a:	f00f fe6f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800252e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002532:	4618      	mov	r0, r3
 8002534:	f00f fbf4 	bl	8011d20 <_ZNSaIcED1Ev>
		consoleFunca();
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1d3a      	adds	r2, r7, #4
 8002544:	6810      	ldr	r0, [r2, #0]
 8002546:	4798      	blx	r3
		return false;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	080168ac 	.word	0x080168ac
 8002558:	080168b4 	.word	0x080168b4
 800255c:	080168d0 	.word	0x080168d0
 8002560:	080168fc 	.word	0x080168fc
 8002564:	08016910 	.word	0x08016910
 8002568:	08016914 	.word	0x08016914

0800256c <_ZN7BattMon12taskFunctionEv>:

bool BattMon::taskFunction()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	// Read all cells.
	readCell1();
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f8bf 	bl	80026f8 <_ZN7BattMon9readCell1Ev>
	readCell2();
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8f6 	bl	800276c <_ZN7BattMon9readCell2Ev>
	readCell3();
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f939 	bl	80027f8 <_ZN7BattMon9readCell3Ev>
	readCell4();
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f980 	bl	800288c <_ZN7BattMon9readCell4Ev>
	pack_volt = cell_voltages.cell4 + cell_voltages.cell3 + cell_voltages.cell2 + cell_voltages.cell1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	return true;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN7BattMon10setupCell1Ev>:

void BattMon::setupCell1()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_4;
 80025d6:	2304      	movs	r3, #4
 80025d8:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80025de:	2305      	movs	r3, #5
 80025e0:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 f9fd 	bl	80079ec <HAL_ADC_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_ZN7BattMon10setupCell1Ev+0x46>
	{
		Error_Handler();
 8002602:	f004 f9e3 	bl	80069cc <Error_Handler>
	}
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN7BattMon10setupCell2Ev>:

void BattMon::setupCell2()
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_5;
 8002624:	2305      	movs	r3, #5
 8002626:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002628:	2301      	movs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800262c:	2305      	movs	r3, #5
 800262e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f005 f9d6 	bl	80079ec <HAL_ADC_ConfigChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <_ZN7BattMon10setupCell2Ev+0x46>
	{
		Error_Handler();
 8002650:	f004 f9bc 	bl	80069cc <Error_Handler>
	}
}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZN7BattMon10setupCell3Ev>:

void BattMon::setupCell3()
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8002672:	2306      	movs	r3, #6
 8002674:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800267a:	2305      	movs	r3, #5
 800267c:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f107 0208 	add.w	r2, r7, #8
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f005 f9af 	bl	80079ec <HAL_ADC_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <_ZN7BattMon10setupCell3Ev+0x46>
	{
		Error_Handler();
 800269e:	f004 f995 	bl	80069cc <Error_Handler>
	}
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_ZN7BattMon10setupCell4Ev>:

void BattMon::setupCell4()
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_7;
 80026c0:	2307      	movs	r3, #7
 80026c2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80026c8:	2305      	movs	r3, #5
 80026ca:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f107 0208 	add.w	r2, r7, #8
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 f988 	bl	80079ec <HAL_ADC_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <_ZN7BattMon10setupCell4Ev+0x46>
	{
		Error_Handler();
 80026ec:	f004 f96e 	bl	80069cc <Error_Handler>
	}
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_ZN7BattMon9readCell1Ev>:

void BattMon::readCell1()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	setupCell1();
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff5d 	bl	80025c0 <_ZN7BattMon10setupCell1Ev>
	HAL_ADC_Start(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4618      	mov	r0, r3
 800270c:	f004 ffd0 	bl	80076b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002718:	4618      	mov	r0, r3
 800271a:	f005 f8ce 	bl	80078ba <HAL_ADC_PollForConversion>
	cell_voltages.cell1 = ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL1_R1 + CELL1_R2)) / (CELL1_R2 * 4096.0f);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4618      	mov	r0, r3
 8002724:	f005 f954 	bl	80079d0 <HAL_ADC_GetValue>
 8002728:	ee07 0a90 	vmov	s15, r0
 800272c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002730:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002760 <_ZN7BattMon9readCell1Ev+0x68>
 8002734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002738:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002764 <_ZN7BattMon9readCell1Ev+0x6c>
 800273c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002740:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002768 <_ZN7BattMon9readCell1Ev+0x70>
 8002744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	HAL_ADC_Stop(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4618      	mov	r0, r3
 8002754:	f005 f87e 	bl	8007854 <HAL_ADC_Stop>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40533333 	.word	0x40533333
 8002764:	43480000 	.word	0x43480000
 8002768:	48c80000 	.word	0x48c80000

0800276c <_ZN7BattMon9readCell2Ev>:

void BattMon::readCell2()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	setupCell2();
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff4a 	bl	800260e <_ZN7BattMon10setupCell2Ev>
	HAL_ADC_Start(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4618      	mov	r0, r3
 8002780:	f004 ff96 	bl	80076b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800278c:	4618      	mov	r0, r3
 800278e:	f005 f894 	bl	80078ba <HAL_ADC_PollForConversion>
	cell_voltages.cell2 = ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL2_R1 + CELL2_R2)) / (CELL2_R2 * 4096.0f);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4618      	mov	r0, r3
 8002798:	f005 f91a 	bl	80079d0 <HAL_ADC_GetValue>
 800279c:	ee07 0a90 	vmov	s15, r0
 80027a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80027ec <_ZN7BattMon9readCell2Ev+0x80>
 80027a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80027f0 <_ZN7BattMon9readCell2Ev+0x84>
 80027b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027b4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80027f4 <_ZN7BattMon9readCell2Ev+0x88>
 80027b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	cell_voltages.cell2 -= cell_voltages.cell1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	HAL_ADC_Stop(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 f839 	bl	8007854 <HAL_ADC_Stop>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40533333 	.word	0x40533333
 80027f0:	43c80000 	.word	0x43c80000
 80027f4:	48c80000 	.word	0x48c80000

080027f8 <_ZN7BattMon9readCell3Ev>:

void BattMon::readCell3()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	setupCell3();
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff2b 	bl	800265c <_ZN7BattMon10setupCell3Ev>
	HAL_ADC_Start(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4618      	mov	r0, r3
 800280c:	f004 ff50 	bl	80076b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002818:	4618      	mov	r0, r3
 800281a:	f005 f84e 	bl	80078ba <HAL_ADC_PollForConversion>
	cell_voltages.cell3 = ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL3_R1 + CELL3_R2)) / (CELL3_R2 * 4096.0f);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4618      	mov	r0, r3
 8002824:	f005 f8d4 	bl	80079d0 <HAL_ADC_GetValue>
 8002828:	ee07 0a90 	vmov	s15, r0
 800282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002830:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002880 <_ZN7BattMon9readCell3Ev+0x88>
 8002834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002838:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002884 <_ZN7BattMon9readCell3Ev+0x8c>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002888 <_ZN7BattMon9readCell3Ev+0x90>
 8002844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	cell_voltages.cell3 -= cell_voltages.cell2 + cell_voltages.cell1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	HAL_ADC_Stop(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4618      	mov	r0, r3
 8002874:	f004 ffee 	bl	8007854 <HAL_ADC_Stop>
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40533333 	.word	0x40533333
 8002884:	44160000 	.word	0x44160000
 8002888:	48c80000 	.word	0x48c80000

0800288c <_ZN7BattMon9readCell4Ev>:

void BattMon::readCell4()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	setupCell4();
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff08 	bl	80026aa <_ZN7BattMon10setupCell4Ev>
	HAL_ADC_Start(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 ff06 	bl	80076b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 f804 	bl	80078ba <HAL_ADC_PollForConversion>
	cell_voltages.cell4 = ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL4_R1 + CELL4_R2)) / (CELL4_R2 * 4096.0f);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4618      	mov	r0, r3
 80028b8:	f005 f88a 	bl	80079d0 <HAL_ADC_GetValue>
 80028bc:	ee07 0a90 	vmov	s15, r0
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002920 <_ZN7BattMon9readCell4Ev+0x94>
 80028c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002924 <_ZN7BattMon9readCell4Ev+0x98>
 80028d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002928 <_ZN7BattMon9readCell4Ev+0x9c>
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	cell_voltages.cell4 -= cell_voltages.cell3 + cell_voltages.cell2 + cell_voltages.cell1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80028f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	HAL_ADC_Stop(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	4618      	mov	r0, r3
 8002912:	f004 ff9f 	bl	8007854 <HAL_ADC_Stop>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40533333 	.word	0x40533333
 8002924:	44478000 	.word	0x44478000
 8002928:	48c80000 	.word	0x48c80000

0800292c <_Z41__static_initialization_and_destruction_0ii>:
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d126      	bne.n	800298a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002942:	4293      	cmp	r3, r2
 8002944:	d121      	bne.n	800298a <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4618      	mov	r0, r3
 800294c:	f00f f9e7 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	461a      	mov	r2, r3
 8002956:	4916      	ldr	r1, [pc, #88]	; (80029b0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002958:	4816      	ldr	r0, [pc, #88]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800295a:	f00f fdf9 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4618      	mov	r0, r3
 8002964:	f00f f9dc 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	4618      	mov	r0, r3
 800296e:	f00f f9d6 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	461a      	mov	r2, r3
 8002978:	490f      	ldr	r1, [pc, #60]	; (80029b8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800297a:	4810      	ldr	r0, [pc, #64]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800297c:	f00f fde8 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	4618      	mov	r0, r3
 8002986:	f00f f9cb 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002996:	4293      	cmp	r3, r2
 8002998:	d105      	bne.n	80029a6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800299a:	4808      	ldr	r0, [pc, #32]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800299c:	f00f fc36 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80029a2:	f00f fc33 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	08016954 	.word	0x08016954
 80029b4:	200003ac 	.word	0x200003ac
 80029b8:	08016958 	.word	0x08016958
 80029bc:	200003c4 	.word	0x200003c4

080029c0 <_GLOBAL__sub_I__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029c8:	2001      	movs	r0, #1
 80029ca:	f7ff ffaf 	bl	800292c <_Z41__static_initialization_and_destruction_0ii>
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <_GLOBAL__sub_D__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029d8:	2000      	movs	r0, #0
 80029da:	f7ff ffa7 	bl	800292c <_Z41__static_initialization_and_destruction_0ii>
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BlinkLEDTask.hpp"

BlinkTask::BlinkTask(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b08d      	sub	sp, #52	; 0x34
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6178      	str	r0, [r7, #20]
 80029e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80029ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80029f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80029f4:	460b      	mov	r3, r1
 80029f6:	603a      	str	r2, [r7, #0]
 80029f8:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 80029fa:	697c      	ldr	r4, [r7, #20]
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f00f fd70 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002a08:	f107 0218 	add.w	r2, r7, #24
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	ed97 1a02 	vldr	s2, [r7, #8]
 8002a14:	edd7 0a03 	vldr	s1, [r7, #12]
 8002a18:	ed97 0a04 	vldr	s0, [r7, #16]
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f003 f873 	bl	8005b08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002a22:	f107 0318 	add.w	r3, r7, #24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00f fbf0 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002a2c:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
{

}
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4618      	mov	r0, r3
 8002a36:	3734      	adds	r7, #52	; 0x34
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	0801e564 	.word	0x0801e564

08002a40 <_ZN9BlinkTask12taskFunctionEv>:
{

}

bool BlinkTask::taskFunction()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8002a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a4c:	4803      	ldr	r0, [pc, #12]	; (8002a5c <_ZN9BlinkTask12taskFunctionEv+0x1c>)
 8002a4e:	f006 fdf2 	bl	8009636 <HAL_GPIO_TogglePin>
	return true;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40020400 	.word	0x40020400

08002a60 <_Z41__static_initialization_and_destruction_0ii>:
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d126      	bne.n	8002abe <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d121      	bne.n	8002abe <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f00f f94d 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002a8e:	f00f fd5f 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	f00f f942 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f00f f93c 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	461a      	mov	r2, r3
 8002aac:	490f      	ldr	r1, [pc, #60]	; (8002aec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002aae:	4810      	ldr	r0, [pc, #64]	; (8002af0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002ab0:	f00f fd4e 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00f f931 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d105      	bne.n	8002ada <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002ace:	4808      	ldr	r0, [pc, #32]	; (8002af0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002ad0:	f00f fb9c 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002ad6:	f00f fb99 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08017ae0 	.word	0x08017ae0
 8002ae8:	200003dc 	.word	0x200003dc
 8002aec:	08017ae4 	.word	0x08017ae4
 8002af0:	200003f4 	.word	0x200003f4

08002af4 <_GLOBAL__sub_I__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff ffaf 	bl	8002a60 <_Z41__static_initialization_and_destruction_0ii>
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_GLOBAL__sub_D__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff ffa7 	bl	8002a60 <_Z41__static_initialization_and_destruction_0ii>
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 *      Author: heapr0ll
 */

#include "Command.hpp"

command::command(std::string name, bool (*pntra)(), bool(*pntrb)(std::string& s))
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3308      	adds	r3, #8
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00f fb4f 	bl	80121ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	this->name = name;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00f fb70 	bl	8012218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	runa = pntra;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
	runb = pntrb;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	605a      	str	r2, [r3, #4]
}
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZN7commandD1Ev>:
	this->name = name;
	runa = (bool (*)())tsk_pntr_a;
	runb = (bool (*)(std::string&))tsk_pntr_b;
}

command::~command()
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f00f fb56 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
{

}
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <_Z41__static_initialization_and_destruction_0ii>:
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d126      	bne.n	8002bca <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d121      	bne.n	8002bca <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f00f f8c7 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	461a      	mov	r2, r3
 8002b96:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002b98:	4816      	ldr	r0, [pc, #88]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b9a:	f00f fcd9 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00f f8bc 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00f f8b6 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	490f      	ldr	r1, [pc, #60]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002bba:	4810      	ldr	r0, [pc, #64]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bbc:	f00f fcc8 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00f f8ab 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d105      	bne.n	8002be6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bdc:	f00f fb16 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002be0:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002be2:	f00f fb13 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08018c48 	.word	0x08018c48
 8002bf4:	2000040c 	.word	0x2000040c
 8002bf8:	08018c4c 	.word	0x08018c4c
 8002bfc:	20000424 	.word	0x20000424

08002c00 <_GLOBAL__sub_I__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7ff ffaf 	bl	8002b6c <_Z41__static_initialization_and_destruction_0ii>
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_GLOBAL__sub_D__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7ff ffa7 	bl	8002b6c <_Z41__static_initialization_and_destruction_0ii>
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f805 	bl	8002c56 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    }
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd fb10 	bl	80002b0 <strlen>
 8002c90:	4603      	mov	r3, r0
      }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <_ZL9startUARTv>:
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <_ZL9startUARTv+0x14>)
 8002ca4:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <_ZL9startUARTv+0x18>)
 8002ca6:	f00a f9ea 	bl	800d07e <HAL_UART_Receive_DMA>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000599 	.word	0x20000599
 8002cb4:	20000928 	.word	0x20000928

08002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f00f fbeb 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f00f faad 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	480a      	ldr	r0, [pc, #40]	; (8002d04 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002cda:	f00a f93e 	bl	800cf5a <HAL_UART_Transmit>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8002ce2:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002ce6:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8002ce8:	f107 010c 	add.w	r1, r7, #12
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002cf4:	f00a f931 	bl	800cf5a <HAL_UART_Transmit>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}
 8002d04:	20000928 	.word	0x20000928

08002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Print string without new line.
static void print(std::string s)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f00f fbc3 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002d16:	4604      	mov	r4, r0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f00f fa85 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	4621      	mov	r1, r4
 8002d28:	4804      	ldr	r0, [pc, #16]	; (8002d3c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8002d2a:	f00a f916 	bl	800cf5a <HAL_UART_Transmit>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000928 	.word	0x20000928

08002d40 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string bfrspc(std::string s)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
    // Returns the string up to the first space
    unsigned int i = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
    const char* cs = s.c_str();
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	f00f fba4 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002d54:	60b8      	str	r0, [r7, #8]
    while (cs[i] != ' ' && i < s.length()) {
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d008      	beq.n	8002d74 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	f00f fa60 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d201      	bcs.n	8002d74 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
    while (cs[i] != ' ' && i < s.length()) {
 8002d80:	e7e9      	b.n	8002d56 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    return s.substr(0,i);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	f00f fc19 	bl	80125c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
}
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string aftspc(std::string s)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    // Returns the string after the first space
    unsigned int i = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
    const char* cs = s.c_str();
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f00f fb78 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002dac:	6138      	str	r0, [r7, #16]
    while (cs[i] != ' ' && i < s.length()) {
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d008      	beq.n	8002dcc <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002dba:	6838      	ldr	r0, [r7, #0]
 8002dbc:	f00f fa34 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d201      	bcs.n	8002dcc <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
    while (cs[i] != ' ' && i < s.length()) {
 8002dd8:	e7e9      	b.n	8002dae <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    if (i >= s.length()) {
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f00f fa24 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf2c      	ite	cs
 8002de8:	2301      	movcs	r3, #1
 8002dea:	2300      	movcc	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d011      	beq.n	8002e16 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
        return "";
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	4618      	mov	r0, r3
 8002df8:	f00e ff91 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	461a      	mov	r2, r3
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f00f fba3 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00e ff86 	bl	8011d20 <_ZNSaIcED1Ev>
 8002e14:	e00c      	b.n	8002e30 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
    }
    else {
        return s.substr(i+1,s.length()-i);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1c5c      	adds	r4, r3, #1
 8002e1a:	6838      	ldr	r0, [r7, #0]
 8002e1c:	f00f fa04 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4622      	mov	r2, r4
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	f00f fbc8 	bl	80125c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    }
}
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	08019dac 	.word	0x08019dac

08002e3c <_ZN4Task7getNameB5cxx11Ev>:
	unsigned long getDelay(){ return delay_tk; }
	void setDelay(unsigned long d){ delay_tk = d; }

	unsigned long getPeriod(){ return period_tk; }

	std::string getName() { return name; }
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f00f fb4b 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZN7command7getNameB5cxx11Ev>:
	// Command functions to be called.
	bool (*runa)();
	bool (*runb)(std::string& s);

	// Getters
	std::string getName() { return name; }
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f00f fb3c 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_ZL5helpav>:
/*
 * @brief: Help command.
 *  Just a place holder so the help string can be printed as a possible command.
 */
static bool helpa()
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	return true;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool helpb(std::string& s)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	return true;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <_ZN7commandC1ERKS_>:
class command
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f103 0208 	add.w	r2, r3, #8
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f00f fb0f 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_ZL5echoav>:
/*
 * @brief: Echo command.
 *  Simply echo's back anything you type in.
 */
static bool echoa()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f00e ff1d 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002ee4:	f107 021c 	add.w	r2, r7, #28
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	490b      	ldr	r1, [pc, #44]	; (8002f18 <_ZL5echoav+0x44>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f00f fb2f 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fedf 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f00f f985 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00e ff0a 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8002f0c:	2301      	movs	r3, #1
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08019db0 	.word	0x08019db0

08002f1c <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool echob(std::string& s)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	println(s);
 8002f24:	f107 0308 	add.w	r3, r7, #8
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f00f fadc 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff febf 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00f f964 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <_ZL6clearav>:
/*
 * @brief: Clear command.
 *  Clears the terminal window when it gets too messy.
 */
static bool cleara()
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f00e fedf 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002f60:	f107 021c 	add.w	r2, r7, #28
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	490b      	ldr	r1, [pc, #44]	; (8002f94 <_ZL6clearav+0x44>)
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00f faf1 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fec9 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f00f f947 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4618      	mov	r0, r3
 8002f84:	f00e fecc 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8002f88:	2301      	movs	r3, #1
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	08019dd8 	.word	0x08019dd8

08002f98 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool clearb(std::string& s)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 8002fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f00e feba 	bl	8011d1e <_ZNSaIcEC1Ev>
 8002faa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002fae:	f107 030c 	add.w	r3, r7, #12
 8002fb2:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f00f facb 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fea2 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f00f f91f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00e fea4 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	08019dd8 	.word	0x08019dd8

08002fe8 <_ZL7bannerav>:
/*
 * @brief: Banner command.
 *  Prints the banner to the screen.
 */
static bool bannera()
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
	println(wlcm);
 8002fee:	463b      	mov	r3, r7
 8002ff0:	4908      	ldr	r1, [pc, #32]	; (8003014 <_ZL7bannerav+0x2c>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00f fa78 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe5c 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003000:	463b      	mov	r3, r7
 8003002:	4618      	mov	r0, r3
 8003004:	f00f f902 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000454 	.word	0x20000454

08003018 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool bannerb(std::string& s)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	println(wlcm);
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	4909      	ldr	r1, [pc, #36]	; (800304c <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8003026:	4618      	mov	r0, r3
 8003028:	f00f fa5e 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fe41 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f00f f8e6 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000454 	.word	0x20000454

08003050 <_ZN7Console11printBannerEv>:

	bool isCommand(std::string &cmd);
	bool isTask(std::string &cmd);

	bool exec(std::string &cmd);
	void printBanner() { println(wlcm); }
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	4908      	ldr	r1, [pc, #32]	; (8003080 <_ZN7Console11printBannerEv+0x30>)
 800305e:	4618      	mov	r0, r3
 8003060:	f00f fa42 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fe25 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4618      	mov	r0, r3
 8003074:	f00f f8ca 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003078:	bf00      	nop
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000454 	.word	0x20000454

08003084 <_ZN7Console11printCursorEv>:
	void printCursor() { print(cursor); }
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <_ZN7Console11printCursorEv+0x30>)
 8003092:	4618      	mov	r0, r3
 8003094:	f00f fa28 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe33 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00f f8b0 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030ac:	bf00      	nop
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000043c 	.word	0x2000043c

080030b8 <HAL_UART_RxCpltCallback>:
// Our singleton instance of the console!
Console cs;

// Callback that handles UART events.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 80030c0:	4b53      	ldr	r3, [pc, #332]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80030c2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b0d      	cmp	r3, #13
 80030ca:	d005      	beq.n	80030d8 <HAL_UART_RxCpltCallback+0x20>
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80030ce:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b0a      	cmp	r3, #10
 80030d6:	d101      	bne.n	80030dc <HAL_UART_RxCpltCallback+0x24>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_UART_RxCpltCallback+0x26>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_UART_RxCpltCallback+0x40>
	{
		uint8_t tmp[2] = {'\r', '\n'};
 80030e2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80030e6:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, tmp, 2, 100);
 80030e8:	f107 010c 	add.w	r1, r7, #12
 80030ec:	2364      	movs	r3, #100	; 0x64
 80030ee:	2202      	movs	r2, #2
 80030f0:	4848      	ldr	r0, [pc, #288]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 80030f2:	f009 ff32 	bl	800cf5a <HAL_UART_Transmit>
 80030f6:	e02f      	b.n	8003158 <HAL_UART_RxCpltCallback+0xa0>
	} else if (consoleInput.raw_byte == 0x08)												// Handle the case of a backspace being typed.
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80030fa:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b08      	cmp	r3, #8
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <HAL_UART_RxCpltCallback+0x94>
	{
		// Move the cursor back, print a space, then move the cursor back again.
		if (consoleInput.numReadBytes > 0)
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 8003110:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01f      	beq.n	8003158 <HAL_UART_RxCpltCallback+0xa0>
		{
			uint8_t tmp2 = 0x08;	// backspace
 8003118:	2308      	movs	r3, #8
 800311a:	72fb      	strb	r3, [r7, #11]
			uint8_t tmp1 = ' ';		// space
 800311c:	2320      	movs	r3, #32
 800311e:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 8003120:	f107 010b 	add.w	r1, r7, #11
 8003124:	2364      	movs	r3, #100	; 0x64
 8003126:	2201      	movs	r2, #1
 8003128:	483a      	ldr	r0, [pc, #232]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 800312a:	f009 ff16 	bl	800cf5a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp1, 1, 100);
 800312e:	f107 010a 	add.w	r1, r7, #10
 8003132:	2364      	movs	r3, #100	; 0x64
 8003134:	2201      	movs	r2, #1
 8003136:	4837      	ldr	r0, [pc, #220]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 8003138:	f009 ff0f 	bl	800cf5a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 800313c:	f107 010b 	add.w	r1, r7, #11
 8003140:	2364      	movs	r3, #100	; 0x64
 8003142:	2201      	movs	r2, #1
 8003144:	4833      	ldr	r0, [pc, #204]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 8003146:	f009 ff08 	bl	800cf5a <HAL_UART_Transmit>
 800314a:	e005      	b.n	8003158 <HAL_UART_RxCpltCallback+0xa0>
		}

	}else{																			// Echo back out whatever the user types!

		HAL_UART_Transmit(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1, 100);
 800314c:	2364      	movs	r3, #100	; 0x64
 800314e:	2201      	movs	r2, #1
 8003150:	4931      	ldr	r1, [pc, #196]	; (8003218 <HAL_UART_RxCpltCallback+0x160>)
 8003152:	4830      	ldr	r0, [pc, #192]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 8003154:	f009 ff01 	bl	800cf5a <HAL_UART_Transmit>
	}

	// Copy data into raw_input until a new line character is received, or the buffer overflows.
	// It is up to the consumer of this buffer to mark the struct as NOT ready again after they have copied the buffer data.
	if ( (consoleInput.ready == false) && (consoleInput.numReadBytes < 300) )		// Leaving space for one last 0 byte so this can be interpreted as a string!
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 800315a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800315e:	2b00      	cmp	r3, #0
 8003160:	d14d      	bne.n	80031fe <HAL_UART_RxCpltCallback+0x146>
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 8003164:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003168:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800316c:	d247      	bcs.n	80031fe <HAL_UART_RxCpltCallback+0x146>
	{
		// Got a new line character, this is the end of a valid command.
		// Mark buffer as ready.
		if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 8003170:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b0d      	cmp	r3, #13
 8003178:	d005      	beq.n	8003186 <HAL_UART_RxCpltCallback+0xce>
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 800317c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b0a      	cmp	r3, #10
 8003184:	d101      	bne.n	800318a <HAL_UART_RxCpltCallback+0xd2>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_UART_RxCpltCallback+0xd4>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_UART_RxCpltCallback+0xe2>
		{
			consoleInput.ready = true;
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8003198:	e031      	b.n	80031fe <HAL_UART_RxCpltCallback+0x146>

		} else if (consoleInput.raw_byte == 0x08)						// Handling backspaces!
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 800319c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d014      	beq.n	80031da <HAL_UART_RxCpltCallback+0x122>
		{
			// Decrease the count of written bytes, and write a null byte in that position.
			if (consoleInput.numReadBytes > 0)
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031b2:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d021      	beq.n	80031fe <HAL_UART_RxCpltCallback+0x146>
			{
				consoleInput.numReadBytes -= 1;
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031bc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031c6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
				consoleInput.raw_input[consoleInput.numReadBytes] = 0;
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031cc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031d4:	2100      	movs	r1, #0
 80031d6:	5499      	strb	r1, [r3, r2]
 80031d8:	e011      	b.n	80031fe <HAL_UART_RxCpltCallback+0x146>
			}

		}else{
			consoleInput.raw_input[consoleInput.numReadBytes] = consoleInput.raw_byte;
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031dc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031e4:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80031e8:	b2d9      	uxtb	r1, r3
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031ec:	5499      	strb	r1, [r3, r2]
			consoleInput.numReadBytes++;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031f0:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80031f4:	3301      	adds	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_UART_RxCpltCallback+0x158>)
 80031fa:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		}
	}

	// Set off another DMA transaction.
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 80031fe:	2201      	movs	r2, #1
 8003200:	4905      	ldr	r1, [pc, #20]	; (8003218 <HAL_UART_RxCpltCallback+0x160>)
 8003202:	4804      	ldr	r0, [pc, #16]	; (8003214 <HAL_UART_RxCpltCallback+0x15c>)
 8003204:	f009 ff3b 	bl	800d07e <HAL_UART_Receive_DMA>
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000046c 	.word	0x2000046c
 8003214:	20000928 	.word	0x20000928
 8003218:	20000599 	.word	0x20000599

0800321c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fd04 	bl	8003c32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fce2 	bl	8003c08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffeb 	bl	8003234 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fce9 	bl	8003c4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fd07 	bl	8003c9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>:
      _Rb_tree() = default;
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fce5 	bl	8003c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>:
      map() = default;
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ffeb 	bl	800329a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>:
      ~map() = default;
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fcec 	bl	8003cb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_ZN7ConsoleC1Ev>:

Console::Console()
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ffab 	bl	800324e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffd9 	bl	80032b4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>
{
	loadCmnds();
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9f8 	bl	80036f8 <_ZN7Console9loadCmndsEv>
}
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <_ZN7ConsoleD1Ev>:

Console::~Console()
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ffd5 	bl	80032ce <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff ff9e 	bl	8003268 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
{

}
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isCommand(std::string &cmd)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
	if(cmnds.count(cmd) < 1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fccb 	bl	8003ce0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		return false;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	}else{
		return true;
 800335e:	2301      	movs	r3, #1
	}
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isTask(std::string &cmd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	if(task_cmnds.count(cmd) < 1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3318      	adds	r3, #24
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fcd5 	bl	8003d28 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	{
		return false;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	}else{
		return true;
 8003392:	2301      	movs	r3, #1
	}
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_ZN7Console4loopEv>:

void Console::loop()
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b0a4      	sub	sp, #144	; 0x90
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	if (isNewCommandReady())
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fa41 	bl	800382c <_ZN7Console17isNewCommandReadyEv>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a5 	beq.w	80034fc <_ZN7Console4loopEv+0x160>
	{
		std::string new_cmd(consoleInput.raw_input);
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00e fcb1 	bl	8011d1e <_ZNSaIcEC1Ev>
 80033bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	494f      	ldr	r1, [pc, #316]	; (8003504 <_ZN7Console4loopEv+0x168>)
 80033c6:	4618      	mov	r0, r3
 80033c8:	f00f f8c2 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80033cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f00e fca5 	bl	8011d20 <_ZNSaIcED1Ev>
		memset(consoleInput.raw_input, 0, sizeof(consoleInput.raw_input));		// Wipe the raw buffer, get it ready to read new data.
 80033d6:	f240 122d 	movw	r2, #301	; 0x12d
 80033da:	2100      	movs	r1, #0
 80033dc:	4849      	ldr	r0, [pc, #292]	; (8003504 <_ZN7Console4loopEv+0x168>)
 80033de:	f00f f983 	bl	80126e8 <memset>
		consoleInput.numReadBytes = 0;
 80033e2:	4b48      	ldr	r3, [pc, #288]	; (8003504 <_ZN7Console4loopEv+0x168>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		consoleInput.ready = false;											// Green light for interrupt to start dumping data into raw_input buffer!
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <_ZN7Console4loopEv+0x168>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		if (new_cmd.length() > 0)
 80033f2:	f107 030c 	add.w	r3, r7, #12
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00e ff16 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d06f      	beq.n	80034ec <_ZN7Console4loopEv+0x150>
		{

			// The help command must be implemented here as I can't access console map from inside sys_cmnds.hpp
			if (new_cmd == "help")
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	493d      	ldr	r1, [pc, #244]	; (8003508 <_ZN7Console4loopEv+0x16c>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fc6a 	bl	8001cec <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <_ZN7Console4loopEv+0x8a>
			{
				// Show all possible system commands
				printAllCommands();
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa14 	bl	800384c <_ZN7Console16printAllCommandsEv>
 8003424:	e062      	b.n	80034ec <_ZN7Console4loopEv+0x150>
			}else if (!exec(new_cmd))
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f883 	bl	8003538 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003432:	4603      	mov	r3, r0
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d056      	beq.n	80034ec <_ZN7Console4loopEv+0x150>
			{
				print("\'" + new_cmd + "\'");
 800343e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003442:	f107 020c 	add.w	r2, r7, #12
 8003446:	4931      	ldr	r1, [pc, #196]	; (800350c <_ZN7Console4loopEv+0x170>)
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fc91 	bl	8003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800344e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003452:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003456:	4a2d      	ldr	r2, [pc, #180]	; (800350c <_ZN7Console4loopEv+0x170>)
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fc72 	bl	8001d42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800345e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fc50 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346c:	4618      	mov	r0, r3
 800346e:	f00e fecd 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003472:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003476:	4618      	mov	r0, r3
 8003478:	f00e fec8 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				println(" is an unrecognized command!");
 800347c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003480:	4618      	mov	r0, r3
 8003482:	f00e fc4c 	bl	8011d1e <_ZNSaIcEC1Ev>
 8003486:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800348a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800348e:	4920      	ldr	r1, [pc, #128]	; (8003510 <_ZN7Console4loopEv+0x174>)
 8003490:	4618      	mov	r0, r3
 8003492:	f00f f85d 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fc0c 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80034a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00e feb1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80034aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034ae:	4618      	mov	r0, r3
 80034b0:	f00e fc36 	bl	8011d20 <_ZNSaIcED1Ev>
				println("Use 'help' to show all valid terminal commands.");
 80034b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00e fc30 	bl	8011d1e <_ZNSaIcEC1Ev>
 80034be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80034c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034c6:	4913      	ldr	r1, [pc, #76]	; (8003514 <_ZN7Console4loopEv+0x178>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00f f841 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fbf0 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80034d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034dc:	4618      	mov	r0, r3
 80034de:	f00e fe95 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80034e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80034e6:	4618      	mov	r0, r3
 80034e8:	f00e fc1a 	bl	8011d20 <_ZNSaIcED1Ev>
			}

		}

		printCursor();
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fdc9 	bl	8003084 <_ZN7Console11printCursorEv>
		std::string new_cmd(consoleInput.raw_input);
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4618      	mov	r0, r3
 80034f8:	f00e fe88 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80034fc:	bf00      	nop
 80034fe:	3790      	adds	r7, #144	; 0x90
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2000046c 	.word	0x2000046c
 8003508:	08019de0 	.word	0x08019de0
 800350c:	08019de8 	.word	0x08019de8
 8003510:	08019dec 	.word	0x08019dec
 8003514:	08019e0c 	.word	0x08019e0c

08003518 <_ZN7Console5startEv>:

void Console::start()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	startUART();
 8003520:	f7ff fbbc 	bl	8002c9c <_ZL9startUARTv>
	printBanner();
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fd93 	bl	8003050 <_ZN7Console11printBannerEv>
	printCursor();
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fdaa 	bl	8003084 <_ZN7Console11printCursorEv>
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::exec(std::string &cmd)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b09f      	sub	sp, #124	; 0x7c
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	std::string command = bfrspc(cmd); 		// Separate string at space
 8003542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f00e ffcd 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800354e:	f107 0320 	add.w	r3, r7, #32
 8003552:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fbf1 	bl	8002d40 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800355e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003562:	4618      	mov	r0, r3
 8003564:	f00e fe52 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	if (isCommand(command) || isTask(command)) { 				// Check if input is even a command
 8003568:	f107 0320 	add.w	r3, r7, #32
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fee1 	bl	8003336 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
 800357a:	f107 0320 	add.w	r3, r7, #32
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fef1 	bl	8003368 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8093 	beq.w	80036be <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x186>

		std::string args = aftspc(cmd); 	// Separate arguments from command
 8003598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800359c:	6839      	ldr	r1, [r7, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f00e ffa2 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fbf2 	bl	8002d98 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00e fe27 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		if (isCommand(command))				// Its a system command.
 80035be:	f107 0320 	add.w	r3, r7, #32
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff feb6 	bl	8003336 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d033      	beq.n	8003638 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>
		{
			if (args.length() > 0) {
 80035d0:	f107 0308 	add.w	r3, r7, #8
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00e fe27 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d014      	beq.n	8003614 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
				cmnds.find(command)->second.runb(args);	// Execute command with arguments.
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f107 0220 	add.w	r2, r7, #32
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fbe1 	bl	8003dba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 80035f8:	4603      	mov	r3, r0
 80035fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fbe9 	bl	8003dd8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003606:	4603      	mov	r3, r0
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f107 0208 	add.w	r2, r7, #8
 800360e:	4610      	mov	r0, r2
 8003610:	4798      	blx	r3
 8003612:	e04d      	b.n	80036b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				cmnds.find(command)->second.runa();		// Execute command without arguments.
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f107 0220 	add.w	r2, r7, #32
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fbcc 	bl	8003dba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8003622:	4603      	mov	r3, r0
 8003624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003626:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fbd4 	bl	8003dd8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003630:	4603      	mov	r3, r0
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	4798      	blx	r3
 8003636:	e03b      	b.n	80036b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			}
		}else{

			// Its a task!
			if (args.length() > 0) {
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	4618      	mov	r0, r3
 800363e:	f00e fdf3 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
				task_cmnds.find(command)->second->consoleFuncb(args);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3318      	adds	r3, #24
 8003656:	f107 0220 	add.w	r2, r7, #32
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fbc9 	bl	8003df4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003662:	4603      	mov	r3, r0
 8003664:	673b      	str	r3, [r7, #112]	; 0x70
 8003666:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fbd1 	bl	8003e12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003670:	4603      	mov	r3, r0
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	3208      	adds	r2, #8
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	f107 0108 	add.w	r1, r7, #8
 800367e:	4618      	mov	r0, r3
 8003680:	4790      	blx	r2
 8003682:	e015      	b.n	80036b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				task_cmnds.find(command)->second->consoleFunca();
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3318      	adds	r3, #24
 8003688:	f107 0220 	add.w	r2, r7, #32
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fbb0 	bl	8003df4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003694:	4603      	mov	r3, r0
 8003696:	677b      	str	r3, [r7, #116]	; 0x74
 8003698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fbb8 	bl	8003e12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 80036a2:	4603      	mov	r3, r0
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	3204      	adds	r2, #4
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	4790      	blx	r2
			}

		}

		return true;
 80036b0:	2401      	movs	r4, #1
		std::string args = aftspc(cmd); 	// Separate arguments from command
 80036b2:	f107 0308 	add.w	r3, r7, #8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f00e fda8 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036bc:	e000      	b.n	80036c0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x188>

	} else {
		return false;
 80036be:	2400      	movs	r4, #0
	std::string command = bfrspc(cmd); 		// Separate string at space
 80036c0:	f107 0320 	add.w	r3, r7, #32
 80036c4:	4618      	mov	r0, r3
 80036c6:	f00e fda1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036ca:	4623      	mov	r3, r4
	}
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	377c      	adds	r7, #124	; 0x7c
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}

080036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3318      	adds	r3, #24
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fa34 	bl	8002b4e <_ZN7commandD1Ev>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f00e fd8f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZN7Console9loadCmndsEv>:

void Console::loadCmnds()
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b0db      	sub	sp, #364	; 0x16c
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	6018      	str	r0, [r3, #0]
	// Loading all commands, must be done manually for now.
	cmnds.insert( {echo.getName(),  echo} );
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800370a:	4944      	ldr	r1, [pc, #272]	; (800381c <_ZN7Console9loadCmndsEv+0x124>)
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fba4 	bl	8002e5a <_ZN7command7getNameB5cxx11Ev>
 8003712:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003716:	f107 0310 	add.w	r3, r7, #16
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <_ZN7Console9loadCmndsEv+0x124>)
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb86 	bl	8003e2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	f107 0210 	add.w	r2, r7, #16
 800372a:	4621      	mov	r1, r4
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fb9d 	bl	8003e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ffcc 	bl	80036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 800373c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003740:	4618      	mov	r0, r3
 8003742:	f00e fd63 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {clear.getName(), clear} );
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	681c      	ldr	r4, [r3, #0]
 800374a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800374e:	4934      	ldr	r1, [pc, #208]	; (8003820 <_ZN7Console9loadCmndsEv+0x128>)
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fb82 	bl	8002e5a <_ZN7command7getNameB5cxx11Ev>
 8003756:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800375a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800375e:	4a30      	ldr	r2, [pc, #192]	; (8003820 <_ZN7Console9loadCmndsEv+0x128>)
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fb64 	bl	8003e2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003766:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800376a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800376e:	4621      	mov	r1, r4
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fb7b 	bl	8003e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003776:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ffaa 	bl	80036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003780:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003784:	4618      	mov	r0, r3
 8003786:	f00e fd41 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {banner.getName(), banner} );
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003792:	4924      	ldr	r1, [pc, #144]	; (8003824 <_ZN7Console9loadCmndsEv+0x12c>)
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb60 	bl	8002e5a <_ZN7command7getNameB5cxx11Ev>
 800379a:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 800379e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <_ZN7Console9loadCmndsEv+0x12c>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb42 	bl	8003e2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 80037aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037ae:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80037b2:	4621      	mov	r1, r4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb59 	bl	8003e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 80037ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ff88 	bl	80036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 80037c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f00e fd1f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {help.getName(), help} );
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	681c      	ldr	r4, [r3, #0]
 80037d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80037d6:	4914      	ldr	r1, [pc, #80]	; (8003828 <_ZN7Console9loadCmndsEv+0x130>)
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fb3e 	bl	8002e5a <_ZN7command7getNameB5cxx11Ev>
 80037de:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80037e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <_ZN7Console9loadCmndsEv+0x130>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fb20 	bl	8003e2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 80037ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80037f6:	4621      	mov	r1, r4
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fb37 	bl	8003e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 80037fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff66 	bl	80036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003808:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800380c:	4618      	mov	r0, r3
 800380e:	f00e fcfd 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003812:	bf00      	nop
 8003814:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	200005c0 	.word	0x200005c0
 8003820:	200005e0 	.word	0x200005e0
 8003824:	20000600 	.word	0x20000600
 8003828:	200005a0 	.word	0x200005a0

0800382c <_ZN7Console17isNewCommandReadyEv>:

bool Console::isNewCommandReady()
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	return consoleInput.ready;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <_ZN7Console17isNewCommandReadyEv+0x1c>)
 8003836:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000046c 	.word	0x2000046c

0800384c <_ZN7Console16printAllCommandsEv>:

void Console::printAllCommands()
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b0c5      	sub	sp, #276	; 0x114
 8003850:	af00      	add	r7, sp, #0
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	6018      	str	r0, [r3, #0]
	println("System Commands:\tSystem Tasks:");
 8003856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800385a:	4618      	mov	r0, r3
 800385c:	f00e fa5f 	bl	8011d1e <_ZNSaIcEC1Ev>
 8003860:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003864:	f107 0318 	add.w	r3, r7, #24
 8003868:	49c6      	ldr	r1, [pc, #792]	; (8003b84 <_ZN7Console16printAllCommandsEv+0x338>)
 800386a:	4618      	mov	r0, r3
 800386c:	f00e fe70 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fa1f 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f00e fcc4 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003888:	4618      	mov	r0, r3
 800388a:	f00e fa49 	bl	8011d20 <_ZNSaIcED1Ev>

	unsigned int small_cnt = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	if (cmnds.size() >= task_cmnds.size())
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fafb 	bl	8003e94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 800389e:	4604      	mov	r4, r0
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3318      	adds	r3, #24
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fb01 	bl	8003eae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	429c      	cmp	r4, r3
 80038b0:	bf2c      	ite	cs
 80038b2:	2301      	movcs	r3, #1
 80038b4:	2300      	movcc	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80ad 	beq.w	8003a18 <_ZN7Console16printAllCommandsEv+0x1cc>
	{
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb00 	bl	8003ec8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 80038c8:	4603      	mov	r3, r0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fb06 	bl	8003ee2 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
 80038da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fb09 	bl	8003efc <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8144 	beq.w	8003b7a <_ZN7Console16printAllCommandsEv+0x32e>
		{
			print(it->first);
 80038f2:	f107 0314 	add.w	r3, r7, #20
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fb29 	bl	8003f4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f00e fdee 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800390c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f9f9 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800391a:	4618      	mov	r0, r3
 800391c:	f00e fc76 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			print("\t\t\t");
 8003920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003924:	4618      	mov	r0, r3
 8003926:	f00e f9fa 	bl	8011d1e <_ZNSaIcEC1Ev>
 800392a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800392e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003932:	4995      	ldr	r1, [pc, #596]	; (8003b88 <_ZN7Console16printAllCommandsEv+0x33c>)
 8003934:	4618      	mov	r0, r3
 8003936:	f00e fe0b 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800393a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f9e2 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003944:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003948:	4618      	mov	r0, r3
 800394a:	f00e fc5f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800394e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003952:	4618      	mov	r0, r3
 8003954:	f00e f9e4 	bl	8011d20 <_ZNSaIcED1Ev>

			if (small_cnt < task_cmnds.size())
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3318      	adds	r3, #24
 800395e:	4618      	mov	r0, r3
 8003960:	f000 faa5 	bl	8003eae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 8003964:	4602      	mov	r2, r0
 8003966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396a:	4293      	cmp	r3, r2
 800396c:	bf34      	ite	cc
 800396e:	2301      	movcc	r3, #1
 8003970:	2300      	movcs	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d027      	beq.n	80039c8 <_ZN7Console16printAllCommandsEv+0x17c>
			{
				auto tsk_it = task_cmnds.cbegin();
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3318      	adds	r3, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f000 faf3 	bl	8003f6a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 8003984:	4602      	mov	r2, r0
 8003986:	f107 0310 	add.w	r3, r7, #16
 800398a:	601a      	str	r2, [r3, #0]
				std::advance(tsk_it, small_cnt);
 800398c:	f107 0310 	add.w	r3, r7, #16
 8003990:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003994:	4618      	mov	r0, r3
 8003996:	f000 faf5 	bl	8003f84 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>
				print(tsk_it->first);
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb03 	bl	8003faa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f00e fd9a 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80039b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff f9a5 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80039be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f00e fc22 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

			println("");
 80039c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039cc:	4618      	mov	r0, r3
 80039ce:	f00e f9a6 	bl	8011d1e <_ZNSaIcEC1Ev>
 80039d2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80039d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80039da:	496c      	ldr	r1, [pc, #432]	; (8003b8c <_ZN7Console16printAllCommandsEv+0x340>)
 80039dc:	4618      	mov	r0, r3
 80039de:	f00e fdb7 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80039e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f966 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80039ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00e fc0b 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039fa:	4618      	mov	r0, r3
 80039fc:	f00e f990 	bl	8011d20 <_ZNSaIcED1Ev>
			small_cnt++;
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a04:	3301      	adds	r3, #1
 8003a06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 8003a0a:	f107 0314 	add.w	r3, r7, #20
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa87 	bl	8003f24 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>
 8003a16:	e759      	b.n	80038cc <_ZN7Console16printAllCommandsEv+0x80>
		}
	}else{							// Task list is bigger than command list.

		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3318      	adds	r3, #24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 faa3 	bl	8003f6a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3318      	adds	r3, #24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fac7 	bl	8003fc6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a3e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fac9 	bl	8003fe0 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8092 	beq.w	8003b7a <_ZN7Console16printAllCommandsEv+0x32e>
		{
			if (small_cnt < cmnds.size())
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa1a 	bl	8003e94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bf34      	ite	cc
 8003a6a:	2301      	movcc	r3, #1
 8003a6c:	2300      	movcs	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d043      	beq.n	8003afc <_ZN7Console16printAllCommandsEv+0x2b0>
			{
				auto cmnd_it = cmnds.cbegin();
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fa25 	bl	8003ec8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	601a      	str	r2, [r3, #0]
				std::advance(cmnd_it, small_cnt);
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 facf 	bl	8004032 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>
				print(cmnd_it->first);
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa58 	bl	8003f4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f00e fd1d 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003aae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff f928 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003ab8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f00e fba5 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				print("\t\t\t");
 8003ac2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f00e f929 	bl	8011d1e <_ZNSaIcEC1Ev>
 8003acc:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003ad0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ad4:	492c      	ldr	r1, [pc, #176]	; (8003b88 <_ZN7Console16printAllCommandsEv+0x33c>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f00e fd3a 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003adc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f911 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003ae6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003aea:	4618      	mov	r0, r3
 8003aec:	f00e fb8e 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003af0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f00e f913 	bl	8011d20 <_ZNSaIcED1Ev>
 8003afa:	e01b      	b.n	8003b34 <_ZN7Console16printAllCommandsEv+0x2e8>
			}else{
				print("\t\t\t\t");
 8003afc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f00e f90c 	bl	8011d1e <_ZNSaIcEC1Ev>
 8003b06:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003b0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b0e:	4920      	ldr	r1, [pc, #128]	; (8003b90 <_ZN7Console16printAllCommandsEv+0x344>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f00e fd1d 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f8f4 	bl	8002d08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b20:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00e fb71 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00e f8f6 	bl	8011d20 <_ZNSaIcED1Ev>
			}

			println(it->first);
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fa36 	bl	8003faa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00e fccd 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003b4e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f8b0 	bl	8002cb8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f00e fb55 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			small_cnt++;
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	3301      	adds	r3, #1
 8003b68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa48 	bl	8004008 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>
 8003b78:	e758      	b.n	8003a2c <_ZN7Console16printAllCommandsEv+0x1e0>
		}

	}
}
 8003b7a:	bf00      	nop
 8003b7c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd90      	pop	{r4, r7, pc}
 8003b84:	08019e3c 	.word	0x08019e3c
 8003b88:	08019e5c 	.word	0x08019e5c
 8003b8c:	08019dac 	.word	0x08019dac
 8003b90:	08019e60 	.word	0x08019e60

08003b94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f00e fb34 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_ZN7Console16addCommandByTaskEP4Task>:
{
	cmnds.insert( {name, command(name, pntra, pntrb)} );
}

void Console::addCommandByTask(Task* tsk)
{
 8003bae:	b590      	push	{r4, r7, lr}
 8003bb0:	b093      	sub	sp, #76	; 0x4c
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
	// Call the addCommand function.
	task_cmnds.insert( {tsk->getName(), tsk} );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f103 0418 	add.w	r4, r3, #24
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f938 	bl	8002e3c <_ZN4Task7getNameB5cxx11Ev>
 8003bcc:	463a      	mov	r2, r7
 8003bce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa3e 	bl	8004058 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	f107 0214 	add.w	r2, r7, #20
 8003be4:	4621      	mov	r1, r4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa51 	bl	800408e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ffcf 	bl	8003b94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 8003bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00e fb06 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003c00:	bf00      	nop
 8003c02:	374c      	adds	r7, #76	; 0x4c
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd90      	pop	{r4, r7, pc}

08003c08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa50 	bl	80040b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa58 	bl	80040ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff f808 	bl	8002c38 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa52 	bl	80040e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa70 	bl	8004138 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa4c 	bl	80040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fad9 	bl	800321c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fa67 	bl	8004150 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa22 	bl	80040ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe ffd2 	bl	8002c38 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa5e 	bl	8004168 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa7c 	bl	80041bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa58 	bl	800417e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fad6 	bl	8003282 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa70 	bl	80041d4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 faa6 	bl	800424c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8003d00:	4603      	mov	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	f107 020c 	add.w	r2, r7, #12
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 faad 	bl	800426e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x3e>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x40>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>:
      count(const key_type& __x) const
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 faad 	bl	8004296 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fae3 	bl	800430e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	f107 020c 	add.w	r2, r7, #12
 8003d50:	f107 0308 	add.w	r3, r7, #8
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 faea 	bl	8004330 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x3e>
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x40>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f7fe ff80 	bl	8002c82 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003d82:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f00e fa20 	bl	80121ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f00e fa4a 	bl	8012224 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f00e fa4f 	bl	801223c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f00e fb54 	bl	8012450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f00e fb4a 	bl	8012444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8003db0:	bf00      	nop
    }
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x)
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fac5 	bl	8004358 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 faf3 	bl	80043d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>:
      find(const key_type& __x)
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 faf2 	bl	80043ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb20 	bl	8004464 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8003e2e:	b590      	push	{r4, r7, lr}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003e3a:	68fc      	ldr	r4, [r7, #12]
 8003e3c:	68b8      	ldr	r0, [r7, #8]
 8003e3e:	f000 fb1f 	bl	8004480 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4619      	mov	r1, r3
 8003e46:	4620      	mov	r0, r4
 8003e48:	f00e f9c6 	bl	80121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f103 0418 	add.w	r4, r3, #24
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb1f 	bl	8004496 <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f7ff f81e 	bl	8002e9e <_ZN7commandC1ERKS_>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>:
      insert(value_type&& __x)
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 8003e78:	68bc      	ldr	r4, [r7, #8]
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fb16 	bl	80044ac <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4621      	mov	r1, r4
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fb1b 	bl	80044c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}

08003e94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb5e 	bl	8004560 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fb5d 	bl	8004578 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>:
      cbegin() const noexcept
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fb5c 	bl	8004590 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>:
      cend() const noexcept
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f9ad 	bl	800424c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f00d ff33 	bl	8011da4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	601a      	str	r2, [r3, #0]
	return __tmp;
 8003f44:	68fb      	ldr	r3, [r7, #12]
      }
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb29 	bl	80045b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>:
      cbegin() const noexcept
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fb2a 	bl	80045ce <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fb2c 	bl	80045f0 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>
 8003f98:	4622      	mov	r2, r4
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb31 	bl	8004604 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd90      	pop	{r4, r7, pc}

08003faa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb4d 	bl	8004656 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>:
      cend() const noexcept
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f99c 	bl	800430e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f00d fec1 	bl	8011da4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]
	return __tmp;
 8004028:	68fb      	ldr	r3, [r7, #12]
      }
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8004032:	b590      	push	{r4, r7, lr}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fb16 	bl	8004672 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>
 8004046:	4622      	mov	r2, r4
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb1b 	bl	8004686 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004064:	68fc      	ldr	r4, [r7, #12]
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f000 fa0a 	bl	8004480 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800406c:	4603      	mov	r3, r0
 800406e:	4619      	mov	r1, r3
 8004070:	4620      	mov	r0, r4
 8004072:	f00e f8b1 	bl	80121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb2e 	bl	80046d8 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>
 800407c:	4603      	mov	r3, r0
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	619a      	str	r2, [r3, #24]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}

0800408e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>:
      insert(value_type&& __x)
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 800409a:	68bc      	ldr	r4, [r7, #8]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fb26 	bl	80046ee <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4621      	mov	r1, r4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fb2b 	bl	8004704 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}

080040b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb6f 	bl	80047a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
      { }
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800410a:	6838      	ldr	r0, [r7, #0]
 800410c:	f000 fb54 	bl	80047b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fff0 	bl	80040fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 800411a:	6838      	ldr	r0, [r7, #0]
 800411c:	f000 fb58 	bl	80047d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004120:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fb5f 	bl	80047e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800412e:	e7e9      	b.n	8004104 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
	}
    }
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb56 	bl	800480a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0x36>
	  _M_erase(_S_right(__x));
 800418e:	6838      	ldr	r0, [r7, #0]
 8004190:	f000 fb46 	bl	8004820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004194:	4603      	mov	r3, r0
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fff0 	bl	800417e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
	  _Link_type __y = _S_left(__x);
 800419e:	6838      	ldr	r0, [r7, #0]
 80041a0:	f000 fb4a 	bl	8004838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 80041a4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80041a6:	6839      	ldr	r1, [r7, #0]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fb51 	bl	8004850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	  __x = __y;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80041b2:	e7e9      	b.n	8004188 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0xa>
    }
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fb47 	bl	8004872 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80041e4:	4604      	mov	r4, r0
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fb4f 	bl	800488a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80041ec:	4602      	mov	r2, r0
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4621      	mov	r1, r4
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fb55 	bl	80048a2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 80041f8:	4603      	mov	r3, r0
 80041fa:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f825 	bl	800424c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004202:	4603      	mov	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f82c 	bl	800426e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8004216:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10d      	bne.n	8004238 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 800421c:	687c      	ldr	r4, [r7, #4]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb6f 	bl	8004904 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	4620      	mov	r0, r4
 800422e:	f000 fb75 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f807 	bl	800424c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 800423e:	4603      	mov	r3, r0
 8004240:	e000      	b.n	8004244 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 8004242:	68bb      	ldr	r3, [r7, #8]
    }
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bd90      	pop	{r4, r7, pc}

0800424c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb6b 	bl	800493a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004296:	b590      	push	{r4, r7, lr}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fb59 	bl	8004958 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 80042a6:	4604      	mov	r4, r0
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fb61 	bl	8004970 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 80042ae:	4602      	mov	r2, r0
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4621      	mov	r1, r4
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb67 	bl	8004988 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>
 80042ba:	4603      	mov	r3, r0
 80042bc:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f825 	bl	800430e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	f107 020c 	add.w	r2, r7, #12
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f82c 	bl	8004330 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 80042d8:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80042de:	687c      	ldr	r4, [r7, #4]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb81 	bl	80049ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	4620      	mov	r0, r4
 80042f0:	f000 fb14 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f807 	bl	800430e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004300:	4603      	mov	r3, r0
 8004302:	e000      	b.n	8004306 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 8004304:	68bb      	ldr	r3, [r7, #8]
    }
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bd90      	pop	{r4, r7, pc}

0800430e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	1d1a      	adds	r2, r3, #4
 800431a:	f107 030c 	add.w	r3, r7, #12
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fb6e 	bl	8004a02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fee8 	bl	8004138 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004368:	4604      	mov	r4, r0
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fb58 	bl	8004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004370:	4602      	mov	r2, r0
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	4621      	mov	r1, r4
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fb5e 	bl	8004a38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>
 800437c:	4603      	mov	r3, r0
 800437e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fb8a 	bl	8004a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004386:	4603      	mov	r3, r0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	f107 020c 	add.w	r2, r7, #12
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb91 	bl	8004abc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 800439a:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80043a0:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80043a2:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 faad 	bl	8004904 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	6839      	ldr	r1, [r7, #0]
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 fab3 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb6c 	bl	8004a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80043c2:	4603      	mov	r3, r0
 80043c4:	e000      	b.n	80043c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 80043c6:	68bb      	ldr	r3, [r7, #8]
    }
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr()
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3310      	adds	r3, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fb81 	bl	8004ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fee0 	bl	80041bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 80043fc:	4604      	mov	r4, r0
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb7c 	bl	8004afc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004404:	4602      	mov	r2, r0
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	4621      	mov	r1, r4
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb82 	bl	8004b14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>
 8004410:	4603      	mov	r3, r0
 8004412:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fbae 	bl	8004b76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 800441a:	4603      	mov	r3, r0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	f107 020c 	add.w	r2, r7, #12
 8004422:	f107 0308 	add.w	r3, r7, #8
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fbb5 	bl	8004b98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 800442e:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004434:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004436:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fad6 	bl	80049ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800443e:	4603      	mov	r3, r0
 8004440:	461a      	mov	r2, r3
 8004442:	6839      	ldr	r1, [r7, #0]
 8004444:	4620      	mov	r0, r4
 8004446:	f000 fa69 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fb90 	bl	8004b76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004456:	4603      	mov	r3, r0
 8004458:	e000      	b.n	800445c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 800445a:	68bb      	ldr	r3, [r7, #8]
    }
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr()
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3310      	adds	r3, #16
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fba5 	bl	8004bc0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004476:	4603      	mov	r3, r0
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80044c2:	b5b0      	push	{r4, r5, r7, lr}
 80044c4:	b08e      	sub	sp, #56	; 0x38
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 80044ce:	f107 031c 	add.w	r3, r7, #28
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fc04 	bl	8004ce2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 80044da:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb78 	bl	8004bd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80044ee:	f107 0310 	add.w	r3, r7, #16
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fc00 	bl	8004cfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80044fa:	697c      	ldr	r4, [r7, #20]
 80044fc:	69bd      	ldr	r5, [r7, #24]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fc0a 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8004504:	4602      	mov	r2, r0
 8004506:	f107 0310 	add.w	r3, r7, #16
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	462a      	mov	r2, r5
 8004510:	4621      	mov	r1, r4
 8004512:	68b8      	ldr	r0, [r7, #8]
 8004514:	f000 fc0b 	bl	8004d2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>
 8004518:	4603      	mov	r3, r0
 800451a:	623b      	str	r3, [r7, #32]
		      true);
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004522:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004526:	f107 0320 	add.w	r3, r7, #32
 800452a:	4619      	mov	r1, r3
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fc47 	bl	8004dc0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
 8004532:	e011      	b.n	8004558 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fc58 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004542:	2300      	movs	r3, #0
 8004544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004548:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800454c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fc34 	bl	8004dc0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
    }
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	3730      	adds	r7, #48	; 0x30
 800455c:	46bd      	mov	sp, r7
 800455e:	bdb0      	pop	{r4, r5, r7, pc}

08004560 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f9c9 	bl	800493a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr() const
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3310      	adds	r3, #16
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fc26 	bl	8004e10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fa0e 	bl	8004a02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>:
    __iterator_category(const _Iter&)
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	dd0d      	ble.n	8004632 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	60ba      	str	r2, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fbfc 	bl	8004e28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>
        while (__n--)
 8004630:	e7f1      	b.n	8004616 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	60ba      	str	r2, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fbff 	bl	8004e4a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
        while (__n++)
 800464c:	e7f1      	b.n	8004632 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr() const
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3310      	adds	r3, #16
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fc02 	bl	8004e6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004668:	4603      	mov	r3, r0
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>:
    __iterator_category(const _Iter&)
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	dd0d      	ble.n	80046b4 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	60ba      	str	r2, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fbe9 	bl	8004e84 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>
        while (__n--)
 80046b2:	e7f1      	b.n	8004698 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	60ba      	str	r2, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fbec 	bl	8004ea6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
        while (__n++)
 80046ce:	e7f1      	b.n	80046b4 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004704:	b5b0      	push	{r4, r5, r7, lr}
 8004706:	b08e      	sub	sp, #56	; 0x38
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004710:	f107 031c 	add.w	r3, r7, #28
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc5b 	bl	8004fd2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 800471c:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 800471e:	f107 0314 	add.w	r3, r7, #20
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fbcf 	bl	8004ec8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d022      	beq.n	8004776 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004730:	f107 0310 	add.w	r3, r7, #16
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fc57 	bl	8004fea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>
	  return _Res(_M_insert_(__res.first, __res.second,
 800473c:	697c      	ldr	r4, [r7, #20]
 800473e:	69bd      	ldr	r5, [r7, #24]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fc61 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8004746:	4602      	mov	r2, r0
 8004748:	f107 0310 	add.w	r3, r7, #16
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	462a      	mov	r2, r5
 8004752:	4621      	mov	r1, r4
 8004754:	68b8      	ldr	r0, [r7, #8]
 8004756:	f000 fc62 	bl	800501e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
 800475a:	4603      	mov	r3, r0
 800475c:	623b      	str	r3, [r7, #32]
		      true);
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004764:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004768:	f107 0320 	add.w	r3, r7, #32
 800476c:	4619      	mov	r1, r3
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fc9e 	bl	80050b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
 8004774:	e011      	b.n	800479a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fcaf 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800478a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800478e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004792:	4619      	mov	r1, r3
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fc8b 	bl	80050b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
    }
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	3730      	adds	r7, #48	; 0x30
 800479e:	46bd      	mov	sp, r7
 80047a0:	bdb0      	pop	{r4, r5, r7, pc}

080047a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fc83 	bl	8005100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fc94 	bl	800512a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fc76 	bl	800514e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>
	_M_put_node(__p);
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fc87 	bl	8005178 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>
      }
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
      }
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80048a2:	b590      	push	{r4, r7, lr}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80048b6:	68fc      	ldr	r4, [r7, #12]
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f000 fc6f 	bl	800519c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 80048be:	4603      	mov	r3, r0
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f829 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f083 0301 	eor.w	r3, r3, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f000 fc71 	bl	80051c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80048e0:	60b8      	str	r0, [r7, #8]
 80048e2:	e7e5      	b.n	80048b0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 80048e4:	68b8      	ldr	r0, [r7, #8]
 80048e6:	f000 fc78 	bl	80051da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80048ea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80048ec:	e7e0      	b.n	80048b0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 80048ee:	f107 0314 	add.w	r3, r7, #20
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f820 	bl	800493a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 80048fa:	697b      	ldr	r3, [r7, #20]
    }
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd90      	pop	{r4, r7, pc}

08004904 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fc45 	bl	800519c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004912:	4603      	mov	r3, r0
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f000 fc61 	bl	80051f2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8004930:	4603      	mov	r3, r0
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
      }
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800499c:	68fc      	ldr	r4, [r7, #12]
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f000 fc37 	bl	8005212 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80049a4:	4603      	mov	r3, r0
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7ff ffb6 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f083 0301 	eor.w	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d006      	beq.n	80049ca <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f000 fc39 	bl	8005238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80049c6:	60b8      	str	r0, [r7, #8]
 80049c8:	e7e5      	b.n	8004996 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f000 fc40 	bl	8005250 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80049d0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80049d2:	e7e0      	b.n	8004996 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f811 	bl	8004a02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 80049e0:	697b      	ldr	r3, [r7, #20]
    }
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}

080049ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fc0d 	bl	8005212 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004a4c:	68fc      	ldr	r4, [r7, #12]
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	f000 fba4 	bl	800519c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004a54:	4603      	mov	r3, r0
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7ff ff5e 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f083 0301 	eor.w	r3, r3, #1
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	68b8      	ldr	r0, [r7, #8]
 8004a72:	f7ff fead 	bl	80047d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004a76:	60b8      	str	r0, [r7, #8]
 8004a78:	e7e5      	b.n	8004a46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f7ff fe9c 	bl	80047b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004a80:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004a82:	e7e0      	b.n	8004a46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f9b1 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004a90:	697b      	ldr	r3, [r7, #20]
    }
 8004a92:	4618      	mov	r0, r3
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd90      	pop	{r4, r7, pc}

08004a9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	1d1a      	adds	r2, r3, #4
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f9a0 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fbbb 	bl	8005268 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004b14:	b590      	push	{r4, r7, lr}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004b28:	68fc      	ldr	r4, [r7, #12]
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f000 fb71 	bl	8005212 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8004b30:	4603      	mov	r3, r0
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7ff fef0 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f7ff fe73 	bl	8004838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004b52:	60b8      	str	r0, [r7, #8]
 8004b54:	e7e5      	b.n	8004b22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	f7ff fe62 	bl	8004820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004b5c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004b5e:	e7e0      	b.n	8004b22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fabb 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004b6c:	697b      	ldr	r3, [r7, #20]
    }
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}

08004b76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 faaa 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() noexcept
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fb58 	bl	800527e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b08b      	sub	sp, #44	; 0x2c
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004be4:	68b8      	ldr	r0, [r7, #8]
 8004be6:	f7ff faa7 	bl	8004138 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004bea:	4603      	mov	r3, r0
 8004bec:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004bee:	68b8      	ldr	r0, [r7, #8]
 8004bf0:	f7ff ff16 	bl	8004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004c08:	68bc      	ldr	r4, [r7, #8]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fac5 	bl	800519c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff fe7f 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fdce 	bl	80047d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004c34:	4603      	mov	r3, r0
 8004c36:	e004      	b.n	8004c42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fdbc 	bl	80047b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004c40:	4603      	mov	r3, r0
 8004c42:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004c44:	e7db      	b.n	8004bfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f8cf 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01d      	beq.n	8004c98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f000 fb19 	bl	8005294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8004c62:	4603      	mov	r3, r0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	f107 021c 	add.w	r2, r7, #28
 8004c6a:	f107 0310 	add.w	r3, r7, #16
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff23 	bl	8004abc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8004c7c:	f107 0214 	add.w	r2, r7, #20
 8004c80:	f107 0318 	add.w	r3, r7, #24
 8004c84:	4619      	mov	r1, r3
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fb15 	bl	80052b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 8004c8c:	e025      	b.n	8004cda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8004c8e:	f107 0310 	add.w	r3, r7, #16
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb28 	bl	80052e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004c98:	68bc      	ldr	r4, [r7, #8]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fe31 	bl	8004904 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff fe37 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8004cb4:	f107 0214 	add.w	r2, r7, #20
 8004cb8:	f107 0318 	add.w	r3, r7, #24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 faf9 	bl	80052b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 8004cc4:	e009      	b.n	8004cda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	f107 0220 	add.w	r2, r7, #32
 8004cce:	f107 0310 	add.w	r3, r7, #16
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fb18 	bl	800530a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	372c      	adds	r7, #44	; 0x2c
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd90      	pop	{r4, r7, pc}

08004ce2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>:
  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004d2e:	b5b0      	push	{r4, r5, r7, lr}
 8004d30:	b088      	sub	sp, #32
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11a      	bne.n	8004d78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fe6c 	bl	8004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004d50:	68fc      	ldr	r4, [r7, #12]
 8004d52:	f107 0310 	add.w	r3, r7, #16
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ffc2 	bl	8004ce2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fdcf 	bl	8004904 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff fdd5 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4e>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x50>
 8004d7c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8004d7e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8004d80:	6838      	ldr	r0, [r7, #0]
 8004d82:	f7ff ffc9 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8c:	f000 fad3 	bl	8005336 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8004d90:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004d96:	7ff8      	ldrb	r0, [r7, #31]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	69b9      	ldr	r1, [r7, #24]
 8004d9c:	f00d f819 	bl	8011dd2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	69b9      	ldr	r1, [r7, #24]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f81e 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004db6:	697b      	ldr	r3, [r7, #20]
      }
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bdb0      	pop	{r4, r5, r7, pc}

08004dc0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004dcc:	68b8      	ldr	r0, [r7, #8]
 8004dce:	f000 fac6 	bl	800535e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 faca 	bl	8005374 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8004de0:	4603      	mov	r3, r0
 8004de2:	781a      	ldrb	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	711a      	strb	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fab6 	bl	800538a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f00c ffb5 	bl	8011da4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
	return *this;
 8004e40:	687b      	ldr	r3, [r7, #4]
      }
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f00c ffb9 	bl	8011dce <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
	return *this;
 8004e62:	687b      	ldr	r3, [r7, #4]
      }
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa93 	bl	80053a0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f00c ff87 	bl	8011da4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
	return *this;
 8004e9c:	687b      	ldr	r3, [r7, #4]
      }
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f00c ff8b 	bl	8011dce <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
	return *this;
 8004ebe:	687b      	ldr	r3, [r7, #4]
      }
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b08b      	sub	sp, #44	; 0x2c
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004ed4:	68b8      	ldr	r0, [r7, #8]
 8004ed6:	f7ff f971 	bl	80041bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8004eda:	4603      	mov	r3, r0
 8004edc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004ede:	68b8      	ldr	r0, [r7, #8]
 8004ee0:	f7ff fe0c 	bl	8004afc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004ef8:	68bc      	ldr	r4, [r7, #8]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f988 	bl	8005212 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7ff fd07 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x60>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fc8a 	bl	8004838 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004f24:	4603      	mov	r3, r0
 8004f26:	e004      	b.n	8004f32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6a>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fc78 	bl	8004820 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004f30:	4603      	mov	r3, r0
 8004f32:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004f34:	e7db      	b.n	8004eee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f8cf 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01d      	beq.n	8004f88 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f000 fa32 	bl	80053b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8004f52:	4603      	mov	r3, r0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	f107 021c 	add.w	r2, r7, #28
 8004f5a:	f107 0310 	add.w	r3, r7, #16
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fe19 	bl	8004b98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8004f6c:	f107 0214 	add.w	r2, r7, #20
 8004f70:	f107 0318 	add.w	r3, r7, #24
 8004f74:	4619      	mov	r1, r3
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa2e 	bl	80053d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 8004f7c:	e025      	b.n	8004fca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa41 	bl	800540a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004f88:	68bc      	ldr	r4, [r7, #8]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fd2c 	bl	80049ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004f92:	4603      	mov	r3, r0
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff fcbf 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8004fa4:	f107 0214 	add.w	r2, r7, #20
 8004fa8:	f107 0318 	add.w	r3, r7, #24
 8004fac:	4619      	mov	r1, r3
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa12 	bl	80053d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 8004fb4:	e009      	b.n	8004fca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	f107 0220 	add.w	r2, r7, #32
 8004fbe:	f107 0310 	add.w	r3, r7, #16
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f9a0 	bl	800530a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	372c      	adds	r7, #44	; 0x2c
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}

08004fd2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>:
      operator()(_Pair& __x) const
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>:
	_Alloc_node(_Rb_tree& __t)
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800501e:	b5b0      	push	{r4, r5, r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11a      	bne.n	8005068 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff fd62 	bl	8004afc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005040:	68fc      	ldr	r4, [r7, #12]
 8005042:	f107 0310 	add.w	r3, r7, #16
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ffc2 	bl	8004fd2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 800504e:	4605      	mov	r5, r0
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fcca 	bl	80049ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005056:	4603      	mov	r3, r0
 8005058:	461a      	mov	r2, r3
 800505a:	4629      	mov	r1, r5
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff fc5d 	bl	800491c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4e>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x50>
 800506c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800506e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005070:	6838      	ldr	r0, [r7, #0]
 8005072:	f7ff ffc9 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005076:	4603      	mov	r3, r0
 8005078:	4619      	mov	r1, r3
 800507a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800507c:	f000 f9d6 	bl	800542c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>
 8005080:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005086:	7ff8      	ldrb	r0, [r7, #31]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	f00c fea1 	bl	8011dd2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f81e 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 80050a6:	697b      	ldr	r3, [r7, #20]
      }
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bdb0      	pop	{r4, r5, r7, pc}

080050b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80050bc:	68b8      	ldr	r0, [r7, #8]
 80050be:	f000 f9c9 	bl	8005454 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f952 	bl	8005374 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80050d0:	4603      	mov	r3, r0
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	711a      	strb	r2, [r3, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f9ad 	bl	800546a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005110:	4604      	mov	r4, r0
 8005112:	6838      	ldr	r0, [r7, #0]
 8005114:	f7ff f95c 	bl	80043d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8005118:	4603      	mov	r3, r0
 800511a:	4619      	mov	r1, r3
 800511c:	4620      	mov	r0, r4
 800511e:	f000 f9af 	bl	8005480 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>
      }
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	bd90      	pop	{r4, r7, pc}

0800512a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f998 	bl	800546a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 800513a:	4603      	mov	r3, r0
 800513c:	2201      	movs	r2, #1
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f9aa 	bl	800549a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800514e:	b590      	push	{r4, r7, lr}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9ad 	bl	80054b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 800515e:	4604      	mov	r4, r0
 8005160:	6838      	ldr	r0, [r7, #0]
 8005162:	f7ff f97f 	bl	8004464 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8005166:	4603      	mov	r3, r0
 8005168:	4619      	mov	r1, r3
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f9af 	bl	80054ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>
      }
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f998 	bl	80054b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005188:	4603      	mov	r3, r0
 800518a:	2201      	movs	r2, #1
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f9aa 	bl	80054e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fa04 	bl	80045b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 80051aa:	4602      	mov	r2, r0
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f9a7 	bl	8005506 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>
 80051b8:	4603      	mov	r3, r0
      }
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) < 0; }
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f00d f94e 	bl	80124a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005204:	4603      	mov	r3, r0
 8005206:	0fdb      	lsrs	r3, r3, #31
 8005208:	b2db      	uxtb	r3, r3
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>:
      _S_key(_Const_Link_type __x)
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fa1b 	bl	8004656 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8005220:	4602      	mov	r2, r0
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f978 	bl	800551e <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>
 800522e:	4603      	mov	r3, r0
      }
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() noexcept
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() noexcept
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fda3 	bl	8004df2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	f000 f937 	bl	8005536 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>
 80052c8:	4603      	mov	r3, r0
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f93b 	bl	800554c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80052d6:	4603      	mov	r3, r0
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f00c fd68 	bl	8011dca <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
	return *this;
 8005300:	687b      	ldr	r3, [r7, #4]
      }
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8005316:	68b8      	ldr	r0, [r7, #8]
 8005318:	f000 f918 	bl	800554c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800531c:	4603      	mov	r3, r0
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	605a      	str	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8005336:	b590      	push	{r4, r7, lr}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681c      	ldr	r4, [r3, #0]
 8005344:	6838      	ldr	r0, [r7, #0]
 8005346:	f7ff fce7 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800534a:	4603      	mov	r3, r0
 800534c:	4619      	mov	r1, r3
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f907 	bl	8005562 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8005354:	4603      	mov	r3, r0
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}

0800535e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() const noexcept
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() const noexcept
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fe8a 	bl	80050e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80053e4:	68b8      	ldr	r0, [r7, #8]
 80053e6:	f000 f8d3 	bl	8005590 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>
 80053ea:	4603      	mov	r3, r0
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f8aa 	bl	800554c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80053f8:	4603      	mov	r3, r0
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f00c fcd7 	bl	8011dca <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
	return *this;
 8005422:	687b      	ldr	r3, [r7, #4]
      }
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>:
	  operator()(_Arg&& __arg) const
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681c      	ldr	r4, [r3, #0]
 800543a:	6838      	ldr	r0, [r7, #0]
 800543c:	f7ff fde4 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005440:	4603      	mov	r3, r0
 8005442:	4619      	mov	r1, r3
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f8ae 	bl	80055a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>
 800544a:	4603      	mov	r3, r0
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}

08005454 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8a1 	bl	80055d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f89e 	bl	80055ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f893 	bl	8005606 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f890 	bl	800561e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>:

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>:
      operator()(const _Pair& __x) const
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f863 	bl	8005638 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8005572:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005574:	6838      	ldr	r0, [r7, #0]
 8005576:	f7ff fbcf 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800557a:	4603      	mov	r3, r0
 800557c:	461a      	mov	r2, r3
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f86a 	bl	800565a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8005586:	68fb      	ldr	r3, [r7, #12]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f872 	bl	800569a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>
 80055b6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80055b8:	6838      	ldr	r0, [r7, #0]
 80055ba:	f7ff fd25 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80055be:	4603      	mov	r3, r0
 80055c0:	461a      	mov	r2, r3
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f879 	bl	80056bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>
	  return __tmp;
 80055ca:	68fb      	ldr	r3, [r7, #12]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80055de:	6838      	ldr	r0, [r7, #0]
 80055e0:	f7fe f878 	bl	80036d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80055f8:	68b8      	ldr	r0, [r7, #8]
 80055fa:	f00c fb7d 	bl	8011cf8 <_ZdlPv>
      }
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>:
	destroy(_Up* __p)
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005610:	6838      	ldr	r0, [r7, #0]
 8005612:	f7fe fabf 	bl	8003b94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>:
      deallocate(pointer __p, size_type)
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f00c fb64 	bl	8011cf8 <_ZdlPv>
      }
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff12 	bl	800546a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005646:	4603      	mov	r3, r0
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f856 	bl	80056fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>
 8005650:	4603      	mov	r3, r0
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800565a:	b5b0      	push	{r4, r5, r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4619      	mov	r1, r3
 800566a:	2048      	movs	r0, #72	; 0x48
 800566c:	f7fd fad8 	bl	8002c20 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fefa 	bl	800546a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005676:	4604      	mov	r4, r0
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f7fe fea9 	bl	80043d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 800567e:	4605      	mov	r5, r0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fb49 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	4629      	mov	r1, r5
 800568c:	4620      	mov	r0, r4
 800568e:	f000 f844 	bl	800571a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>
	}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bdb0      	pop	{r4, r5, r7, pc}

0800569a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>:
      _M_get_node()
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ff08 	bl	80054b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2101      	movs	r1, #1
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f847 	bl	8005740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80056bc:	b5b0      	push	{r4, r5, r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4619      	mov	r1, r3
 80056cc:	202c      	movs	r0, #44	; 0x2c
 80056ce:	f7fd faa7 	bl	8002c20 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fef0 	bl	80054b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80056d8:	4604      	mov	r4, r0
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f7fe fec2 	bl	8004464 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 80056e0:	4605      	mov	r5, r0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fc90 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	4629      	mov	r1, r5
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f835 	bl	800575e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>
	}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bdb0      	pop	{r4, r5, r7, pc}

080056fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005706:	2200      	movs	r2, #0
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f83a 	bl	8005784 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>
 8005710:	4603      	mov	r3, r0
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff faf6 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f860 	bl	80057f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>:
      allocate(allocator_type& __a, size_type __n)
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800574a:	2200      	movs	r2, #0
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f86a 	bl	8005828 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>
 8005754:	4603      	mov	r3, r0
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fc4c 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f88a 	bl	8005890 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f895 	bl	80058c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>
 8005796:	4602      	mov	r2, r0
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4293      	cmp	r3, r2
 800579c:	bf8c      	ite	hi
 800579e:	2301      	movhi	r3, #1
 80057a0:	2300      	movls	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80057a8:	f00c fb6f 	bl	8011e8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4618      	mov	r0, r3
 80057b8:	f00c faa0 	bl	8011cfc <_Znwj>
 80057bc:	4603      	mov	r3, r0
      }
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>:
      constexpr pair(pair&&) = default;
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f00c fe86 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f103 0218 	add.w	r2, r3, #24
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	3318      	adds	r3, #24
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7fd fb58 	bl	8002e9e <_ZN7commandC1ERKS_>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fa87 	bl	8004d18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800580a:	4604      	mov	r4, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4619      	mov	r1, r3
 8005810:	2038      	movs	r0, #56	; 0x38
 8005812:	f7fd fa05 	bl	8002c20 <_ZnwjPv>
 8005816:	4603      	mov	r3, r0
 8005818:	4621      	mov	r1, r4
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ffd3 	bl	80057c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f851 	bl	80058dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>
 800583a:	4602      	mov	r2, r0
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4293      	cmp	r3, r2
 8005840:	bf8c      	ite	hi
 8005842:	2301      	movhi	r3, #1
 8005844:	2300      	movls	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800584c:	f00c fb1d 	bl	8011e8a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	222c      	movs	r2, #44	; 0x2c
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	4618      	mov	r0, r3
 800585a:	f00c fa4f 	bl	8011cfc <_Znwj>
 800585e:	4603      	mov	r3, r0
      }
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>:
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f00c fe35 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	619a      	str	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fbb3 	bl	8005008 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80058a2:	4604      	mov	r4, r0
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4619      	mov	r1, r3
 80058a8:	201c      	movs	r0, #28
 80058aa:	f7fd f9b9 	bl	8002c20 <_ZnwjPv>
 80058ae:	4603      	mov	r3, r0
 80058b0:	4621      	mov	r1, r4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ffd8 	bl	8005868 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd90      	pop	{r4, r7, pc}

080058c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv+0x18>)
      }
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	01c71c71 	.word	0x01c71c71

080058dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv+0x18>)
      }
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	02e8ba2e 	.word	0x02e8ba2e

080058f8 <_Z41__static_initialization_and_destruction_0ii>:
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b0a0      	sub	sp, #128	; 0x80
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	f040 80a3 	bne.w	8005a50 <_Z41__static_initialization_and_destruction_0ii+0x158>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005910:	4293      	cmp	r3, r2
 8005912:	f040 809d 	bne.w	8005a50 <_Z41__static_initialization_and_destruction_0ii+0x158>
const std::string cursor = "> ";
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4618      	mov	r0, r3
 800591c:	f00c f9ff 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	461a      	mov	r2, r3
 8005926:	495b      	ldr	r1, [pc, #364]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8005928:	485b      	ldr	r0, [pc, #364]	; (8005a98 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 800592a:	f00c fe11 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800592e:	f107 0308 	add.w	r3, r7, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f00c f9f4 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f00c f9ee 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	461a      	mov	r2, r3
 8005948:	4954      	ldr	r1, [pc, #336]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800594a:	4855      	ldr	r0, [pc, #340]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800594c:	f00c fe00 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	4618      	mov	r0, r3
 8005956:	f00c f9e3 	bl	8011d20 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 800595a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800595e:	4618      	mov	r0, r3
 8005960:	f00c f9dd 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005964:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	494d      	ldr	r1, [pc, #308]	; (8005aa4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800596e:	4618      	mov	r0, r3
 8005970:	f00c fdee 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005974:	f107 0110 	add.w	r1, r7, #16
 8005978:	4b4b      	ldr	r3, [pc, #300]	; (8005aa8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800597a:	4a4c      	ldr	r2, [pc, #304]	; (8005aac <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800597c:	484c      	ldr	r0, [pc, #304]	; (8005ab0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800597e:	f7fd f8c9 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f00c fc40 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800598c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005990:	4618      	mov	r0, r3
 8005992:	f00c f9c5 	bl	8011d20 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 8005996:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800599a:	4618      	mov	r0, r3
 800599c:	f00c f9bf 	bl	8011d1e <_ZNSaIcEC1Ev>
 80059a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80059a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a8:	4942      	ldr	r1, [pc, #264]	; (8005ab4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80059aa:	4618      	mov	r0, r3
 80059ac:	f00c fdd0 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80059b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80059b4:	4b40      	ldr	r3, [pc, #256]	; (8005ab8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80059b6:	4a41      	ldr	r2, [pc, #260]	; (8005abc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80059b8:	4841      	ldr	r0, [pc, #260]	; (8005ac0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80059ba:	f7fd f8ab 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80059be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059c2:	4618      	mov	r0, r3
 80059c4:	f00c fc22 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80059c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059cc:	4618      	mov	r0, r3
 80059ce:	f00c f9a7 	bl	8011d20 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 80059d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80059d6:	4618      	mov	r0, r3
 80059d8:	f00c f9a1 	bl	8011d1e <_ZNSaIcEC1Ev>
 80059dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80059e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059e4:	4937      	ldr	r1, [pc, #220]	; (8005ac4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80059e6:	4618      	mov	r0, r3
 80059e8:	f00c fdb2 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80059ec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80059f0:	4b35      	ldr	r3, [pc, #212]	; (8005ac8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80059f2:	4a36      	ldr	r2, [pc, #216]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80059f4:	4836      	ldr	r0, [pc, #216]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80059f6:	f7fd f88d 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80059fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059fe:	4618      	mov	r0, r3
 8005a00:	f00c fc04 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f00c f989 	bl	8011d20 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 8005a0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a12:	4618      	mov	r0, r3
 8005a14:	f00c f983 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005a18:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005a1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a20:	492c      	ldr	r1, [pc, #176]	; (8005ad4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005a22:	4618      	mov	r0, r3
 8005a24:	f00c fd94 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a28:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8005a2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005a30:	482b      	ldr	r0, [pc, #172]	; (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005a32:	f7fd f86f 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005a36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f00c fbe6 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00c f96b 	bl	8011d20 <_ZNSaIcED1Ev>
Console cs;
 8005a4a:	4826      	ldr	r0, [pc, #152]	; (8005ae4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005a4c:	f7fd fc4c 	bl	80032e8 <_ZN7ConsoleC1Ev>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d119      	bne.n	8005a8a <_Z41__static_initialization_and_destruction_0ii+0x192>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d114      	bne.n	8005a8a <_Z41__static_initialization_and_destruction_0ii+0x192>
 8005a60:	4820      	ldr	r0, [pc, #128]	; (8005ae4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005a62:	f7fd fc56 	bl	8003312 <_ZN7ConsoleD1Ev>
 8005a66:	481e      	ldr	r0, [pc, #120]	; (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005a68:	f7fd f871 	bl	8002b4e <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8005a6c:	4818      	ldr	r0, [pc, #96]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005a6e:	f7fd f86e 	bl	8002b4e <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 8005a72:	4813      	ldr	r0, [pc, #76]	; (8005ac0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8005a74:	f7fd f86b 	bl	8002b4e <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 8005a78:	480d      	ldr	r0, [pc, #52]	; (8005ab0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005a7a:	f7fd f868 	bl	8002b4e <_ZN7commandD1Ev>
const std::string wlcm =
 8005a7e:	4808      	ldr	r0, [pc, #32]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8005a80:	f00c fbc4 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005a84:	4804      	ldr	r0, [pc, #16]	; (8005a98 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8005a86:	f00c fbc1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005a8a:	bf00      	nop
 8005a8c:	3780      	adds	r7, #128	; 0x80
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	08019e68 	.word	0x08019e68
 8005a98:	2000043c 	.word	0x2000043c
 8005a9c:	08019e6c 	.word	0x08019e6c
 8005aa0:	20000454 	.word	0x20000454
 8005aa4:	08019de0 	.word	0x08019de0
 8005aa8:	08002e89 	.word	0x08002e89
 8005aac:	08002e79 	.word	0x08002e79
 8005ab0:	200005a0 	.word	0x200005a0
 8005ab4:	0801afcc 	.word	0x0801afcc
 8005ab8:	08002f1d 	.word	0x08002f1d
 8005abc:	08002ed5 	.word	0x08002ed5
 8005ac0:	200005c0 	.word	0x200005c0
 8005ac4:	0801afd4 	.word	0x0801afd4
 8005ac8:	08002f99 	.word	0x08002f99
 8005acc:	08002f51 	.word	0x08002f51
 8005ad0:	200005e0 	.word	0x200005e0
 8005ad4:	0801afdc 	.word	0x0801afdc
 8005ad8:	08003019 	.word	0x08003019
 8005adc:	08002fe9 	.word	0x08002fe9
 8005ae0:	20000600 	.word	0x20000600
 8005ae4:	20000620 	.word	0x20000620

08005ae8 <_GLOBAL__sub_I_cs>:
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7ff ff01 	bl	80058f8 <_Z41__static_initialization_and_destruction_0ii>
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_GLOBAL__sub_D_cs>:
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7ff fef9 	bl	80058f8 <_Z41__static_initialization_and_destruction_0ii>
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	: state{st}, priority{pri}, delay_tk{del}, period_tk{per}
{

}

Task::Task(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6178      	str	r0, [r7, #20]
 8005b10:	ed87 0a04 	vstr	s0, [r7, #16]
 8005b14:	edc7 0a03 	vstr	s1, [r7, #12]
 8005b18:	ed87 1a02 	vstr	s2, [r7, #8]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	603a      	str	r2, [r7, #0]
 8005b20:	71fb      	strb	r3, [r7, #7]
 8005b22:	4a18      	ldr	r2, [pc, #96]	; (8005b84 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3314      	adds	r3, #20
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f00c fb4c 	bl	80121ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	state = 0;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	605a      	str	r2, [r3, #4]
	priority = pri;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	79fa      	ldrb	r2, [r7, #7]
 8005b3c:	721a      	strb	r2, [r3, #8]
	name = nm;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	3314      	adds	r3, #20
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f00c fb67 	bl	8012218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

	// Calculating delay and period based on master tick value.
	delay_tk = (unsigned long)(delay_s / mstr_tick_s);
 8005b4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8005b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b5a:	ee17 2a90 	vmov	r2, s15
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	60da      	str	r2, [r3, #12]
	period_tk = (unsigned long)(peri_s / mstr_tick_s);
 8005b62:	edd7 6a03 	vldr	s13, [r7, #12]
 8005b66:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b72:	ee17 2a90 	vmov	r2, s15
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	611a      	str	r2, [r3, #16]
}
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	0801e550 	.word	0x0801e550

08005b88 <_Z41__static_initialization_and_destruction_0ii>:
		delay_tk = other.delay_tk;
		period_tk = other.period_tk;
	}

	return *this;
}
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d126      	bne.n	8005be6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d121      	bne.n	8005be6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f00c f8b9 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4916      	ldr	r1, [pc, #88]	; (8005c0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005bb4:	4816      	ldr	r0, [pc, #88]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005bb6:	f00c fccb 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f00c f8ae 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005bc4:	f107 030c 	add.w	r3, r7, #12
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f00c f8a8 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	490f      	ldr	r1, [pc, #60]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005bd6:	4810      	ldr	r0, [pc, #64]	; (8005c18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005bd8:	f00c fcba 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	4618      	mov	r0, r3
 8005be2:	f00c f89d 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d105      	bne.n	8005c02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8005bf6:	4808      	ldr	r0, [pc, #32]	; (8005c18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005bf8:	f00c fb08 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005bfc:	4804      	ldr	r0, [pc, #16]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005bfe:	f00c fb05 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	0801b014 	.word	0x0801b014
 8005c10:	20000650 	.word	0x20000650
 8005c14:	0801b018 	.word	0x0801b018
 8005c18:	20000668 	.word	0x20000668

08005c1c <_GLOBAL__sub_I__ZN4TaskC2Ev>:
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7ff ffaf 	bl	8005b88 <_Z41__static_initialization_and_destruction_0ii>
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_GLOBAL__sub_D__ZN4TaskC2Ev>:
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c34:	2000      	movs	r0, #0
 8005c36:	f7ff ffa7 	bl	8005b88 <_Z41__static_initialization_and_destruction_0ii>
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <_ZN4Task8getStateEv>:
	int getState(){ return state; }
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN4Task8setStateEi>:
	void setState(int x) { state = x; }
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <_ZN4Task8getDelayEv>:
	unsigned long getDelay(){ return delay_tk; }
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <_ZN4Task8setDelayEm>:
	void setDelay(unsigned long d){ delay_tk = d; }
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_ZN4Task9getPeriodEv>:
	unsigned long getPeriod(){ return period_tk; }
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_PeriodElapsedCallback>:

// Task master object needs to be created so .cpp can have SysTick_Handler call our objects update function.
TaskMaster<10> scheduler;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	if (htim == scheduler.getTimerInst())
 8005cc4:	4809      	ldr	r0, [pc, #36]	; (8005cec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005cc6:	f000 f821 	bl	8005d0c <_ZN10TaskMasterILi10EE12getTimerInstEv>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		// The timer our scheduler is using has elapsed!
		scheduler.update();
 8005cdc:	4803      	ldr	r0, [pc, #12]	; (8005cec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005cde:	f000 f821 	bl	8005d24 <_ZN10TaskMasterILi10EE6updateEv>
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200006b0 	.word	0x200006b0

08005cf0 <_ZN10TaskMasterILi10EEC1Ev>:
	// Start the interrupt routine of the timer.
	HAL_TIM_Base_Start_IT(_timer_inst);
}

template <int N>
TaskMaster<N>::TaskMaster()
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	601a      	str	r2, [r3, #0]
{

}
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <_ZN10TaskMasterILi10EE12getTimerInstEv>:
	TIM_HandleTypeDef* getTimerInst() { return _timer_inst; };
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <_ZN10TaskMasterILi10EE6updateEv>:

}

// Task Scheduling utility functions.
template <int N>
void TaskMaster<N>::update()
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
{
	for(int i = 0; i < N; i++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b09      	cmp	r3, #9
 8005d34:	dc59      	bgt.n	8005dea <_ZN10TaskMasterILi10EE6updateEv+0xc6>
	{
		// Update task only if its still alive.
		if (_taskList[i] == nullptr) continue;
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d04d      	beq.n	8005de0 <_ZN10TaskMasterILi10EE6updateEv+0xbc>

		if (_taskList[i]->getState() >= 0 )
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff ff74 	bl	8005c3c <_ZN4Task8getStateEv>
 8005d54:	4603      	mov	r3, r0
 8005d56:	43db      	mvns	r3, r3
 8005d58:	0fdb      	lsrs	r3, r3, #31
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d040      	beq.n	8005de2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		{

			// This task has expired. Mark task as ready to run.
			if(_taskList[i]->getDelay() == 0)
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff80 	bl	8005c70 <_ZN4Task8getDelayEv>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf0c      	ite	eq
 8005d76:	2301      	moveq	r3, #1
 8005d78:	2300      	movne	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01b      	beq.n	8005db8 <_ZN10TaskMasterILi10EE6updateEv+0x94>
			{
				_taskList[i]->setState(1);						// Marked as ready to run.
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff61 	bl	8005c54 <_ZN4Task8setStateEi>
				_taskList[i]->setDelay(_taskList[i]->getPeriod());
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685c      	ldr	r4, [r3, #4]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ff7c 	bl	8005ca4 <_ZN4Task9getPeriodEv>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4619      	mov	r1, r3
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff ff69 	bl	8005c88 <_ZN4Task8setDelayEm>
 8005db6:	e014      	b.n	8005de2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
			} else {
				_taskList[i]->setDelay(_taskList[i]->getDelay() - 1);					// Counting down delay time.
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	685c      	ldr	r4, [r3, #4]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff4f 	bl	8005c70 <_ZN4Task8getDelayEv>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff ff55 	bl	8005c88 <_ZN4Task8setDelayEm>
 8005dde:	e000      	b.n	8005de2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		if (_taskList[i] == nullptr) continue;
 8005de0:	bf00      	nop
	for(int i = 0; i < N; i++)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e7a2      	b.n	8005d30 <_ZN10TaskMasterILi10EE6updateEv+0xc>
			}
		}
	}
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
	...

08005df4 <_Z41__static_initialization_and_destruction_0ii>:
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d129      	bne.n	8005e58 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d124      	bne.n	8005e58 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8005e0e:	f107 0308 	add.w	r3, r7, #8
 8005e12:	4618      	mov	r0, r3
 8005e14:	f00b ff83 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005e18:	f107 0308 	add.w	r3, r7, #8
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4919      	ldr	r1, [pc, #100]	; (8005e84 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005e20:	4819      	ldr	r0, [pc, #100]	; (8005e88 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005e22:	f00c fb95 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f00b ff78 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005e30:	f107 030c 	add.w	r3, r7, #12
 8005e34:	4618      	mov	r0, r3
 8005e36:	f00b ff72 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005e3a:	f107 030c 	add.w	r3, r7, #12
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4912      	ldr	r1, [pc, #72]	; (8005e8c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005e42:	4813      	ldr	r0, [pc, #76]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005e44:	f00c fb84 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005e48:	f107 030c 	add.w	r3, r7, #12
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f00b ff67 	bl	8011d20 <_ZNSaIcED1Ev>
TaskMaster<10> scheduler;
 8005e52:	4810      	ldr	r0, [pc, #64]	; (8005e94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005e54:	f7ff ff4c 	bl	8005cf0 <_ZN10TaskMasterILi10EEC1Ev>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005e68:	480a      	ldr	r0, [pc, #40]	; (8005e94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005e6a:	f000 f815 	bl	8005e98 <_ZN10TaskMasterILi10EED1Ev>
const std::string wlcm =
 8005e6e:	4808      	ldr	r0, [pc, #32]	; (8005e90 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005e70:	f00c f9cc 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005e74:	4804      	ldr	r0, [pc, #16]	; (8005e88 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005e76:	f00c f9c9 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0801c17c 	.word	0x0801c17c
 8005e88:	20000680 	.word	0x20000680
 8005e8c:	0801c180 	.word	0x0801c180
 8005e90:	20000698 	.word	0x20000698
 8005e94:	200006b0 	.word	0x200006b0

08005e98 <_ZN10TaskMasterILi10EED1Ev>:
TaskMaster<N>::~TaskMaster()
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
}
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <_GLOBAL__sub_I_scheduler>:
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f7ff ff9c 	bl	8005df4 <_Z41__static_initialization_and_destruction_0ii>
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_GLOBAL__sub_D_scheduler>:
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7ff ff94 	bl	8005df4 <_Z41__static_initialization_and_destruction_0ii>
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f00c fadf 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005ede:	4604      	mov	r4, r0
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f00c f9a1 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f04f 33ff 	mov.w	r3, #4294967295
 8005eee:	4621      	mov	r1, r4
 8005ef0:	480a      	ldr	r0, [pc, #40]	; (8005f1c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8005ef2:	f007 f832 	bl	800cf5a <HAL_UART_Transmit>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8005efa:	f640 230d 	movw	r3, #2573	; 0xa0d
 8005efe:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8005f00:	f107 010c 	add.w	r1, r7, #12
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	2202      	movs	r2, #2
 8005f0a:	4804      	ldr	r0, [pc, #16]	; (8005f1c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8005f0c:	f007 f825 	bl	800cf5a <HAL_UART_Transmit>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	20000928 	.word	0x20000928

08005f20 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f00c fab7 	bl	801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005f2e:	4604      	mov	r4, r0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f00c f979 	bl	8012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005f36:	4603      	mov	r3, r0
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4804      	ldr	r0, [pc, #16]	; (8005f54 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8005f42:	f007 f80a 	bl	800cf5a <HAL_UART_Transmit>
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000928 	.word	0x20000928

08005f58 <_ZL5helpav>:
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
	return true;
 8005f5c:	2301      	movs	r3, #1
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	return true;
 8005f70:	2301      	movs	r3, #1
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <_ZL5echoav>:
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 8005f86:	f107 031c 	add.w	r3, r7, #28
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f00b fec7 	bl	8011d1e <_ZNSaIcEC1Ev>
 8005f90:	f107 021c 	add.w	r2, r7, #28
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	490b      	ldr	r1, [pc, #44]	; (8005fc4 <_ZL5echoav+0x44>)
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f00c fad9 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff ff95 	bl	8005ed0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f00c f92f 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005fae:	f107 031c 	add.w	r3, r7, #28
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f00b feb4 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8005fb8:	2301      	movs	r3, #1
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0801d2e4 	.word	0x0801d2e4

08005fc8 <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	println(s);
 8005fd0:	f107 0308 	add.w	r3, r7, #8
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f00c fa86 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff75 	bl	8005ed0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	4618      	mov	r0, r3
 8005fec:	f00c f90e 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8005ff0:	2301      	movs	r3, #1
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <_ZL6clearav>:
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 8006002:	f107 031c 	add.w	r3, r7, #28
 8006006:	4618      	mov	r0, r3
 8006008:	f00b fe89 	bl	8011d1e <_ZNSaIcEC1Ev>
 800600c:	f107 021c 	add.w	r2, r7, #28
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	490b      	ldr	r1, [pc, #44]	; (8006040 <_ZL6clearav+0x44>)
 8006014:	4618      	mov	r0, r3
 8006016:	f00c fa9b 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800601a:	1d3b      	adds	r3, r7, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ff7f 	bl	8005f20 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	4618      	mov	r0, r3
 8006026:	f00c f8f1 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800602a:	f107 031c 	add.w	r3, r7, #28
 800602e:	4618      	mov	r0, r3
 8006030:	f00b fe76 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8006034:	2301      	movs	r3, #1
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	0801d30c 	.word	0x0801d30c

08006044 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 800604c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006050:	4618      	mov	r0, r3
 8006052:	f00b fe64 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006056:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	490c      	ldr	r1, [pc, #48]	; (8006090 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8006060:	4618      	mov	r0, r3
 8006062:	f00c fa75 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff ff58 	bl	8005f20 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006070:	f107 030c 	add.w	r3, r7, #12
 8006074:	4618      	mov	r0, r3
 8006076:	f00c f8c9 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800607a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607e:	4618      	mov	r0, r3
 8006080:	f00b fe4e 	bl	8011d20 <_ZNSaIcED1Ev>
	return true;
 8006084:	2301      	movs	r3, #1
}
 8006086:	4618      	mov	r0, r3
 8006088:	3728      	adds	r7, #40	; 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	0801d30c 	.word	0x0801d30c

08006094 <_ZL7bannerav>:
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
	println(wlcm);
 800609a:	463b      	mov	r3, r7
 800609c:	4908      	ldr	r1, [pc, #32]	; (80060c0 <_ZL7bannerav+0x2c>)
 800609e:	4618      	mov	r0, r3
 80060a0:	f00c fa22 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060a4:	463b      	mov	r3, r7
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff ff12 	bl	8005ed0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80060ac:	463b      	mov	r3, r7
 80060ae:	4618      	mov	r0, r3
 80060b0:	f00c f8ac 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80060b4:	2301      	movs	r3, #1
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200006f8 	.word	0x200006f8

080060c4 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	println(wlcm);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4909      	ldr	r1, [pc, #36]	; (80060f8 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 80060d2:	4618      	mov	r0, r3
 80060d4:	f00c fa08 	bl	80124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fef7 	bl	8005ed0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f00c f890 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80060ec:	2301      	movs	r3, #1
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200006f8 	.word	0x200006f8

080060fc <_write>:
static void MX_USART3_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */

extern "C" int _write(int file, char *ptr, int len) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)ptr, len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	b29b      	uxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f00b f914 	bl	801133c <CDC_Transmit_FS>
    return len;
 8006114:	687b      	ldr	r3, [r7, #4]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b0ce      	sub	sp, #312	; 0x138
 8006124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006126:	f001 f9e9 	bl	80074fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800612a:	f000 f8e5 	bl	80062f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 800612e:	f000 fbbd 	bl	80068ac <_ZL11MX_DMA_Initv>
  MX_GPIO_Init();
 8006132:	f000 fbdb 	bl	80068ec <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8006136:	f000 f965 	bl	8006404 <_ZL12MX_ADC1_Initv>
  MX_FMPI2C1_Init();
 800613a:	f000 f9a1 	bl	8006480 <_ZL15MX_FMPI2C1_Initv>
  MX_I2C3_Init();
 800613e:	f000 f9df 	bl	8006500 <_ZL12MX_I2C3_Initv>
  MX_RTC_Init();
 8006142:	f000 fa11 	bl	8006568 <_ZL11MX_RTC_Initv>
  MX_TIM4_Init();
 8006146:	f000 fa39 	bl	80065bc <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 800614a:	f000 fb53 	bl	80067f4 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 800614e:	f000 fb7f 	bl	8006850 <_ZL19MX_USART3_UART_Initv>
  MX_USB_DEVICE_Init();
 8006152:	f00b f835 	bl	80111c0 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8006156:	f000 faf1 	bl	800673c <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  // Give the scheduler its timer object.
  scheduler.init(&htim5);					// Timer 5 setup to interrupt every .01ms, 100 ticks = 1ms.
 800615a:	495b      	ldr	r1, [pc, #364]	; (80062c8 <main+0x1a8>)
 800615c:	485b      	ldr	r0, [pc, #364]	; (80062cc <main+0x1ac>)
 800615e:	f000 fc3a 	bl	80069d6 <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>

  // Adding LED Blink Task...
  BlinkTask blink(0.0f, 1.0f, .00001f, 0, "status_led");	// 1Hz
 8006162:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006166:	4618      	mov	r0, r3
 8006168:	f00b fdd9 	bl	8011d1e <_ZNSaIcEC1Ev>
 800616c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8006170:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006174:	4956      	ldr	r1, [pc, #344]	; (80062d0 <main+0x1b0>)
 8006176:	4618      	mov	r0, r3
 8006178:	f00c f9ea 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800617c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006180:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006184:	2100      	movs	r1, #0
 8006186:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80062d4 <main+0x1b4>
 800618a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800618e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80062d8 <main+0x1b8>
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fc24 	bl	80029e0 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006198:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800619c:	4618      	mov	r0, r3
 800619e:	f00c f835 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80061a6:	4618      	mov	r0, r3
 80061a8:	f00b fdba 	bl	8011d20 <_ZNSaIcED1Ev>
  scheduler.push_back( &blink );
 80061ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4846      	ldr	r0, [pc, #280]	; (80062cc <main+0x1ac>)
 80061b4:	f000 fc1d 	bl	80069f2 <_ZN10TaskMasterILi10EE9push_backEP4Task>

  // Adding BMI088 Driver Task...
  BMI088 bm(0.0f, 0.00125f, .00001f, 0, "imu");	// 800Hz
 80061b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061bc:	4618      	mov	r0, r3
 80061be:	f00b fdae 	bl	8011d1e <_ZNSaIcEC1Ev>
 80061c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80061c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80061ca:	4944      	ldr	r1, [pc, #272]	; (80062dc <main+0x1bc>)
 80061cc:	4618      	mov	r0, r3
 80061ce:	f00c f9bf 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80061d2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80061d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061da:	2100      	movs	r1, #0
 80061dc:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80062d4 <main+0x1b4>
 80061e0:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80062e0 <main+0x1c0>
 80061e4:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80062d8 <main+0x1b8>
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fa fed5 	bl	8000f98 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80061ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80061f2:	4618      	mov	r0, r3
 80061f4:	f00c f80a 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80061fc:	4618      	mov	r0, r3
 80061fe:	f00b fd8f 	bl	8011d20 <_ZNSaIcED1Ev>
  if (!bm.initialize(&hfmpi2c1))
 8006202:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006206:	4937      	ldr	r1, [pc, #220]	; (80062e4 <main+0x1c4>)
 8006208:	4618      	mov	r0, r3
 800620a:	f7fb f958 	bl	80014be <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>
 800620e:	4603      	mov	r3, r0
 8006210:	f083 0301 	eor.w	r3, r3, #1
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <main+0x102>
  {
	  printf("Failed to init BMI088, verify its connected!\r\n");
 800621a:	4833      	ldr	r0, [pc, #204]	; (80062e8 <main+0x1c8>)
 800621c:	f00d f806 	bl	801322c <puts>
 8006220:	e005      	b.n	800622e <main+0x10e>
  }else{
	  scheduler.push_back( &bm );
 8006222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006226:	4619      	mov	r1, r3
 8006228:	4828      	ldr	r0, [pc, #160]	; (80062cc <main+0x1ac>)
 800622a:	f000 fbe2 	bl	80069f2 <_ZN10TaskMasterILi10EE9push_backEP4Task>
  }

  // Adding Battery Monitoring Task...
  BattMon bmon(0.0f, 0.25f, .00001f, 0, "battmon");	// 4Hz
 800622e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8006232:	4618      	mov	r0, r3
 8006234:	f00b fd73 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006238:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800623c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006240:	492a      	ldr	r1, [pc, #168]	; (80062ec <main+0x1cc>)
 8006242:	4618      	mov	r0, r3
 8006244:	f00c f984 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006248:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	2100      	movs	r1, #0
 8006250:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80062d4 <main+0x1b4>
 8006254:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8006258:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80062d8 <main+0x1b8>
 800625c:	4618      	mov	r0, r3
 800625e:	f7fb ff73 	bl	8002148 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006262:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006266:	4618      	mov	r0, r3
 8006268:	f00b ffd0 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800626c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8006270:	4618      	mov	r0, r3
 8006272:	f00b fd55 	bl	8011d20 <_ZNSaIcED1Ev>
  bmon.init(&hadc1);
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	491d      	ldr	r1, [pc, #116]	; (80062f0 <main+0x1d0>)
 800627a:	4618      	mov	r0, r3
 800627c:	f7fb ff98 	bl	80021b0 <_ZN7BattMon4initEP17ADC_HandleTypeDef>
  scheduler.push_back( &bmon );
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4811      	ldr	r0, [pc, #68]	; (80062cc <main+0x1ac>)
 8006286:	f000 fbb4 	bl	80069f2 <_ZN10TaskMasterILi10EE9push_backEP4Task>

  scheduler.start();
 800628a:	4810      	ldr	r0, [pc, #64]	; (80062cc <main+0x1ac>)
 800628c:	f000 fbda 	bl	8006a44 <_ZN10TaskMasterILi10EE5startEv>

  // Singleton console object used in parallel with task scheduler. This allows console to restart scheduler if needed.
  // If you want to interact with scheduler apps inside the console, make sure you do cs.addCommand() before starting the console.
  cs.addCommandByTask(&blink);
 8006290:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006294:	4619      	mov	r1, r3
 8006296:	4817      	ldr	r0, [pc, #92]	; (80062f4 <main+0x1d4>)
 8006298:	f7fd fc89 	bl	8003bae <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bm);
 800629c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80062a0:	4619      	mov	r1, r3
 80062a2:	4814      	ldr	r0, [pc, #80]	; (80062f4 <main+0x1d4>)
 80062a4:	f7fd fc83 	bl	8003bae <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bmon);
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4811      	ldr	r0, [pc, #68]	; (80062f4 <main+0x1d4>)
 80062ae:	f7fd fc7e 	bl	8003bae <_ZN7Console16addCommandByTaskEP4Task>
  // This starts the console app.
  cs.start();
 80062b2:	4810      	ldr	r0, [pc, #64]	; (80062f4 <main+0x1d4>)
 80062b4:	f7fd f930 	bl	8003518 <_ZN7Console5startEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 80062b8:	4804      	ldr	r0, [pc, #16]	; (80062cc <main+0x1ac>)
 80062ba:	f000 fbd0 	bl	8006a5e <_ZN10TaskMasterILi10EE11runNextTaskEv>
	cs.loop();							// This allows the console app to check if the user has input any new commands.
 80062be:	480d      	ldr	r0, [pc, #52]	; (80062f4 <main+0x1d4>)
 80062c0:	f7fd f86c 	bl	800339c <_ZN7Console4loopEv>
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 80062c4:	e7f8      	b.n	80062b8 <main+0x198>
 80062c6:	bf00      	nop
 80062c8:	200008e0 	.word	0x200008e0
 80062cc:	200006b0 	.word	0x200006b0
 80062d0:	0801d314 	.word	0x0801d314
 80062d4:	3727c5ac 	.word	0x3727c5ac
 80062d8:	00000000 	.word	0x00000000
 80062dc:	0801d320 	.word	0x0801d320
 80062e0:	3aa3d70a 	.word	0x3aa3d70a
 80062e4:	200007d8 	.word	0x200007d8
 80062e8:	0801d324 	.word	0x0801d324
 80062ec:	0801d354 	.word	0x0801d354
 80062f0:	20000790 	.word	0x20000790
 80062f4:	20000620 	.word	0x20000620

080062f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b094      	sub	sp, #80	; 0x50
 80062fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062fe:	f107 031c 	add.w	r3, r7, #28
 8006302:	2234      	movs	r2, #52	; 0x34
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f00c f9ee 	bl	80126e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 800631c:	2300      	movs	r3, #0
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <SystemClock_Config+0x104>)
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4a35      	ldr	r2, [pc, #212]	; (80063fc <SystemClock_Config+0x104>)
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632a:	6413      	str	r3, [r2, #64]	; 0x40
 800632c:	4b33      	ldr	r3, [pc, #204]	; (80063fc <SystemClock_Config+0x104>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006338:	2300      	movs	r3, #0
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4b30      	ldr	r3, [pc, #192]	; (8006400 <SystemClock_Config+0x108>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <SystemClock_Config+0x108>)
 8006342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <SystemClock_Config+0x108>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006354:	2309      	movs	r3, #9
 8006356:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800635c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006362:	2301      	movs	r3, #1
 8006364:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006366:	2302      	movs	r3, #2
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800636a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800636e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8006370:	2308      	movs	r3, #8
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8006374:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800637a:	2302      	movs	r3, #2
 800637c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800637e:	2308      	movs	r3, #8
 8006380:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8006382:	2302      	movs	r3, #2
 8006384:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006386:	f107 031c 	add.w	r3, r7, #28
 800638a:	4618      	mov	r0, r3
 800638c:	f005 fac8 	bl	800b920 <HAL_RCC_OscConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <SystemClock_Config+0xac>
	{
	Error_Handler();
 80063a0:	f000 fb14 	bl	80069cc <Error_Handler>
	}
	/** Activate the Over-Drive mode
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80063a4:	f004 fc76 	bl	800ac94 <HAL_PWREx_EnableOverDrive>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <SystemClock_Config+0xc4>
	{
	Error_Handler();
 80063b8:	f000 fb08 	bl	80069cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063bc:	230f      	movs	r3, #15
 80063be:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063c0:	2302      	movs	r3, #2
 80063c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063d2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	2105      	movs	r1, #5
 80063da:	4618      	mov	r0, r3
 80063dc:	f004 fcaa 	bl	800ad34 <HAL_RCC_ClockConfig>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf14      	ite	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	2300      	moveq	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <SystemClock_Config+0xfc>
	{
	Error_Handler();
 80063f0:	f000 faec 	bl	80069cc <Error_Handler>
	}
}
 80063f4:	bf00      	nop
 80063f6:	3750      	adds	r7, #80	; 0x50
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40023800 	.word	0x40023800
 8006400:	40007000 	.word	0x40007000

08006404 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 8006408:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 800640a:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <_ZL12MX_ADC1_Initv+0x74>)
 800640c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800640e:	4b19      	ldr	r3, [pc, #100]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006414:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006416:	4b17      	ldr	r3, [pc, #92]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800641c:	4b15      	ldr	r3, [pc, #84]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 800641e:	2201      	movs	r2, #1
 8006420:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006424:	2201      	movs	r2, #1
 8006426:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006430:	4b10      	ldr	r3, [pc, #64]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006432:	2200      	movs	r2, #0
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006438:	4a10      	ldr	r2, [pc, #64]	; (800647c <_ZL12MX_ADC1_Initv+0x78>)
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 800643e:	2200      	movs	r2, #0
 8006440:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006444:	2201      	movs	r2, #1
 8006446:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006450:	4b08      	ldr	r3, [pc, #32]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006452:	2201      	movs	r2, #1
 8006454:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006456:	4807      	ldr	r0, [pc, #28]	; (8006474 <_ZL12MX_ADC1_Initv+0x70>)
 8006458:	f001 f8e6 	bl	8007628 <HAL_ADC_Init>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf14      	ite	ne
 8006462:	2301      	movne	r3, #1
 8006464:	2300      	moveq	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <_ZL12MX_ADC1_Initv+0x6c>
	{
	Error_Handler();
 800646c:	f000 faae 	bl	80069cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000790 	.word	0x20000790
 8006478:	40012000 	.word	0x40012000
 800647c:	0f000001 	.word	0x0f000001

08006480 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	/* USER CODE END FMPI2C1_Init 0 */

	/* USER CODE BEGIN FMPI2C1_Init 1 */

	/* USER CODE END FMPI2C1_Init 1 */
	hfmpi2c1.Instance = FMPI2C1;
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <_ZL15MX_FMPI2C1_Initv+0x78>)
 8006488:	601a      	str	r2, [r3, #0]
	hfmpi2c1.Init.Timing = 0x00401650;
 800648a:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <_ZL15MX_FMPI2C1_Initv+0x7c>)
 800648e:	605a      	str	r2, [r3, #4]
	hfmpi2c1.Init.OwnAddress1 = 0;
 8006490:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
	hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006498:	2201      	movs	r2, #1
 800649a:	60da      	str	r2, [r3, #12]
	hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800649e:	2200      	movs	r2, #0
 80064a0:	611a      	str	r2, [r3, #16]
	hfmpi2c1.Init.OwnAddress2 = 0;
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	615a      	str	r2, [r3, #20]
	hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	619a      	str	r2, [r3, #24]
	hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	61da      	str	r2, [r3, #28]
	hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80064b4:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	621a      	str	r2, [r3, #32]
	if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80064ba:	480e      	ldr	r0, [pc, #56]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064bc:	f002 f9d8 	bl	8008870 <HAL_FMPI2C_Init>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <_ZL15MX_FMPI2C1_Initv+0x54>
	{
	Error_Handler();
 80064d0:	f000 fa7c 	bl	80069cc <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064d4:	2100      	movs	r1, #0
 80064d6:	4807      	ldr	r0, [pc, #28]	; (80064f4 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80064d8:	f002 feb4 	bl	8009244 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <_ZL15MX_FMPI2C1_Initv+0x70>
	{
	Error_Handler();
 80064ec:	f000 fa6e 	bl	80069cc <Error_Handler>
	}
	/* USER CODE BEGIN FMPI2C1_Init 2 */

	/* USER CODE END FMPI2C1_Init 2 */

}
 80064f0:	bf00      	nop
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200007d8 	.word	0x200007d8
 80064f8:	40006000 	.word	0x40006000
 80064fc:	00401650 	.word	0x00401650

08006500 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006506:	4a16      	ldr	r2, [pc, #88]	; (8006560 <_ZL12MX_I2C3_Initv+0x60>)
 8006508:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <_ZL12MX_I2C3_Initv+0x64>)
 800650e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006510:	4b12      	ldr	r3, [pc, #72]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006518:	2200      	movs	r2, #0
 800651a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 800651e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006522:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006526:	2200      	movs	r2, #0
 8006528:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 800652c:	2200      	movs	r2, #0
 800652e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006532:	2200      	movs	r2, #0
 8006534:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 8006538:	2200      	movs	r2, #0
 800653a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800653c:	4807      	ldr	r0, [pc, #28]	; (800655c <_ZL12MX_I2C3_Initv+0x5c>)
 800653e:	f003 f895 	bl	800966c <HAL_I2C_Init>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf14      	ite	ne
 8006548:	2301      	movne	r3, #1
 800654a:	2300      	moveq	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8006552:	f000 fa3b 	bl	80069cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000824 	.word	0x20000824
 8006560:	40005c00 	.word	0x40005c00
 8006564:	000186a0 	.word	0x000186a0

08006568 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <_ZL11MX_RTC_Initv+0x50>)
 8006570:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8006578:	4b0e      	ldr	r3, [pc, #56]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 800657a:	227f      	movs	r2, #127	; 0x7f
 800657c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800658a:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 800658c:	2200      	movs	r2, #0
 800658e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006590:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 8006592:	2200      	movs	r2, #0
 8006594:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006596:	4807      	ldr	r0, [pc, #28]	; (80065b4 <_ZL11MX_RTC_Initv+0x4c>)
 8006598:	f005 fc60 	bl	800be5c <HAL_RTC_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <_ZL11MX_RTC_Initv+0x48>
	{
	Error_Handler();
 80065ac:	f000 fa0e 	bl	80069cc <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80065b0:	bf00      	nop
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000878 	.word	0x20000878
 80065b8:	40002800 	.word	0x40002800

080065bc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	609a      	str	r2, [r3, #8]
 80065ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065d0:	f107 0320 	add.w	r3, r7, #32
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	611a      	str	r2, [r3, #16]
 80065e8:	615a      	str	r2, [r3, #20]
 80065ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80065ec:	4b51      	ldr	r3, [pc, #324]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80065ee:	4a52      	ldr	r2, [pc, #328]	; (8006738 <_ZL12MX_TIM4_Initv+0x17c>)
 80065f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80065f2:	4b50      	ldr	r3, [pc, #320]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80065f4:	2208      	movs	r2, #8
 80065f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f8:	4b4e      	ldr	r3, [pc, #312]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 22221;
 80065fe:	4b4d      	ldr	r3, [pc, #308]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 8006600:	f245 62cd 	movw	r2, #22221	; 0x56cd
 8006604:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006606:	4b4b      	ldr	r3, [pc, #300]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800660c:	4b49      	ldr	r3, [pc, #292]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 800660e:	2200      	movs	r2, #0
 8006610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006612:	4848      	ldr	r0, [pc, #288]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 8006614:	f005 fd07 	bl	800c026 <HAL_TIM_Base_Init>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	bf14      	ite	ne
 800661e:	2301      	movne	r3, #1
 8006620:	2300      	moveq	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8006628:	f000 f9d0 	bl	80069cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800662c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006636:	4619      	mov	r1, r3
 8006638:	483e      	ldr	r0, [pc, #248]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 800663a:	f005 ffd7 	bl	800c5ec <HAL_TIM_ConfigClockSource>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 800664e:	f000 f9bd 	bl	80069cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006652:	4838      	ldr	r0, [pc, #224]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 8006654:	f005 fda6 	bl	800c1a4 <HAL_TIM_PWM_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8006668:	f000 f9b0 	bl	80069cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800666c:	2300      	movs	r3, #0
 800666e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006674:	f107 0320 	add.w	r3, r7, #32
 8006678:	4619      	mov	r1, r3
 800667a:	482e      	ldr	r0, [pc, #184]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 800667c:	f006 fb90 	bl	800cda0 <HAL_TIMEx_MasterConfigSynchronization>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8006690:	f000 f99c 	bl	80069cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006694:	2360      	movs	r3, #96	; 0x60
 8006696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8006698:	f242 7310 	movw	r3, #10000	; 0x2710
 800669c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	2200      	movs	r2, #0
 80066aa:	4619      	mov	r1, r3
 80066ac:	4821      	ldr	r0, [pc, #132]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80066ae:	f005 fedb 	bl	800c468 <HAL_TIM_PWM_ConfigChannel>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 80066c2:	f000 f983 	bl	80069cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	2204      	movs	r2, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4819      	ldr	r0, [pc, #100]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80066ce:	f005 fecb 	bl	800c468 <HAL_TIM_PWM_ConfigChannel>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 80066e2:	f000 f973 	bl	80069cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	2208      	movs	r2, #8
 80066ea:	4619      	mov	r1, r3
 80066ec:	4811      	ldr	r0, [pc, #68]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 80066ee:	f005 febb 	bl	800c468 <HAL_TIM_PWM_ConfigChannel>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <_ZL12MX_TIM4_Initv+0x14a>
  {
    Error_Handler();
 8006702:	f000 f963 	bl	80069cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006706:	1d3b      	adds	r3, r7, #4
 8006708:	220c      	movs	r2, #12
 800670a:	4619      	mov	r1, r3
 800670c:	4809      	ldr	r0, [pc, #36]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 800670e:	f005 feab 	bl	800c468 <HAL_TIM_PWM_ConfigChannel>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 8006722:	f000 f953 	bl	80069cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006726:	4803      	ldr	r0, [pc, #12]	; (8006734 <_ZL12MX_TIM4_Initv+0x178>)
 8006728:	f000 fc9c 	bl	8007064 <HAL_TIM_MspPostInit>

}
 800672c:	bf00      	nop
 800672e:	3738      	adds	r7, #56	; 0x38
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000898 	.word	0x20000898
 8006738:	40000800 	.word	0x40000800

0800673c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006750:	463b      	mov	r3, r7
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006758:	4b24      	ldr	r3, [pc, #144]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 800675a:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <_ZL12MX_TIM5_Initv+0xb4>)
 800675c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8;
 800675e:	4b23      	ldr	r3, [pc, #140]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 8006760:	2208      	movs	r2, #8
 8006762:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006764:	4b21      	ldr	r3, [pc, #132]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 8006766:	2200      	movs	r2, #0
 8006768:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 800676c:	2263      	movs	r2, #99	; 0x63
 800676e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 8006772:	2200      	movs	r2, #0
 8006774:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006776:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800677c:	481b      	ldr	r0, [pc, #108]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 800677e:	f005 fc52 	bl	800c026 <HAL_TIM_Base_Init>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <_ZL12MX_TIM5_Initv+0x5a>
  {
    Error_Handler();
 8006792:	f000 f91b 	bl	80069cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800679a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800679c:	f107 0308 	add.w	r3, r7, #8
 80067a0:	4619      	mov	r1, r3
 80067a2:	4812      	ldr	r0, [pc, #72]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 80067a4:	f005 ff22 	bl	800c5ec <HAL_TIM_ConfigClockSource>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf14      	ite	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	2300      	moveq	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <_ZL12MX_TIM5_Initv+0x80>
  {
    Error_Handler();
 80067b8:	f000 f908 	bl	80069cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067bc:	2300      	movs	r3, #0
 80067be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80067c4:	463b      	mov	r3, r7
 80067c6:	4619      	mov	r1, r3
 80067c8:	4808      	ldr	r0, [pc, #32]	; (80067ec <_ZL12MX_TIM5_Initv+0xb0>)
 80067ca:	f006 fae9 	bl	800cda0 <HAL_TIMEx_MasterConfigSynchronization>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <_ZL12MX_TIM5_Initv+0xa6>
  {
    Error_Handler();
 80067de:	f000 f8f5 	bl	80069cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80067e2:	bf00      	nop
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200008e0 	.word	0x200008e0
 80067f0:	40000c00 	.word	0x40000c00

080067f4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 80067fa:	4a14      	ldr	r2, [pc, #80]	; (800684c <_ZL19MX_USART1_UART_Initv+0x58>)
 80067fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006808:	2200      	movs	r2, #0
 800680a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800680c:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 800680e:	2200      	movs	r2, #0
 8006810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006812:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006814:	2200      	movs	r2, #0
 8006816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 800681a:	220c      	movs	r2, #12
 800681c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006820:	2200      	movs	r2, #0
 8006822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006826:	2200      	movs	r2, #0
 8006828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800682a:	4807      	ldr	r0, [pc, #28]	; (8006848 <_ZL19MX_USART1_UART_Initv+0x54>)
 800682c:	f006 fb48 	bl	800cec0 <HAL_UART_Init>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf14      	ite	ne
 8006836:	2301      	movne	r3, #1
 8006838:	2300      	moveq	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006840:	f000 f8c4 	bl	80069cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006844:	bf00      	nop
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20000928 	.word	0x20000928
 800684c:	40011000 	.word	0x40011000

08006850 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006854:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8006858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800685c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006864:	2200      	movs	r2, #0
 8006866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800686a:	2200      	movs	r2, #0
 800686c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006870:	2200      	movs	r2, #0
 8006872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006876:	220c      	movs	r2, #12
 8006878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800687c:	2200      	movs	r2, #0
 800687e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006882:	2200      	movs	r2, #0
 8006884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006886:	4807      	ldr	r0, [pc, #28]	; (80068a4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8006888:	f006 fb1a 	bl	800cec0 <HAL_UART_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 800689c:	f000 f896 	bl	80069cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80068a0:	bf00      	nop
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	2000096c 	.word	0x2000096c
 80068a8:	40004800 	.word	0x40004800

080068ac <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80068b2:	2300      	movs	r3, #0
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <_ZL11MX_DMA_Initv+0x3c>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <_ZL11MX_DMA_Initv+0x3c>)
 80068bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068c0:	6313      	str	r3, [r2, #48]	; 0x30
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <_ZL11MX_DMA_Initv+0x3c>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	203a      	movs	r0, #58	; 0x3a
 80068d4:	f001 fb93 	bl	8007ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80068d8:	203a      	movs	r0, #58	; 0x3a
 80068da:	f001 fbac 	bl	8008036 <HAL_NVIC_EnableIRQ>

}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40023800 	.word	0x40023800

080068ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	609a      	str	r2, [r3, #8]
 80068fe:	60da      	str	r2, [r3, #12]
 8006900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4a2e      	ldr	r2, [pc, #184]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 800690c:	f043 0304 	orr.w	r3, r3, #4
 8006910:	6313      	str	r3, [r2, #48]	; 0x30
 8006912:	4b2c      	ldr	r3, [pc, #176]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692c:	6313      	str	r3, [r2, #48]	; 0x30
 800692e:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	4a20      	ldr	r2, [pc, #128]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	6313      	str	r3, [r2, #48]	; 0x30
 800694a:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006960:	f043 0302 	orr.w	r3, r3, #2
 8006964:	6313      	str	r3, [r2, #48]	; 0x30
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <_ZL12MX_GPIO_Initv+0xd8>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_LED_Pin|USR_LED_Pin, GPIO_PIN_RESET);
 8006972:	2200      	movs	r2, #0
 8006974:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8006978:	4813      	ldr	r0, [pc, #76]	; (80069c8 <_ZL12MX_GPIO_Initv+0xdc>)
 800697a:	f002 fe43 	bl	8009604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800697e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006984:	2301      	movs	r3, #1
 8006986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800698c:	2300      	movs	r3, #0
 800698e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	4619      	mov	r1, r3
 8006996:	480c      	ldr	r0, [pc, #48]	; (80069c8 <_ZL12MX_GPIO_Initv+0xdc>)
 8006998:	f002 fca0 	bl	80092dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800699c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a2:	2301      	movs	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069aa:	2302      	movs	r3, #2
 80069ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	4619      	mov	r1, r3
 80069b4:	4804      	ldr	r0, [pc, #16]	; (80069c8 <_ZL12MX_GPIO_Initv+0xdc>)
 80069b6:	f002 fc91 	bl	80092dc <HAL_GPIO_Init>

}
 80069ba:	bf00      	nop
 80069bc:	3728      	adds	r7, #40	; 0x28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40020400 	.word	0x40020400

080069cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80069d0:	b672      	cpsid	i
}
 80069d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80069d4:	e7fe      	b.n	80069d4 <Error_Handler+0x8>

080069d6 <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>:
void TaskMaster<N>::init(TIM_HandleTypeDef* htim)
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
	_timer_inst = htim;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <_ZN10TaskMasterILi10EE9push_backEP4Task>:
	}
}

// Adding and removing tasks.
template <int N>
bool TaskMaster<N>::push_back(Task* new_task)
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
{
	for(int i = 0; i < N; i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b09      	cmp	r3, #9
 8006a04:	dc17      	bgt.n	8006a36 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x44>
	{
		// If task pointer has not been assigned, lets use that one before trying to dereference a nullptr.
		if (_taskList[i] == nullptr)
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <_ZN10TaskMasterILi10EE9push_backEP4Task+0x3c>
		{
			_taskList[i] = new_task;
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	605a      	str	r2, [r3, #4]
			_openTasks--;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
			return true;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e004      	b.n	8006a38 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x46>
	for(int i = 0; i < N; i++)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e7e4      	b.n	8006a00 <_ZN10TaskMasterILi10EE9push_backEP4Task+0xe>
		}

	}

	// All tasks are occupied, increase number of allowable tasks in task_constructor.
	return false;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <_ZN10TaskMasterILi10EE5startEv>:
void TaskMaster<N>::start()
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(_timer_inst);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4618      	mov	r0, r3
 8006a52:	f005 fb37 	bl	800c0c4 <HAL_TIM_Base_Start_IT>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZN10TaskMasterILi10EE11runNextTaskEv>:
void TaskMaster<N>::runNextTask()
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < N; i++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	dc5b      	bgt.n	8006b28 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xca>
		if (_taskList[i] == nullptr) continue;
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04f      	beq.n	8006b1e <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc0>
		if (_taskList[i]->getState() == 1 )
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff f8d7 	bl	8005c3c <_ZN4Task8getStateEv>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d040      	beq.n	8006b20 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
			_taskList[i]->setState(2);							// Mark task as running.
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f8d2 	bl	8005c54 <_ZN4Task8setStateEi>
			_taskList[i]->taskFunction();						// Run the overloaded task function.
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	6859      	ldr	r1, [r3, #4]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4798      	blx	r3
			_taskList[i]->setState(0);							// Mark as idle.
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff f8bb 	bl	8005c54 <_ZN4Task8setStateEi>
			if (_taskList[i]->getPeriod() == 0)
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff f8db 	bl	8005ca4 <_ZN4Task9getPeriodEv>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bf0c      	ite	eq
 8006af4:	2301      	moveq	r3, #1
 8006af6:	2300      	movne	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d010      	beq.n	8006b20 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
				_taskList[i]->setState(-1);					// Mark task as dead.
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff f8a1 	bl	8005c54 <_ZN4Task8setStateEi>
				_openTasks++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e000      	b.n	8006b20 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
		if (_taskList[i] == nullptr) continue;
 8006b1e:	bf00      	nop
	for(int i = 0; i < N; i++)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e7a0      	b.n	8006a6a <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc>
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b0a0      	sub	sp, #128	; 0x80
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f040 80a0 	bne.w	8006c82 <_Z41__static_initialization_and_destruction_0ii+0x152>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	f040 809a 	bne.w	8006c82 <_Z41__static_initialization_and_destruction_0ii+0x152>
const std::string cursor = "> ";
 8006b4e:	f107 0308 	add.w	r3, r7, #8
 8006b52:	4618      	mov	r0, r3
 8006b54:	f00b f8e3 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4958      	ldr	r1, [pc, #352]	; (8006cc0 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8006b60:	4858      	ldr	r0, [pc, #352]	; (8006cc4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8006b62:	f00b fcf5 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f00b f8d8 	bl	8011d20 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006b70:	f107 030c 	add.w	r3, r7, #12
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00b f8d2 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006b7a:	f107 030c 	add.w	r3, r7, #12
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4951      	ldr	r1, [pc, #324]	; (8006cc8 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8006b82:	4852      	ldr	r0, [pc, #328]	; (8006ccc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8006b84:	f00b fce4 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f00b f8c7 	bl	8011d20 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 8006b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b96:	4618      	mov	r0, r3
 8006b98:	f00b f8c1 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006b9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	494a      	ldr	r1, [pc, #296]	; (8006cd0 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f00b fcd2 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006bac:	f107 0110 	add.w	r1, r7, #16
 8006bb0:	4b48      	ldr	r3, [pc, #288]	; (8006cd4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8006bb2:	4a49      	ldr	r2, [pc, #292]	; (8006cd8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8006bb4:	4849      	ldr	r0, [pc, #292]	; (8006cdc <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8006bb6:	f7fb ffad 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8006bba:	f107 0310 	add.w	r3, r7, #16
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f00b fb24 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f00b f8a9 	bl	8011d20 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 8006bce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f00b f8a3 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006bd8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be0:	493f      	ldr	r1, [pc, #252]	; (8006ce0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f00b fcb4 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006be8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006bec:	4b3d      	ldr	r3, [pc, #244]	; (8006ce4 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8006bee:	4a3e      	ldr	r2, [pc, #248]	; (8006ce8 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8006bf0:	483e      	ldr	r0, [pc, #248]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8006bf2:	f7fb ff8f 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8006bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f00b fb06 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c04:	4618      	mov	r0, r3
 8006c06:	f00b f88b 	bl	8011d20 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 8006c0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f00b f885 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006c14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c1c:	4934      	ldr	r1, [pc, #208]	; (8006cf0 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f00b fc96 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006c28:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8006c2a:	4a33      	ldr	r2, [pc, #204]	; (8006cf8 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8006c2c:	4833      	ldr	r0, [pc, #204]	; (8006cfc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8006c2e:	f7fb ff71 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8006c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c36:	4618      	mov	r0, r3
 8006c38:	f00b fae8 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006c40:	4618      	mov	r0, r3
 8006c42:	f00b f86d 	bl	8011d20 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 8006c46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f00b f867 	bl	8011d1e <_ZNSaIcEC1Ev>
 8006c50:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006c54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c58:	4929      	ldr	r1, [pc, #164]	; (8006d00 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f00b fc78 	bl	8012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c60:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8006c66:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8006c68:	4828      	ldr	r0, [pc, #160]	; (8006d0c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8006c6a:	f7fb ff53 	bl	8002b14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8006c6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c72:	4618      	mov	r0, r3
 8006c74:	f00b faca 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f00b f84f 	bl	8011d20 <_ZNSaIcED1Ev>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d116      	bne.n	8006cb6 <_Z41__static_initialization_and_destruction_0ii+0x186>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d111      	bne.n	8006cb6 <_Z41__static_initialization_and_destruction_0ii+0x186>
 8006c92:	481e      	ldr	r0, [pc, #120]	; (8006d0c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8006c94:	f7fb ff5b 	bl	8002b4e <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8006c98:	4818      	ldr	r0, [pc, #96]	; (8006cfc <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8006c9a:	f7fb ff58 	bl	8002b4e <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 8006c9e:	4813      	ldr	r0, [pc, #76]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8006ca0:	f7fb ff55 	bl	8002b4e <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 8006ca4:	480d      	ldr	r0, [pc, #52]	; (8006cdc <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8006ca6:	f7fb ff52 	bl	8002b4e <_ZN7commandD1Ev>
const std::string wlcm =
 8006caa:	4808      	ldr	r0, [pc, #32]	; (8006ccc <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8006cac:	f00b faae 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8006cb0:	4804      	ldr	r0, [pc, #16]	; (8006cc4 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8006cb2:	f00b faab 	bl	801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006cb6:	bf00      	nop
 8006cb8:	3780      	adds	r7, #128	; 0x80
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	0801d35c 	.word	0x0801d35c
 8006cc4:	200006e0 	.word	0x200006e0
 8006cc8:	0801d360 	.word	0x0801d360
 8006ccc:	200006f8 	.word	0x200006f8
 8006cd0:	0801e4c0 	.word	0x0801e4c0
 8006cd4:	08005f69 	.word	0x08005f69
 8006cd8:	08005f59 	.word	0x08005f59
 8006cdc:	20000710 	.word	0x20000710
 8006ce0:	0801e4c8 	.word	0x0801e4c8
 8006ce4:	08005fc9 	.word	0x08005fc9
 8006ce8:	08005f81 	.word	0x08005f81
 8006cec:	20000730 	.word	0x20000730
 8006cf0:	0801e4d0 	.word	0x0801e4d0
 8006cf4:	08006045 	.word	0x08006045
 8006cf8:	08005ffd 	.word	0x08005ffd
 8006cfc:	20000750 	.word	0x20000750
 8006d00:	0801e4d8 	.word	0x0801e4d8
 8006d04:	080060c5 	.word	0x080060c5
 8006d08:	08006095 	.word	0x08006095
 8006d0c:	20000770 	.word	0x20000770

08006d10 <_GLOBAL__sub_I_hadc1>:
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d18:	2001      	movs	r0, #1
 8006d1a:	f7ff ff09 	bl	8006b30 <_Z41__static_initialization_and_destruction_0ii>
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_GLOBAL__sub_D_hadc1>:
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f7ff ff01 	bl	8006b30 <_Z41__static_initialization_and_destruction_0ii>
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]
 8006d3a:	4b10      	ldr	r3, [pc, #64]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	4a0f      	ldr	r2, [pc, #60]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d44:	6453      	str	r3, [r2, #68]	; 0x44
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d4e:	607b      	str	r3, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	4a08      	ldr	r2, [pc, #32]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	6413      	str	r3, [r2, #64]	; 0x40
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_MspInit+0x4c>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800

08006d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	609a      	str	r2, [r3, #8]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <HAL_ADC_MspInit+0x7c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d127      	bne.n	8006df2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db0:	6453      	str	r3, [r2, #68]	; 0x44
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	4a0e      	ldr	r2, [pc, #56]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006dc8:	f043 0301 	orr.w	r3, r3, #1
 8006dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dce:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <HAL_ADC_MspInit+0x80>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006dda:	23f0      	movs	r3, #240	; 0xf0
 8006ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dde:	2303      	movs	r3, #3
 8006de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4619      	mov	r1, r3
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <HAL_ADC_MspInit+0x84>)
 8006dee:	f002 fa75 	bl	80092dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006df2:	bf00      	nop
 8006df4:	3728      	adds	r7, #40	; 0x28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40012000 	.word	0x40012000
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40020000 	.word	0x40020000

08006e08 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b0a0      	sub	sp, #128	; 0x80
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e20:	f107 0310 	add.w	r3, r7, #16
 8006e24:	225c      	movs	r2, #92	; 0x5c
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f00b fc5d 	bl	80126e8 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <HAL_FMPI2C_MspInit+0xac>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d139      	bne.n	8006eac <HAL_FMPI2C_MspInit+0xa4>
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f004 f88f 	bl	800af68 <HAL_RCCEx_PeriphCLKConfig>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8006e50:	f7ff fdbc 	bl	80069cc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	4a16      	ldr	r2, [pc, #88]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006e5e:	f043 0304 	orr.w	r3, r3, #4
 8006e62:	6313      	str	r3, [r2, #48]	; 0x30
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e70:	23c0      	movs	r3, #192	; 0xc0
 8006e72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e74:	2312      	movs	r3, #18
 8006e76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8006e80:	2304      	movs	r3, #4
 8006e82:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e88:	4619      	mov	r1, r3
 8006e8a:	480c      	ldr	r0, [pc, #48]	; (8006ebc <HAL_FMPI2C_MspInit+0xb4>)
 8006e8c:	f002 fa26 	bl	80092dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8006e90:	2300      	movs	r3, #0
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <HAL_FMPI2C_MspInit+0xb0>)
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8006eac:	bf00      	nop
 8006eae:	3780      	adds	r7, #128	; 0x80
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40006000 	.word	0x40006000
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40020800 	.word	0x40020800

08006ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec8:	f107 0314 	add.w	r3, r7, #20
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a29      	ldr	r2, [pc, #164]	; (8006f84 <HAL_I2C_MspInit+0xc4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d14b      	bne.n	8006f7a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006eec:	f043 0304 	orr.w	r3, r3, #4
 8006ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef2:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b21      	ldr	r3, [pc, #132]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a20      	ldr	r2, [pc, #128]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f20:	2312      	movs	r3, #18
 8006f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4619      	mov	r1, r3
 8006f36:	4815      	ldr	r0, [pc, #84]	; (8006f8c <HAL_I2C_MspInit+0xcc>)
 8006f38:	f002 f9d0 	bl	80092dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f42:	2312      	movs	r3, #18
 8006f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006f4e:	2304      	movs	r3, #4
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	4619      	mov	r1, r3
 8006f58:	480d      	ldr	r0, [pc, #52]	; (8006f90 <HAL_I2C_MspInit+0xd0>)
 8006f5a:	f002 f9bf 	bl	80092dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <HAL_I2C_MspInit+0xc8>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006f7a:	bf00      	nop
 8006f7c:	3728      	adds	r7, #40	; 0x28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40005c00 	.word	0x40005c00
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40020800 	.word	0x40020800
 8006f90:	40020000 	.word	0x40020000

08006f94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b09a      	sub	sp, #104	; 0x68
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f9c:	f107 030c 	add.w	r3, r7, #12
 8006fa0:	225c      	movs	r2, #92	; 0x5c
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f00b fb9f 	bl	80126e8 <memset>
  if(hrtc->Instance==RTC)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <HAL_RTC_MspInit+0x4c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d111      	bne.n	8006fd8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006fb4:	2320      	movs	r3, #32
 8006fb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fbe:	f107 030c 	add.w	r3, r7, #12
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f003 ffd0 	bl	800af68 <HAL_RCCEx_PeriphCLKConfig>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006fce:	f7ff fcfd 	bl	80069cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_RTC_MspInit+0x50>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006fd8:	bf00      	nop
 8006fda:	3768      	adds	r7, #104	; 0x68
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40002800 	.word	0x40002800
 8006fe4:	42470e3c 	.word	0x42470e3c

08006fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_TIM_Base_MspInit+0x70>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d10e      	bne.n	8007018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	4b17      	ldr	r3, [pc, #92]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 8007004:	f043 0304 	orr.w	r3, r3, #4
 8007008:	6413      	str	r3, [r2, #64]	; 0x40
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007016:	e01a      	b.n	800704e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a10      	ldr	r2, [pc, #64]	; (8007060 <HAL_TIM_Base_MspInit+0x78>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d115      	bne.n	800704e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	4b0d      	ldr	r3, [pc, #52]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	4a0c      	ldr	r2, [pc, #48]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 800702c:	f043 0308 	orr.w	r3, r3, #8
 8007030:	6413      	str	r3, [r2, #64]	; 0x40
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <HAL_TIM_Base_MspInit+0x74>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	2032      	movs	r0, #50	; 0x32
 8007044:	f000 ffdb 	bl	8007ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007048:	2032      	movs	r0, #50	; 0x32
 800704a:	f000 fff4 	bl	8008036 <HAL_NVIC_EnableIRQ>
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40000800 	.word	0x40000800
 800705c:	40023800 	.word	0x40023800
 8007060:	40000c00 	.word	0x40000c00

08007064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800706c:	f107 030c 	add.w	r3, r7, #12
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	609a      	str	r2, [r3, #8]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a12      	ldr	r2, [pc, #72]	; (80070cc <HAL_TIM_MspPostInit+0x68>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d11e      	bne.n	80070c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <HAL_TIM_MspPostInit+0x6c>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4a10      	ldr	r2, [pc, #64]	; (80070d0 <HAL_TIM_MspPostInit+0x6c>)
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	6313      	str	r3, [r2, #48]	; 0x30
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <HAL_TIM_MspPostInit+0x6c>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80070a2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80070a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a8:	2302      	movs	r3, #2
 80070aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80070b4:	2302      	movs	r3, #2
 80070b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	4619      	mov	r1, r3
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <HAL_TIM_MspPostInit+0x70>)
 80070c0:	f002 f90c 	bl	80092dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80070c4:	bf00      	nop
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40023800 	.word	0x40023800
 80070d4:	40020400 	.word	0x40020400

080070d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08c      	sub	sp, #48	; 0x30
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e0:	f107 031c 	add.w	r3, r7, #28
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	609a      	str	r2, [r3, #8]
 80070ec:	60da      	str	r2, [r3, #12]
 80070ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a5d      	ldr	r2, [pc, #372]	; (800726c <HAL_UART_MspInit+0x194>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d163      	bne.n	80071c2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	4b5c      	ldr	r3, [pc, #368]	; (8007270 <HAL_UART_MspInit+0x198>)
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	4a5b      	ldr	r2, [pc, #364]	; (8007270 <HAL_UART_MspInit+0x198>)
 8007104:	f043 0310 	orr.w	r3, r3, #16
 8007108:	6453      	str	r3, [r2, #68]	; 0x44
 800710a:	4b59      	ldr	r3, [pc, #356]	; (8007270 <HAL_UART_MspInit+0x198>)
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	4b55      	ldr	r3, [pc, #340]	; (8007270 <HAL_UART_MspInit+0x198>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	4a54      	ldr	r2, [pc, #336]	; (8007270 <HAL_UART_MspInit+0x198>)
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	6313      	str	r3, [r2, #48]	; 0x30
 8007126:	4b52      	ldr	r3, [pc, #328]	; (8007270 <HAL_UART_MspInit+0x198>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007138:	2302      	movs	r3, #2
 800713a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713c:	2300      	movs	r3, #0
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007140:	2303      	movs	r3, #3
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007144:	2307      	movs	r3, #7
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007148:	f107 031c 	add.w	r3, r7, #28
 800714c:	4619      	mov	r1, r3
 800714e:	4849      	ldr	r0, [pc, #292]	; (8007274 <HAL_UART_MspInit+0x19c>)
 8007150:	f002 f8c4 	bl	80092dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8007154:	4b48      	ldr	r3, [pc, #288]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007156:	4a49      	ldr	r2, [pc, #292]	; (800727c <HAL_UART_MspInit+0x1a4>)
 8007158:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 800715c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007160:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007162:	4b45      	ldr	r3, [pc, #276]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007164:	2200      	movs	r2, #0
 8007166:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007168:	4b43      	ldr	r3, [pc, #268]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 800716a:	2200      	movs	r2, #0
 800716c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800716e:	4b42      	ldr	r3, [pc, #264]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007174:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007176:	4b40      	ldr	r3, [pc, #256]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007178:	2200      	movs	r2, #0
 800717a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800717c:	4b3e      	ldr	r3, [pc, #248]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 800717e:	2200      	movs	r2, #0
 8007180:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007182:	4b3d      	ldr	r3, [pc, #244]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007184:	2200      	movs	r2, #0
 8007186:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007188:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 800718a:	2200      	movs	r2, #0
 800718c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800718e:	4b3a      	ldr	r3, [pc, #232]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007190:	2200      	movs	r2, #0
 8007192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007194:	4838      	ldr	r0, [pc, #224]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 8007196:	f000 ff69 	bl	800806c <HAL_DMA_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80071a0:	f7ff fc14 	bl	80069cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a34      	ldr	r2, [pc, #208]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
 80071aa:	4a33      	ldr	r2, [pc, #204]	; (8007278 <HAL_UART_MspInit+0x1a0>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	2025      	movs	r0, #37	; 0x25
 80071b6:	f000 ff22 	bl	8007ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80071ba:	2025      	movs	r0, #37	; 0x25
 80071bc:	f000 ff3b 	bl	8008036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80071c0:	e04f      	b.n	8007262 <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2e      	ldr	r2, [pc, #184]	; (8007280 <HAL_UART_MspInit+0x1a8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d14a      	bne.n	8007262 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	4a26      	ldr	r2, [pc, #152]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071da:	6413      	str	r3, [r2, #64]	; 0x40
 80071dc:	4b24      	ldr	r3, [pc, #144]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071f2:	f043 0304 	orr.w	r3, r3, #4
 80071f6:	6313      	str	r3, [r2, #48]	; 0x30
 80071f8:	4b1d      	ldr	r3, [pc, #116]	; (8007270 <HAL_UART_MspInit+0x198>)
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_UART_MspInit+0x198>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_UART_MspInit+0x198>)
 800720e:	f043 0302 	orr.w	r3, r3, #2
 8007212:	6313      	str	r3, [r2, #48]	; 0x30
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <HAL_UART_MspInit+0x198>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007220:	2320      	movs	r3, #32
 8007222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007224:	2302      	movs	r3, #2
 8007226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007228:	2300      	movs	r3, #0
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800722c:	2303      	movs	r3, #3
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007230:	2307      	movs	r3, #7
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007234:	f107 031c 	add.w	r3, r7, #28
 8007238:	4619      	mov	r1, r3
 800723a:	4812      	ldr	r0, [pc, #72]	; (8007284 <HAL_UART_MspInit+0x1ac>)
 800723c:	f002 f84e 	bl	80092dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007246:	2302      	movs	r3, #2
 8007248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800724e:	2303      	movs	r3, #3
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007252:	2307      	movs	r3, #7
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007256:	f107 031c 	add.w	r3, r7, #28
 800725a:	4619      	mov	r1, r3
 800725c:	480a      	ldr	r0, [pc, #40]	; (8007288 <HAL_UART_MspInit+0x1b0>)
 800725e:	f002 f83d 	bl	80092dc <HAL_GPIO_Init>
}
 8007262:	bf00      	nop
 8007264:	3730      	adds	r7, #48	; 0x30
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40011000 	.word	0x40011000
 8007270:	40023800 	.word	0x40023800
 8007274:	40020000 	.word	0x40020000
 8007278:	200009b0 	.word	0x200009b0
 800727c:	40026440 	.word	0x40026440
 8007280:	40004800 	.word	0x40004800
 8007284:	40020800 	.word	0x40020800
 8007288:	40020400 	.word	0x40020400

0800728c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007290:	e7fe      	b.n	8007290 <NMI_Handler+0x4>

08007292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007292:	b480      	push	{r7}
 8007294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007296:	e7fe      	b.n	8007296 <HardFault_Handler+0x4>

08007298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800729c:	e7fe      	b.n	800729c <MemManage_Handler+0x4>

0800729e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072a2:	e7fe      	b.n	80072a2 <BusFault_Handler+0x4>

080072a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072a8:	e7fe      	b.n	80072a8 <UsageFault_Handler+0x4>

080072aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072bc:	bf00      	nop
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072c6:	b480      	push	{r7}
 80072c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072ca:	bf00      	nop
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072d8:	f000 f962 	bl	80075a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072dc:	bf00      	nop
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80072e4:	4802      	ldr	r0, [pc, #8]	; (80072f0 <USART1_IRQHandler+0x10>)
 80072e6:	f005 fefb 	bl	800d0e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000928 	.word	0x20000928

080072f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80072f8:	4802      	ldr	r0, [pc, #8]	; (8007304 <TIM5_IRQHandler+0x10>)
 80072fa:	f004 ffac 	bl	800c256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200008e0 	.word	0x200008e0

08007308 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800730c:	4802      	ldr	r0, [pc, #8]	; (8007318 <DMA2_Stream2_IRQHandler+0x10>)
 800730e:	f001 f845 	bl	800839c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007312:	bf00      	nop
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200009b0 	.word	0x200009b0

0800731c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007320:	4802      	ldr	r0, [pc, #8]	; (800732c <OTG_FS_IRQHandler+0x10>)
 8007322:	f002 fc3e 	bl	8009ba2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20002118 	.word	0x20002118

08007330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
	return 1;
 8007334:	2301      	movs	r3, #1
}
 8007336:	4618      	mov	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <_kill>:

int _kill(int pid, int sig)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800734a:	f00b f95d 	bl	8012608 <__errno>
 800734e:	4603      	mov	r3, r0
 8007350:	2216      	movs	r2, #22
 8007352:	601a      	str	r2, [r3, #0]
	return -1;
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <_exit>:

void _exit (int status)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007368:	f04f 31ff 	mov.w	r1, #4294967295
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ffe7 	bl	8007340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007372:	e7fe      	b.n	8007372 <_exit+0x12>

08007374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	e00a      	b.n	800739c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007386:	f3af 8000 	nop.w
 800738a:	4601      	mov	r1, r0
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	60ba      	str	r2, [r7, #8]
 8007392:	b2ca      	uxtb	r2, r1
 8007394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	3301      	adds	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	dbf0      	blt.n	8007386 <_read+0x12>
	}

return len;
 80073a4:	687b      	ldr	r3, [r7, #4]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
	return -1;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073d6:	605a      	str	r2, [r3, #4]
	return 0;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_isatty>:

int _isatty(int file)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
	return 1;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
	return 0;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007420:	4a14      	ldr	r2, [pc, #80]	; (8007474 <_sbrk+0x5c>)
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <_sbrk+0x60>)
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800742c:	4b13      	ldr	r3, [pc, #76]	; (800747c <_sbrk+0x64>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007434:	4b11      	ldr	r3, [pc, #68]	; (800747c <_sbrk+0x64>)
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <_sbrk+0x68>)
 8007438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800743a:	4b10      	ldr	r3, [pc, #64]	; (800747c <_sbrk+0x64>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	429a      	cmp	r2, r3
 8007446:	d207      	bcs.n	8007458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007448:	f00b f8de 	bl	8012608 <__errno>
 800744c:	4603      	mov	r3, r0
 800744e:	220c      	movs	r2, #12
 8007450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295
 8007456:	e009      	b.n	800746c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007458:	4b08      	ldr	r3, [pc, #32]	; (800747c <_sbrk+0x64>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <_sbrk+0x64>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	4a05      	ldr	r2, [pc, #20]	; (800747c <_sbrk+0x64>)
 8007468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20020000 	.word	0x20020000
 8007478:	00000400 	.word	0x00000400
 800747c:	20000a10 	.word	0x20000a10
 8007480:	20002530 	.word	0x20002530

08007484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <SystemInit+0x20>)
 800748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748e:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <SystemInit+0x20>)
 8007490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	e000ed00 	.word	0xe000ed00

080074a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80074a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80074ac:	480d      	ldr	r0, [pc, #52]	; (80074e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80074ae:	490e      	ldr	r1, [pc, #56]	; (80074e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80074b0:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80074b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074b4:	e002      	b.n	80074bc <LoopCopyDataInit>

080074b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074ba:	3304      	adds	r3, #4

080074bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074c0:	d3f9      	bcc.n	80074b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074c2:	4a0b      	ldr	r2, [pc, #44]	; (80074f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80074c4:	4c0b      	ldr	r4, [pc, #44]	; (80074f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80074c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074c8:	e001      	b.n	80074ce <LoopFillZerobss>

080074ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074cc:	3204      	adds	r2, #4

080074ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074d0:	d3fb      	bcc.n	80074ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80074d2:	f7ff ffd7 	bl	8007484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074d6:	f00b f89d 	bl	8012614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074da:	f7fe fe21 	bl	8006120 <main>
  bx  lr    
 80074de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80074e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80074e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80074e8:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80074ec:	0801eb24 	.word	0x0801eb24
  ldr r2, =_sbss
 80074f0:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80074f4:	20002530 	.word	0x20002530

080074f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074f8:	e7fe      	b.n	80074f8 <ADC_IRQHandler>
	...

080074fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007500:	4b0e      	ldr	r3, [pc, #56]	; (800753c <HAL_Init+0x40>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a0d      	ldr	r2, [pc, #52]	; (800753c <HAL_Init+0x40>)
 8007506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800750a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <HAL_Init+0x40>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a0a      	ldr	r2, [pc, #40]	; (800753c <HAL_Init+0x40>)
 8007512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007518:	4b08      	ldr	r3, [pc, #32]	; (800753c <HAL_Init+0x40>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a07      	ldr	r2, [pc, #28]	; (800753c <HAL_Init+0x40>)
 800751e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007524:	2003      	movs	r0, #3
 8007526:	f000 fd5f 	bl	8007fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800752a:	200f      	movs	r0, #15
 800752c:	f000 f808 	bl	8007540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007530:	f7ff fbfe 	bl	8006d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40023c00 	.word	0x40023c00

08007540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007548:	4b12      	ldr	r3, [pc, #72]	; (8007594 <HAL_InitTick+0x54>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <HAL_InitTick+0x58>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	4619      	mov	r1, r3
 8007552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007556:	fbb3 f3f1 	udiv	r3, r3, r1
 800755a:	fbb2 f3f3 	udiv	r3, r2, r3
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fd77 	bl	8008052 <HAL_SYSTICK_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e00e      	b.n	800758c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d80a      	bhi.n	800758a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007574:	2200      	movs	r2, #0
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	f000 fd3f 	bl	8007ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007580:	4a06      	ldr	r2, [pc, #24]	; (800759c <HAL_InitTick+0x5c>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000000 	.word	0x20000000
 8007598:	20000008 	.word	0x20000008
 800759c:	20000004 	.word	0x20000004

080075a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <HAL_IncTick+0x20>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_IncTick+0x24>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4413      	add	r3, r2
 80075b0:	4a04      	ldr	r2, [pc, #16]	; (80075c4 <HAL_IncTick+0x24>)
 80075b2:	6013      	str	r3, [r2, #0]
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000008 	.word	0x20000008
 80075c4:	20000c44 	.word	0x20000c44

080075c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return uwTick;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <HAL_GetTick+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000c44 	.word	0x20000c44

080075e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075e8:	f7ff ffee 	bl	80075c8 <HAL_GetTick>
 80075ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d005      	beq.n	8007606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075fa:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <HAL_Delay+0x44>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007606:	bf00      	nop
 8007608:	f7ff ffde 	bl	80075c8 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d8f7      	bhi.n	8007608 <HAL_Delay+0x28>
  {
  }
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000008 	.word	0x20000008

08007628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e033      	b.n	80076a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff fb9a 	bl	8006d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 0310 	and.w	r3, r3, #16
 8007662:	2b00      	cmp	r3, #0
 8007664:	d118      	bne.n	8007698 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800766e:	f023 0302 	bic.w	r3, r3, #2
 8007672:	f043 0202 	orr.w	r2, r3, #2
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fae8 	bl	8007c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	f043 0201 	orr.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	641a      	str	r2, [r3, #64]	; 0x40
 8007696:	e001      	b.n	800769c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_ADC_Start+0x1a>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e0b2      	b.n	8007830 <HAL_ADC_Start+0x180>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d018      	beq.n	8007712 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80076f0:	4b52      	ldr	r3, [pc, #328]	; (800783c <HAL_ADC_Start+0x18c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a52      	ldr	r2, [pc, #328]	; (8007840 <HAL_ADC_Start+0x190>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	0c9a      	lsrs	r2, r3, #18
 80076fc:	4613      	mov	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4413      	add	r3, r2
 8007702:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007704:	e002      	b.n	800770c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3b01      	subs	r3, #1
 800770a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f9      	bne.n	8007706 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b01      	cmp	r3, #1
 800771e:	d17a      	bne.n	8007816 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007728:	f023 0301 	bic.w	r3, r3, #1
 800772c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800774a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775e:	d106      	bne.n	800776e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	f023 0206 	bic.w	r2, r3, #6
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	645a      	str	r2, [r3, #68]	; 0x44
 800776c:	e002      	b.n	8007774 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800777c:	4b31      	ldr	r3, [pc, #196]	; (8007844 <HAL_ADC_Start+0x194>)
 800777e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007788:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2b00      	cmp	r3, #0
 8007794:	d12a      	bne.n	80077ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2b      	ldr	r2, [pc, #172]	; (8007848 <HAL_ADC_Start+0x198>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d015      	beq.n	80077cc <HAL_ADC_Start+0x11c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a29      	ldr	r2, [pc, #164]	; (800784c <HAL_ADC_Start+0x19c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d105      	bne.n	80077b6 <HAL_ADC_Start+0x106>
 80077aa:	4b26      	ldr	r3, [pc, #152]	; (8007844 <HAL_ADC_Start+0x194>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a25      	ldr	r2, [pc, #148]	; (8007850 <HAL_ADC_Start+0x1a0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d136      	bne.n	800782e <HAL_ADC_Start+0x17e>
 80077c0:	4b20      	ldr	r3, [pc, #128]	; (8007844 <HAL_ADC_Start+0x194>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d130      	bne.n	800782e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d129      	bne.n	800782e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	e020      	b.n	800782e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <HAL_ADC_Start+0x198>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d11b      	bne.n	800782e <HAL_ADC_Start+0x17e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d114      	bne.n	800782e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007812:	609a      	str	r2, [r3, #8]
 8007814:	e00b      	b.n	800782e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	f043 0210 	orr.w	r2, r3, #16
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	f043 0201 	orr.w	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000000 	.word	0x20000000
 8007840:	431bde83 	.word	0x431bde83
 8007844:	40012300 	.word	0x40012300
 8007848:	40012000 	.word	0x40012000
 800784c:	40012100 	.word	0x40012100
 8007850:	40012200 	.word	0x40012200

08007854 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_ADC_Stop+0x16>
 8007866:	2302      	movs	r3, #2
 8007868:	e021      	b.n	80078ae <HAL_ADC_Stop+0x5a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	f043 0201 	orr.w	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d6:	d113      	bne.n	8007900 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e6:	d10b      	bne.n	8007900 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e063      	b.n	80079c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007900:	f7ff fe62 	bl	80075c8 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007906:	e021      	b.n	800794c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d01d      	beq.n	800794c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <HAL_ADC_PollForConversion+0x6c>
 8007916:	f7ff fe57 	bl	80075c8 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d212      	bcs.n	800794c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d00b      	beq.n	800794c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	f043 0204 	orr.w	r2, r3, #4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e03d      	b.n	80079c8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b02      	cmp	r3, #2
 8007958:	d1d6      	bne.n	8007908 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f06f 0212 	mvn.w	r2, #18
 8007962:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d123      	bne.n	80079c6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11f      	bne.n	80079c6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d111      	bne.n	80079c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_ADC_ConfigChannel+0x1c>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e113      	b.n	8007c30 <HAL_ADC_ConfigChannel+0x244>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d925      	bls.n	8007a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	4613      	mov	r3, r2
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3b1e      	subs	r3, #30
 8007a2e:	2207      	movs	r2, #7
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	43da      	mvns	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4618      	mov	r0, r3
 8007a50:	4603      	mov	r3, r0
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	4403      	add	r3, r0
 8007a56:	3b1e      	subs	r3, #30
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e022      	b.n	8007aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6919      	ldr	r1, [r3, #16]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	4613      	mov	r3, r2
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	2207      	movs	r2, #7
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	43da      	mvns	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	400a      	ands	r2, r1
 8007a86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6919      	ldr	r1, [r3, #16]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4618      	mov	r0, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4403      	add	r3, r0
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d824      	bhi.n	8007afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3b05      	subs	r3, #5
 8007ac4:	221f      	movs	r2, #31
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43da      	mvns	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	3b05      	subs	r3, #5
 8007aee:	fa00 f203 	lsl.w	r2, r0, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34
 8007afa:	e04c      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b0c      	cmp	r3, #12
 8007b02:	d824      	bhi.n	8007b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	3b23      	subs	r3, #35	; 0x23
 8007b16:	221f      	movs	r2, #31
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	43da      	mvns	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	400a      	ands	r2, r1
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4618      	mov	r0, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3b23      	subs	r3, #35	; 0x23
 8007b40:	fa00 f203 	lsl.w	r2, r0, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b4c:	e023      	b.n	8007b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3b41      	subs	r3, #65	; 0x41
 8007b60:	221f      	movs	r2, #31
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43da      	mvns	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	400a      	ands	r2, r1
 8007b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	3b41      	subs	r3, #65	; 0x41
 8007b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b96:	4b29      	ldr	r3, [pc, #164]	; (8007c3c <HAL_ADC_ConfigChannel+0x250>)
 8007b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a28      	ldr	r2, [pc, #160]	; (8007c40 <HAL_ADC_ConfigChannel+0x254>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d10f      	bne.n	8007bc4 <HAL_ADC_ConfigChannel+0x1d8>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b12      	cmp	r3, #18
 8007baa:	d10b      	bne.n	8007bc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	; (8007c40 <HAL_ADC_ConfigChannel+0x254>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d12b      	bne.n	8007c26 <HAL_ADC_ConfigChannel+0x23a>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_ADC_ConfigChannel+0x258>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <HAL_ADC_ConfigChannel+0x1f4>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b11      	cmp	r3, #17
 8007bde:	d122      	bne.n	8007c26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a11      	ldr	r2, [pc, #68]	; (8007c44 <HAL_ADC_ConfigChannel+0x258>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d111      	bne.n	8007c26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007c02:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <HAL_ADC_ConfigChannel+0x25c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <HAL_ADC_ConfigChannel+0x260>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	0c9a      	lsrs	r2, r3, #18
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007c18:	e002      	b.n	8007c20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f9      	bne.n	8007c1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40012300 	.word	0x40012300
 8007c40:	40012000 	.word	0x40012000
 8007c44:	10000012 	.word	0x10000012
 8007c48:	20000000 	.word	0x20000000
 8007c4c:	431bde83 	.word	0x431bde83

08007c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c58:	4b79      	ldr	r3, [pc, #484]	; (8007e40 <ADC_Init+0x1f0>)
 8007c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	021a      	lsls	r2, r3, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6899      	ldr	r1, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	4a58      	ldr	r2, [pc, #352]	; (8007e44 <ADC_Init+0x1f4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d022      	beq.n	8007d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6899      	ldr	r1, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6899      	ldr	r1, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	609a      	str	r2, [r3, #8]
 8007d2c:	e00f      	b.n	8007d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 0202 	bic.w	r2, r2, #2
 8007d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6899      	ldr	r1, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	7e1b      	ldrb	r3, [r3, #24]
 8007d68:	005a      	lsls	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01b      	beq.n	8007db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6859      	ldr	r1, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	3b01      	subs	r3, #1
 8007da8:	035a      	lsls	r2, r3, #13
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	e007      	b.n	8007dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	051a      	lsls	r2, r3, #20
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e06:	025a      	lsls	r2, r3, #9
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6899      	ldr	r1, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	029a      	lsls	r2, r3, #10
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40012300 	.word	0x40012300
 8007e44:	0f000001 	.word	0x0f000001

08007e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <__NVIC_SetPriorityGrouping+0x44>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e64:	4013      	ands	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e7a:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <__NVIC_SetPriorityGrouping+0x44>)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	60d3      	str	r3, [r2, #12]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e94:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	0a1b      	lsrs	r3, r3, #8
 8007e9a:	f003 0307 	and.w	r3, r3, #7
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	e000ed00 	.word	0xe000ed00

08007eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db0b      	blt.n	8007ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	f003 021f 	and.w	r2, r3, #31
 8007ec4:	4907      	ldr	r1, [pc, #28]	; (8007ee4 <__NVIC_EnableIRQ+0x38>)
 8007ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	2001      	movs	r0, #1
 8007ece:	fa00 f202 	lsl.w	r2, r0, r2
 8007ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	e000e100 	.word	0xe000e100

08007ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db0a      	blt.n	8007f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	490c      	ldr	r1, [pc, #48]	; (8007f34 <__NVIC_SetPriority+0x4c>)
 8007f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f06:	0112      	lsls	r2, r2, #4
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f10:	e00a      	b.n	8007f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	4908      	ldr	r1, [pc, #32]	; (8007f38 <__NVIC_SetPriority+0x50>)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	0112      	lsls	r2, r2, #4
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	440b      	add	r3, r1
 8007f26:	761a      	strb	r2, [r3, #24]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	e000e100 	.word	0xe000e100
 8007f38:	e000ed00 	.word	0xe000ed00

08007f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f1c3 0307 	rsb	r3, r3, #7
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	bf28      	it	cs
 8007f5a:	2304      	movcs	r3, #4
 8007f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3304      	adds	r3, #4
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d902      	bls.n	8007f6c <NVIC_EncodePriority+0x30>
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	3b03      	subs	r3, #3
 8007f6a:	e000      	b.n	8007f6e <NVIC_EncodePriority+0x32>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43da      	mvns	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	401a      	ands	r2, r3
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f84:	f04f 31ff 	mov.w	r1, #4294967295
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8e:	43d9      	mvns	r1, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f94:	4313      	orrs	r3, r2
         );
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3724      	adds	r7, #36	; 0x24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
	...

08007fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fb4:	d301      	bcc.n	8007fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e00f      	b.n	8007fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fba:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <SysTick_Config+0x40>)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fc2:	210f      	movs	r1, #15
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	f7ff ff8e 	bl	8007ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <SysTick_Config+0x40>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fd2:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <SysTick_Config+0x40>)
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	e000e010 	.word	0xe000e010

08007fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff29 	bl	8007e48 <__NVIC_SetPriorityGrouping>
}
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	4603      	mov	r3, r0
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008010:	f7ff ff3e 	bl	8007e90 <__NVIC_GetPriorityGrouping>
 8008014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	6978      	ldr	r0, [r7, #20]
 800801c:	f7ff ff8e 	bl	8007f3c <NVIC_EncodePriority>
 8008020:	4602      	mov	r2, r0
 8008022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff ff5d 	bl	8007ee8 <__NVIC_SetPriority>
}
 800802e:	bf00      	nop
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	4603      	mov	r3, r0
 800803e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff ff31 	bl	8007eac <__NVIC_EnableIRQ>
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff ffa2 	bl	8007fa4 <SysTick_Config>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008078:	f7ff faa6 	bl	80075c8 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e099      	b.n	80081bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080a8:	e00f      	b.n	80080ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080aa:	f7ff fa8d 	bl	80075c8 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d908      	bls.n	80080ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2203      	movs	r2, #3
 80080c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e078      	b.n	80081bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e8      	bne.n	80080aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	4b38      	ldr	r3, [pc, #224]	; (80081c4 <HAL_DMA_Init+0x158>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800810e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b04      	cmp	r3, #4
 8008122:	d107      	bne.n	8008134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	4313      	orrs	r3, r2
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f023 0307 	bic.w	r3, r3, #7
 800814a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b04      	cmp	r3, #4
 800815c:	d117      	bne.n	800818e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00e      	beq.n	800818e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb01 	bl	8008778 <DMA_CheckFifoParam>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2240      	movs	r2, #64	; 0x40
 8008180:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800818a:	2301      	movs	r3, #1
 800818c:	e016      	b.n	80081bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fab8 	bl	800870c <DMA_CalcBaseAndBitshift>
 800819c:	4603      	mov	r3, r0
 800819e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a4:	223f      	movs	r2, #63	; 0x3f
 80081a6:	409a      	lsls	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	f010803f 	.word	0xf010803f

080081c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_DMA_Start_IT+0x26>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e040      	b.n	8008270 <HAL_DMA_Start_IT+0xa8>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d12f      	bne.n	8008262 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fa4a 	bl	80086b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008220:	223f      	movs	r2, #63	; 0x3f
 8008222:	409a      	lsls	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0216 	orr.w	r2, r2, #22
 8008236:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0208 	orr.w	r2, r2, #8
 800824e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e005      	b.n	800826e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800826a:	2302      	movs	r3, #2
 800826c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800826e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008284:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008286:	f7ff f99f 	bl	80075c8 <HAL_GetTick>
 800828a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d008      	beq.n	80082aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2280      	movs	r2, #128	; 0x80
 800829c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e052      	b.n	8008350 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0216 	bic.w	r2, r2, #22
 80082b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695a      	ldr	r2, [r3, #20]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d103      	bne.n	80082da <HAL_DMA_Abort+0x62>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0208 	bic.w	r2, r2, #8
 80082e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0201 	bic.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082fa:	e013      	b.n	8008324 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082fc:	f7ff f964 	bl	80075c8 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b05      	cmp	r3, #5
 8008308:	d90c      	bls.n	8008324 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2203      	movs	r2, #3
 8008314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e015      	b.n	8008350 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e4      	bne.n	80082fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008336:	223f      	movs	r2, #63	; 0x3f
 8008338:	409a      	lsls	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d004      	beq.n	8008376 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2280      	movs	r2, #128	; 0x80
 8008370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e00c      	b.n	8008390 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2205      	movs	r2, #5
 800837a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80083a8:	4b92      	ldr	r3, [pc, #584]	; (80085f4 <HAL_DMA_IRQHandler+0x258>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a92      	ldr	r2, [pc, #584]	; (80085f8 <HAL_DMA_IRQHandler+0x25c>)
 80083ae:	fba2 2303 	umull	r2, r3, r2, r3
 80083b2:	0a9b      	lsrs	r3, r3, #10
 80083b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c6:	2208      	movs	r2, #8
 80083c8:	409a      	lsls	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01a      	beq.n	8008408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d013      	beq.n	8008408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0204 	bic.w	r2, r2, #4
 80083ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f4:	2208      	movs	r2, #8
 80083f6:	409a      	lsls	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008400:	f043 0201 	orr.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840c:	2201      	movs	r2, #1
 800840e:	409a      	lsls	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d012      	beq.n	800843e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842a:	2201      	movs	r2, #1
 800842c:	409a      	lsls	r2, r3
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008436:	f043 0202 	orr.w	r2, r3, #2
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008442:	2204      	movs	r2, #4
 8008444:	409a      	lsls	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4013      	ands	r3, r2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d012      	beq.n	8008474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008460:	2204      	movs	r2, #4
 8008462:	409a      	lsls	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846c:	f043 0204 	orr.w	r2, r3, #4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008478:	2210      	movs	r2, #16
 800847a:	409a      	lsls	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d043      	beq.n	800850c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d03c      	beq.n	800850c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008496:	2210      	movs	r2, #16
 8008498:	409a      	lsls	r2, r3
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d018      	beq.n	80084de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d024      	beq.n	800850c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	e01f      	b.n	800850c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01b      	beq.n	800850c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
 80084dc:	e016      	b.n	800850c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d107      	bne.n	80084fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f022 0208 	bic.w	r2, r2, #8
 80084fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008510:	2220      	movs	r2, #32
 8008512:	409a      	lsls	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4013      	ands	r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 808e 	beq.w	800863a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8086 	beq.w	800863a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008532:	2220      	movs	r2, #32
 8008534:	409a      	lsls	r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b05      	cmp	r3, #5
 8008544:	d136      	bne.n	80085b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0216 	bic.w	r2, r2, #22
 8008554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	695a      	ldr	r2, [r3, #20]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <HAL_DMA_IRQHandler+0x1da>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0208 	bic.w	r2, r2, #8
 8008584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800858a:	223f      	movs	r2, #63	; 0x3f
 800858c:	409a      	lsls	r2, r3
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d07d      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
        }
        return;
 80085b2:	e078      	b.n	80086a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01c      	beq.n	80085fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d108      	bne.n	80085e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d030      	beq.n	800863a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
 80085e0:	e02b      	b.n	800863a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d027      	beq.n	800863a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	e022      	b.n	800863a <HAL_DMA_IRQHandler+0x29e>
 80085f4:	20000000 	.word	0x20000000
 80085f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 0210 	bic.w	r2, r2, #16
 8008618:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	2b00      	cmp	r3, #0
 8008640:	d032      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d022      	beq.n	8008694 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2205      	movs	r2, #5
 8008652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	3301      	adds	r3, #1
 800866a:	60bb      	str	r3, [r7, #8]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	429a      	cmp	r2, r3
 8008670:	d307      	bcc.n	8008682 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1f2      	bne.n	8008666 <HAL_DMA_IRQHandler+0x2ca>
 8008680:	e000      	b.n	8008684 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008682:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	e000      	b.n	80086a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80086a6:	bf00      	nop
    }
  }
}
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop

080086b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d108      	bne.n	80086f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086ee:	e007      	b.n	8008700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
}
 8008700:	bf00      	nop
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	3b10      	subs	r3, #16
 800871c:	4a14      	ldr	r2, [pc, #80]	; (8008770 <DMA_CalcBaseAndBitshift+0x64>)
 800871e:	fba2 2303 	umull	r2, r3, r2, r3
 8008722:	091b      	lsrs	r3, r3, #4
 8008724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008726:	4a13      	ldr	r2, [pc, #76]	; (8008774 <DMA_CalcBaseAndBitshift+0x68>)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b03      	cmp	r3, #3
 8008738:	d909      	bls.n	800874e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	659a      	str	r2, [r3, #88]	; 0x58
 800874c:	e007      	b.n	800875e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008756:	f023 0303 	bic.w	r3, r3, #3
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	aaaaaaab 	.word	0xaaaaaaab
 8008774:	0801e588 	.word	0x0801e588

08008778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d11f      	bne.n	80087d2 <DMA_CheckFifoParam+0x5a>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b03      	cmp	r3, #3
 8008796:	d856      	bhi.n	8008846 <DMA_CheckFifoParam+0xce>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <DMA_CheckFifoParam+0x28>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	080087c3 	.word	0x080087c3
 80087a8:	080087b1 	.word	0x080087b1
 80087ac:	08008847 	.word	0x08008847
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d046      	beq.n	800884a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087c0:	e043      	b.n	800884a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087ca:	d140      	bne.n	800884e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087d0:	e03d      	b.n	800884e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087da:	d121      	bne.n	8008820 <DMA_CheckFifoParam+0xa8>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d837      	bhi.n	8008852 <DMA_CheckFifoParam+0xda>
 80087e2:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <DMA_CheckFifoParam+0x70>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	080087ff 	.word	0x080087ff
 80087f0:	080087f9 	.word	0x080087f9
 80087f4:	08008811 	.word	0x08008811
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
      break;
 80087fc:	e030      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d025      	beq.n	8008856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800880e:	e022      	b.n	8008856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008818:	d11f      	bne.n	800885a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800881e:	e01c      	b.n	800885a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d903      	bls.n	800882e <DMA_CheckFifoParam+0xb6>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d003      	beq.n	8008834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800882c:	e018      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
      break;
 8008832:	e015      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00e      	beq.n	800885e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e00b      	b.n	800885e <DMA_CheckFifoParam+0xe6>
      break;
 8008846:	bf00      	nop
 8008848:	e00a      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;
 800884a:	bf00      	nop
 800884c:	e008      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;
 800884e:	bf00      	nop
 8008850:	e006      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;
 8008852:	bf00      	nop
 8008854:	e004      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;
 8008856:	bf00      	nop
 8008858:	e002      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;   
 800885a:	bf00      	nop
 800885c:	e000      	b.n	8008860 <DMA_CheckFifoParam+0xe8>
      break;
 800885e:	bf00      	nop
    }
  } 
  
  return status; 
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop

08008870 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e081      	b.n	8008986 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe fab6 	bl	8006e08 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2224      	movs	r2, #36	; 0x24
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0201 	bic.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088d0:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d107      	bne.n	80088ea <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	e006      	b.n	80088f8 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d104      	bne.n	800890a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800892c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69d9      	ldr	r1, [r3, #28]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1a      	ldr	r2, [r3, #32]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <HAL_FMPI2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Write(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	4608      	mov	r0, r1
 800899a:	4611      	mov	r1, r2
 800899c:	461a      	mov	r2, r3
 800899e:	4603      	mov	r3, r0
 80089a0:	817b      	strh	r3, [r7, #10]
 80089a2:	460b      	mov	r3, r1
 80089a4:	813b      	strh	r3, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f040 80f9 	bne.w	8008baa <HAL_FMPI2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_FMPI2C_Mem_Write+0x34>
 80089be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <HAL_FMPI2C_Mem_Write+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0ed      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <HAL_FMPI2C_Mem_Write+0x4e>
 80089da:	2302      	movs	r3, #2
 80089dc:	e0e6      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089e6:	f7fe fdef 	bl	80075c8 <HAL_GetTick>
 80089ea:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	2319      	movs	r3, #25
 80089f2:	2201      	movs	r2, #1
 80089f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fac3 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <HAL_FMPI2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0d1      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2221      	movs	r2, #33	; 0x21
 8008a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryWrite(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a30:	88f8      	ldrh	r0, [r7, #6]
 8008a32:	893a      	ldrh	r2, [r7, #8]
 8008a34:	8979      	ldrh	r1, [r7, #10]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4603      	mov	r3, r0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f9d3 	bl	8008dec <FMPI2C_RequestMemoryWrite>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <HAL_FMPI2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e0a9      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	2bff      	cmp	r3, #255	; 0xff
 8008a60:	d90e      	bls.n	8008a80 <HAL_FMPI2C_Mem_Write+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	22ff      	movs	r2, #255	; 0xff
 8008a66:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE, FMPI2C_NO_STARTSTOP);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	8979      	ldrh	r1, [r7, #10]
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fbb5 	bl	80091e8 <FMPI2C_TransferConfig>
 8008a7e:	e00f      	b.n	8008aa0 <HAL_FMPI2C_Mem_Write+0x110>
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE, FMPI2C_NO_STARTSTOP);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	8979      	ldrh	r1, [r7, #10]
 8008a92:	2300      	movs	r3, #0
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fba4 	bl	80091e8 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 faad 	bl	8009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <HAL_FMPI2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e07b      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d034      	beq.n	8008b58 <HAL_FMPI2C_Mem_Write+0x1c8>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d130      	bne.n	8008b58 <HAL_FMPI2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	2200      	movs	r2, #0
 8008afe:	2180      	movs	r1, #128	; 0x80
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fa3f 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <HAL_FMPI2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e04d      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2bff      	cmp	r3, #255	; 0xff
 8008b18:	d90e      	bls.n	8008b38 <HAL_FMPI2C_Mem_Write+0x1a8>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	22ff      	movs	r2, #255	; 0xff
 8008b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	8979      	ldrh	r1, [r7, #10]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fb59 	bl	80091e8 <FMPI2C_TransferConfig>
 8008b36:	e00f      	b.n	8008b58 <HAL_FMPI2C_Mem_Write+0x1c8>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	8979      	ldrh	r1, [r7, #10]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fb48 	bl	80091e8 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }

    } while (hfmpi2c->XferCount > 0U);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d19e      	bne.n	8008aa0 <HAL_FMPI2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 fa8c 	bl	8009084 <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <HAL_FMPI2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e01a      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6859      	ldr	r1, [r3, #4]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <HAL_FMPI2C_Mem_Write+0x224>)
 8008b8a:	400b      	ands	r3, r1
 8008b8c:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e000      	b.n	8008bac <HAL_FMPI2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008baa:	2302      	movs	r3, #2
  }
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	fe00e800 	.word	0xfe00e800

08008bb8 <HAL_FMPI2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Read(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	817b      	strh	r3, [r7, #10]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	813b      	strh	r3, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	f040 80fd 	bne.w	8008dda <HAL_FMPI2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <HAL_FMPI2C_Mem_Read+0x34>
 8008be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <HAL_FMPI2C_Mem_Read+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e0f1      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d101      	bne.n	8008c06 <HAL_FMPI2C_Mem_Read+0x4e>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e0ea      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c0e:	f7fe fcdb 	bl	80075c8 <HAL_GetTick>
 8008c12:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2319      	movs	r3, #25
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f9af 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <HAL_FMPI2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0d5      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_RX;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2222      	movs	r2, #34	; 0x22
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2240      	movs	r2, #64	; 0x40
 8008c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a3a      	ldr	r2, [r7, #32]
 8008c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryRead(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c58:	88f8      	ldrh	r0, [r7, #6]
 8008c5a:	893a      	ldrh	r2, [r7, #8]
 8008c5c:	8979      	ldrh	r1, [r7, #10]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	4603      	mov	r3, r0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f913 	bl	8008e94 <FMPI2C_RequestMemoryRead>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_FMPI2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0ad      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2bff      	cmp	r3, #255	; 0xff
 8008c88:	d90e      	bls.n	8008ca8 <HAL_FMPI2C_Mem_Read+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	8979      	ldrh	r1, [r7, #10]
 8008c98:	4b52      	ldr	r3, [pc, #328]	; (8008de4 <HAL_FMPI2C_Mem_Read+0x22c>)
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 faa1 	bl	80091e8 <FMPI2C_TransferConfig>
 8008ca6:	e00f      	b.n	8008cc8 <HAL_FMPI2C_Mem_Read+0x110>
                            FMPI2C_GENERATE_START_READ);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	8979      	ldrh	r1, [r7, #10]
 8008cba:	4b4a      	ldr	r3, [pc, #296]	; (8008de4 <HAL_FMPI2C_Mem_Read+0x22c>)
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fa90 	bl	80091e8 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2104      	movs	r1, #4
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f956 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_FMPI2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e07c      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	b2d2      	uxtb	r2, r2
 8008cee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d034      	beq.n	8008d88 <HAL_FMPI2C_Mem_Read+0x1d0>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d130      	bne.n	8008d88 <HAL_FMPI2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2180      	movs	r1, #128	; 0x80
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f927 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <HAL_FMPI2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e04d      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2bff      	cmp	r3, #255	; 0xff
 8008d48:	d90e      	bls.n	8008d68 <HAL_FMPI2C_Mem_Read+0x1b0>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	22ff      	movs	r2, #255	; 0xff
 8008d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t) hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	8979      	ldrh	r1, [r7, #10]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fa41 	bl	80091e8 <FMPI2C_TransferConfig>
 8008d66:	e00f      	b.n	8008d88 <HAL_FMPI2C_Mem_Read+0x1d0>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	8979      	ldrh	r1, [r7, #10]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fa30 	bl	80091e8 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }
    } while (hfmpi2c->XferCount > 0U);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d19a      	bne.n	8008cc8 <HAL_FMPI2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 f974 	bl	8009084 <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <HAL_FMPI2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e01a      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2220      	movs	r2, #32
 8008dac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6859      	ldr	r1, [r3, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <HAL_FMPI2C_Mem_Read+0x230>)
 8008dba:	400b      	ands	r3, r1
 8008dbc:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e000      	b.n	8008ddc <HAL_FMPI2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008dda:	2302      	movs	r3, #2
  }
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	80002400 	.word	0x80002400
 8008de8:	fe00e800 	.word	0xfe00e800

08008dec <FMPI2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryWrite(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	817b      	strh	r3, [r7, #10]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	813b      	strh	r3, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_RELOAD_MODE, FMPI2C_GENERATE_START_WRITE);
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	8979      	ldrh	r1, [r7, #10]
 8008e0c:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <FMPI2C_RequestMemoryWrite+0xa4>)
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 f9e7 	bl	80091e8 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	69b9      	ldr	r1, [r7, #24]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f8f0 	bl	8009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <FMPI2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e02c      	b.n	8008e88 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 8008e2e:	88fb      	ldrh	r3, [r7, #6]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d105      	bne.n	8008e40 <FMPI2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8008e34:	893b      	ldrh	r3, [r7, #8]
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8008e3e:	e015      	b.n	8008e6c <FMPI2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 8008e40:	893b      	ldrh	r3, [r7, #8]
 8008e42:	0a1b      	lsrs	r3, r3, #8
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	69b9      	ldr	r1, [r7, #24]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f8d6 	bl	8009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <FMPI2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e012      	b.n	8008e88 <FMPI2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8008e62:	893b      	ldrh	r3, [r7, #8]
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2200      	movs	r2, #0
 8008e74:	2180      	movs	r1, #128	; 0x80
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 f884 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <FMPI2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	80002000 	.word	0x80002000

08008e94 <FMPI2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryRead(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	817b      	strh	r3, [r7, #10]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	813b      	strh	r3, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_SOFTEND_MODE, FMPI2C_GENERATE_START_WRITE);
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	8979      	ldrh	r1, [r7, #10]
 8008eb4:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <FMPI2C_RequestMemoryRead+0xa4>)
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f994 	bl	80091e8 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	69b9      	ldr	r1, [r7, #24]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f89d 	bl	8009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <FMPI2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e02c      	b.n	8008f2e <FMPI2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d105      	bne.n	8008ee6 <FMPI2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8008eda:	893b      	ldrh	r3, [r7, #8]
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ee4:	e015      	b.n	8008f12 <FMPI2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 8008ee6:	893b      	ldrh	r3, [r7, #8]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	69b9      	ldr	r1, [r7, #24]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f883 	bl	8009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <FMPI2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e012      	b.n	8008f2e <FMPI2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8008f08:	893b      	ldrh	r3, [r7, #8]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2140      	movs	r1, #64	; 0x40
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f831 	bl	8008f84 <FMPI2C_WaitOnFlagUntilTimeout>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <FMPI2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <FMPI2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	80002000 	.word	0x80002000

08008f3c <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d103      	bne.n	8008f5a <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d007      	beq.n	8008f78 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0201 	orr.w	r2, r2, #1
 8008f76:	619a      	str	r2, [r3, #24]
  }
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	603b      	str	r3, [r7, #0]
 8008f90:	4613      	mov	r3, r2
 8008f92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8008f94:	e022      	b.n	8008fdc <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d01e      	beq.n	8008fdc <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f9e:	f7fe fb13 	bl	80075c8 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d113      	bne.n	8008fdc <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb8:	f043 0220 	orr.w	r2, r3, #32
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e00f      	b.n	8008ffc <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d0cd      	beq.n	8008f96 <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8009010:	e02c      	b.n	800906c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f870 	bl	80090fc <FMPI2C_IsAcknowledgeFailed>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e02a      	b.n	800907c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d01e      	beq.n	800906c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800902e:	f7fe facb 	bl	80075c8 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	429a      	cmp	r2, r3
 800903c:	d302      	bcc.n	8009044 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d113      	bne.n	800906c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	f043 0220 	orr.w	r2, r3, #32
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e007      	b.n	800907c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b02      	cmp	r3, #2
 8009078:	d1cb      	bne.n	8009012 <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009090:	e028      	b.n	80090e4 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	68b9      	ldr	r1, [r7, #8]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f830 	bl	80090fc <FMPI2C_IsAcknowledgeFailed>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e026      	b.n	80090f4 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a6:	f7fe fa8f 	bl	80075c8 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d113      	bne.n	80090e4 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c0:	f043 0220 	orr.w	r2, r3, #32
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e007      	b.n	80090f4 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d1cf      	bne.n	8009092 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <FMPI2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsAcknowledgeFailed(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_AF) == SET)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b10      	cmp	r3, #16
 8009114:	d161      	bne.n	80091da <FMPI2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009124:	d02b      	beq.n	800917e <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009134:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009136:	e022      	b.n	800917e <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913e:	d01e      	beq.n	800917e <FMPI2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009140:	f7fe fa42 	bl	80075c8 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	d302      	bcc.n	8009156 <FMPI2C_IsAcknowledgeFailed+0x5a>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d113      	bne.n	800917e <FMPI2C_IsAcknowledgeFailed+0x82>
        {
          hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	645a      	str	r2, [r3, #68]	; 0x44
          hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e02e      	b.n	80091dc <FMPI2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b20      	cmp	r3, #32
 800918a:	d1d5      	bne.n	8009138 <FMPI2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2210      	movs	r2, #16
 8009192:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2220      	movs	r2, #32
 800919a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fecd 	bl	8008f3c <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6859      	ldr	r1, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <FMPI2C_IsAcknowledgeFailed+0xe8>)
 80091ae:	400b      	ands	r3, r1
 80091b0:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	f043 0204 	orr.w	r2, r3, #4
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <FMPI2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	fe00e800 	.word	0xfe00e800

080091e8 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	817b      	strh	r3, [r7, #10]
 80091f6:	4613      	mov	r3, r2
 80091f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2,
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	0d5b      	lsrs	r3, r3, #21
 8009204:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <FMPI2C_TransferConfig+0x58>)
 800920a:	430b      	orrs	r3, r1
 800920c:	43db      	mvns	r3, r3
 800920e:	ea02 0103 	and.w	r1, r2, r3
 8009212:	897b      	ldrh	r3, [r7, #10]
 8009214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009218:	7a7b      	ldrb	r3, [r7, #9]
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	431a      	orrs	r2, r3
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	431a      	orrs	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                 FMPI2C_CR2_START | FMPI2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
                        (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	03ff63ff 	.word	0x03ff63ff

08009244 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b20      	cmp	r3, #32
 8009258:	d138      	bne.n	80092cc <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8009264:	2302      	movs	r3, #2
 8009266:	e032      	b.n	80092ce <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2224      	movs	r2, #36	; 0x24
 8009274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0201 	bic.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6819      	ldr	r1, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	e000      	b.n	80092ce <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
  }
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	; 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	e165      	b.n	80095c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80092f8:	2201      	movs	r2, #1
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4013      	ands	r3, r2
 800930a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	429a      	cmp	r2, r3
 8009312:	f040 8154 	bne.w	80095be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d005      	beq.n	800932e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800932a:	2b02      	cmp	r3, #2
 800932c:	d130      	bne.n	8009390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	2203      	movs	r2, #3
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	43db      	mvns	r3, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4013      	ands	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	005b      	lsls	r3, r3, #1
 800934e:	fa02 f303 	lsl.w	r3, r2, r3
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	4313      	orrs	r3, r2
 8009356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009364:	2201      	movs	r2, #1
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	43db      	mvns	r3, r3
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	4013      	ands	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	091b      	lsrs	r3, r3, #4
 800937a:	f003 0201 	and.w	r2, r3, #1
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	4313      	orrs	r3, r2
 8009388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	2b03      	cmp	r3, #3
 800939a:	d017      	beq.n	80093cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	2203      	movs	r2, #3
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	43db      	mvns	r3, r3
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	4013      	ands	r3, r2
 80093b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d123      	bne.n	8009420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	08da      	lsrs	r2, r3, #3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3208      	adds	r2, #8
 80093e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	220f      	movs	r2, #15
 80093f0:	fa02 f303 	lsl.w	r3, r2, r3
 80093f4:	43db      	mvns	r3, r3
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	4013      	ands	r3, r2
 80093fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	fa02 f303 	lsl.w	r3, r2, r3
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	4313      	orrs	r3, r2
 8009410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	08da      	lsrs	r2, r3, #3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3208      	adds	r2, #8
 800941a:	69b9      	ldr	r1, [r7, #24]
 800941c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	2203      	movs	r2, #3
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	43db      	mvns	r3, r3
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	4013      	ands	r3, r2
 8009436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f003 0203 	and.w	r2, r3, #3
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	fa02 f303 	lsl.w	r3, r2, r3
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	4313      	orrs	r3, r2
 800944c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80ae 	beq.w	80095be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	4b5d      	ldr	r3, [pc, #372]	; (80095dc <HAL_GPIO_Init+0x300>)
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	4a5c      	ldr	r2, [pc, #368]	; (80095dc <HAL_GPIO_Init+0x300>)
 800946c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009470:	6453      	str	r3, [r2, #68]	; 0x44
 8009472:	4b5a      	ldr	r3, [pc, #360]	; (80095dc <HAL_GPIO_Init+0x300>)
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800947e:	4a58      	ldr	r2, [pc, #352]	; (80095e0 <HAL_GPIO_Init+0x304>)
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	089b      	lsrs	r3, r3, #2
 8009484:	3302      	adds	r3, #2
 8009486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800948a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	220f      	movs	r2, #15
 8009496:	fa02 f303 	lsl.w	r3, r2, r3
 800949a:	43db      	mvns	r3, r3
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	4013      	ands	r3, r2
 80094a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a4f      	ldr	r2, [pc, #316]	; (80095e4 <HAL_GPIO_Init+0x308>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d025      	beq.n	80094f6 <HAL_GPIO_Init+0x21a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a4e      	ldr	r2, [pc, #312]	; (80095e8 <HAL_GPIO_Init+0x30c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01f      	beq.n	80094f2 <HAL_GPIO_Init+0x216>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a4d      	ldr	r2, [pc, #308]	; (80095ec <HAL_GPIO_Init+0x310>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d019      	beq.n	80094ee <HAL_GPIO_Init+0x212>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a4c      	ldr	r2, [pc, #304]	; (80095f0 <HAL_GPIO_Init+0x314>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d013      	beq.n	80094ea <HAL_GPIO_Init+0x20e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a4b      	ldr	r2, [pc, #300]	; (80095f4 <HAL_GPIO_Init+0x318>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00d      	beq.n	80094e6 <HAL_GPIO_Init+0x20a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a4a      	ldr	r2, [pc, #296]	; (80095f8 <HAL_GPIO_Init+0x31c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d007      	beq.n	80094e2 <HAL_GPIO_Init+0x206>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a49      	ldr	r2, [pc, #292]	; (80095fc <HAL_GPIO_Init+0x320>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d101      	bne.n	80094de <HAL_GPIO_Init+0x202>
 80094da:	2306      	movs	r3, #6
 80094dc:	e00c      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094de:	2307      	movs	r3, #7
 80094e0:	e00a      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094e2:	2305      	movs	r3, #5
 80094e4:	e008      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094e6:	2304      	movs	r3, #4
 80094e8:	e006      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094ea:	2303      	movs	r3, #3
 80094ec:	e004      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e002      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <HAL_GPIO_Init+0x21c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	f002 0203 	and.w	r2, r2, #3
 80094fe:	0092      	lsls	r2, r2, #2
 8009500:	4093      	lsls	r3, r2
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	4313      	orrs	r3, r2
 8009506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009508:	4935      	ldr	r1, [pc, #212]	; (80095e0 <HAL_GPIO_Init+0x304>)
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	089b      	lsrs	r3, r3, #2
 800950e:	3302      	adds	r3, #2
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009516:	4b3a      	ldr	r3, [pc, #232]	; (8009600 <HAL_GPIO_Init+0x324>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	43db      	mvns	r3, r3
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	4013      	ands	r3, r2
 8009524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800953a:	4a31      	ldr	r2, [pc, #196]	; (8009600 <HAL_GPIO_Init+0x324>)
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009540:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <HAL_GPIO_Init+0x324>)
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	43db      	mvns	r3, r3
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	4013      	ands	r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009564:	4a26      	ldr	r2, [pc, #152]	; (8009600 <HAL_GPIO_Init+0x324>)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800956a:	4b25      	ldr	r3, [pc, #148]	; (8009600 <HAL_GPIO_Init+0x324>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	43db      	mvns	r3, r3
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	4013      	ands	r3, r2
 8009578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800958e:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <HAL_GPIO_Init+0x324>)
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009594:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <HAL_GPIO_Init+0x324>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	43db      	mvns	r3, r3
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	4013      	ands	r3, r2
 80095a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80095b8:	4a11      	ldr	r2, [pc, #68]	; (8009600 <HAL_GPIO_Init+0x324>)
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	3301      	adds	r3, #1
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	2b0f      	cmp	r3, #15
 80095c8:	f67f ae96 	bls.w	80092f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	3724      	adds	r7, #36	; 0x24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40013800 	.word	0x40013800
 80095e4:	40020000 	.word	0x40020000
 80095e8:	40020400 	.word	0x40020400
 80095ec:	40020800 	.word	0x40020800
 80095f0:	40020c00 	.word	0x40020c00
 80095f4:	40021000 	.word	0x40021000
 80095f8:	40021400 	.word	0x40021400
 80095fc:	40021800 	.word	0x40021800
 8009600:	40013c00 	.word	0x40013c00

08009604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	807b      	strh	r3, [r7, #2]
 8009610:	4613      	mov	r3, r2
 8009612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009614:	787b      	ldrb	r3, [r7, #1]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800961a:	887a      	ldrh	r2, [r7, #2]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009620:	e003      	b.n	800962a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009622:	887b      	ldrh	r3, [r7, #2]
 8009624:	041a      	lsls	r2, r3, #16
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	619a      	str	r2, [r3, #24]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009636:	b480      	push	{r7}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009648:	887a      	ldrh	r2, [r7, #2]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4013      	ands	r3, r2
 800964e:	041a      	lsls	r2, r3, #16
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	43d9      	mvns	r1, r3
 8009654:	887b      	ldrh	r3, [r7, #2]
 8009656:	400b      	ands	r3, r1
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	619a      	str	r2, [r3, #24]
}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e12b      	b.n	80098d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fd fc14 	bl	8006ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2224      	movs	r2, #36	; 0x24
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0201 	bic.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80096d0:	f001 fc22 	bl	800af18 <HAL_RCC_GetPCLK1Freq>
 80096d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	4a81      	ldr	r2, [pc, #516]	; (80098e0 <HAL_I2C_Init+0x274>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d807      	bhi.n	80096f0 <HAL_I2C_Init+0x84>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4a80      	ldr	r2, [pc, #512]	; (80098e4 <HAL_I2C_Init+0x278>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	bf94      	ite	ls
 80096e8:	2301      	movls	r3, #1
 80096ea:	2300      	movhi	r3, #0
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	e006      	b.n	80096fe <HAL_I2C_Init+0x92>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a7d      	ldr	r2, [pc, #500]	; (80098e8 <HAL_I2C_Init+0x27c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	bf94      	ite	ls
 80096f8:	2301      	movls	r3, #1
 80096fa:	2300      	movhi	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e0e7      	b.n	80098d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a78      	ldr	r2, [pc, #480]	; (80098ec <HAL_I2C_Init+0x280>)
 800970a:	fba2 2303 	umull	r2, r3, r2, r3
 800970e:	0c9b      	lsrs	r3, r3, #18
 8009710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4a6a      	ldr	r2, [pc, #424]	; (80098e0 <HAL_I2C_Init+0x274>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d802      	bhi.n	8009740 <HAL_I2C_Init+0xd4>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	3301      	adds	r3, #1
 800973e:	e009      	b.n	8009754 <HAL_I2C_Init+0xe8>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009746:	fb02 f303 	mul.w	r3, r2, r3
 800974a:	4a69      	ldr	r2, [pc, #420]	; (80098f0 <HAL_I2C_Init+0x284>)
 800974c:	fba2 2303 	umull	r2, r3, r2, r3
 8009750:	099b      	lsrs	r3, r3, #6
 8009752:	3301      	adds	r3, #1
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	430b      	orrs	r3, r1
 800975a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	495c      	ldr	r1, [pc, #368]	; (80098e0 <HAL_I2C_Init+0x274>)
 8009770:	428b      	cmp	r3, r1
 8009772:	d819      	bhi.n	80097a8 <HAL_I2C_Init+0x13c>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	1e59      	subs	r1, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009782:	1c59      	adds	r1, r3, #1
 8009784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009788:	400b      	ands	r3, r1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <HAL_I2C_Init+0x138>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1e59      	subs	r1, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	fbb1 f3f3 	udiv	r3, r1, r3
 800979c:	3301      	adds	r3, #1
 800979e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a2:	e051      	b.n	8009848 <HAL_I2C_Init+0x1dc>
 80097a4:	2304      	movs	r3, #4
 80097a6:	e04f      	b.n	8009848 <HAL_I2C_Init+0x1dc>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d111      	bne.n	80097d4 <HAL_I2C_Init+0x168>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	1e58      	subs	r0, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6859      	ldr	r1, [r3, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	440b      	add	r3, r1
 80097be:	fbb0 f3f3 	udiv	r3, r0, r3
 80097c2:	3301      	adds	r3, #1
 80097c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	e012      	b.n	80097fa <HAL_I2C_Init+0x18e>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	1e58      	subs	r0, r3, #1
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6859      	ldr	r1, [r3, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	0099      	lsls	r1, r3, #2
 80097e4:	440b      	add	r3, r1
 80097e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80097ea:	3301      	adds	r3, #1
 80097ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bf0c      	ite	eq
 80097f4:	2301      	moveq	r3, #1
 80097f6:	2300      	movne	r3, #0
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <HAL_I2C_Init+0x196>
 80097fe:	2301      	movs	r3, #1
 8009800:	e022      	b.n	8009848 <HAL_I2C_Init+0x1dc>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10e      	bne.n	8009828 <HAL_I2C_Init+0x1bc>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	1e58      	subs	r0, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6859      	ldr	r1, [r3, #4]
 8009812:	460b      	mov	r3, r1
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	440b      	add	r3, r1
 8009818:	fbb0 f3f3 	udiv	r3, r0, r3
 800981c:	3301      	adds	r3, #1
 800981e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009826:	e00f      	b.n	8009848 <HAL_I2C_Init+0x1dc>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	1e58      	subs	r0, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6859      	ldr	r1, [r3, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	440b      	add	r3, r1
 8009836:	0099      	lsls	r1, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	fbb0 f3f3 	udiv	r3, r0, r3
 800983e:	3301      	adds	r3, #1
 8009840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	6809      	ldr	r1, [r1, #0]
 800984c:	4313      	orrs	r3, r2
 800984e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69da      	ldr	r2, [r3, #28]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	431a      	orrs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6911      	ldr	r1, [r2, #16]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68d2      	ldr	r2, [r2, #12]
 8009882:	4311      	orrs	r1, r2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	430b      	orrs	r3, r1
 800988a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695a      	ldr	r2, [r3, #20]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	431a      	orrs	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0201 	orr.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	000186a0 	.word	0x000186a0
 80098e4:	001e847f 	.word	0x001e847f
 80098e8:	003d08ff 	.word	0x003d08ff
 80098ec:	431bde83 	.word	0x431bde83
 80098f0:	10624dd3 	.word	0x10624dd3

080098f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80098f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f6:	b08f      	sub	sp, #60	; 0x3c
 80098f8:	af0a      	add	r7, sp, #40	; 0x28
 80098fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e116      	b.n	8009b34 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f007 fe65 	bl	80115f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2203      	movs	r2, #3
 800992a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	f004 fd22 	bl	800e38e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	603b      	str	r3, [r7, #0]
 8009950:	687e      	ldr	r6, [r7, #4]
 8009952:	466d      	mov	r5, sp
 8009954:	f106 0410 	add.w	r4, r6, #16
 8009958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800995a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800995c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800995e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009960:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009964:	e885 0003 	stmia.w	r5, {r0, r1}
 8009968:	1d33      	adds	r3, r6, #4
 800996a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800996c:	6838      	ldr	r0, [r7, #0]
 800996e:	f004 fbf9 	bl	800e164 <USB_CoreInit>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e0d7      	b.n	8009b34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f004 fd10 	bl	800e3b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
 8009994:	e04a      	b.n	8009a2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009996:	7bfa      	ldrb	r2, [r7, #15]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	333d      	adds	r3, #61	; 0x3d
 80099a6:	2201      	movs	r2, #1
 80099a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099aa:	7bfa      	ldrb	r2, [r7, #15]
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	333c      	adds	r3, #60	; 0x3c
 80099ba:	7bfa      	ldrb	r2, [r7, #15]
 80099bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80099be:	7bfa      	ldrb	r2, [r7, #15]
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	b298      	uxth	r0, r3
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3342      	adds	r3, #66	; 0x42
 80099d2:	4602      	mov	r2, r0
 80099d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099d6:	7bfa      	ldrb	r2, [r7, #15]
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	333f      	adds	r3, #63	; 0x3f
 80099e6:	2200      	movs	r2, #0
 80099e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80099ea:	7bfa      	ldrb	r2, [r7, #15]
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	3344      	adds	r3, #68	; 0x44
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	3348      	adds	r3, #72	; 0x48
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a12:	7bfa      	ldrb	r2, [r7, #15]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	3350      	adds	r3, #80	; 0x50
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	73fb      	strb	r3, [r7, #15]
 8009a2c:	7bfa      	ldrb	r2, [r7, #15]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d3af      	bcc.n	8009996 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
 8009a3a:	e044      	b.n	8009ac6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a3c:	7bfa      	ldrb	r2, [r7, #15]
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	00db      	lsls	r3, r3, #3
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a52:	7bfa      	ldrb	r2, [r7, #15]
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a64:	7bfa      	ldrb	r2, [r7, #15]
 8009a66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a68:	7bfa      	ldrb	r2, [r7, #15]
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a7e:	7bfa      	ldrb	r2, [r7, #15]
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	1a9b      	subs	r3, r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a94:	7bfa      	ldrb	r2, [r7, #15]
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009aaa:	7bfa      	ldrb	r2, [r7, #15]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]
 8009ac6:	7bfa      	ldrb	r2, [r7, #15]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3b5      	bcc.n	8009a3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	687e      	ldr	r6, [r7, #4]
 8009ad8:	466d      	mov	r5, sp
 8009ada:	f106 0410 	add.w	r4, r6, #16
 8009ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009aea:	e885 0003 	stmia.w	r5, {r0, r1}
 8009aee:	1d33      	adds	r3, r6, #4
 8009af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009af2:	6838      	ldr	r0, [r7, #0]
 8009af4:	f004 fca8 	bl	800e448 <USB_DevInit>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2202      	movs	r2, #2
 8009b02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e014      	b.n	8009b34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d102      	bne.n	8009b28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f892 	bl	800ac4c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f005 fd17 	bl	800f560 <USB_DevDisconnect>

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <HAL_PCD_Start+0x1c>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e020      	b.n	8009b9a <HAL_PCD_Start+0x5e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d109      	bne.n	8009b7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d005      	beq.n	8009b7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f004 fbf3 	bl	800e36c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f005 fcc7 	bl	800f51e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009ba2:	b590      	push	{r4, r7, lr}
 8009ba4:	b08d      	sub	sp, #52	; 0x34
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f005 fd85 	bl	800f6c8 <USB_GetMode>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 83ca 	bne.w	800a35a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f005 fce9 	bl	800f5a2 <USB_ReadInterrupts>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 83c0 	beq.w	800a358 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f005 fce0 	bl	800f5a2 <USB_ReadInterrupts>
 8009be2:	4603      	mov	r3, r0
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d107      	bne.n	8009bfc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695a      	ldr	r2, [r3, #20]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f002 0202 	and.w	r2, r2, #2
 8009bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f005 fcce 	bl	800f5a2 <USB_ReadInterrupts>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d161      	bne.n	8009cd4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0210 	bic.w	r2, r2, #16
 8009c1e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f003 020f 	and.w	r2, r3, #15
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	1a9b      	subs	r3, r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	0c5b      	lsrs	r3, r3, #17
 8009c44:	f003 030f 	and.w	r3, r3, #15
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d124      	bne.n	8009c96 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d035      	beq.n	8009cc4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	091b      	lsrs	r3, r3, #4
 8009c60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6a38      	ldr	r0, [r7, #32]
 8009c6c:	f005 fb05 	bl	800f27a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c7c:	441a      	add	r2, r3
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c8e:	441a      	add	r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	619a      	str	r2, [r3, #24]
 8009c94:	e016      	b.n	8009cc4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	0c5b      	lsrs	r3, r3, #17
 8009c9a:	f003 030f 	and.w	r3, r3, #15
 8009c9e:	2b06      	cmp	r3, #6
 8009ca0:	d110      	bne.n	8009cc4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ca8:	2208      	movs	r2, #8
 8009caa:	4619      	mov	r1, r3
 8009cac:	6a38      	ldr	r0, [r7, #32]
 8009cae:	f005 fae4 	bl	800f27a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	091b      	lsrs	r3, r3, #4
 8009cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cbe:	441a      	add	r2, r3
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699a      	ldr	r2, [r3, #24]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f042 0210 	orr.w	r2, r2, #16
 8009cd2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f005 fc62 	bl	800f5a2 <USB_ReadInterrupts>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ce8:	d16e      	bne.n	8009dc8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f005 fc68 	bl	800f5c8 <USB_ReadDevAllOutEpInterrupt>
 8009cf8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009cfa:	e062      	b.n	8009dc2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d057      	beq.n	8009db6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f005 fc8d 	bl	800f630 <USB_ReadDevOutEPInterrupt>
 8009d16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00c      	beq.n	8009d3c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2301      	movs	r3, #1
 8009d32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fdde 	bl	800a8f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00c      	beq.n	8009d60 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d52:	461a      	mov	r2, r3
 8009d54:	2308      	movs	r3, #8
 8009d56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fed8 	bl	800ab10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f003 0310 	and.w	r3, r3, #16
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	461a      	mov	r2, r3
 8009d78:	2310      	movs	r3, #16
 8009d7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d92:	461a      	mov	r2, r3
 8009d94:	2320      	movs	r3, #32
 8009d96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dae:	461a      	mov	r2, r3
 8009db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009db4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	3301      	adds	r3, #1
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d199      	bne.n	8009cfc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f005 fbe8 	bl	800f5a2 <USB_ReadInterrupts>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ddc:	f040 80c0 	bne.w	8009f60 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f005 fc09 	bl	800f5fc <USB_ReadDevAllInEpInterrupt>
 8009dea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009df0:	e0b2      	b.n	8009f58 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 80a7 	beq.w	8009f4c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e04:	b2d2      	uxtb	r2, r2
 8009e06:	4611      	mov	r1, r2
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f005 fc2f 	bl	800f66c <USB_ReadDevInEPInterrupt>
 8009e0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d057      	beq.n	8009eca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	2201      	movs	r2, #1
 8009e22:	fa02 f303 	lsl.w	r3, r2, r3
 8009e26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	43db      	mvns	r3, r3
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d132      	bne.n	8009ebe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009e58:	6879      	ldr	r1, [r7, #4]
 8009e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	440b      	add	r3, r1
 8009e66:	3348      	adds	r3, #72	; 0x48
 8009e68:	6819      	ldr	r1, [r3, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6e:	4613      	mov	r3, r2
 8009e70:	00db      	lsls	r3, r3, #3
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4403      	add	r3, r0
 8009e78:	3344      	adds	r3, #68	; 0x44
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4419      	add	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	4613      	mov	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4403      	add	r3, r0
 8009e8c:	3348      	adds	r3, #72	; 0x48
 8009e8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d113      	bne.n	8009ebe <HAL_PCD_IRQHandler+0x31c>
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	3350      	adds	r3, #80	; 0x50
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6818      	ldr	r0, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	2101      	movs	r1, #1
 8009eba:	f005 fc37 	bl	800f72c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f007 fc36 	bl	8011736 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d008      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efc:	461a      	mov	r2, r3
 8009efe:	2310      	movs	r3, #16
 8009f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f18:	461a      	mov	r2, r3
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f34:	461a      	mov	r2, r3
 8009f36:	2302      	movs	r3, #2
 8009f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fc48 	bl	800a7dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	3301      	adds	r3, #1
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f47f af49 	bne.w	8009df2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f005 fb1c 	bl	800f5a2 <USB_ReadInterrupts>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f74:	d122      	bne.n	8009fbc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	69fa      	ldr	r2, [r7, #28]
 8009f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d108      	bne.n	8009fa6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f007 fe18 	bl	8011bd4 <HAL_PCDEx_LPM_Callback>
 8009fa4:	e002      	b.n	8009fac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f007 fc3c 	bl	8011824 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	695a      	ldr	r2, [r3, #20]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f005 faee 	bl	800f5a2 <USB_ReadInterrupts>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd0:	d112      	bne.n	8009ff8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d102      	bne.n	8009fe8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f007 fbf8 	bl	80117d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	695a      	ldr	r2, [r3, #20]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ff6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f005 fad0 	bl	800f5a2 <USB_ReadInterrupts>
 800a002:	4603      	mov	r3, r0
 800a004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a00c:	d121      	bne.n	800a052 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a01c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d111      	bne.n	800a04c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a036:	089b      	lsrs	r3, r3, #2
 800a038:	f003 020f 	and.w	r2, r3, #15
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a042:	2101      	movs	r1, #1
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f007 fdc5 	bl	8011bd4 <HAL_PCDEx_LPM_Callback>
 800a04a:	e002      	b.n	800a052 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f007 fbc3 	bl	80117d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4618      	mov	r0, r3
 800a058:	f005 faa3 	bl	800f5a2 <USB_ReadInterrupts>
 800a05c:	4603      	mov	r3, r0
 800a05e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a066:	f040 80c7 	bne.w	800a1f8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2110      	movs	r1, #16
 800a084:	4618      	mov	r0, r3
 800a086:	f004 fb3d 	bl	800e704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a08a:	2300      	movs	r3, #0
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a08e:	e056      	b.n	800a13e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09c:	461a      	mov	r2, r3
 800a09e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0c2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a108:	0151      	lsls	r1, r2, #5
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	440a      	add	r2, r1
 800a10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a116:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a136:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13a:	3301      	adds	r3, #1
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a144:	429a      	cmp	r2, r3
 800a146:	d3a3      	bcc.n	800a090 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a156:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a15a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	2b00      	cmp	r3, #0
 800a162:	d016      	beq.n	800a192 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a16e:	69fa      	ldr	r2, [r7, #28]
 800a170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a174:	f043 030b 	orr.w	r3, r3, #11
 800a178:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a18a:	f043 030b 	orr.w	r3, r3, #11
 800a18e:	6453      	str	r3, [r2, #68]	; 0x44
 800a190:	e015      	b.n	800a1be <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a1a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b8:	f043 030b 	orr.w	r3, r3, #11
 800a1bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a1d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f005 faa2 	bl	800f72c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a1f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f005 f9d0 	bl	800f5a2 <USB_ReadInterrupts>
 800a202:	4603      	mov	r3, r0
 800a204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a20c:	d124      	bne.n	800a258 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4618      	mov	r0, r3
 800a214:	f005 fa66 	bl	800f6e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f004 face 	bl	800e7be <USB_GetDevSpeed>
 800a222:	4603      	mov	r3, r0
 800a224:	461a      	mov	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681c      	ldr	r4, [r3, #0]
 800a22e:	f000 fe67 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 800a232:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	4620      	mov	r0, r4
 800a23e:	f003 fff3 	bl	800e228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f007 fa9f 	bl	8011786 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695a      	ldr	r2, [r3, #20]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a256:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f005 f9a0 	bl	800f5a2 <USB_ReadInterrupts>
 800a262:	4603      	mov	r3, r0
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d10a      	bne.n	800a282 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f007 fa7c 	bl	801176a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695a      	ldr	r2, [r3, #20]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f002 0208 	and.w	r2, r2, #8
 800a280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f005 f98b 	bl	800f5a2 <USB_ReadInterrupts>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a296:	d10f      	bne.n	800a2b8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f007 fade 	bl	8011864 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695a      	ldr	r2, [r3, #20]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a2b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f005 f970 	bl	800f5a2 <USB_ReadInterrupts>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2cc:	d10f      	bne.n	800a2ee <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f007 fab1 	bl	8011840 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695a      	ldr	r2, [r3, #20]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f005 f955 	bl	800f5a2 <USB_ReadInterrupts>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a302:	d10a      	bne.n	800a31a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f007 fabf 	bl	8011888 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f005 f93f 	bl	800f5a2 <USB_ReadInterrupts>
 800a324:	4603      	mov	r3, r0
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d115      	bne.n	800a35a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f007 faaf 	bl	80118a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6859      	ldr	r1, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	e000      	b.n	800a35a <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a358:	bf00      	nop
    }
  }
}
 800a35a:	3734      	adds	r7, #52	; 0x34
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd90      	pop	{r4, r7, pc}

0800a360 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_PCD_SetAddress+0x1a>
 800a376:	2302      	movs	r3, #2
 800a378:	e013      	b.n	800a3a2 <HAL_PCD_SetAddress+0x42>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	78fa      	ldrb	r2, [r7, #3]
 800a386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	78fa      	ldrb	r2, [r7, #3]
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f005 f89d 	bl	800f4d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	70fb      	strb	r3, [r7, #3]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	803b      	strh	r3, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da0f      	bge.n	800a3f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	f003 020f 	and.w	r2, r3, #15
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	3338      	adds	r3, #56	; 0x38
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	705a      	strb	r2, [r3, #1]
 800a3ee:	e00f      	b.n	800a410 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	f003 020f 	and.w	r2, r3, #15
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	1a9b      	subs	r3, r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	4413      	add	r3, r2
 800a406:	3304      	adds	r3, #4
 800a408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	f003 030f 	and.w	r3, r3, #15
 800a416:	b2da      	uxtb	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a41c:	883a      	ldrh	r2, [r7, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	78ba      	ldrb	r2, [r7, #2]
 800a426:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	785b      	ldrb	r3, [r3, #1]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d004      	beq.n	800a43a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b29a      	uxth	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a43a:	78bb      	ldrb	r3, [r7, #2]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d102      	bne.n	800a446 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <HAL_PCD_EP_Open+0xaa>
 800a450:	2302      	movs	r3, #2
 800a452:	e00e      	b.n	800a472 <HAL_PCD_EP_Open+0xc8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	4618      	mov	r0, r3
 800a464:	f004 f9d0 	bl	800e808 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a470:	7afb      	ldrb	r3, [r7, #11]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	da0f      	bge.n	800a4ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	f003 020f 	and.w	r2, r3, #15
 800a494:	4613      	mov	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	1a9b      	subs	r3, r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	3338      	adds	r3, #56	; 0x38
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	705a      	strb	r2, [r3, #1]
 800a4ac:	e00f      	b.n	800a4ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	f003 020f 	and.w	r2, r3, #15
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	1a9b      	subs	r3, r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <HAL_PCD_EP_Close+0x6e>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e00e      	b.n	800a506 <HAL_PCD_EP_Close+0x8c>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68f9      	ldr	r1, [r7, #12]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f004 fa0e 	bl	800e918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	460b      	mov	r3, r1
 800a51c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 020f 	and.w	r2, r3, #15
 800a524:	4613      	mov	r3, r2
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	3304      	adds	r3, #4
 800a536:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2200      	movs	r2, #0
 800a548:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2200      	movs	r2, #0
 800a54e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a550:	7afb      	ldrb	r3, [r7, #11]
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	b2da      	uxtb	r2, r3
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d102      	bne.n	800a56a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	6979      	ldr	r1, [r7, #20]
 800a582:	f004 fce9 	bl	800ef58 <USB_EP0StartXfer>
 800a586:	e008      	b.n	800a59a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	461a      	mov	r2, r3
 800a594:	6979      	ldr	r1, [r7, #20]
 800a596:	f004 fa9b 	bl	800ead0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	f003 020f 	and.w	r2, r3, #15
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a5c6:	681b      	ldr	r3, [r3, #0]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	f003 020f 	and.w	r2, r3, #15
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	3338      	adds	r3, #56	; 0x38
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2200      	movs	r2, #0
 800a60c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2201      	movs	r2, #1
 800a612:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	f003 030f 	and.w	r3, r3, #15
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d102      	bne.n	800a62e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a62e:	7afb      	ldrb	r3, [r7, #11]
 800a630:	f003 030f 	and.w	r3, r3, #15
 800a634:	2b00      	cmp	r3, #0
 800a636:	d109      	bne.n	800a64c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	461a      	mov	r2, r3
 800a644:	6979      	ldr	r1, [r7, #20]
 800a646:	f004 fc87 	bl	800ef58 <USB_EP0StartXfer>
 800a64a:	e008      	b.n	800a65e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6818      	ldr	r0, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	6979      	ldr	r1, [r7, #20]
 800a65a:	f004 fa39 	bl	800ead0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	f003 020f 	and.w	r2, r3, #15
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d901      	bls.n	800a686 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e050      	b.n	800a728 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	da0f      	bge.n	800a6ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	f003 020f 	and.w	r2, r3, #15
 800a694:	4613      	mov	r3, r2
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	1a9b      	subs	r3, r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	3338      	adds	r3, #56	; 0x38
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	705a      	strb	r2, [r3, #1]
 800a6ac:	e00d      	b.n	800a6ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	4413      	add	r3, r2
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d101      	bne.n	800a6ea <HAL_PCD_EP_SetStall+0x82>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e01e      	b.n	800a728 <HAL_PCD_EP_SetStall+0xc0>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f004 fe16 	bl	800f32a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	b2d9      	uxtb	r1, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a718:	461a      	mov	r2, r3
 800a71a:	f005 f807 	bl	800f72c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	f003 020f 	and.w	r2, r3, #15
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d901      	bls.n	800a74e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e042      	b.n	800a7d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a752:	2b00      	cmp	r3, #0
 800a754:	da0f      	bge.n	800a776 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 020f 	and.w	r2, r3, #15
 800a75c:	4613      	mov	r3, r2
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	3338      	adds	r3, #56	; 0x38
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	3304      	adds	r3, #4
 800a76c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	705a      	strb	r2, [r3, #1]
 800a774:	e00f      	b.n	800a796 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	f003 020f 	and.w	r2, r3, #15
 800a77c:	4613      	mov	r3, r2
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	4413      	add	r3, r2
 800a78c:	3304      	adds	r3, #4
 800a78e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	f003 030f 	and.w	r3, r3, #15
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d101      	bne.n	800a7b6 <HAL_PCD_EP_ClrStall+0x86>
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	e00e      	b.n	800a7d4 <HAL_PCD_EP_ClrStall+0xa4>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f004 fe1e 	bl	800f406 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08a      	sub	sp, #40	; 0x28
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	3338      	adds	r3, #56	; 0x38
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	4413      	add	r3, r2
 800a800:	3304      	adds	r3, #4
 800a802:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	699a      	ldr	r2, [r3, #24]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d901      	bls.n	800a814 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e06c      	b.n	800a8ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	695a      	ldr	r2, [r3, #20]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	429a      	cmp	r2, r3
 800a828:	d902      	bls.n	800a830 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	3303      	adds	r3, #3
 800a834:	089b      	lsrs	r3, r3, #2
 800a836:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a838:	e02b      	b.n	800a892 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	695a      	ldr	r2, [r3, #20]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d902      	bls.n	800a856 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	3303      	adds	r3, #3
 800a85a:	089b      	lsrs	r3, r3, #2
 800a85c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	68d9      	ldr	r1, [r3, #12]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	b2da      	uxtb	r2, r3
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	4603      	mov	r3, r0
 800a874:	6978      	ldr	r0, [r7, #20]
 800a876:	f004 fcc2 	bl	800f1fe <USB_WritePacket>

    ep->xfer_buff  += len;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	441a      	add	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	441a      	add	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	69ba      	ldr	r2, [r7, #24]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d809      	bhi.n	800a8bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	699a      	ldr	r2, [r3, #24]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d203      	bcs.n	800a8bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1be      	bne.n	800a83a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	695a      	ldr	r2, [r3, #20]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d811      	bhi.n	800a8ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	6939      	ldr	r1, [r7, #16]
 800a8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3720      	adds	r7, #32
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	333c      	adds	r3, #60	; 0x3c
 800a910:	3304      	adds	r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	f040 80a0 	bne.w	800aa70 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f003 0308 	and.w	r3, r3, #8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d015      	beq.n	800a966 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4a72      	ldr	r2, [pc, #456]	; (800ab08 <PCD_EP_OutXfrComplete_int+0x210>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	f240 80dd 	bls.w	800aafe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 80d7 	beq.w	800aafe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	461a      	mov	r2, r3
 800a95e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a962:	6093      	str	r3, [r2, #8]
 800a964:	e0cb      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f003 0320 	and.w	r3, r3, #32
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d009      	beq.n	800a984 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97c:	461a      	mov	r2, r3
 800a97e:	2320      	movs	r3, #32
 800a980:	6093      	str	r3, [r2, #8]
 800a982:	e0bc      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f040 80b7 	bne.w	800aafe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4a5d      	ldr	r2, [pc, #372]	; (800ab08 <PCD_EP_OutXfrComplete_int+0x210>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d90f      	bls.n	800a9b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00a      	beq.n	800a9b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9b4:	6093      	str	r3, [r2, #8]
 800a9b6:	e0a2      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	440b      	add	r3, r1
 800a9c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	0159      	lsls	r1, r3, #5
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	440b      	add	r3, r1
 800a9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4403      	add	r3, r0
 800a9ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	1a9b      	subs	r3, r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa06:	6819      	ldr	r1, [r3, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	1a9b      	subs	r3, r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4403      	add	r3, r0
 800aa16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4419      	add	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4613      	mov	r3, r2
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	1a9b      	subs	r3, r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4403      	add	r3, r0
 800aa2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa30:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d114      	bne.n	800aa62 <PCD_EP_OutXfrComplete_int+0x16a>
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	1a9b      	subs	r3, r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6818      	ldr	r0, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	f004 fe65 	bl	800f72c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f006 fe49 	bl	8011700 <HAL_PCD_DataOutStageCallback>
 800aa6e:	e046      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4a26      	ldr	r2, [pc, #152]	; (800ab0c <PCD_EP_OutXfrComplete_int+0x214>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d124      	bne.n	800aac2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa94:	6093      	str	r3, [r2, #8]
 800aa96:	e032      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d008      	beq.n	800aab4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	461a      	mov	r2, r3
 800aab0:	2320      	movs	r3, #32
 800aab2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f006 fe20 	bl	8011700 <HAL_PCD_DataOutStageCallback>
 800aac0:	e01d      	b.n	800aafe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d114      	bne.n	800aaf2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4613      	mov	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d108      	bne.n	800aaf2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6818      	ldr	r0, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aaea:	461a      	mov	r2, r3
 800aaec:	2100      	movs	r1, #0
 800aaee:	f004 fe1d 	bl	800f72c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f006 fe01 	bl	8011700 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	4f54300a 	.word	0x4f54300a
 800ab0c:	4f54310a 	.word	0x4f54310a

0800ab10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	333c      	adds	r3, #60	; 0x3c
 800ab28:	3304      	adds	r3, #4
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4a15      	ldr	r2, [pc, #84]	; (800ab98 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d90e      	bls.n	800ab64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f006 fdb9 	bl	80116dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d90c      	bls.n	800ab8c <PCD_EP_OutSetupPacket_int+0x7c>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d108      	bne.n	800ab8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab84:	461a      	mov	r2, r3
 800ab86:	2101      	movs	r1, #1
 800ab88:	f004 fdd0 	bl	800f72c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	4f54300a 	.word	0x4f54300a

0800ab9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
 800aba8:	4613      	mov	r3, r2
 800abaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d107      	bne.n	800abca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800abba:	883b      	ldrh	r3, [r7, #0]
 800abbc:	0419      	lsls	r1, r3, #16
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	629a      	str	r2, [r3, #40]	; 0x28
 800abc8:	e028      	b.n	800ac1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	0c1b      	lsrs	r3, r3, #16
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	4413      	add	r3, r2
 800abd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
 800abdc:	e00d      	b.n	800abfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	3340      	adds	r3, #64	; 0x40
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	3301      	adds	r3, #1
 800abf8:	73fb      	strb	r3, [r7, #15]
 800abfa:	7bfa      	ldrb	r2, [r7, #15]
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d3ec      	bcc.n	800abde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ac04:	883b      	ldrh	r3, [r7, #0]
 800ac06:	0418      	lsls	r0, r3, #16
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6819      	ldr	r1, [r3, #0]
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	4302      	orrs	r2, r0
 800ac14:	3340      	adds	r3, #64	; 0x40
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	887a      	ldrh	r2, [r7, #2]
 800ac3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac7e:	f043 0303 	orr.w	r3, r3, #3
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac9e:	2300      	movs	r3, #0
 800aca0:	603b      	str	r3, [r7, #0]
 800aca2:	4b20      	ldr	r3, [pc, #128]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x90>)
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	4a1f      	ldr	r2, [pc, #124]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x90>)
 800aca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acac:	6413      	str	r3, [r2, #64]	; 0x40
 800acae:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x90>)
 800acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800acba:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <HAL_PWREx_EnableOverDrive+0x94>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acc0:	f7fc fc82 	bl	80075c8 <HAL_GetTick>
 800acc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acc6:	e009      	b.n	800acdc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acc8:	f7fc fc7e 	bl	80075c8 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acd6:	d901      	bls.n	800acdc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e01f      	b.n	800ad1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acdc:	4b13      	ldr	r3, [pc, #76]	; (800ad2c <HAL_PWREx_EnableOverDrive+0x98>)
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d1ee      	bne.n	800acc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acf0:	f7fc fc6a 	bl	80075c8 <HAL_GetTick>
 800acf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acf6:	e009      	b.n	800ad0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acf8:	f7fc fc66 	bl	80075c8 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad06:	d901      	bls.n	800ad0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e007      	b.n	800ad1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <HAL_PWREx_EnableOverDrive+0x98>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad18:	d1ee      	bne.n	800acf8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40023800 	.word	0x40023800
 800ad28:	420e0040 	.word	0x420e0040
 800ad2c:	40007000 	.word	0x40007000
 800ad30:	420e0044 	.word	0x420e0044

0800ad34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0cc      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad48:	4b68      	ldr	r3, [pc, #416]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d90c      	bls.n	800ad70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad56:	4b65      	ldr	r3, [pc, #404]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad5e:	4b63      	ldr	r3, [pc, #396]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d001      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0b8      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d020      	beq.n	800adbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad88:	4b59      	ldr	r3, [pc, #356]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	4a58      	ldr	r2, [pc, #352]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ada0:	4b53      	ldr	r3, [pc, #332]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	4a52      	ldr	r2, [pc, #328]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ada6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800adaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adac:	4b50      	ldr	r3, [pc, #320]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	494d      	ldr	r1, [pc, #308]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d044      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d107      	bne.n	800ade2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800add2:	4b47      	ldr	r3, [pc, #284]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d119      	bne.n	800ae12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e07f      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d003      	beq.n	800adf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d107      	bne.n	800ae02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adf2:	4b3f      	ldr	r3, [pc, #252]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e06f      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae02:	4b3b      	ldr	r3, [pc, #236]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e067      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae12:	4b37      	ldr	r3, [pc, #220]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f023 0203 	bic.w	r2, r3, #3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4934      	ldr	r1, [pc, #208]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae24:	f7fc fbd0 	bl	80075c8 <HAL_GetTick>
 800ae28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae2a:	e00a      	b.n	800ae42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae2c:	f7fc fbcc 	bl	80075c8 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e04f      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae42:	4b2b      	ldr	r3, [pc, #172]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f003 020c 	and.w	r2, r3, #12
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d1eb      	bne.n	800ae2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae54:	4b25      	ldr	r3, [pc, #148]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d20c      	bcs.n	800ae7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae62:	4b22      	ldr	r3, [pc, #136]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae6a:	4b20      	ldr	r3, [pc, #128]	; (800aeec <HAL_RCC_ClockConfig+0x1b8>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 030f 	and.w	r3, r3, #15
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d001      	beq.n	800ae7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e032      	b.n	800aee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d008      	beq.n	800ae9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	4916      	ldr	r1, [pc, #88]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0308 	and.w	r3, r3, #8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d009      	beq.n	800aeba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aea6:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	490e      	ldr	r1, [pc, #56]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aeba:	f000 fb7f 	bl	800b5bc <HAL_RCC_GetSysClockFreq>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <HAL_RCC_ClockConfig+0x1bc>)
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	091b      	lsrs	r3, r3, #4
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	490a      	ldr	r1, [pc, #40]	; (800aef4 <HAL_RCC_ClockConfig+0x1c0>)
 800aecc:	5ccb      	ldrb	r3, [r1, r3]
 800aece:	fa22 f303 	lsr.w	r3, r2, r3
 800aed2:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <HAL_RCC_ClockConfig+0x1c4>)
 800aed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aed6:	4b09      	ldr	r3, [pc, #36]	; (800aefc <HAL_RCC_ClockConfig+0x1c8>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fc fb30 	bl	8007540 <HAL_InitTick>

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40023c00 	.word	0x40023c00
 800aef0:	40023800 	.word	0x40023800
 800aef4:	0801e570 	.word	0x0801e570
 800aef8:	20000000 	.word	0x20000000
 800aefc:	20000004 	.word	0x20000004

0800af00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af00:	b480      	push	{r7}
 800af02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af04:	4b03      	ldr	r3, [pc, #12]	; (800af14 <HAL_RCC_GetHCLKFreq+0x14>)
 800af06:	681b      	ldr	r3, [r3, #0]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000000 	.word	0x20000000

0800af18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800af1c:	f7ff fff0 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 800af20:	4602      	mov	r2, r0
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	0a9b      	lsrs	r3, r3, #10
 800af28:	f003 0307 	and.w	r3, r3, #7
 800af2c:	4903      	ldr	r1, [pc, #12]	; (800af3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af2e:	5ccb      	ldrb	r3, [r1, r3]
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af34:	4618      	mov	r0, r3
 800af36:	bd80      	pop	{r7, pc}
 800af38:	40023800 	.word	0x40023800
 800af3c:	0801e580 	.word	0x0801e580

0800af40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800af44:	f7ff ffdc 	bl	800af00 <HAL_RCC_GetHCLKFreq>
 800af48:	4602      	mov	r2, r0
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	0b5b      	lsrs	r3, r3, #13
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	4903      	ldr	r1, [pc, #12]	; (800af64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af56:	5ccb      	ldrb	r3, [r1, r3]
 800af58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	40023800 	.word	0x40023800
 800af64:	0801e580 	.word	0x0801e580

0800af68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08c      	sub	sp, #48	; 0x30
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d010      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800afa0:	4b6f      	ldr	r3, [pc, #444]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	496c      	ldr	r1, [pc, #432]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800afbe:	2301      	movs	r3, #1
 800afc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d010      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800afce:	4b64      	ldr	r3, [pc, #400]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afdc:	4960      	ldr	r1, [pc, #384]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800afec:	2301      	movs	r3, #1
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d017      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800affc:	4b58      	ldr	r3, [pc, #352]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800affe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	4955      	ldr	r1, [pc, #340]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b01a:	d101      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b01c:	2301      	movs	r3, #1
 800b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b028:	2301      	movs	r3, #1
 800b02a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d017      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b038:	4b49      	ldr	r3, [pc, #292]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b03e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b046:	4946      	ldr	r1, [pc, #280]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b048:	4313      	orrs	r3, r2
 800b04a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b056:	d101      	bne.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b058:	2301      	movs	r3, #1
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b064:	2301      	movs	r3, #1
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 808a 	beq.w	800b18a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b076:	2300      	movs	r3, #0
 800b078:	60bb      	str	r3, [r7, #8]
 800b07a:	4b39      	ldr	r3, [pc, #228]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	4a38      	ldr	r2, [pc, #224]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b084:	6413      	str	r3, [r2, #64]	; 0x40
 800b086:	4b36      	ldr	r3, [pc, #216]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b08e:	60bb      	str	r3, [r7, #8]
 800b090:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b092:	4b34      	ldr	r3, [pc, #208]	; (800b164 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a33      	ldr	r2, [pc, #204]	; (800b164 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b09c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b09e:	f7fc fa93 	bl	80075c8 <HAL_GetTick>
 800b0a2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b0a4:	e008      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b0a6:	f7fc fa8f 	bl	80075c8 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d901      	bls.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e278      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b0b8:	4b2a      	ldr	r3, [pc, #168]	; (800b164 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0f0      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b0c4:	4b26      	ldr	r3, [pc, #152]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0cc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d02f      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0dc:	6a3a      	ldr	r2, [r7, #32]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d028      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ea:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b0ec:	4b1e      	ldr	r3, [pc, #120]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b0f2:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b0f8:	4a19      	ldr	r2, [pc, #100]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b0fe:	4b18      	ldr	r3, [pc, #96]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b01      	cmp	r3, #1
 800b108:	d114      	bne.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b10a:	f7fc fa5d 	bl	80075c8 <HAL_GetTick>
 800b10e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b110:	e00a      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b112:	f7fc fa59 	bl	80075c8 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b120:	4293      	cmp	r3, r2
 800b122:	d901      	bls.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e240      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0ee      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b13c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b140:	d114      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b156:	4902      	ldr	r1, [pc, #8]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	608b      	str	r3, [r1, #8]
 800b15c:	e00c      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b15e:	bf00      	nop
 800b160:	40023800 	.word	0x40023800
 800b164:	40007000 	.word	0x40007000
 800b168:	42470e40 	.word	0x42470e40
 800b16c:	4b4a      	ldr	r3, [pc, #296]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	4a49      	ldr	r2, [pc, #292]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b172:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b176:	6093      	str	r3, [r2, #8]
 800b178:	4b47      	ldr	r3, [pc, #284]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b17a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b184:	4944      	ldr	r1, [pc, #272]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b186:	4313      	orrs	r3, r2
 800b188:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	d004      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b19c:	4b3f      	ldr	r3, [pc, #252]	; (800b29c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b19e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00a      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b1ac:	4b3a      	ldr	r3, [pc, #232]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ba:	4937      	ldr	r1, [pc, #220]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b1ce:	4b32      	ldr	r3, [pc, #200]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1d4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1dc:	492e      	ldr	r1, [pc, #184]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d011      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b1f0:	4b29      	ldr	r3, [pc, #164]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1f6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fe:	4926      	ldr	r1, [pc, #152]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b200:	4313      	orrs	r3, r2
 800b202:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b20e:	d101      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b210:	2301      	movs	r3, #1
 800b212:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b220:	4b1d      	ldr	r3, [pc, #116]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b226:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	491a      	ldr	r1, [pc, #104]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b230:	4313      	orrs	r3, r2
 800b232:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d011      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b248:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b250:	4911      	ldr	r1, [pc, #68]	; (800b298 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b252:	4313      	orrs	r3, r2
 800b254:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b260:	d101      	bne.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b262:	2301      	movs	r3, #1
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d005      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b274:	f040 80ff 	bne.w	800b476 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b278:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b27e:	f7fc f9a3 	bl	80075c8 <HAL_GetTick>
 800b282:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b284:	e00e      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b286:	f7fc f99f 	bl	80075c8 <HAL_GetTick>
 800b28a:	4602      	mov	r2, r0
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	2b02      	cmp	r3, #2
 800b292:	d907      	bls.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e188      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b298:	40023800 	.word	0x40023800
 800b29c:	424711e0 	.word	0x424711e0
 800b2a0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b2a4:	4b7e      	ldr	r3, [pc, #504]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1ea      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d028      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d124      	bne.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b2d8:	4b71      	ldr	r3, [pc, #452]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2de:	0c1b      	lsrs	r3, r3, #16
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b2ea:	4b6d      	ldr	r3, [pc, #436]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f0:	0e1b      	lsrs	r3, r3, #24
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	019b      	lsls	r3, r3, #6
 800b302:	431a      	orrs	r2, r3
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	085b      	lsrs	r3, r3, #1
 800b308:	3b01      	subs	r3, #1
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	431a      	orrs	r2, r3
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	061b      	lsls	r3, r3, #24
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	071b      	lsls	r3, r3, #28
 800b31a:	4961      	ldr	r1, [pc, #388]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d004      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b336:	d00a      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b340:	2b00      	cmp	r3, #0
 800b342:	d035      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b34c:	d130      	bne.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b34e:	4b54      	ldr	r3, [pc, #336]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b354:	0c1b      	lsrs	r3, r3, #16
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	3301      	adds	r3, #1
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b360:	4b4f      	ldr	r3, [pc, #316]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b366:	0f1b      	lsrs	r3, r3, #28
 800b368:	f003 0307 	and.w	r3, r3, #7
 800b36c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	019b      	lsls	r3, r3, #6
 800b378:	431a      	orrs	r2, r3
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	085b      	lsrs	r3, r3, #1
 800b37e:	3b01      	subs	r3, #1
 800b380:	041b      	lsls	r3, r3, #16
 800b382:	431a      	orrs	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	061b      	lsls	r3, r3, #24
 800b38a:	431a      	orrs	r2, r3
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	071b      	lsls	r3, r3, #28
 800b390:	4943      	ldr	r1, [pc, #268]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b392:	4313      	orrs	r3, r2
 800b394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b398:	4b41      	ldr	r3, [pc, #260]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39e:	f023 021f 	bic.w	r2, r3, #31
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	493d      	ldr	r1, [pc, #244]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d029      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c4:	d124      	bne.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b3c6:	4b36      	ldr	r3, [pc, #216]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3cc:	0c1b      	lsrs	r3, r3, #16
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b3d8:	4b31      	ldr	r3, [pc, #196]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3de:	0f1b      	lsrs	r3, r3, #28
 800b3e0:	f003 0307 	and.w	r3, r3, #7
 800b3e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	019b      	lsls	r3, r3, #6
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	085b      	lsrs	r3, r3, #1
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	041b      	lsls	r3, r3, #16
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	061b      	lsls	r3, r3, #24
 800b402:	431a      	orrs	r2, r3
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	071b      	lsls	r3, r3, #28
 800b408:	4925      	ldr	r1, [pc, #148]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d016      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	019b      	lsls	r3, r3, #6
 800b426:	431a      	orrs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	085b      	lsrs	r3, r3, #1
 800b42e:	3b01      	subs	r3, #1
 800b430:	041b      	lsls	r3, r3, #16
 800b432:	431a      	orrs	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	061b      	lsls	r3, r3, #24
 800b43a:	431a      	orrs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	071b      	lsls	r3, r3, #28
 800b442:	4917      	ldr	r1, [pc, #92]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b444:	4313      	orrs	r3, r2
 800b446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b450:	f7fc f8ba 	bl	80075c8 <HAL_GetTick>
 800b454:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b456:	e008      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b458:	f7fc f8b6 	bl	80075c8 <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b02      	cmp	r3, #2
 800b464:	d901      	bls.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e09f      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b46a:	4b0d      	ldr	r3, [pc, #52]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	2b01      	cmp	r3, #1
 800b47a:	f040 8095 	bne.w	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b47e:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b484:	f7fc f8a0 	bl	80075c8 <HAL_GetTick>
 800b488:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b48a:	e00f      	b.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b48c:	f7fc f89c 	bl	80075c8 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	2b02      	cmp	r3, #2
 800b498:	d908      	bls.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e085      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b49e:	bf00      	nop
 800b4a0:	40023800 	.word	0x40023800
 800b4a4:	42470068 	.word	0x42470068
 800b4a8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b4ac:	4b41      	ldr	r3, [pc, #260]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b8:	d0e8      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d009      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d02b      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d127      	bne.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b4e2:	4b34      	ldr	r3, [pc, #208]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e8:	0c1b      	lsrs	r3, r3, #16
 800b4ea:	f003 0303 	and.w	r3, r3, #3
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699a      	ldr	r2, [r3, #24]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	019b      	lsls	r3, r3, #6
 800b4fe:	431a      	orrs	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	3b01      	subs	r3, #1
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	061b      	lsls	r3, r3, #24
 800b510:	4928      	ldr	r1, [pc, #160]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b512:	4313      	orrs	r3, r2
 800b514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b518:	4b26      	ldr	r3, [pc, #152]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b51e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	3b01      	subs	r3, #1
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	4922      	ldr	r1, [pc, #136]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01d      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b546:	d118      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b548:	4b1a      	ldr	r3, [pc, #104]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b54e:	0e1b      	lsrs	r3, r3, #24
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	019b      	lsls	r3, r3, #6
 800b560:	431a      	orrs	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	085b      	lsrs	r3, r3, #1
 800b568:	3b01      	subs	r3, #1
 800b56a:	041b      	lsls	r3, r3, #16
 800b56c:	431a      	orrs	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	061b      	lsls	r3, r3, #24
 800b572:	4910      	ldr	r1, [pc, #64]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b57c:	2201      	movs	r2, #1
 800b57e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b580:	f7fc f822 	bl	80075c8 <HAL_GetTick>
 800b584:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b586:	e008      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b588:	f7fc f81e 	bl	80075c8 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d901      	bls.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e007      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b59a:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a6:	d1ef      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3730      	adds	r7, #48	; 0x30
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	40023800 	.word	0x40023800
 800b5b8:	42470070 	.word	0x42470070

0800b5bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5c0:	b088      	sub	sp, #32
 800b5c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5d8:	4bce      	ldr	r3, [pc, #824]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f003 030c 	and.w	r3, r3, #12
 800b5e0:	2b0c      	cmp	r3, #12
 800b5e2:	f200 818d 	bhi.w	800b900 <HAL_RCC_GetSysClockFreq+0x344>
 800b5e6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <HAL_RCC_GetSysClockFreq+0x30>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b621 	.word	0x0800b621
 800b5f0:	0800b901 	.word	0x0800b901
 800b5f4:	0800b901 	.word	0x0800b901
 800b5f8:	0800b901 	.word	0x0800b901
 800b5fc:	0800b627 	.word	0x0800b627
 800b600:	0800b901 	.word	0x0800b901
 800b604:	0800b901 	.word	0x0800b901
 800b608:	0800b901 	.word	0x0800b901
 800b60c:	0800b62d 	.word	0x0800b62d
 800b610:	0800b901 	.word	0x0800b901
 800b614:	0800b901 	.word	0x0800b901
 800b618:	0800b901 	.word	0x0800b901
 800b61c:	0800b7a1 	.word	0x0800b7a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b620:	4bbd      	ldr	r3, [pc, #756]	; (800b918 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b622:	61bb      	str	r3, [r7, #24]
       break;
 800b624:	e16f      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b626:	4bbd      	ldr	r3, [pc, #756]	; (800b91c <HAL_RCC_GetSysClockFreq+0x360>)
 800b628:	61bb      	str	r3, [r7, #24]
      break;
 800b62a:	e16c      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b62c:	4bb9      	ldr	r3, [pc, #740]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b634:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b636:	4bb7      	ldr	r3, [pc, #732]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d053      	beq.n	800b6ea <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b642:	4bb4      	ldr	r3, [pc, #720]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	099b      	lsrs	r3, r3, #6
 800b648:	461a      	mov	r2, r3
 800b64a:	f04f 0300 	mov.w	r3, #0
 800b64e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b652:	f04f 0100 	mov.w	r1, #0
 800b656:	ea02 0400 	and.w	r4, r2, r0
 800b65a:	603c      	str	r4, [r7, #0]
 800b65c:	400b      	ands	r3, r1
 800b65e:	607b      	str	r3, [r7, #4]
 800b660:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b664:	4620      	mov	r0, r4
 800b666:	4629      	mov	r1, r5
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	014b      	lsls	r3, r1, #5
 800b672:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b676:	0142      	lsls	r2, r0, #5
 800b678:	4610      	mov	r0, r2
 800b67a:	4619      	mov	r1, r3
 800b67c:	4623      	mov	r3, r4
 800b67e:	1ac0      	subs	r0, r0, r3
 800b680:	462b      	mov	r3, r5
 800b682:	eb61 0103 	sbc.w	r1, r1, r3
 800b686:	f04f 0200 	mov.w	r2, #0
 800b68a:	f04f 0300 	mov.w	r3, #0
 800b68e:	018b      	lsls	r3, r1, #6
 800b690:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b694:	0182      	lsls	r2, r0, #6
 800b696:	1a12      	subs	r2, r2, r0
 800b698:	eb63 0301 	sbc.w	r3, r3, r1
 800b69c:	f04f 0000 	mov.w	r0, #0
 800b6a0:	f04f 0100 	mov.w	r1, #0
 800b6a4:	00d9      	lsls	r1, r3, #3
 800b6a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6aa:	00d0      	lsls	r0, r2, #3
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	1852      	adds	r2, r2, r1
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	eb43 0101 	adc.w	r1, r3, r1
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	f04f 0000 	mov.w	r0, #0
 800b6c0:	f04f 0100 	mov.w	r1, #0
 800b6c4:	0259      	lsls	r1, r3, #9
 800b6c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b6ca:	0250      	lsls	r0, r2, #9
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	f7f5 fa84 	bl	8000be8 <__aeabi_uldivmod>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	e04c      	b.n	800b784 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6ea:	4b8a      	ldr	r3, [pc, #552]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	099b      	lsrs	r3, r3, #6
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	f04f 0300 	mov.w	r3, #0
 800b6f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6fa:	f04f 0100 	mov.w	r1, #0
 800b6fe:	ea02 0a00 	and.w	sl, r2, r0
 800b702:	ea03 0b01 	and.w	fp, r3, r1
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	014b      	lsls	r3, r1, #5
 800b714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b718:	0142      	lsls	r2, r0, #5
 800b71a:	4610      	mov	r0, r2
 800b71c:	4619      	mov	r1, r3
 800b71e:	ebb0 000a 	subs.w	r0, r0, sl
 800b722:	eb61 010b 	sbc.w	r1, r1, fp
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	018b      	lsls	r3, r1, #6
 800b730:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b734:	0182      	lsls	r2, r0, #6
 800b736:	1a12      	subs	r2, r2, r0
 800b738:	eb63 0301 	sbc.w	r3, r3, r1
 800b73c:	f04f 0000 	mov.w	r0, #0
 800b740:	f04f 0100 	mov.w	r1, #0
 800b744:	00d9      	lsls	r1, r3, #3
 800b746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b74a:	00d0      	lsls	r0, r2, #3
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	eb12 020a 	adds.w	r2, r2, sl
 800b754:	eb43 030b 	adc.w	r3, r3, fp
 800b758:	f04f 0000 	mov.w	r0, #0
 800b75c:	f04f 0100 	mov.w	r1, #0
 800b760:	0299      	lsls	r1, r3, #10
 800b762:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b766:	0290      	lsls	r0, r2, #10
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4610      	mov	r0, r2
 800b76e:	4619      	mov	r1, r3
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	461a      	mov	r2, r3
 800b774:	f04f 0300 	mov.w	r3, #0
 800b778:	f7f5 fa36 	bl	8000be8 <__aeabi_uldivmod>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4613      	mov	r3, r2
 800b782:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b784:	4b63      	ldr	r3, [pc, #396]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	0c1b      	lsrs	r3, r3, #16
 800b78a:	f003 0303 	and.w	r3, r3, #3
 800b78e:	3301      	adds	r3, #1
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b794:	69fa      	ldr	r2, [r7, #28]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79c:	61bb      	str	r3, [r7, #24]
      break;
 800b79e:	e0b2      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7a0:	4b5c      	ldr	r3, [pc, #368]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7a8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7aa:	4b5a      	ldr	r3, [pc, #360]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d04d      	beq.n	800b852 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7b6:	4b57      	ldr	r3, [pc, #348]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	099b      	lsrs	r3, r3, #6
 800b7bc:	461a      	mov	r2, r3
 800b7be:	f04f 0300 	mov.w	r3, #0
 800b7c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b7c6:	f04f 0100 	mov.w	r1, #0
 800b7ca:	ea02 0800 	and.w	r8, r2, r0
 800b7ce:	ea03 0901 	and.w	r9, r3, r1
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	f04f 0300 	mov.w	r3, #0
 800b7de:	014b      	lsls	r3, r1, #5
 800b7e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b7e4:	0142      	lsls	r2, r0, #5
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	ebb0 0008 	subs.w	r0, r0, r8
 800b7ee:	eb61 0109 	sbc.w	r1, r1, r9
 800b7f2:	f04f 0200 	mov.w	r2, #0
 800b7f6:	f04f 0300 	mov.w	r3, #0
 800b7fa:	018b      	lsls	r3, r1, #6
 800b7fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b800:	0182      	lsls	r2, r0, #6
 800b802:	1a12      	subs	r2, r2, r0
 800b804:	eb63 0301 	sbc.w	r3, r3, r1
 800b808:	f04f 0000 	mov.w	r0, #0
 800b80c:	f04f 0100 	mov.w	r1, #0
 800b810:	00d9      	lsls	r1, r3, #3
 800b812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b816:	00d0      	lsls	r0, r2, #3
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	eb12 0208 	adds.w	r2, r2, r8
 800b820:	eb43 0309 	adc.w	r3, r3, r9
 800b824:	f04f 0000 	mov.w	r0, #0
 800b828:	f04f 0100 	mov.w	r1, #0
 800b82c:	0259      	lsls	r1, r3, #9
 800b82e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b832:	0250      	lsls	r0, r2, #9
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4610      	mov	r0, r2
 800b83a:	4619      	mov	r1, r3
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	461a      	mov	r2, r3
 800b840:	f04f 0300 	mov.w	r3, #0
 800b844:	f7f5 f9d0 	bl	8000be8 <__aeabi_uldivmod>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4613      	mov	r3, r2
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e04a      	b.n	800b8e8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b852:	4b30      	ldr	r3, [pc, #192]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	099b      	lsrs	r3, r3, #6
 800b858:	461a      	mov	r2, r3
 800b85a:	f04f 0300 	mov.w	r3, #0
 800b85e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	ea02 0400 	and.w	r4, r2, r0
 800b86a:	ea03 0501 	and.w	r5, r3, r1
 800b86e:	4620      	mov	r0, r4
 800b870:	4629      	mov	r1, r5
 800b872:	f04f 0200 	mov.w	r2, #0
 800b876:	f04f 0300 	mov.w	r3, #0
 800b87a:	014b      	lsls	r3, r1, #5
 800b87c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b880:	0142      	lsls	r2, r0, #5
 800b882:	4610      	mov	r0, r2
 800b884:	4619      	mov	r1, r3
 800b886:	1b00      	subs	r0, r0, r4
 800b888:	eb61 0105 	sbc.w	r1, r1, r5
 800b88c:	f04f 0200 	mov.w	r2, #0
 800b890:	f04f 0300 	mov.w	r3, #0
 800b894:	018b      	lsls	r3, r1, #6
 800b896:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b89a:	0182      	lsls	r2, r0, #6
 800b89c:	1a12      	subs	r2, r2, r0
 800b89e:	eb63 0301 	sbc.w	r3, r3, r1
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f04f 0100 	mov.w	r1, #0
 800b8aa:	00d9      	lsls	r1, r3, #3
 800b8ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8b0:	00d0      	lsls	r0, r2, #3
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	1912      	adds	r2, r2, r4
 800b8b8:	eb45 0303 	adc.w	r3, r5, r3
 800b8bc:	f04f 0000 	mov.w	r0, #0
 800b8c0:	f04f 0100 	mov.w	r1, #0
 800b8c4:	0299      	lsls	r1, r3, #10
 800b8c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b8ca:	0290      	lsls	r0, r2, #10
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	f7f5 f984 	bl	8000be8 <__aeabi_uldivmod>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <HAL_RCC_GetSysClockFreq+0x358>)
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	0f1b      	lsrs	r3, r3, #28
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fc:	61bb      	str	r3, [r7, #24]
      break;
 800b8fe:	e002      	b.n	800b906 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b902:	61bb      	str	r3, [r7, #24]
      break;
 800b904:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b906:	69bb      	ldr	r3, [r7, #24]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3720      	adds	r7, #32
 800b90c:	46bd      	mov	sp, r7
 800b90e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b912:	bf00      	nop
 800b914:	40023800 	.word	0x40023800
 800b918:	00f42400 	.word	0x00f42400
 800b91c:	007a1200 	.word	0x007a1200

0800b920 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e28d      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 0301 	and.w	r3, r3, #1
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 8083 	beq.w	800ba46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b940:	4b94      	ldr	r3, [pc, #592]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f003 030c 	and.w	r3, r3, #12
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d019      	beq.n	800b980 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b94c:	4b91      	ldr	r3, [pc, #580]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b954:	2b08      	cmp	r3, #8
 800b956:	d106      	bne.n	800b966 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b958:	4b8e      	ldr	r3, [pc, #568]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b964:	d00c      	beq.n	800b980 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b966:	4b8b      	ldr	r3, [pc, #556]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b96e:	2b0c      	cmp	r3, #12
 800b970:	d112      	bne.n	800b998 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b972:	4b88      	ldr	r3, [pc, #544]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b97a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b97e:	d10b      	bne.n	800b998 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b980:	4b84      	ldr	r3, [pc, #528]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d05b      	beq.n	800ba44 <HAL_RCC_OscConfig+0x124>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d157      	bne.n	800ba44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e25a      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a0:	d106      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x90>
 800b9a2:	4b7c      	ldr	r3, [pc, #496]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a7b      	ldr	r2, [pc, #492]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	e01d      	b.n	800b9ec <HAL_RCC_OscConfig+0xcc>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9b8:	d10c      	bne.n	800b9d4 <HAL_RCC_OscConfig+0xb4>
 800b9ba:	4b76      	ldr	r3, [pc, #472]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a75      	ldr	r2, [pc, #468]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	4b73      	ldr	r3, [pc, #460]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a72      	ldr	r2, [pc, #456]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	e00b      	b.n	800b9ec <HAL_RCC_OscConfig+0xcc>
 800b9d4:	4b6f      	ldr	r3, [pc, #444]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a6e      	ldr	r2, [pc, #440]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	4b6c      	ldr	r3, [pc, #432]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a6b      	ldr	r2, [pc, #428]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800b9e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d013      	beq.n	800ba1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f4:	f7fb fde8 	bl	80075c8 <HAL_GetTick>
 800b9f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9fa:	e008      	b.n	800ba0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9fc:	f7fb fde4 	bl	80075c8 <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b64      	cmp	r3, #100	; 0x64
 800ba08:	d901      	bls.n	800ba0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e21f      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba0e:	4b61      	ldr	r3, [pc, #388]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0f0      	beq.n	800b9fc <HAL_RCC_OscConfig+0xdc>
 800ba1a:	e014      	b.n	800ba46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba1c:	f7fb fdd4 	bl	80075c8 <HAL_GetTick>
 800ba20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba22:	e008      	b.n	800ba36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba24:	f7fb fdd0 	bl	80075c8 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b64      	cmp	r3, #100	; 0x64
 800ba30:	d901      	bls.n	800ba36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e20b      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba36:	4b57      	ldr	r3, [pc, #348]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f0      	bne.n	800ba24 <HAL_RCC_OscConfig+0x104>
 800ba42:	e000      	b.n	800ba46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0302 	and.w	r3, r3, #2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d06f      	beq.n	800bb32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba52:	4b50      	ldr	r3, [pc, #320]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f003 030c 	and.w	r3, r3, #12
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d017      	beq.n	800ba8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba5e:	4b4d      	ldr	r3, [pc, #308]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba66:	2b08      	cmp	r3, #8
 800ba68:	d105      	bne.n	800ba76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba6a:	4b4a      	ldr	r3, [pc, #296]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba76:	4b47      	ldr	r3, [pc, #284]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba7e:	2b0c      	cmp	r3, #12
 800ba80:	d11c      	bne.n	800babc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba82:	4b44      	ldr	r3, [pc, #272]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d116      	bne.n	800babc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba8e:	4b41      	ldr	r3, [pc, #260]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <HAL_RCC_OscConfig+0x186>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d001      	beq.n	800baa6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e1d3      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baa6:	4b3b      	ldr	r3, [pc, #236]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4937      	ldr	r1, [pc, #220]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800baba:	e03a      	b.n	800bb32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d020      	beq.n	800bb06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bac4:	4b34      	ldr	r3, [pc, #208]	; (800bb98 <HAL_RCC_OscConfig+0x278>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baca:	f7fb fd7d 	bl	80075c8 <HAL_GetTick>
 800bace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bad0:	e008      	b.n	800bae4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bad2:	f7fb fd79 	bl	80075c8 <HAL_GetTick>
 800bad6:	4602      	mov	r2, r0
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	2b02      	cmp	r3, #2
 800bade:	d901      	bls.n	800bae4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e1b4      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bae4:	4b2b      	ldr	r3, [pc, #172]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0f0      	beq.n	800bad2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf0:	4b28      	ldr	r3, [pc, #160]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	4925      	ldr	r1, [pc, #148]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	600b      	str	r3, [r1, #0]
 800bb04:	e015      	b.n	800bb32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb06:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <HAL_RCC_OscConfig+0x278>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb0c:	f7fb fd5c 	bl	80075c8 <HAL_GetTick>
 800bb10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb12:	e008      	b.n	800bb26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb14:	f7fb fd58 	bl	80075c8 <HAL_GetTick>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d901      	bls.n	800bb26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e193      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb26:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1f0      	bne.n	800bb14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0308 	and.w	r3, r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d036      	beq.n	800bbac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d016      	beq.n	800bb74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb46:	4b15      	ldr	r3, [pc, #84]	; (800bb9c <HAL_RCC_OscConfig+0x27c>)
 800bb48:	2201      	movs	r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb4c:	f7fb fd3c 	bl	80075c8 <HAL_GetTick>
 800bb50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb52:	e008      	b.n	800bb66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb54:	f7fb fd38 	bl	80075c8 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d901      	bls.n	800bb66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e173      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb66:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <HAL_RCC_OscConfig+0x274>)
 800bb68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0f0      	beq.n	800bb54 <HAL_RCC_OscConfig+0x234>
 800bb72:	e01b      	b.n	800bbac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb74:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <HAL_RCC_OscConfig+0x27c>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb7a:	f7fb fd25 	bl	80075c8 <HAL_GetTick>
 800bb7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb80:	e00e      	b.n	800bba0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb82:	f7fb fd21 	bl	80075c8 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d907      	bls.n	800bba0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e15c      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
 800bb94:	40023800 	.word	0x40023800
 800bb98:	42470000 	.word	0x42470000
 800bb9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bba0:	4b8a      	ldr	r3, [pc, #552]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1ea      	bne.n	800bb82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 8097 	beq.w	800bce8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbbe:	4b83      	ldr	r3, [pc, #524]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10f      	bne.n	800bbea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbca:	2300      	movs	r3, #0
 800bbcc:	60bb      	str	r3, [r7, #8]
 800bbce:	4b7f      	ldr	r3, [pc, #508]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd2:	4a7e      	ldr	r2, [pc, #504]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbd8:	6413      	str	r3, [r2, #64]	; 0x40
 800bbda:	4b7c      	ldr	r3, [pc, #496]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe2:	60bb      	str	r3, [r7, #8]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbea:	4b79      	ldr	r3, [pc, #484]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d118      	bne.n	800bc28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bbf6:	4b76      	ldr	r3, [pc, #472]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a75      	ldr	r2, [pc, #468]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bbfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc02:	f7fb fce1 	bl	80075c8 <HAL_GetTick>
 800bc06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc08:	e008      	b.n	800bc1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc0a:	f7fb fcdd 	bl	80075c8 <HAL_GetTick>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d901      	bls.n	800bc1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e118      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc1c:	4b6c      	ldr	r3, [pc, #432]	; (800bdd0 <HAL_RCC_OscConfig+0x4b0>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0f0      	beq.n	800bc0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d106      	bne.n	800bc3e <HAL_RCC_OscConfig+0x31e>
 800bc30:	4b66      	ldr	r3, [pc, #408]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc34:	4a65      	ldr	r2, [pc, #404]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc36:	f043 0301 	orr.w	r3, r3, #1
 800bc3a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc3c:	e01c      	b.n	800bc78 <HAL_RCC_OscConfig+0x358>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	d10c      	bne.n	800bc60 <HAL_RCC_OscConfig+0x340>
 800bc46:	4b61      	ldr	r3, [pc, #388]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc4a:	4a60      	ldr	r2, [pc, #384]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc4c:	f043 0304 	orr.w	r3, r3, #4
 800bc50:	6713      	str	r3, [r2, #112]	; 0x70
 800bc52:	4b5e      	ldr	r3, [pc, #376]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc56:	4a5d      	ldr	r2, [pc, #372]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc58:	f043 0301 	orr.w	r3, r3, #1
 800bc5c:	6713      	str	r3, [r2, #112]	; 0x70
 800bc5e:	e00b      	b.n	800bc78 <HAL_RCC_OscConfig+0x358>
 800bc60:	4b5a      	ldr	r3, [pc, #360]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc64:	4a59      	ldr	r2, [pc, #356]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc66:	f023 0301 	bic.w	r3, r3, #1
 800bc6a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc6c:	4b57      	ldr	r3, [pc, #348]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc70:	4a56      	ldr	r2, [pc, #344]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bc72:	f023 0304 	bic.w	r3, r3, #4
 800bc76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d015      	beq.n	800bcac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc80:	f7fb fca2 	bl	80075c8 <HAL_GetTick>
 800bc84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc86:	e00a      	b.n	800bc9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc88:	f7fb fc9e 	bl	80075c8 <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d901      	bls.n	800bc9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e0d7      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc9e:	4b4b      	ldr	r3, [pc, #300]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0ee      	beq.n	800bc88 <HAL_RCC_OscConfig+0x368>
 800bcaa:	e014      	b.n	800bcd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcac:	f7fb fc8c 	bl	80075c8 <HAL_GetTick>
 800bcb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcb2:	e00a      	b.n	800bcca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcb4:	f7fb fc88 	bl	80075c8 <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d901      	bls.n	800bcca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e0c1      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcca:	4b40      	ldr	r3, [pc, #256]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcce:	f003 0302 	and.w	r3, r3, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1ee      	bne.n	800bcb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d105      	bne.n	800bce8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bcdc:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	4a3a      	ldr	r2, [pc, #232]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80ad 	beq.w	800be4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bcf2:	4b36      	ldr	r3, [pc, #216]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f003 030c 	and.w	r3, r3, #12
 800bcfa:	2b08      	cmp	r3, #8
 800bcfc:	d060      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d145      	bne.n	800bd92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd06:	4b33      	ldr	r3, [pc, #204]	; (800bdd4 <HAL_RCC_OscConfig+0x4b4>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd0c:	f7fb fc5c 	bl	80075c8 <HAL_GetTick>
 800bd10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd12:	e008      	b.n	800bd26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd14:	f7fb fc58 	bl	80075c8 <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d901      	bls.n	800bd26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e093      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd26:	4b29      	ldr	r3, [pc, #164]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1f0      	bne.n	800bd14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	69da      	ldr	r2, [r3, #28]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	019b      	lsls	r3, r3, #6
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd48:	085b      	lsrs	r3, r3, #1
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	041b      	lsls	r3, r3, #16
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	061b      	lsls	r3, r3, #24
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5c:	071b      	lsls	r3, r3, #28
 800bd5e:	491b      	ldr	r1, [pc, #108]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd64:	4b1b      	ldr	r3, [pc, #108]	; (800bdd4 <HAL_RCC_OscConfig+0x4b4>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd6a:	f7fb fc2d 	bl	80075c8 <HAL_GetTick>
 800bd6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd70:	e008      	b.n	800bd84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd72:	f7fb fc29 	bl	80075c8 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d901      	bls.n	800bd84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e064      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd84:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0f0      	beq.n	800bd72 <HAL_RCC_OscConfig+0x452>
 800bd90:	e05c      	b.n	800be4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd92:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <HAL_RCC_OscConfig+0x4b4>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd98:	f7fb fc16 	bl	80075c8 <HAL_GetTick>
 800bd9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd9e:	e008      	b.n	800bdb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bda0:	f7fb fc12 	bl	80075c8 <HAL_GetTick>
 800bda4:	4602      	mov	r2, r0
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d901      	bls.n	800bdb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e04d      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdb2:	4b06      	ldr	r3, [pc, #24]	; (800bdcc <HAL_RCC_OscConfig+0x4ac>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1f0      	bne.n	800bda0 <HAL_RCC_OscConfig+0x480>
 800bdbe:	e045      	b.n	800be4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d107      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e040      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	40007000 	.word	0x40007000
 800bdd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bdd8:	4b1f      	ldr	r3, [pc, #124]	; (800be58 <HAL_RCC_OscConfig+0x538>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d030      	beq.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d129      	bne.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d122      	bne.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800be08:	4013      	ands	r3, r2
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800be10:	4293      	cmp	r3, r2
 800be12:	d119      	bne.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1e:	085b      	lsrs	r3, r3, #1
 800be20:	3b01      	subs	r3, #1
 800be22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800be24:	429a      	cmp	r2, r3
 800be26:	d10f      	bne.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800be34:	429a      	cmp	r2, r3
 800be36:	d107      	bne.n	800be48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be44:	429a      	cmp	r2, r3
 800be46:	d001      	beq.n	800be4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e000      	b.n	800be4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	40023800 	.word	0x40023800

0800be5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e083      	b.n	800bf76 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	7f5b      	ldrb	r3, [r3, #29]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d105      	bne.n	800be84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7fb f888 	bl	8006f94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2202      	movs	r2, #2
 800be88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	22ca      	movs	r2, #202	; 0xca
 800be90:	625a      	str	r2, [r3, #36]	; 0x24
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2253      	movs	r2, #83	; 0x53
 800be98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f897 	bl	800bfce <RTC_EnterInitMode>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d008      	beq.n	800beb8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	22ff      	movs	r2, #255	; 0xff
 800beac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2204      	movs	r2, #4
 800beb2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e05e      	b.n	800bf76 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6812      	ldr	r2, [r2, #0]
 800bec2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6899      	ldr	r1, [r3, #8]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	68d2      	ldr	r2, [r2, #12]
 800bef2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6919      	ldr	r1, [r3, #16]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	041a      	lsls	r2, r3, #16
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f003 0320 	and.w	r3, r3, #32
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10e      	bne.n	800bf44 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f829 	bl	800bf7e <HAL_RTC_WaitForSynchro>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d008      	beq.n	800bf44 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	22ff      	movs	r2, #255	; 0xff
 800bf38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2204      	movs	r2, #4
 800bf3e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e018      	b.n	800bf76 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	699a      	ldr	r2, [r3, #24]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	22ff      	movs	r2, #255	; 0xff
 800bf6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bf74:	2300      	movs	r3, #0
  }
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bf86:	2300      	movs	r3, #0
 800bf88:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bf98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf9a:	f7fb fb15 	bl	80075c8 <HAL_GetTick>
 800bf9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bfa0:	e009      	b.n	800bfb6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bfa2:	f7fb fb11 	bl	80075c8 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e007      	b.n	800bfc6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	f003 0320 	and.w	r3, r3, #32
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0ee      	beq.n	800bfa2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b084      	sub	sp, #16
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d119      	bne.n	800c01c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bff2:	f7fb fae9 	bl	80075c8 <HAL_GetTick>
 800bff6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bff8:	e009      	b.n	800c00e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bffa:	f7fb fae5 	bl	80075c8 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c008:	d901      	bls.n	800c00e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e007      	b.n	800c01e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0ee      	beq.n	800bffa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e041      	b.n	800c0bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7fa ffcb 	bl	8006fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2202      	movs	r2, #2
 800c056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	4619      	mov	r1, r3
 800c064:	4610      	mov	r0, r2
 800c066:	f000 fbb1 	bl	800c7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2201      	movs	r2, #1
 800c096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d001      	beq.n	800c0dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e04e      	b.n	800c17a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f042 0201 	orr.w	r2, r2, #1
 800c0f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a23      	ldr	r2, [pc, #140]	; (800c188 <HAL_TIM_Base_Start_IT+0xc4>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d022      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c106:	d01d      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a1f      	ldr	r2, [pc, #124]	; (800c18c <HAL_TIM_Base_Start_IT+0xc8>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d018      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a1e      	ldr	r2, [pc, #120]	; (800c190 <HAL_TIM_Base_Start_IT+0xcc>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d013      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a1c      	ldr	r2, [pc, #112]	; (800c194 <HAL_TIM_Base_Start_IT+0xd0>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00e      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a1b      	ldr	r2, [pc, #108]	; (800c198 <HAL_TIM_Base_Start_IT+0xd4>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d009      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a19      	ldr	r2, [pc, #100]	; (800c19c <HAL_TIM_Base_Start_IT+0xd8>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d004      	beq.n	800c144 <HAL_TIM_Base_Start_IT+0x80>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a18      	ldr	r2, [pc, #96]	; (800c1a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d111      	bne.n	800c168 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f003 0307 	and.w	r3, r3, #7
 800c14e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b06      	cmp	r3, #6
 800c154:	d010      	beq.n	800c178 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f042 0201 	orr.w	r2, r2, #1
 800c164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c166:	e007      	b.n	800c178 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f042 0201 	orr.w	r2, r2, #1
 800c176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	40010000 	.word	0x40010000
 800c18c:	40000400 	.word	0x40000400
 800c190:	40000800 	.word	0x40000800
 800c194:	40000c00 	.word	0x40000c00
 800c198:	40010400 	.word	0x40010400
 800c19c:	40014000 	.word	0x40014000
 800c1a0:	40001800 	.word	0x40001800

0800c1a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e041      	b.n	800c23a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d106      	bne.n	800c1d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f839 	bl	800c242 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f000 faf2 	bl	800c7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c242:	b480      	push	{r7}
 800c244:	b083      	sub	sp, #12
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c24a:	bf00      	nop
 800c24c:	370c      	adds	r7, #12
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b082      	sub	sp, #8
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0302 	and.w	r3, r3, #2
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d122      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f003 0302 	and.w	r3, r3, #2
 800c276:	2b02      	cmp	r3, #2
 800c278:	d11b      	bne.n	800c2b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f06f 0202 	mvn.w	r2, #2
 800c282:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 fa78 	bl	800c78e <HAL_TIM_IC_CaptureCallback>
 800c29e:	e005      	b.n	800c2ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fa6a 	bl	800c77a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa7b 	bl	800c7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d122      	bne.n	800c306 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f003 0304 	and.w	r3, r3, #4
 800c2ca:	2b04      	cmp	r3, #4
 800c2cc:	d11b      	bne.n	800c306 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f06f 0204 	mvn.w	r2, #4
 800c2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2202      	movs	r2, #2
 800c2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fa4e 	bl	800c78e <HAL_TIM_IC_CaptureCallback>
 800c2f2:	e005      	b.n	800c300 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fa40 	bl	800c77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa51 	bl	800c7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	691b      	ldr	r3, [r3, #16]
 800c30c:	f003 0308 	and.w	r3, r3, #8
 800c310:	2b08      	cmp	r3, #8
 800c312:	d122      	bne.n	800c35a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f003 0308 	and.w	r3, r3, #8
 800c31e:	2b08      	cmp	r3, #8
 800c320:	d11b      	bne.n	800c35a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f06f 0208 	mvn.w	r2, #8
 800c32a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2204      	movs	r2, #4
 800c330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fa24 	bl	800c78e <HAL_TIM_IC_CaptureCallback>
 800c346:	e005      	b.n	800c354 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fa16 	bl	800c77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa27 	bl	800c7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b10      	cmp	r3, #16
 800c366:	d122      	bne.n	800c3ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	f003 0310 	and.w	r3, r3, #16
 800c372:	2b10      	cmp	r3, #16
 800c374:	d11b      	bne.n	800c3ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f06f 0210 	mvn.w	r2, #16
 800c37e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2208      	movs	r2, #8
 800c384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f9fa 	bl	800c78e <HAL_TIM_IC_CaptureCallback>
 800c39a:	e005      	b.n	800c3a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f9ec 	bl	800c77a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f9fd 	bl	800c7a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d10e      	bne.n	800c3da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d107      	bne.n	800c3da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f06f 0201 	mvn.w	r2, #1
 800c3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7f9 fc71 	bl	8005cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3e4:	2b80      	cmp	r3, #128	; 0x80
 800c3e6:	d10e      	bne.n	800c406 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f2:	2b80      	cmp	r3, #128	; 0x80
 800c3f4:	d107      	bne.n	800c406 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fd53 	bl	800ceac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d10e      	bne.n	800c432 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41e:	2b40      	cmp	r3, #64	; 0x40
 800c420:	d107      	bne.n	800c432 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f9c2 	bl	800c7b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	f003 0320 	and.w	r3, r3, #32
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d10e      	bne.n	800c45e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	f003 0320 	and.w	r3, r3, #32
 800c44a:	2b20      	cmp	r3, #32
 800c44c:	d107      	bne.n	800c45e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f06f 0220 	mvn.w	r2, #32
 800c456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fd1d 	bl	800ce98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c45e:	bf00      	nop
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
	...

0800c468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b086      	sub	sp, #24
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c482:	2302      	movs	r3, #2
 800c484:	e0ae      	b.n	800c5e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b0c      	cmp	r3, #12
 800c492:	f200 809f 	bhi.w	800c5d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c496:	a201      	add	r2, pc, #4	; (adr r2, 800c49c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49c:	0800c4d1 	.word	0x0800c4d1
 800c4a0:	0800c5d5 	.word	0x0800c5d5
 800c4a4:	0800c5d5 	.word	0x0800c5d5
 800c4a8:	0800c5d5 	.word	0x0800c5d5
 800c4ac:	0800c511 	.word	0x0800c511
 800c4b0:	0800c5d5 	.word	0x0800c5d5
 800c4b4:	0800c5d5 	.word	0x0800c5d5
 800c4b8:	0800c5d5 	.word	0x0800c5d5
 800c4bc:	0800c553 	.word	0x0800c553
 800c4c0:	0800c5d5 	.word	0x0800c5d5
 800c4c4:	0800c5d5 	.word	0x0800c5d5
 800c4c8:	0800c5d5 	.word	0x0800c5d5
 800c4cc:	0800c593 	.word	0x0800c593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 fa18 	bl	800c90c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0208 	orr.w	r2, r2, #8
 800c4ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 0204 	bic.w	r2, r2, #4
 800c4fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6999      	ldr	r1, [r3, #24]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	691a      	ldr	r2, [r3, #16]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	430a      	orrs	r2, r1
 800c50c:	619a      	str	r2, [r3, #24]
      break;
 800c50e:	e064      	b.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	4618      	mov	r0, r3
 800c518:	f000 fa68 	bl	800c9ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	699a      	ldr	r2, [r3, #24]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c52a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	699a      	ldr	r2, [r3, #24]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c53a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6999      	ldr	r1, [r3, #24]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	021a      	lsls	r2, r3, #8
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	619a      	str	r2, [r3, #24]
      break;
 800c550:	e043      	b.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	68b9      	ldr	r1, [r7, #8]
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 fabd 	bl	800cad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69da      	ldr	r2, [r3, #28]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f042 0208 	orr.w	r2, r2, #8
 800c56c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	69da      	ldr	r2, [r3, #28]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 0204 	bic.w	r2, r2, #4
 800c57c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	69d9      	ldr	r1, [r3, #28]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	691a      	ldr	r2, [r3, #16]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	61da      	str	r2, [r3, #28]
      break;
 800c590:	e023      	b.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fb11 	bl	800cbc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69da      	ldr	r2, [r3, #28]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	69da      	ldr	r2, [r3, #28]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69d9      	ldr	r1, [r3, #28]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	021a      	lsls	r2, r3, #8
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	61da      	str	r2, [r3, #28]
      break;
 800c5d2:	e002      	b.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d101      	bne.n	800c608 <HAL_TIM_ConfigClockSource+0x1c>
 800c604:	2302      	movs	r3, #2
 800c606:	e0b4      	b.n	800c772 <HAL_TIM_ConfigClockSource+0x186>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2202      	movs	r2, #2
 800c614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c62e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c640:	d03e      	beq.n	800c6c0 <HAL_TIM_ConfigClockSource+0xd4>
 800c642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c646:	f200 8087 	bhi.w	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c64e:	f000 8086 	beq.w	800c75e <HAL_TIM_ConfigClockSource+0x172>
 800c652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c656:	d87f      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c658:	2b70      	cmp	r3, #112	; 0x70
 800c65a:	d01a      	beq.n	800c692 <HAL_TIM_ConfigClockSource+0xa6>
 800c65c:	2b70      	cmp	r3, #112	; 0x70
 800c65e:	d87b      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c660:	2b60      	cmp	r3, #96	; 0x60
 800c662:	d050      	beq.n	800c706 <HAL_TIM_ConfigClockSource+0x11a>
 800c664:	2b60      	cmp	r3, #96	; 0x60
 800c666:	d877      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c668:	2b50      	cmp	r3, #80	; 0x50
 800c66a:	d03c      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0xfa>
 800c66c:	2b50      	cmp	r3, #80	; 0x50
 800c66e:	d873      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c670:	2b40      	cmp	r3, #64	; 0x40
 800c672:	d058      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x13a>
 800c674:	2b40      	cmp	r3, #64	; 0x40
 800c676:	d86f      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c678:	2b30      	cmp	r3, #48	; 0x30
 800c67a:	d064      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x15a>
 800c67c:	2b30      	cmp	r3, #48	; 0x30
 800c67e:	d86b      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c680:	2b20      	cmp	r3, #32
 800c682:	d060      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x15a>
 800c684:	2b20      	cmp	r3, #32
 800c686:	d867      	bhi.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d05c      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x15a>
 800c68c:	2b10      	cmp	r3, #16
 800c68e:	d05a      	beq.n	800c746 <HAL_TIM_ConfigClockSource+0x15a>
 800c690:	e062      	b.n	800c758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	6899      	ldr	r1, [r3, #8]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	f000 fb5d 	bl	800cd60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c6b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	609a      	str	r2, [r3, #8]
      break;
 800c6be:	e04f      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6818      	ldr	r0, [r3, #0]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	6899      	ldr	r1, [r3, #8]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f000 fb46 	bl	800cd60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	689a      	ldr	r2, [r3, #8]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6e2:	609a      	str	r2, [r3, #8]
      break;
 800c6e4:	e03c      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6818      	ldr	r0, [r3, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6859      	ldr	r1, [r3, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f000 faba 	bl	800cc6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2150      	movs	r1, #80	; 0x50
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 fb13 	bl	800cd2a <TIM_ITRx_SetConfig>
      break;
 800c704:	e02c      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	6859      	ldr	r1, [r3, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	461a      	mov	r2, r3
 800c714:	f000 fad9 	bl	800ccca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2160      	movs	r1, #96	; 0x60
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fb03 	bl	800cd2a <TIM_ITRx_SetConfig>
      break;
 800c724:	e01c      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6818      	ldr	r0, [r3, #0]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	6859      	ldr	r1, [r3, #4]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	461a      	mov	r2, r3
 800c734:	f000 fa9a 	bl	800cc6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2140      	movs	r1, #64	; 0x40
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 faf3 	bl	800cd2a <TIM_ITRx_SetConfig>
      break;
 800c744:	e00c      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f000 faea 	bl	800cd2a <TIM_ITRx_SetConfig>
      break;
 800c756:	e003      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]
      break;
 800c75c:	e000      	b.n	800c760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c75e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c796:	bf00      	nop
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7aa:	bf00      	nop
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b083      	sub	sp, #12
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
	...

0800c7cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a40      	ldr	r2, [pc, #256]	; (800c8e0 <TIM_Base_SetConfig+0x114>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d013      	beq.n	800c80c <TIM_Base_SetConfig+0x40>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ea:	d00f      	beq.n	800c80c <TIM_Base_SetConfig+0x40>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a3d      	ldr	r2, [pc, #244]	; (800c8e4 <TIM_Base_SetConfig+0x118>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d00b      	beq.n	800c80c <TIM_Base_SetConfig+0x40>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a3c      	ldr	r2, [pc, #240]	; (800c8e8 <TIM_Base_SetConfig+0x11c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d007      	beq.n	800c80c <TIM_Base_SetConfig+0x40>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a3b      	ldr	r2, [pc, #236]	; (800c8ec <TIM_Base_SetConfig+0x120>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d003      	beq.n	800c80c <TIM_Base_SetConfig+0x40>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a3a      	ldr	r2, [pc, #232]	; (800c8f0 <TIM_Base_SetConfig+0x124>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d108      	bne.n	800c81e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a2f      	ldr	r2, [pc, #188]	; (800c8e0 <TIM_Base_SetConfig+0x114>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d02b      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c82c:	d027      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a2c      	ldr	r2, [pc, #176]	; (800c8e4 <TIM_Base_SetConfig+0x118>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d023      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a2b      	ldr	r2, [pc, #172]	; (800c8e8 <TIM_Base_SetConfig+0x11c>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d01f      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a2a      	ldr	r2, [pc, #168]	; (800c8ec <TIM_Base_SetConfig+0x120>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d01b      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a29      	ldr	r2, [pc, #164]	; (800c8f0 <TIM_Base_SetConfig+0x124>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d017      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a28      	ldr	r2, [pc, #160]	; (800c8f4 <TIM_Base_SetConfig+0x128>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d013      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4a27      	ldr	r2, [pc, #156]	; (800c8f8 <TIM_Base_SetConfig+0x12c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d00f      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a26      	ldr	r2, [pc, #152]	; (800c8fc <TIM_Base_SetConfig+0x130>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d00b      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a25      	ldr	r2, [pc, #148]	; (800c900 <TIM_Base_SetConfig+0x134>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d007      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a24      	ldr	r2, [pc, #144]	; (800c904 <TIM_Base_SetConfig+0x138>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d003      	beq.n	800c87e <TIM_Base_SetConfig+0xb2>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a23      	ldr	r2, [pc, #140]	; (800c908 <TIM_Base_SetConfig+0x13c>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d108      	bne.n	800c890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a0a      	ldr	r2, [pc, #40]	; (800c8e0 <TIM_Base_SetConfig+0x114>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d003      	beq.n	800c8c4 <TIM_Base_SetConfig+0xf8>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a0c      	ldr	r2, [pc, #48]	; (800c8f0 <TIM_Base_SetConfig+0x124>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d103      	bne.n	800c8cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	615a      	str	r2, [r3, #20]
}
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	40010000 	.word	0x40010000
 800c8e4:	40000400 	.word	0x40000400
 800c8e8:	40000800 	.word	0x40000800
 800c8ec:	40000c00 	.word	0x40000c00
 800c8f0:	40010400 	.word	0x40010400
 800c8f4:	40014000 	.word	0x40014000
 800c8f8:	40014400 	.word	0x40014400
 800c8fc:	40014800 	.word	0x40014800
 800c900:	40001800 	.word	0x40001800
 800c904:	40001c00 	.word	0x40001c00
 800c908:	40002000 	.word	0x40002000

0800c90c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a1b      	ldr	r3, [r3, #32]
 800c91a:	f023 0201 	bic.w	r2, r3, #1
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f023 0303 	bic.w	r3, r3, #3
 800c942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f023 0302 	bic.w	r3, r3, #2
 800c954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a20      	ldr	r2, [pc, #128]	; (800c9e4 <TIM_OC1_SetConfig+0xd8>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d003      	beq.n	800c970 <TIM_OC1_SetConfig+0x64>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a1f      	ldr	r2, [pc, #124]	; (800c9e8 <TIM_OC1_SetConfig+0xdc>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d10c      	bne.n	800c98a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f023 0308 	bic.w	r3, r3, #8
 800c976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4313      	orrs	r3, r2
 800c980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f023 0304 	bic.w	r3, r3, #4
 800c988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a15      	ldr	r2, [pc, #84]	; (800c9e4 <TIM_OC1_SetConfig+0xd8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d003      	beq.n	800c99a <TIM_OC1_SetConfig+0x8e>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a14      	ldr	r2, [pc, #80]	; (800c9e8 <TIM_OC1_SetConfig+0xdc>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d111      	bne.n	800c9be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	693a      	ldr	r2, [r7, #16]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	621a      	str	r2, [r3, #32]
}
 800c9d8:	bf00      	nop
 800c9da:	371c      	adds	r7, #28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	40010000 	.word	0x40010000
 800c9e8:	40010400 	.word	0x40010400

0800c9ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a1b      	ldr	r3, [r3, #32]
 800c9fa:	f023 0210 	bic.w	r2, r3, #16
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f023 0320 	bic.w	r3, r3, #32
 800ca36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	011b      	lsls	r3, r3, #4
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a22      	ldr	r2, [pc, #136]	; (800cad0 <TIM_OC2_SetConfig+0xe4>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d003      	beq.n	800ca54 <TIM_OC2_SetConfig+0x68>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a21      	ldr	r2, [pc, #132]	; (800cad4 <TIM_OC2_SetConfig+0xe8>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d10d      	bne.n	800ca70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	011b      	lsls	r3, r3, #4
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a17      	ldr	r2, [pc, #92]	; (800cad0 <TIM_OC2_SetConfig+0xe4>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d003      	beq.n	800ca80 <TIM_OC2_SetConfig+0x94>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a16      	ldr	r2, [pc, #88]	; (800cad4 <TIM_OC2_SetConfig+0xe8>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d113      	bne.n	800caa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	621a      	str	r2, [r3, #32]
}
 800cac2:	bf00      	nop
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	40010000 	.word	0x40010000
 800cad4:	40010400 	.word	0x40010400

0800cad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cad8:	b480      	push	{r7}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	021b      	lsls	r3, r3, #8
 800cb28:	697a      	ldr	r2, [r7, #20]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a21      	ldr	r2, [pc, #132]	; (800cbb8 <TIM_OC3_SetConfig+0xe0>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d003      	beq.n	800cb3e <TIM_OC3_SetConfig+0x66>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a20      	ldr	r2, [pc, #128]	; (800cbbc <TIM_OC3_SetConfig+0xe4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d10d      	bne.n	800cb5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	021b      	lsls	r3, r3, #8
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a16      	ldr	r2, [pc, #88]	; (800cbb8 <TIM_OC3_SetConfig+0xe0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d003      	beq.n	800cb6a <TIM_OC3_SetConfig+0x92>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a15      	ldr	r2, [pc, #84]	; (800cbbc <TIM_OC3_SetConfig+0xe4>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d113      	bne.n	800cb92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	011b      	lsls	r3, r3, #4
 800cb80:	693a      	ldr	r2, [r7, #16]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	011b      	lsls	r3, r3, #4
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	621a      	str	r2, [r3, #32]
}
 800cbac:	bf00      	nop
 800cbae:	371c      	adds	r7, #28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	40010000 	.word	0x40010000
 800cbbc:	40010400 	.word	0x40010400

0800cbc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	031b      	lsls	r3, r3, #12
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a12      	ldr	r2, [pc, #72]	; (800cc64 <TIM_OC4_SetConfig+0xa4>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d003      	beq.n	800cc28 <TIM_OC4_SetConfig+0x68>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a11      	ldr	r2, [pc, #68]	; (800cc68 <TIM_OC4_SetConfig+0xa8>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d109      	bne.n	800cc3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	019b      	lsls	r3, r3, #6
 800cc36:	697a      	ldr	r2, [r7, #20]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	621a      	str	r2, [r3, #32]
}
 800cc56:	bf00      	nop
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40010400 	.word	0x40010400

0800cc6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	f023 0201 	bic.w	r2, r3, #1
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	699b      	ldr	r3, [r3, #24]
 800cc8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	011b      	lsls	r3, r3, #4
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f023 030a 	bic.w	r3, r3, #10
 800cca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	621a      	str	r2, [r3, #32]
}
 800ccbe:	bf00      	nop
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b087      	sub	sp, #28
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	f023 0210 	bic.w	r2, r3, #16
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6a1b      	ldr	r3, [r3, #32]
 800ccec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ccf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	031b      	lsls	r3, r3, #12
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	621a      	str	r2, [r3, #32]
}
 800cd1e:	bf00      	nop
 800cd20:	371c      	adds	r7, #28
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	f043 0307 	orr.w	r3, r3, #7
 800cd4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	609a      	str	r2, [r3, #8]
}
 800cd54:	bf00      	nop
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	021a      	lsls	r2, r3, #8
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	431a      	orrs	r2, r3
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	609a      	str	r2, [r3, #8]
}
 800cd94:	bf00      	nop
 800cd96:	371c      	adds	r7, #28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d101      	bne.n	800cdb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	e05a      	b.n	800ce6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4313      	orrs	r3, r2
 800cde8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a21      	ldr	r2, [pc, #132]	; (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d022      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce04:	d01d      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a1d      	ldr	r2, [pc, #116]	; (800ce80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d018      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a1b      	ldr	r2, [pc, #108]	; (800ce84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d013      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d00e      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a18      	ldr	r2, [pc, #96]	; (800ce8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d009      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a17      	ldr	r2, [pc, #92]	; (800ce90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d004      	beq.n	800ce42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a15      	ldr	r2, [pc, #84]	; (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d10c      	bne.n	800ce5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40000400 	.word	0x40000400
 800ce84:	40000800 	.word	0x40000800
 800ce88:	40000c00 	.word	0x40000c00
 800ce8c:	40010400 	.word	0x40010400
 800ce90:	40014000 	.word	0x40014000
 800ce94:	40001800 	.word	0x40001800

0800ce98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e03f      	b.n	800cf52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7fa f8f6 	bl	80070d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2224      	movs	r2, #36	; 0x24
 800cef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68da      	ldr	r2, [r3, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 ff65 	bl	800ddd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	695a      	ldr	r2, [r3, #20]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2220      	movs	r2, #32
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b08a      	sub	sp, #40	; 0x28
 800cf5e:	af02      	add	r7, sp, #8
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	603b      	str	r3, [r7, #0]
 800cf66:	4613      	mov	r3, r2
 800cf68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b20      	cmp	r3, #32
 800cf78:	d17c      	bne.n	800d074 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <HAL_UART_Transmit+0x2c>
 800cf80:	88fb      	ldrh	r3, [r7, #6]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e075      	b.n	800d076 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_UART_Transmit+0x3e>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e06e      	b.n	800d076 <HAL_UART_Transmit+0x11c>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2221      	movs	r2, #33	; 0x21
 800cfaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfae:	f7fa fb0b 	bl	80075c8 <HAL_GetTick>
 800cfb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	88fa      	ldrh	r2, [r7, #6]
 800cfb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	88fa      	ldrh	r2, [r7, #6]
 800cfbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfc8:	d108      	bne.n	800cfdc <HAL_UART_Transmit+0x82>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d104      	bne.n	800cfdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	61bb      	str	r3, [r7, #24]
 800cfda:	e003      	b.n	800cfe4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cfec:	e02a      	b.n	800d044 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2200      	movs	r2, #0
 800cff6:	2180      	movs	r1, #128	; 0x80
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 fc21 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d001      	beq.n	800d008 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e036      	b.n	800d076 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10b      	bne.n	800d026 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d01c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	3302      	adds	r3, #2
 800d022:	61bb      	str	r3, [r7, #24]
 800d024:	e007      	b.n	800d036 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	781a      	ldrb	r2, [r3, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	3301      	adds	r3, #1
 800d034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	3b01      	subs	r3, #1
 800d03e:	b29a      	uxth	r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d048:	b29b      	uxth	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1cf      	bne.n	800cfee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2200      	movs	r2, #0
 800d056:	2140      	movs	r1, #64	; 0x40
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 fbf1 	bl	800d840 <UART_WaitOnFlagUntilTimeout>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e006      	b.n	800d076 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2220      	movs	r2, #32
 800d06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	e000      	b.n	800d076 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d074:	2302      	movs	r3, #2
  }
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	60f8      	str	r0, [r7, #12]
 800d086:	60b9      	str	r1, [r7, #8]
 800d088:	4613      	mov	r3, r2
 800d08a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b20      	cmp	r3, #32
 800d096:	d11d      	bne.n	800d0d4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d002      	beq.n	800d0a4 <HAL_UART_Receive_DMA+0x26>
 800d09e:	88fb      	ldrh	r3, [r7, #6]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e016      	b.n	800d0d6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d101      	bne.n	800d0b6 <HAL_UART_Receive_DMA+0x38>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e00f      	b.n	800d0d6 <HAL_UART_Receive_DMA+0x58>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d0c4:	88fb      	ldrh	r3, [r7, #6]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	68b9      	ldr	r1, [r7, #8]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 fc26 	bl	800d91c <UART_Start_Receive_DMA>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	e000      	b.n	800d0d6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d0d4:	2302      	movs	r3, #2
  }
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b0ba      	sub	sp, #232	; 0xe8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	695b      	ldr	r3, [r3, #20]
 800d102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d106:	2300      	movs	r3, #0
 800d108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d116:	f003 030f 	and.w	r3, r3, #15
 800d11a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d11e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10f      	bne.n	800d146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d12a:	f003 0320 	and.w	r3, r3, #32
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <HAL_UART_IRQHandler+0x66>
 800d132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d136:	f003 0320 	and.w	r3, r3, #32
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fd8d 	bl	800dc5e <UART_Receive_IT>
      return;
 800d144:	e256      	b.n	800d5f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 80de 	beq.w	800d30c <HAL_UART_IRQHandler+0x22c>
 800d150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d160:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d164:	2b00      	cmp	r3, #0
 800d166:	f000 80d1 	beq.w	800d30c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <HAL_UART_IRQHandler+0xae>
 800d176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d186:	f043 0201 	orr.w	r2, r3, #1
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d192:	f003 0304 	and.w	r3, r3, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <HAL_UART_IRQHandler+0xd2>
 800d19a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d005      	beq.n	800d1b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1aa:	f043 0202 	orr.w	r2, r3, #2
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1b6:	f003 0302 	and.w	r3, r3, #2
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <HAL_UART_IRQHandler+0xf6>
 800d1be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d005      	beq.n	800d1d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ce:	f043 0204 	orr.w	r2, r3, #4
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1da:	f003 0308 	and.w	r3, r3, #8
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d011      	beq.n	800d206 <HAL_UART_IRQHandler+0x126>
 800d1e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1e6:	f003 0320 	and.w	r3, r3, #32
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d105      	bne.n	800d1fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d1ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fe:	f043 0208 	orr.w	r2, r3, #8
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 81ed 	beq.w	800d5ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d214:	f003 0320 	and.w	r3, r3, #32
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d008      	beq.n	800d22e <HAL_UART_IRQHandler+0x14e>
 800d21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fd18 	bl	800dc5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	695b      	ldr	r3, [r3, #20]
 800d234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d238:	2b40      	cmp	r3, #64	; 0x40
 800d23a:	bf0c      	ite	eq
 800d23c:	2301      	moveq	r3, #1
 800d23e:	2300      	movne	r3, #0
 800d240:	b2db      	uxtb	r3, r3
 800d242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24a:	f003 0308 	and.w	r3, r3, #8
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d103      	bne.n	800d25a <HAL_UART_IRQHandler+0x17a>
 800d252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d256:	2b00      	cmp	r3, #0
 800d258:	d04f      	beq.n	800d2fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fc20 	bl	800daa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d26a:	2b40      	cmp	r3, #64	; 0x40
 800d26c:	d141      	bne.n	800d2f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3314      	adds	r3, #20
 800d274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d27c:	e853 3f00 	ldrex	r3, [r3]
 800d280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d28c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3314      	adds	r3, #20
 800d296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d29a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d29e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d2a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d2aa:	e841 2300 	strex	r3, r2, [r1]
 800d2ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d2b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1d9      	bne.n	800d26e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d013      	beq.n	800d2ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c6:	4a7d      	ldr	r2, [pc, #500]	; (800d4bc <HAL_UART_IRQHandler+0x3dc>)
 800d2c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fb f842 	bl	8008358 <HAL_DMA_Abort_IT>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d016      	beq.n	800d308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e8:	e00e      	b.n	800d308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f99a 	bl	800d624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f0:	e00a      	b.n	800d308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f996 	bl	800d624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f8:	e006      	b.n	800d308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f992 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d306:	e170      	b.n	800d5ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d308:	bf00      	nop
    return;
 800d30a:	e16e      	b.n	800d5ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d310:	2b01      	cmp	r3, #1
 800d312:	f040 814a 	bne.w	800d5aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d31a:	f003 0310 	and.w	r3, r3, #16
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 8143 	beq.w	800d5aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d328:	f003 0310 	and.w	r3, r3, #16
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 813c 	beq.w	800d5aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d332:	2300      	movs	r3, #0
 800d334:	60bb      	str	r3, [r7, #8]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	60bb      	str	r3, [r7, #8]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	60bb      	str	r3, [r7, #8]
 800d346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d352:	2b40      	cmp	r3, #64	; 0x40
 800d354:	f040 80b4 	bne.w	800d4c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 8140 	beq.w	800d5ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d376:	429a      	cmp	r2, r3
 800d378:	f080 8139 	bcs.w	800d5ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d382:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d388:	69db      	ldr	r3, [r3, #28]
 800d38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38e:	f000 8088 	beq.w	800d4a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	330c      	adds	r3, #12
 800d398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d3a0:	e853 3f00 	ldrex	r3, [r3]
 800d3a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d3a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d3be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d3c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d3ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1d9      	bne.n	800d392 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3314      	adds	r3, #20
 800d3e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d3ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3f0:	f023 0301 	bic.w	r3, r3, #1
 800d3f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3314      	adds	r3, #20
 800d3fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d402:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d406:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d40a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d40e:	e841 2300 	strex	r3, r2, [r1]
 800d412:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1e1      	bne.n	800d3de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3314      	adds	r3, #20
 800d420:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d424:	e853 3f00 	ldrex	r3, [r3]
 800d428:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3314      	adds	r3, #20
 800d43a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d43e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e3      	bne.n	800d41a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2220      	movs	r2, #32
 800d456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	330c      	adds	r3, #12
 800d466:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d46a:	e853 3f00 	ldrex	r3, [r3]
 800d46e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d472:	f023 0310 	bic.w	r3, r3, #16
 800d476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	330c      	adds	r3, #12
 800d480:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d484:	65ba      	str	r2, [r7, #88]	; 0x58
 800d486:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d48a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d48c:	e841 2300 	strex	r3, r2, [r1]
 800d490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e3      	bne.n	800d460 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fa feeb 	bl	8008278 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f8c0 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d4b8:	e099      	b.n	800d5ee <HAL_UART_IRQHandler+0x50e>
 800d4ba:	bf00      	nop
 800d4bc:	0800db67 	.word	0x0800db67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 808b 	beq.w	800d5f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d4dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 8086 	beq.w	800d5f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	330c      	adds	r3, #12
 800d4ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	e853 3f00 	ldrex	r3, [r3]
 800d4f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	330c      	adds	r3, #12
 800d506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d50a:	647a      	str	r2, [r7, #68]	; 0x44
 800d50c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d512:	e841 2300 	strex	r3, r2, [r1]
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1e3      	bne.n	800d4e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3314      	adds	r3, #20
 800d524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	623b      	str	r3, [r7, #32]
   return(result);
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	f023 0301 	bic.w	r3, r3, #1
 800d534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3314      	adds	r3, #20
 800d53e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d542:	633a      	str	r2, [r7, #48]	; 0x30
 800d544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d54a:	e841 2300 	strex	r3, r2, [r1]
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1e3      	bne.n	800d51e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2220      	movs	r2, #32
 800d55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	330c      	adds	r3, #12
 800d56a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	e853 3f00 	ldrex	r3, [r3]
 800d572:	60fb      	str	r3, [r7, #12]
   return(result);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f023 0310 	bic.w	r3, r3, #16
 800d57a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	330c      	adds	r3, #12
 800d584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d588:	61fa      	str	r2, [r7, #28]
 800d58a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58c:	69b9      	ldr	r1, [r7, #24]
 800d58e:	69fa      	ldr	r2, [r7, #28]
 800d590:	e841 2300 	strex	r3, r2, [r1]
 800d594:	617b      	str	r3, [r7, #20]
   return(result);
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e3      	bne.n	800d564 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d59c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f848 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d5a8:	e023      	b.n	800d5f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <HAL_UART_IRQHandler+0x4ea>
 800d5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fae3 	bl	800db8e <UART_Transmit_IT>
    return;
 800d5c8:	e014      	b.n	800d5f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00e      	beq.n	800d5f4 <HAL_UART_IRQHandler+0x514>
 800d5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d008      	beq.n	800d5f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fb23 	bl	800dc2e <UART_EndTransmit_IT>
    return;
 800d5e8:	e004      	b.n	800d5f4 <HAL_UART_IRQHandler+0x514>
    return;
 800d5ea:	bf00      	nop
 800d5ec:	e002      	b.n	800d5f4 <HAL_UART_IRQHandler+0x514>
      return;
 800d5ee:	bf00      	nop
 800d5f0:	e000      	b.n	800d5f4 <HAL_UART_IRQHandler+0x514>
      return;
 800d5f2:	bf00      	nop
  }
}
 800d5f4:	37e8      	adds	r7, #232	; 0xe8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop

0800d5fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b09c      	sub	sp, #112	; 0x70
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d172      	bne.n	800d752 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66e:	2200      	movs	r2, #0
 800d670:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	330c      	adds	r3, #12
 800d678:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d67c:	e853 3f00 	ldrex	r3, [r3]
 800d680:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d688:	66bb      	str	r3, [r7, #104]	; 0x68
 800d68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	330c      	adds	r3, #12
 800d690:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d692:	65ba      	str	r2, [r7, #88]	; 0x58
 800d694:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d696:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d698:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e5      	bne.n	800d672 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3314      	adds	r3, #20
 800d6ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	e853 3f00 	ldrex	r3, [r3]
 800d6b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b8:	f023 0301 	bic.w	r3, r3, #1
 800d6bc:	667b      	str	r3, [r7, #100]	; 0x64
 800d6be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6c6:	647a      	str	r2, [r7, #68]	; 0x44
 800d6c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6ce:	e841 2300 	strex	r3, r2, [r1]
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e5      	bne.n	800d6a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3314      	adds	r3, #20
 800d6e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	e853 3f00 	ldrex	r3, [r3]
 800d6e8:	623b      	str	r3, [r7, #32]
   return(result);
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	3314      	adds	r3, #20
 800d6f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6fa:	633a      	str	r2, [r7, #48]	; 0x30
 800d6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e5      	bne.n	800d6da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d710:	2220      	movs	r2, #32
 800d712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d119      	bne.n	800d752 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	330c      	adds	r3, #12
 800d724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f023 0310 	bic.w	r3, r3, #16
 800d734:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	330c      	adds	r3, #12
 800d73c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d73e:	61fa      	str	r2, [r7, #28]
 800d740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d742:	69b9      	ldr	r1, [r7, #24]
 800d744:	69fa      	ldr	r2, [r7, #28]
 800d746:	e841 2300 	strex	r3, r2, [r1]
 800d74a:	617b      	str	r3, [r7, #20]
   return(result);
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1e5      	bne.n	800d71e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	2b01      	cmp	r3, #1
 800d758:	d106      	bne.n	800d768 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d75c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d75e:	4619      	mov	r1, r3
 800d760:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d762:	f7ff ff69 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d766:	e002      	b.n	800d76e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d768:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d76a:	f7f5 fca5 	bl	80030b8 <HAL_UART_RxCpltCallback>
}
 800d76e:	bf00      	nop
 800d770:	3770      	adds	r7, #112	; 0x70
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d108      	bne.n	800d79e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d790:	085b      	lsrs	r3, r3, #1
 800d792:	b29b      	uxth	r3, r3
 800d794:	4619      	mov	r1, r3
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7ff ff4e 	bl	800d638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d79c:	e002      	b.n	800d7a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7ff ff36 	bl	800d610 <HAL_UART_RxHalfCpltCallback>
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	695b      	ldr	r3, [r3, #20]
 800d7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7c8:	2b80      	cmp	r3, #128	; 0x80
 800d7ca:	bf0c      	ite	eq
 800d7cc:	2301      	moveq	r3, #1
 800d7ce:	2300      	movne	r3, #0
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b21      	cmp	r3, #33	; 0x21
 800d7de:	d108      	bne.n	800d7f2 <UART_DMAError+0x46>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d005      	beq.n	800d7f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d7ec:	68b8      	ldr	r0, [r7, #8]
 800d7ee:	f000 f92f 	bl	800da50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7fc:	2b40      	cmp	r3, #64	; 0x40
 800d7fe:	bf0c      	ite	eq
 800d800:	2301      	moveq	r3, #1
 800d802:	2300      	movne	r3, #0
 800d804:	b2db      	uxtb	r3, r3
 800d806:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b22      	cmp	r3, #34	; 0x22
 800d812:	d108      	bne.n	800d826 <UART_DMAError+0x7a>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d005      	beq.n	800d826 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	2200      	movs	r2, #0
 800d81e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d820:	68b8      	ldr	r0, [r7, #8]
 800d822:	f000 f93d 	bl	800daa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82a:	f043 0210 	orr.w	r2, r3, #16
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d832:	68b8      	ldr	r0, [r7, #8]
 800d834:	f7ff fef6 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d838:	bf00      	nop
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b090      	sub	sp, #64	; 0x40
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4613      	mov	r3, r2
 800d84e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d850:	e050      	b.n	800d8f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d04c      	beq.n	800d8f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d85a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <UART_WaitOnFlagUntilTimeout+0x30>
 800d860:	f7f9 feb2 	bl	80075c8 <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d241      	bcs.n	800d8f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	330c      	adds	r3, #12
 800d876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	e853 3f00 	ldrex	r3, [r3]
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d886:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	330c      	adds	r3, #12
 800d88e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d890:	637a      	str	r2, [r7, #52]	; 0x34
 800d892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d898:	e841 2300 	strex	r3, r2, [r1]
 800d89c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1e5      	bne.n	800d870 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3314      	adds	r3, #20
 800d8aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	e853 3f00 	ldrex	r3, [r3]
 800d8b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f023 0301 	bic.w	r3, r3, #1
 800d8ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3314      	adds	r3, #20
 800d8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8c4:	623a      	str	r2, [r7, #32]
 800d8c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c8:	69f9      	ldr	r1, [r7, #28]
 800d8ca:	6a3a      	ldr	r2, [r7, #32]
 800d8cc:	e841 2300 	strex	r3, r2, [r1]
 800d8d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e5      	bne.n	800d8a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2220      	movs	r2, #32
 800d8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e00f      	b.n	800d914 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	429a      	cmp	r2, r3
 800d902:	bf0c      	ite	eq
 800d904:	2301      	moveq	r3, #1
 800d906:	2300      	movne	r3, #0
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	461a      	mov	r2, r3
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d09f      	beq.n	800d852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3740      	adds	r7, #64	; 0x40
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b098      	sub	sp, #96	; 0x60
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	4613      	mov	r3, r2
 800d928:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	88fa      	ldrh	r2, [r7, #6]
 800d934:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2222      	movs	r2, #34	; 0x22
 800d940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d948:	4a3e      	ldr	r2, [pc, #248]	; (800da44 <UART_Start_Receive_DMA+0x128>)
 800d94a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d950:	4a3d      	ldr	r2, [pc, #244]	; (800da48 <UART_Start_Receive_DMA+0x12c>)
 800d952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	4a3c      	ldr	r2, [pc, #240]	; (800da4c <UART_Start_Receive_DMA+0x130>)
 800d95a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d960:	2200      	movs	r2, #0
 800d962:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	3304      	adds	r3, #4
 800d974:	4619      	mov	r1, r3
 800d976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	88fb      	ldrh	r3, [r7, #6]
 800d97c:	f7fa fc24 	bl	80081c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d980:	2300      	movs	r3, #0
 800d982:	613b      	str	r3, [r7, #16]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	613b      	str	r3, [r7, #16]
 800d994:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	330c      	adds	r3, #12
 800d9a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a8:	e853 3f00 	ldrex	r3, [r3]
 800d9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	330c      	adds	r3, #12
 800d9bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d9c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d9c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9c6:	e841 2300 	strex	r3, r2, [r1]
 800d9ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e5      	bne.n	800d99e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3314      	adds	r3, #20
 800d9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	e853 3f00 	ldrex	r3, [r3]
 800d9e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e4:	f043 0301 	orr.w	r3, r3, #1
 800d9e8:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3314      	adds	r3, #20
 800d9f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800d9f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9fa:	e841 2300 	strex	r3, r2, [r1]
 800d9fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e5      	bne.n	800d9d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3314      	adds	r3, #20
 800da0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	e853 3f00 	ldrex	r3, [r3]
 800da14:	617b      	str	r3, [r7, #20]
   return(result);
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da1c:	653b      	str	r3, [r7, #80]	; 0x50
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3314      	adds	r3, #20
 800da24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da26:	627a      	str	r2, [r7, #36]	; 0x24
 800da28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2a:	6a39      	ldr	r1, [r7, #32]
 800da2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	61fb      	str	r3, [r7, #28]
   return(result);
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1e5      	bne.n	800da06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3760      	adds	r7, #96	; 0x60
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	0800d651 	.word	0x0800d651
 800da48:	0800d777 	.word	0x0800d777
 800da4c:	0800d7ad 	.word	0x0800d7ad

0800da50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800da50:	b480      	push	{r7}
 800da52:	b089      	sub	sp, #36	; 0x24
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	330c      	adds	r3, #12
 800da5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	e853 3f00 	ldrex	r3, [r3]
 800da66:	60bb      	str	r3, [r7, #8]
   return(result);
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da6e:	61fb      	str	r3, [r7, #28]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	330c      	adds	r3, #12
 800da76:	69fa      	ldr	r2, [r7, #28]
 800da78:	61ba      	str	r2, [r7, #24]
 800da7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	6979      	ldr	r1, [r7, #20]
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	e841 2300 	strex	r3, r2, [r1]
 800da84:	613b      	str	r3, [r7, #16]
   return(result);
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e5      	bne.n	800da58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2220      	movs	r2, #32
 800da90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800da94:	bf00      	nop
 800da96:	3724      	adds	r7, #36	; 0x24
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b095      	sub	sp, #84	; 0x54
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	330c      	adds	r3, #12
 800daae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab2:	e853 3f00 	ldrex	r3, [r3]
 800dab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	330c      	adds	r3, #12
 800dac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dac8:	643a      	str	r2, [r7, #64]	; 0x40
 800daca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dacc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dad0:	e841 2300 	strex	r3, r2, [r1]
 800dad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1e5      	bne.n	800daa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	3314      	adds	r3, #20
 800dae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	e853 3f00 	ldrex	r3, [r3]
 800daea:	61fb      	str	r3, [r7, #28]
   return(result);
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	f023 0301 	bic.w	r3, r3, #1
 800daf2:	64bb      	str	r3, [r7, #72]	; 0x48
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3314      	adds	r3, #20
 800dafa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dafc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dafe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db04:	e841 2300 	strex	r3, r2, [r1]
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1e5      	bne.n	800dadc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db14:	2b01      	cmp	r3, #1
 800db16:	d119      	bne.n	800db4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	330c      	adds	r3, #12
 800db1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	e853 3f00 	ldrex	r3, [r3]
 800db26:	60bb      	str	r3, [r7, #8]
   return(result);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f023 0310 	bic.w	r3, r3, #16
 800db2e:	647b      	str	r3, [r7, #68]	; 0x44
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	330c      	adds	r3, #12
 800db36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db38:	61ba      	str	r2, [r7, #24]
 800db3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6979      	ldr	r1, [r7, #20]
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	613b      	str	r3, [r7, #16]
   return(result);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e5      	bne.n	800db18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2220      	movs	r2, #32
 800db50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	631a      	str	r2, [r3, #48]	; 0x30
}
 800db5a:	bf00      	nop
 800db5c:	3754      	adds	r7, #84	; 0x54
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f7ff fd4f 	bl	800d624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800db8e:	b480      	push	{r7}
 800db90:	b085      	sub	sp, #20
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	2b21      	cmp	r3, #33	; 0x21
 800dba0:	d13e      	bne.n	800dc20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbaa:	d114      	bne.n	800dbd6 <UART_Transmit_IT+0x48>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d110      	bne.n	800dbd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a1b      	ldr	r3, [r3, #32]
 800dbb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	1c9a      	adds	r2, r3, #2
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	621a      	str	r2, [r3, #32]
 800dbd4:	e008      	b.n	800dbe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	1c59      	adds	r1, r3, #1
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	6211      	str	r1, [r2, #32]
 800dbe0:	781a      	ldrb	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10f      	bne.n	800dc1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68da      	ldr	r2, [r3, #12]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68da      	ldr	r2, [r3, #12]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e000      	b.n	800dc22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dc20:	2302      	movs	r3, #2
  }
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68da      	ldr	r2, [r3, #12]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2220      	movs	r2, #32
 800dc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fcd4 	bl	800d5fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b08c      	sub	sp, #48	; 0x30
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	2b22      	cmp	r3, #34	; 0x22
 800dc70:	f040 80ab 	bne.w	800ddca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc7c:	d117      	bne.n	800dcae <UART_Receive_IT+0x50>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d113      	bne.n	800dcae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dc86:	2300      	movs	r3, #0
 800dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca6:	1c9a      	adds	r2, r3, #2
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	629a      	str	r2, [r3, #40]	; 0x28
 800dcac:	e026      	b.n	800dcfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcc0:	d007      	beq.n	800dcd2 <UART_Receive_IT+0x74>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10a      	bne.n	800dce0 <UART_Receive_IT+0x82>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	691b      	ldr	r3, [r3, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d106      	bne.n	800dce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	701a      	strb	r2, [r3, #0]
 800dcde:	e008      	b.n	800dcf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf6:	1c5a      	adds	r2, r3, #1
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3b01      	subs	r3, #1
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d15a      	bne.n	800ddc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68da      	ldr	r2, [r3, #12]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0220 	bic.w	r2, r2, #32
 800dd1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	695a      	ldr	r2, [r3, #20]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0201 	bic.w	r2, r2, #1
 800dd3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2220      	movs	r2, #32
 800dd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d135      	bne.n	800ddbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	330c      	adds	r3, #12
 800dd5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	e853 3f00 	ldrex	r3, [r3]
 800dd64:	613b      	str	r3, [r7, #16]
   return(result);
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	f023 0310 	bic.w	r3, r3, #16
 800dd6c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	330c      	adds	r3, #12
 800dd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd76:	623a      	str	r2, [r7, #32]
 800dd78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7a:	69f9      	ldr	r1, [r7, #28]
 800dd7c:	6a3a      	ldr	r2, [r7, #32]
 800dd7e:	e841 2300 	strex	r3, r2, [r1]
 800dd82:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e5      	bne.n	800dd56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 0310 	and.w	r3, r3, #16
 800dd94:	2b10      	cmp	r3, #16
 800dd96:	d10a      	bne.n	800ddae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	60fb      	str	r3, [r7, #12]
 800ddac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fc3f 	bl	800d638 <HAL_UARTEx_RxEventCallback>
 800ddba:	e002      	b.n	800ddc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7f5 f97b 	bl	80030b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e002      	b.n	800ddcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	e000      	b.n	800ddcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ddca:	2302      	movs	r3, #2
  }
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3730      	adds	r7, #48	; 0x30
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd8:	b09f      	sub	sp, #124	; 0x7c
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dde8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddea:	68d9      	ldr	r1, [r3, #12]
 800ddec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	ea40 0301 	orr.w	r3, r0, r1
 800ddf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ddf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	431a      	orrs	r2, r3
 800de00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de02:	695b      	ldr	r3, [r3, #20]
 800de04:	431a      	orrs	r2, r3
 800de06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800de0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800de18:	f021 010c 	bic.w	r1, r1, #12
 800de1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de22:	430b      	orrs	r3, r1
 800de24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800de30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de32:	6999      	ldr	r1, [r3, #24]
 800de34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	ea40 0301 	orr.w	r3, r0, r1
 800de3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	4bc5      	ldr	r3, [pc, #788]	; (800e158 <UART_SetConfig+0x384>)
 800de44:	429a      	cmp	r2, r3
 800de46:	d004      	beq.n	800de52 <UART_SetConfig+0x7e>
 800de48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	4bc3      	ldr	r3, [pc, #780]	; (800e15c <UART_SetConfig+0x388>)
 800de4e:	429a      	cmp	r2, r3
 800de50:	d103      	bne.n	800de5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800de52:	f7fd f875 	bl	800af40 <HAL_RCC_GetPCLK2Freq>
 800de56:	6778      	str	r0, [r7, #116]	; 0x74
 800de58:	e002      	b.n	800de60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800de5a:	f7fd f85d 	bl	800af18 <HAL_RCC_GetPCLK1Freq>
 800de5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de62:	69db      	ldr	r3, [r3, #28]
 800de64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de68:	f040 80b6 	bne.w	800dfd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800de6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de6e:	461c      	mov	r4, r3
 800de70:	f04f 0500 	mov.w	r5, #0
 800de74:	4622      	mov	r2, r4
 800de76:	462b      	mov	r3, r5
 800de78:	1891      	adds	r1, r2, r2
 800de7a:	6439      	str	r1, [r7, #64]	; 0x40
 800de7c:	415b      	adcs	r3, r3
 800de7e:	647b      	str	r3, [r7, #68]	; 0x44
 800de80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de84:	1912      	adds	r2, r2, r4
 800de86:	eb45 0303 	adc.w	r3, r5, r3
 800de8a:	f04f 0000 	mov.w	r0, #0
 800de8e:	f04f 0100 	mov.w	r1, #0
 800de92:	00d9      	lsls	r1, r3, #3
 800de94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800de98:	00d0      	lsls	r0, r2, #3
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	1911      	adds	r1, r2, r4
 800dea0:	6639      	str	r1, [r7, #96]	; 0x60
 800dea2:	416b      	adcs	r3, r5
 800dea4:	667b      	str	r3, [r7, #100]	; 0x64
 800dea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	461a      	mov	r2, r3
 800deac:	f04f 0300 	mov.w	r3, #0
 800deb0:	1891      	adds	r1, r2, r2
 800deb2:	63b9      	str	r1, [r7, #56]	; 0x38
 800deb4:	415b      	adcs	r3, r3
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800debc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800dec0:	f7f2 fe92 	bl	8000be8 <__aeabi_uldivmod>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4ba5      	ldr	r3, [pc, #660]	; (800e160 <UART_SetConfig+0x38c>)
 800deca:	fba3 2302 	umull	r2, r3, r3, r2
 800dece:	095b      	lsrs	r3, r3, #5
 800ded0:	011e      	lsls	r6, r3, #4
 800ded2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ded4:	461c      	mov	r4, r3
 800ded6:	f04f 0500 	mov.w	r5, #0
 800deda:	4622      	mov	r2, r4
 800dedc:	462b      	mov	r3, r5
 800dede:	1891      	adds	r1, r2, r2
 800dee0:	6339      	str	r1, [r7, #48]	; 0x30
 800dee2:	415b      	adcs	r3, r3
 800dee4:	637b      	str	r3, [r7, #52]	; 0x34
 800dee6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800deea:	1912      	adds	r2, r2, r4
 800deec:	eb45 0303 	adc.w	r3, r5, r3
 800def0:	f04f 0000 	mov.w	r0, #0
 800def4:	f04f 0100 	mov.w	r1, #0
 800def8:	00d9      	lsls	r1, r3, #3
 800defa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800defe:	00d0      	lsls	r0, r2, #3
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	1911      	adds	r1, r2, r4
 800df06:	65b9      	str	r1, [r7, #88]	; 0x58
 800df08:	416b      	adcs	r3, r5
 800df0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	461a      	mov	r2, r3
 800df12:	f04f 0300 	mov.w	r3, #0
 800df16:	1891      	adds	r1, r2, r2
 800df18:	62b9      	str	r1, [r7, #40]	; 0x28
 800df1a:	415b      	adcs	r3, r3
 800df1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800df26:	f7f2 fe5f 	bl	8000be8 <__aeabi_uldivmod>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4b8c      	ldr	r3, [pc, #560]	; (800e160 <UART_SetConfig+0x38c>)
 800df30:	fba3 1302 	umull	r1, r3, r3, r2
 800df34:	095b      	lsrs	r3, r3, #5
 800df36:	2164      	movs	r1, #100	; 0x64
 800df38:	fb01 f303 	mul.w	r3, r1, r3
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	3332      	adds	r3, #50	; 0x32
 800df42:	4a87      	ldr	r2, [pc, #540]	; (800e160 <UART_SetConfig+0x38c>)
 800df44:	fba2 2303 	umull	r2, r3, r2, r3
 800df48:	095b      	lsrs	r3, r3, #5
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800df50:	441e      	add	r6, r3
 800df52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df54:	4618      	mov	r0, r3
 800df56:	f04f 0100 	mov.w	r1, #0
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	1894      	adds	r4, r2, r2
 800df60:	623c      	str	r4, [r7, #32]
 800df62:	415b      	adcs	r3, r3
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
 800df66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800df6a:	1812      	adds	r2, r2, r0
 800df6c:	eb41 0303 	adc.w	r3, r1, r3
 800df70:	f04f 0400 	mov.w	r4, #0
 800df74:	f04f 0500 	mov.w	r5, #0
 800df78:	00dd      	lsls	r5, r3, #3
 800df7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800df7e:	00d4      	lsls	r4, r2, #3
 800df80:	4622      	mov	r2, r4
 800df82:	462b      	mov	r3, r5
 800df84:	1814      	adds	r4, r2, r0
 800df86:	653c      	str	r4, [r7, #80]	; 0x50
 800df88:	414b      	adcs	r3, r1
 800df8a:	657b      	str	r3, [r7, #84]	; 0x54
 800df8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	461a      	mov	r2, r3
 800df92:	f04f 0300 	mov.w	r3, #0
 800df96:	1891      	adds	r1, r2, r2
 800df98:	61b9      	str	r1, [r7, #24]
 800df9a:	415b      	adcs	r3, r3
 800df9c:	61fb      	str	r3, [r7, #28]
 800df9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dfa2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800dfa6:	f7f2 fe1f 	bl	8000be8 <__aeabi_uldivmod>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4b6c      	ldr	r3, [pc, #432]	; (800e160 <UART_SetConfig+0x38c>)
 800dfb0:	fba3 1302 	umull	r1, r3, r3, r2
 800dfb4:	095b      	lsrs	r3, r3, #5
 800dfb6:	2164      	movs	r1, #100	; 0x64
 800dfb8:	fb01 f303 	mul.w	r3, r1, r3
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	00db      	lsls	r3, r3, #3
 800dfc0:	3332      	adds	r3, #50	; 0x32
 800dfc2:	4a67      	ldr	r2, [pc, #412]	; (800e160 <UART_SetConfig+0x38c>)
 800dfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc8:	095b      	lsrs	r3, r3, #5
 800dfca:	f003 0207 	and.w	r2, r3, #7
 800dfce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4432      	add	r2, r6
 800dfd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dfd6:	e0b9      	b.n	800e14c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfda:	461c      	mov	r4, r3
 800dfdc:	f04f 0500 	mov.w	r5, #0
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	462b      	mov	r3, r5
 800dfe4:	1891      	adds	r1, r2, r2
 800dfe6:	6139      	str	r1, [r7, #16]
 800dfe8:	415b      	adcs	r3, r3
 800dfea:	617b      	str	r3, [r7, #20]
 800dfec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dff0:	1912      	adds	r2, r2, r4
 800dff2:	eb45 0303 	adc.w	r3, r5, r3
 800dff6:	f04f 0000 	mov.w	r0, #0
 800dffa:	f04f 0100 	mov.w	r1, #0
 800dffe:	00d9      	lsls	r1, r3, #3
 800e000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e004:	00d0      	lsls	r0, r2, #3
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	eb12 0804 	adds.w	r8, r2, r4
 800e00e:	eb43 0905 	adc.w	r9, r3, r5
 800e012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	4618      	mov	r0, r3
 800e018:	f04f 0100 	mov.w	r1, #0
 800e01c:	f04f 0200 	mov.w	r2, #0
 800e020:	f04f 0300 	mov.w	r3, #0
 800e024:	008b      	lsls	r3, r1, #2
 800e026:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e02a:	0082      	lsls	r2, r0, #2
 800e02c:	4640      	mov	r0, r8
 800e02e:	4649      	mov	r1, r9
 800e030:	f7f2 fdda 	bl	8000be8 <__aeabi_uldivmod>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	4b49      	ldr	r3, [pc, #292]	; (800e160 <UART_SetConfig+0x38c>)
 800e03a:	fba3 2302 	umull	r2, r3, r3, r2
 800e03e:	095b      	lsrs	r3, r3, #5
 800e040:	011e      	lsls	r6, r3, #4
 800e042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e044:	4618      	mov	r0, r3
 800e046:	f04f 0100 	mov.w	r1, #0
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	1894      	adds	r4, r2, r2
 800e050:	60bc      	str	r4, [r7, #8]
 800e052:	415b      	adcs	r3, r3
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e05a:	1812      	adds	r2, r2, r0
 800e05c:	eb41 0303 	adc.w	r3, r1, r3
 800e060:	f04f 0400 	mov.w	r4, #0
 800e064:	f04f 0500 	mov.w	r5, #0
 800e068:	00dd      	lsls	r5, r3, #3
 800e06a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e06e:	00d4      	lsls	r4, r2, #3
 800e070:	4622      	mov	r2, r4
 800e072:	462b      	mov	r3, r5
 800e074:	1814      	adds	r4, r2, r0
 800e076:	64bc      	str	r4, [r7, #72]	; 0x48
 800e078:	414b      	adcs	r3, r1
 800e07a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	4618      	mov	r0, r3
 800e082:	f04f 0100 	mov.w	r1, #0
 800e086:	f04f 0200 	mov.w	r2, #0
 800e08a:	f04f 0300 	mov.w	r3, #0
 800e08e:	008b      	lsls	r3, r1, #2
 800e090:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e094:	0082      	lsls	r2, r0, #2
 800e096:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e09a:	f7f2 fda5 	bl	8000be8 <__aeabi_uldivmod>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4b2f      	ldr	r3, [pc, #188]	; (800e160 <UART_SetConfig+0x38c>)
 800e0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800e0a8:	095b      	lsrs	r3, r3, #5
 800e0aa:	2164      	movs	r1, #100	; 0x64
 800e0ac:	fb01 f303 	mul.w	r3, r1, r3
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	011b      	lsls	r3, r3, #4
 800e0b4:	3332      	adds	r3, #50	; 0x32
 800e0b6:	4a2a      	ldr	r2, [pc, #168]	; (800e160 <UART_SetConfig+0x38c>)
 800e0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0bc:	095b      	lsrs	r3, r3, #5
 800e0be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0c2:	441e      	add	r6, r3
 800e0c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f04f 0100 	mov.w	r1, #0
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	1894      	adds	r4, r2, r2
 800e0d2:	603c      	str	r4, [r7, #0]
 800e0d4:	415b      	adcs	r3, r3
 800e0d6:	607b      	str	r3, [r7, #4]
 800e0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0dc:	1812      	adds	r2, r2, r0
 800e0de:	eb41 0303 	adc.w	r3, r1, r3
 800e0e2:	f04f 0400 	mov.w	r4, #0
 800e0e6:	f04f 0500 	mov.w	r5, #0
 800e0ea:	00dd      	lsls	r5, r3, #3
 800e0ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e0f0:	00d4      	lsls	r4, r2, #3
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	eb12 0a00 	adds.w	sl, r2, r0
 800e0fa:	eb43 0b01 	adc.w	fp, r3, r1
 800e0fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	4618      	mov	r0, r3
 800e104:	f04f 0100 	mov.w	r1, #0
 800e108:	f04f 0200 	mov.w	r2, #0
 800e10c:	f04f 0300 	mov.w	r3, #0
 800e110:	008b      	lsls	r3, r1, #2
 800e112:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e116:	0082      	lsls	r2, r0, #2
 800e118:	4650      	mov	r0, sl
 800e11a:	4659      	mov	r1, fp
 800e11c:	f7f2 fd64 	bl	8000be8 <__aeabi_uldivmod>
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	4b0e      	ldr	r3, [pc, #56]	; (800e160 <UART_SetConfig+0x38c>)
 800e126:	fba3 1302 	umull	r1, r3, r3, r2
 800e12a:	095b      	lsrs	r3, r3, #5
 800e12c:	2164      	movs	r1, #100	; 0x64
 800e12e:	fb01 f303 	mul.w	r3, r1, r3
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	3332      	adds	r3, #50	; 0x32
 800e138:	4a09      	ldr	r2, [pc, #36]	; (800e160 <UART_SetConfig+0x38c>)
 800e13a:	fba2 2303 	umull	r2, r3, r2, r3
 800e13e:	095b      	lsrs	r3, r3, #5
 800e140:	f003 020f 	and.w	r2, r3, #15
 800e144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4432      	add	r2, r6
 800e14a:	609a      	str	r2, [r3, #8]
}
 800e14c:	bf00      	nop
 800e14e:	377c      	adds	r7, #124	; 0x7c
 800e150:	46bd      	mov	sp, r7
 800e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e156:	bf00      	nop
 800e158:	40011000 	.word	0x40011000
 800e15c:	40011400 	.word	0x40011400
 800e160:	51eb851f 	.word	0x51eb851f

0800e164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e164:	b084      	sub	sp, #16
 800e166:	b580      	push	{r7, lr}
 800e168:	b084      	sub	sp, #16
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	f107 001c 	add.w	r0, r7, #28
 800e172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d122      	bne.n	800e1c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d105      	bne.n	800e1b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 fb16 	bl	800f7e8 <USB_CoreReset>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73fb      	strb	r3, [r7, #15]
 800e1c0:	e01a      	b.n	800e1f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 fb0a 	bl	800f7e8 <USB_CoreReset>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ea:	e005      	b.n	800e1f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d10b      	bne.n	800e216 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f043 0206 	orr.w	r2, r3, #6
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	f043 0220 	orr.w	r2, r3, #32
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e216:	7bfb      	ldrb	r3, [r7, #15]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e222:	b004      	add	sp, #16
 800e224:	4770      	bx	lr
	...

0800e228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e228:	b480      	push	{r7}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d165      	bne.n	800e308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	4a41      	ldr	r2, [pc, #260]	; (800e344 <USB_SetTurnaroundTime+0x11c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d906      	bls.n	800e252 <USB_SetTurnaroundTime+0x2a>
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	4a40      	ldr	r2, [pc, #256]	; (800e348 <USB_SetTurnaroundTime+0x120>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d202      	bcs.n	800e252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e24c:	230f      	movs	r3, #15
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	e062      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	4a3c      	ldr	r2, [pc, #240]	; (800e348 <USB_SetTurnaroundTime+0x120>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d306      	bcc.n	800e268 <USB_SetTurnaroundTime+0x40>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	4a3b      	ldr	r2, [pc, #236]	; (800e34c <USB_SetTurnaroundTime+0x124>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d202      	bcs.n	800e268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e262:	230e      	movs	r3, #14
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e057      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	4a38      	ldr	r2, [pc, #224]	; (800e34c <USB_SetTurnaroundTime+0x124>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d306      	bcc.n	800e27e <USB_SetTurnaroundTime+0x56>
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	4a37      	ldr	r2, [pc, #220]	; (800e350 <USB_SetTurnaroundTime+0x128>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d202      	bcs.n	800e27e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e278:	230d      	movs	r3, #13
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	e04c      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	4a33      	ldr	r2, [pc, #204]	; (800e350 <USB_SetTurnaroundTime+0x128>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d306      	bcc.n	800e294 <USB_SetTurnaroundTime+0x6c>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	4a32      	ldr	r2, [pc, #200]	; (800e354 <USB_SetTurnaroundTime+0x12c>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d802      	bhi.n	800e294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e28e:	230c      	movs	r3, #12
 800e290:	617b      	str	r3, [r7, #20]
 800e292:	e041      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	4a2f      	ldr	r2, [pc, #188]	; (800e354 <USB_SetTurnaroundTime+0x12c>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d906      	bls.n	800e2aa <USB_SetTurnaroundTime+0x82>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	4a2e      	ldr	r2, [pc, #184]	; (800e358 <USB_SetTurnaroundTime+0x130>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d802      	bhi.n	800e2aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e2a4:	230b      	movs	r3, #11
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e036      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	4a2a      	ldr	r2, [pc, #168]	; (800e358 <USB_SetTurnaroundTime+0x130>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d906      	bls.n	800e2c0 <USB_SetTurnaroundTime+0x98>
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	4a29      	ldr	r2, [pc, #164]	; (800e35c <USB_SetTurnaroundTime+0x134>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d802      	bhi.n	800e2c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e2ba:	230a      	movs	r3, #10
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e02b      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	4a26      	ldr	r2, [pc, #152]	; (800e35c <USB_SetTurnaroundTime+0x134>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d906      	bls.n	800e2d6 <USB_SetTurnaroundTime+0xae>
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	4a25      	ldr	r2, [pc, #148]	; (800e360 <USB_SetTurnaroundTime+0x138>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d202      	bcs.n	800e2d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e2d0:	2309      	movs	r3, #9
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	e020      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	4a21      	ldr	r2, [pc, #132]	; (800e360 <USB_SetTurnaroundTime+0x138>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d306      	bcc.n	800e2ec <USB_SetTurnaroundTime+0xc4>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	4a20      	ldr	r2, [pc, #128]	; (800e364 <USB_SetTurnaroundTime+0x13c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d802      	bhi.n	800e2ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e2e6:	2308      	movs	r3, #8
 800e2e8:	617b      	str	r3, [r7, #20]
 800e2ea:	e015      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	4a1d      	ldr	r2, [pc, #116]	; (800e364 <USB_SetTurnaroundTime+0x13c>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d906      	bls.n	800e302 <USB_SetTurnaroundTime+0xda>
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4a1c      	ldr	r2, [pc, #112]	; (800e368 <USB_SetTurnaroundTime+0x140>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d202      	bcs.n	800e302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e2fc:	2307      	movs	r3, #7
 800e2fe:	617b      	str	r3, [r7, #20]
 800e300:	e00a      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e302:	2306      	movs	r3, #6
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	e007      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d102      	bne.n	800e314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e30e:	2309      	movs	r3, #9
 800e310:	617b      	str	r3, [r7, #20]
 800e312:	e001      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e314:	2309      	movs	r3, #9
 800e316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	029b      	lsls	r3, r3, #10
 800e32c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e330:	431a      	orrs	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	371c      	adds	r7, #28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	00d8acbf 	.word	0x00d8acbf
 800e348:	00e4e1c0 	.word	0x00e4e1c0
 800e34c:	00f42400 	.word	0x00f42400
 800e350:	01067380 	.word	0x01067380
 800e354:	011a499f 	.word	0x011a499f
 800e358:	01312cff 	.word	0x01312cff
 800e35c:	014ca43f 	.word	0x014ca43f
 800e360:	016e3600 	.word	0x016e3600
 800e364:	01a6ab1f 	.word	0x01a6ab1f
 800e368:	01e84800 	.word	0x01e84800

0800e36c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f043 0201 	orr.w	r2, r3, #1
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f023 0201 	bic.w	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d115      	bne.n	800e3fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e3de:	2001      	movs	r0, #1
 800e3e0:	f7f9 f8fe 	bl	80075e0 <HAL_Delay>
      ms++;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f001 f96c 	bl	800f6c8 <USB_GetMode>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d01e      	beq.n	800e434 <USB_SetCurrentMode+0x84>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b31      	cmp	r3, #49	; 0x31
 800e3fa:	d9f0      	bls.n	800e3de <USB_SetCurrentMode+0x2e>
 800e3fc:	e01a      	b.n	800e434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e3fe:	78fb      	ldrb	r3, [r7, #3]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d115      	bne.n	800e430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e410:	2001      	movs	r0, #1
 800e412:	f7f9 f8e5 	bl	80075e0 <HAL_Delay>
      ms++;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3301      	adds	r3, #1
 800e41a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f001 f953 	bl	800f6c8 <USB_GetMode>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d005      	beq.n	800e434 <USB_SetCurrentMode+0x84>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b31      	cmp	r3, #49	; 0x31
 800e42c:	d9f0      	bls.n	800e410 <USB_SetCurrentMode+0x60>
 800e42e:	e001      	b.n	800e434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e005      	b.n	800e440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b32      	cmp	r3, #50	; 0x32
 800e438:	d101      	bne.n	800e43e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e000      	b.n	800e440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e448:	b084      	sub	sp, #16
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e462:	2300      	movs	r3, #0
 800e464:	613b      	str	r3, [r7, #16]
 800e466:	e009      	b.n	800e47c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	3340      	adds	r3, #64	; 0x40
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	2200      	movs	r2, #0
 800e474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	3301      	adds	r3, #1
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2b0e      	cmp	r3, #14
 800e480:	d9f2      	bls.n	800e468 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e484:	2b00      	cmp	r3, #0
 800e486:	d11c      	bne.n	800e4c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e496:	f043 0302 	orr.w	r3, r3, #2
 800e49a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	e005      	b.n	800e4ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	680b      	ldr	r3, [r1, #0]
 800e4ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d10c      	bne.n	800e50e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d104      	bne.n	800e504 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 f945 	bl	800e78c <USB_SetDevSpeed>
 800e502:	e008      	b.n	800e516 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e504:	2101      	movs	r1, #1
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 f940 	bl	800e78c <USB_SetDevSpeed>
 800e50c:	e003      	b.n	800e516 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e50e:	2103      	movs	r1, #3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f93b 	bl	800e78c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e516:	2110      	movs	r1, #16
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f8f3 	bl	800e704 <USB_FlushTxFifo>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f90f 	bl	800e74c <USB_FlushRxFifo>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e534:	2301      	movs	r3, #1
 800e536:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e53e:	461a      	mov	r2, r3
 800e540:	2300      	movs	r3, #0
 800e542:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e54a:	461a      	mov	r2, r3
 800e54c:	2300      	movs	r3, #0
 800e54e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e556:	461a      	mov	r2, r3
 800e558:	2300      	movs	r3, #0
 800e55a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e55c:	2300      	movs	r3, #0
 800e55e:	613b      	str	r3, [r7, #16]
 800e560:	e043      	b.n	800e5ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	015a      	lsls	r2, r3, #5
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	4413      	add	r3, r2
 800e56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e578:	d118      	bne.n	800e5ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10a      	bne.n	800e596 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e58c:	461a      	mov	r2, r3
 800e58e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	e013      	b.n	800e5be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	015a      	lsls	r2, r3, #5
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	4413      	add	r3, r2
 800e59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e5a8:	6013      	str	r3, [r2, #0]
 800e5aa:	e008      	b.n	800e5be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5dc:	461a      	mov	r2, r3
 800e5de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e5e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	613b      	str	r3, [r7, #16]
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	693a      	ldr	r2, [r7, #16]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d3b7      	bcc.n	800e562 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	613b      	str	r3, [r7, #16]
 800e5f6:	e043      	b.n	800e680 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e60a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e60e:	d118      	bne.n	800e642 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10a      	bne.n	800e62c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e622:	461a      	mov	r2, r3
 800e624:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e628:	6013      	str	r3, [r2, #0]
 800e62a:	e013      	b.n	800e654 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e638:	461a      	mov	r2, r3
 800e63a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	e008      	b.n	800e654 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	015a      	lsls	r2, r3, #5
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	4413      	add	r3, r2
 800e64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64e:	461a      	mov	r2, r3
 800e650:	2300      	movs	r3, #0
 800e652:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	015a      	lsls	r2, r3, #5
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e660:	461a      	mov	r2, r3
 800e662:	2300      	movs	r3, #0
 800e664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e672:	461a      	mov	r2, r3
 800e674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e678:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	3301      	adds	r3, #1
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	429a      	cmp	r2, r3
 800e686:	d3b7      	bcc.n	800e5f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e69a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e6a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d105      	bne.n	800e6bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	699b      	ldr	r3, [r3, #24]
 800e6b4:	f043 0210 	orr.w	r2, r3, #16
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	699a      	ldr	r2, [r3, #24]
 800e6c0:	4b0f      	ldr	r3, [pc, #60]	; (800e700 <USB_DevInit+0x2b8>)
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d005      	beq.n	800e6da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	f043 0208 	orr.w	r2, r3, #8
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d107      	bne.n	800e6f0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	699b      	ldr	r3, [r3, #24]
 800e6e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e6e8:	f043 0304 	orr.w	r3, r3, #4
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6fc:	b004      	add	sp, #16
 800e6fe:	4770      	bx	lr
 800e700:	803c3800 	.word	0x803c3800

0800e704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e70e:	2300      	movs	r3, #0
 800e710:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	019b      	lsls	r3, r3, #6
 800e716:	f043 0220 	orr.w	r2, r3, #32
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3301      	adds	r3, #1
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	4a08      	ldr	r2, [pc, #32]	; (800e748 <USB_FlushTxFifo+0x44>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d901      	bls.n	800e72e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e72a:	2303      	movs	r3, #3
 800e72c:	e006      	b.n	800e73c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	f003 0320 	and.w	r3, r3, #32
 800e736:	2b20      	cmp	r3, #32
 800e738:	d0f1      	beq.n	800e71e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	00030d40 	.word	0x00030d40

0800e74c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2210      	movs	r2, #16
 800e75c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3301      	adds	r3, #1
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	4a08      	ldr	r2, [pc, #32]	; (800e788 <USB_FlushRxFifo+0x3c>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d901      	bls.n	800e76e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e76a:	2303      	movs	r3, #3
 800e76c:	e006      	b.n	800e77c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	f003 0310 	and.w	r3, r3, #16
 800e776:	2b10      	cmp	r3, #16
 800e778:	d0f1      	beq.n	800e75e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3714      	adds	r7, #20
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	00030d40 	.word	0x00030d40

0800e78c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	78fb      	ldrb	r3, [r7, #3]
 800e7a6:	68f9      	ldr	r1, [r7, #12]
 800e7a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e7be:	b480      	push	{r7}
 800e7c0:	b087      	sub	sp, #28
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f003 0306 	and.w	r3, r3, #6
 800e7d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d102      	bne.n	800e7e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75fb      	strb	r3, [r7, #23]
 800e7e2:	e00a      	b.n	800e7fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d002      	beq.n	800e7f0 <USB_GetDevSpeed+0x32>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b06      	cmp	r3, #6
 800e7ee:	d102      	bne.n	800e7f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	75fb      	strb	r3, [r7, #23]
 800e7f4:	e001      	b.n	800e7fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e7f6:	230f      	movs	r3, #15
 800e7f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	371c      	adds	r7, #28
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	785b      	ldrb	r3, [r3, #1]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d13a      	bne.n	800e89a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82a:	69da      	ldr	r2, [r3, #28]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	f003 030f 	and.w	r3, r3, #15
 800e834:	2101      	movs	r1, #1
 800e836:	fa01 f303 	lsl.w	r3, r1, r3
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	68f9      	ldr	r1, [r7, #12]
 800e83e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e842:	4313      	orrs	r3, r2
 800e844:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d155      	bne.n	800e908 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	015a      	lsls	r2, r3, #5
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4413      	add	r3, r2
 800e864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	78db      	ldrb	r3, [r3, #3]
 800e876:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e878:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	059b      	lsls	r3, r3, #22
 800e87e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e880:	4313      	orrs	r3, r2
 800e882:	68ba      	ldr	r2, [r7, #8]
 800e884:	0151      	lsls	r1, r2, #5
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	440a      	add	r2, r1
 800e88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e88e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e896:	6013      	str	r3, [r2, #0]
 800e898:	e036      	b.n	800e908 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8a0:	69da      	ldr	r2, [r3, #28]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	f003 030f 	and.w	r3, r3, #15
 800e8aa:	2101      	movs	r1, #1
 800e8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e8b0:	041b      	lsls	r3, r3, #16
 800e8b2:	68f9      	ldr	r1, [r7, #12]
 800e8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	015a      	lsls	r2, r3, #5
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d11a      	bne.n	800e908 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	015a      	lsls	r2, r3, #5
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	4413      	add	r3, r2
 800e8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	78db      	ldrb	r3, [r3, #3]
 800e8ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e8ee:	430b      	orrs	r3, r1
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	0151      	lsls	r1, r2, #5
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	440a      	add	r2, r1
 800e8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e906:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3714      	adds	r7, #20
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr
	...

0800e918 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	785b      	ldrb	r3, [r3, #1]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d161      	bne.n	800e9f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	015a      	lsls	r2, r3, #5
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	4413      	add	r3, r2
 800e93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e94a:	d11f      	bne.n	800e98c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	015a      	lsls	r2, r3, #5
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4413      	add	r3, r2
 800e954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	0151      	lsls	r1, r2, #5
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	440a      	add	r2, r1
 800e962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e96a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	015a      	lsls	r2, r3, #5
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4413      	add	r3, r2
 800e974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	0151      	lsls	r1, r2, #5
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	440a      	add	r2, r1
 800e982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e98a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 030f 	and.w	r3, r3, #15
 800e99c:	2101      	movs	r1, #1
 800e99e:	fa01 f303 	lsl.w	r3, r1, r3
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	43db      	mvns	r3, r3
 800e9a6:	68f9      	ldr	r1, [r7, #12]
 800e9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b6:	69da      	ldr	r2, [r3, #28]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	43db      	mvns	r3, r3
 800e9ca:	68f9      	ldr	r1, [r7, #12]
 800e9cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	015a      	lsls	r2, r3, #5
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	4413      	add	r3, r2
 800e9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	0159      	lsls	r1, r3, #5
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	440b      	add	r3, r1
 800e9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	4b35      	ldr	r3, [pc, #212]	; (800eac8 <USB_DeactivateEndpoint+0x1b0>)
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	600b      	str	r3, [r1, #0]
 800e9f6:	e060      	b.n	800eaba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	015a      	lsls	r2, r3, #5
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4413      	add	r3, r2
 800ea00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea0e:	d11f      	bne.n	800ea50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	015a      	lsls	r2, r3, #5
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4413      	add	r3, r2
 800ea18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	0151      	lsls	r1, r2, #5
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	440a      	add	r2, r1
 800ea26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ea2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	0151      	lsls	r1, r2, #5
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	440a      	add	r2, r1
 800ea46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 030f 	and.w	r3, r3, #15
 800ea60:	2101      	movs	r1, #1
 800ea62:	fa01 f303 	lsl.w	r3, r1, r3
 800ea66:	041b      	lsls	r3, r3, #16
 800ea68:	43db      	mvns	r3, r3
 800ea6a:	68f9      	ldr	r1, [r7, #12]
 800ea6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea70:	4013      	ands	r3, r2
 800ea72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea7a:	69da      	ldr	r2, [r3, #28]
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	f003 030f 	and.w	r3, r3, #15
 800ea84:	2101      	movs	r1, #1
 800ea86:	fa01 f303 	lsl.w	r3, r1, r3
 800ea8a:	041b      	lsls	r3, r3, #16
 800ea8c:	43db      	mvns	r3, r3
 800ea8e:	68f9      	ldr	r1, [r7, #12]
 800ea90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea94:	4013      	ands	r3, r2
 800ea96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	0159      	lsls	r1, r3, #5
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	440b      	add	r3, r1
 800eaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eab2:	4619      	mov	r1, r3
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <USB_DeactivateEndpoint+0x1b4>)
 800eab6:	4013      	ands	r3, r2
 800eab8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	ec337800 	.word	0xec337800
 800eacc:	eff37800 	.word	0xeff37800

0800ead0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	; 0x28
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	4613      	mov	r3, r2
 800eadc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	f040 815c 	bne.w	800edaa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d132      	bne.n	800eb60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	69ba      	ldr	r2, [r7, #24]
 800eb0a:	0151      	lsls	r1, r2, #5
 800eb0c:	69fa      	ldr	r2, [r7, #28]
 800eb0e:	440a      	add	r2, r1
 800eb10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	015a      	lsls	r2, r3, #5
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	4413      	add	r3, r2
 800eb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	0151      	lsls	r1, r2, #5
 800eb30:	69fa      	ldr	r2, [r7, #28]
 800eb32:	440a      	add	r2, r1
 800eb34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	015a      	lsls	r2, r3, #5
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	4413      	add	r3, r2
 800eb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4a:	691b      	ldr	r3, [r3, #16]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	0151      	lsls	r1, r2, #5
 800eb50:	69fa      	ldr	r2, [r7, #28]
 800eb52:	440a      	add	r2, r1
 800eb54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb58:	0cdb      	lsrs	r3, r3, #19
 800eb5a:	04db      	lsls	r3, r3, #19
 800eb5c:	6113      	str	r3, [r2, #16]
 800eb5e:	e074      	b.n	800ec4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	69ba      	ldr	r2, [r7, #24]
 800eb70:	0151      	lsls	r1, r2, #5
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	440a      	add	r2, r1
 800eb76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb7a:	0cdb      	lsrs	r3, r3, #19
 800eb7c:	04db      	lsls	r3, r3, #19
 800eb7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	015a      	lsls	r2, r3, #5
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	4413      	add	r3, r2
 800eb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	0151      	lsls	r1, r2, #5
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	440a      	add	r2, r1
 800eb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	6959      	ldr	r1, [r3, #20]
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	440b      	add	r3, r1
 800ebbc:	1e59      	subs	r1, r3, #1
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	fbb1 f3f3 	udiv	r3, r1, r3
 800ebc6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ebc8:	4b9d      	ldr	r3, [pc, #628]	; (800ee40 <USB_EPStartXfer+0x370>)
 800ebca:	400b      	ands	r3, r1
 800ebcc:	69b9      	ldr	r1, [r7, #24]
 800ebce:	0148      	lsls	r0, r1, #5
 800ebd0:	69f9      	ldr	r1, [r7, #28]
 800ebd2:	4401      	add	r1, r0
 800ebd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	015a      	lsls	r2, r3, #5
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe8:	691a      	ldr	r2, [r3, #16]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebf2:	69b9      	ldr	r1, [r7, #24]
 800ebf4:	0148      	lsls	r0, r1, #5
 800ebf6:	69f9      	ldr	r1, [r7, #28]
 800ebf8:	4401      	add	r1, r0
 800ebfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	78db      	ldrb	r3, [r3, #3]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d11f      	bne.n	800ec4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	015a      	lsls	r2, r3, #5
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	4413      	add	r3, r2
 800ec12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	0151      	lsls	r1, r2, #5
 800ec1c:	69fa      	ldr	r2, [r7, #28]
 800ec1e:	440a      	add	r2, r1
 800ec20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ec28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	0151      	lsls	r1, r2, #5
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	440a      	add	r2, r1
 800ec40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d14b      	bne.n	800ece8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	015a      	lsls	r2, r3, #5
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec64:	461a      	mov	r2, r3
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	78db      	ldrb	r3, [r3, #3]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d128      	bne.n	800ecc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec7a:	689b      	ldr	r3, [r3, #8]
 800ec7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d110      	bne.n	800eca6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	015a      	lsls	r2, r3, #5
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	69ba      	ldr	r2, [r7, #24]
 800ec94:	0151      	lsls	r1, r2, #5
 800ec96:	69fa      	ldr	r2, [r7, #28]
 800ec98:	440a      	add	r2, r1
 800ec9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eca2:	6013      	str	r3, [r2, #0]
 800eca4:	e00f      	b.n	800ecc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	015a      	lsls	r2, r3, #5
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	4413      	add	r3, r2
 800ecae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	0151      	lsls	r1, r2, #5
 800ecb8:	69fa      	ldr	r2, [r7, #28]
 800ecba:	440a      	add	r2, r1
 800ecbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	69ba      	ldr	r2, [r7, #24]
 800ecd6:	0151      	lsls	r1, r2, #5
 800ecd8:	69fa      	ldr	r2, [r7, #28]
 800ecda:	440a      	add	r2, r1
 800ecdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ece0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ece4:	6013      	str	r3, [r2, #0]
 800ece6:	e12f      	b.n	800ef48 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	015a      	lsls	r2, r3, #5
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	0151      	lsls	r1, r2, #5
 800ecfa:	69fa      	ldr	r2, [r7, #28]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	78db      	ldrb	r3, [r3, #3]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d015      	beq.n	800ed3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	695b      	ldr	r3, [r3, #20]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8117 	beq.w	800ef48 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	f003 030f 	and.w	r3, r3, #15
 800ed2a:	2101      	movs	r1, #1
 800ed2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ed30:	69f9      	ldr	r1, [r7, #28]
 800ed32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed36:	4313      	orrs	r3, r2
 800ed38:	634b      	str	r3, [r1, #52]	; 0x34
 800ed3a:	e105      	b.n	800ef48 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d110      	bne.n	800ed6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	69ba      	ldr	r2, [r7, #24]
 800ed5c:	0151      	lsls	r1, r2, #5
 800ed5e:	69fa      	ldr	r2, [r7, #28]
 800ed60:	440a      	add	r2, r1
 800ed62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	e00f      	b.n	800ed8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	015a      	lsls	r2, r3, #5
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4413      	add	r3, r2
 800ed76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	69ba      	ldr	r2, [r7, #24]
 800ed7e:	0151      	lsls	r1, r2, #5
 800ed80:	69fa      	ldr	r2, [r7, #28]
 800ed82:	440a      	add	r2, r1
 800ed84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	68d9      	ldr	r1, [r3, #12]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	781a      	ldrb	r2, [r3, #0]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	b298      	uxth	r0, r3
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	4603      	mov	r3, r0
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f000 fa2b 	bl	800f1fe <USB_WritePacket>
 800eda8:	e0ce      	b.n	800ef48 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	015a      	lsls	r2, r3, #5
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	4413      	add	r3, r2
 800edb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	0151      	lsls	r1, r2, #5
 800edbc:	69fa      	ldr	r2, [r7, #28]
 800edbe:	440a      	add	r2, r1
 800edc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edc4:	0cdb      	lsrs	r3, r3, #19
 800edc6:	04db      	lsls	r3, r3, #19
 800edc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	015a      	lsls	r2, r3, #5
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	4413      	add	r3, r2
 800edd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	69ba      	ldr	r2, [r7, #24]
 800edda:	0151      	lsls	r1, r2, #5
 800eddc:	69fa      	ldr	r2, [r7, #28]
 800edde:	440a      	add	r2, r1
 800ede0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ede4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ede8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800edec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d126      	bne.n	800ee44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	015a      	lsls	r2, r3, #5
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	4413      	add	r3, r2
 800edfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee02:	691a      	ldr	r2, [r3, #16]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee0c:	69b9      	ldr	r1, [r7, #24]
 800ee0e:	0148      	lsls	r0, r1, #5
 800ee10:	69f9      	ldr	r1, [r7, #28]
 800ee12:	4401      	add	r1, r0
 800ee14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	015a      	lsls	r2, r3, #5
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	4413      	add	r3, r2
 800ee24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	69ba      	ldr	r2, [r7, #24]
 800ee2c:	0151      	lsls	r1, r2, #5
 800ee2e:	69fa      	ldr	r2, [r7, #28]
 800ee30:	440a      	add	r2, r1
 800ee32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee3a:	6113      	str	r3, [r2, #16]
 800ee3c:	e036      	b.n	800eeac <USB_EPStartXfer+0x3dc>
 800ee3e:	bf00      	nop
 800ee40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	695a      	ldr	r2, [r3, #20]
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	1e5a      	subs	r2, r3, #1
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee58:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	015a      	lsls	r2, r3, #5
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	4413      	add	r3, r2
 800ee62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee66:	691a      	ldr	r2, [r3, #16]
 800ee68:	8afb      	ldrh	r3, [r7, #22]
 800ee6a:	04d9      	lsls	r1, r3, #19
 800ee6c:	4b39      	ldr	r3, [pc, #228]	; (800ef54 <USB_EPStartXfer+0x484>)
 800ee6e:	400b      	ands	r3, r1
 800ee70:	69b9      	ldr	r1, [r7, #24]
 800ee72:	0148      	lsls	r0, r1, #5
 800ee74:	69f9      	ldr	r1, [r7, #28]
 800ee76:	4401      	add	r1, r0
 800ee78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	015a      	lsls	r2, r3, #5
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee8c:	691a      	ldr	r2, [r3, #16]
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	8af9      	ldrh	r1, [r7, #22]
 800ee94:	fb01 f303 	mul.w	r3, r1, r3
 800ee98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee9c:	69b9      	ldr	r1, [r7, #24]
 800ee9e:	0148      	lsls	r0, r1, #5
 800eea0:	69f9      	ldr	r1, [r7, #28]
 800eea2:	4401      	add	r1, r0
 800eea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eeac:	79fb      	ldrb	r3, [r7, #7]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d10d      	bne.n	800eece <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d009      	beq.n	800eece <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	68d9      	ldr	r1, [r3, #12]
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	015a      	lsls	r2, r3, #5
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	4413      	add	r3, r2
 800eec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeca:	460a      	mov	r2, r1
 800eecc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	78db      	ldrb	r3, [r3, #3]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d128      	bne.n	800ef28 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d110      	bne.n	800ef08 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	015a      	lsls	r2, r3, #5
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	4413      	add	r3, r2
 800eeee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	69ba      	ldr	r2, [r7, #24]
 800eef6:	0151      	lsls	r1, r2, #5
 800eef8:	69fa      	ldr	r2, [r7, #28]
 800eefa:	440a      	add	r2, r1
 800eefc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	e00f      	b.n	800ef28 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	015a      	lsls	r2, r3, #5
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	4413      	add	r3, r2
 800ef10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	69ba      	ldr	r2, [r7, #24]
 800ef18:	0151      	lsls	r1, r2, #5
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	440a      	add	r2, r1
 800ef1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	015a      	lsls	r2, r3, #5
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	4413      	add	r3, r2
 800ef30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	69ba      	ldr	r2, [r7, #24]
 800ef38:	0151      	lsls	r1, r2, #5
 800ef3a:	69fa      	ldr	r2, [r7, #28]
 800ef3c:	440a      	add	r2, r1
 800ef3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	1ff80000 	.word	0x1ff80000

0800ef58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	4613      	mov	r3, r2
 800ef64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	f040 80cd 	bne.w	800f114 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d132      	bne.n	800efe8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	015a      	lsls	r2, r3, #5
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	4413      	add	r3, r2
 800ef8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	0151      	lsls	r1, r2, #5
 800ef94:	697a      	ldr	r2, [r7, #20]
 800ef96:	440a      	add	r2, r1
 800ef98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800efa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800efa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	015a      	lsls	r2, r3, #5
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	4413      	add	r3, r2
 800efae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	0151      	lsls	r1, r2, #5
 800efb8:	697a      	ldr	r2, [r7, #20]
 800efba:	440a      	add	r2, r1
 800efbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800efc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	015a      	lsls	r2, r3, #5
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	4413      	add	r3, r2
 800efce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd2:	691b      	ldr	r3, [r3, #16]
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	0151      	lsls	r1, r2, #5
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	440a      	add	r2, r1
 800efdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efe0:	0cdb      	lsrs	r3, r3, #19
 800efe2:	04db      	lsls	r3, r3, #19
 800efe4:	6113      	str	r3, [r2, #16]
 800efe6:	e04e      	b.n	800f086 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	015a      	lsls	r2, r3, #5
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	4413      	add	r3, r2
 800eff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	0151      	lsls	r1, r2, #5
 800effa:	697a      	ldr	r2, [r7, #20]
 800effc:	440a      	add	r2, r1
 800effe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f002:	0cdb      	lsrs	r3, r3, #19
 800f004:	04db      	lsls	r3, r3, #19
 800f006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	015a      	lsls	r2, r3, #5
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	4413      	add	r3, r2
 800f010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	0151      	lsls	r1, r2, #5
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	440a      	add	r2, r1
 800f01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f02a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	695a      	ldr	r2, [r3, #20]
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	429a      	cmp	r2, r3
 800f036:	d903      	bls.n	800f040 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	689a      	ldr	r2, [r3, #8]
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	015a      	lsls	r2, r3, #5
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	4413      	add	r3, r2
 800f048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	0151      	lsls	r1, r2, #5
 800f052:	697a      	ldr	r2, [r7, #20]
 800f054:	440a      	add	r2, r1
 800f056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f05a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	015a      	lsls	r2, r3, #5
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	4413      	add	r3, r2
 800f068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f06c:	691a      	ldr	r2, [r3, #16]
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f076:	6939      	ldr	r1, [r7, #16]
 800f078:	0148      	lsls	r0, r1, #5
 800f07a:	6979      	ldr	r1, [r7, #20]
 800f07c:	4401      	add	r1, r0
 800f07e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f082:	4313      	orrs	r3, r2
 800f084:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f086:	79fb      	ldrb	r3, [r7, #7]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d11e      	bne.n	800f0ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d009      	beq.n	800f0a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	015a      	lsls	r2, r3, #5
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	693a      	ldr	r2, [r7, #16]
 800f0b8:	0151      	lsls	r1, r2, #5
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	440a      	add	r2, r1
 800f0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0c6:	6013      	str	r3, [r2, #0]
 800f0c8:	e092      	b.n	800f1f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	015a      	lsls	r2, r3, #5
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	693a      	ldr	r2, [r7, #16]
 800f0da:	0151      	lsls	r1, r2, #5
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	440a      	add	r2, r1
 800f0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d07e      	beq.n	800f1f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	f003 030f 	and.w	r3, r3, #15
 800f102:	2101      	movs	r1, #1
 800f104:	fa01 f303 	lsl.w	r3, r1, r3
 800f108:	6979      	ldr	r1, [r7, #20]
 800f10a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f10e:	4313      	orrs	r3, r2
 800f110:	634b      	str	r3, [r1, #52]	; 0x34
 800f112:	e06d      	b.n	800f1f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	015a      	lsls	r2, r3, #5
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	4413      	add	r3, r2
 800f11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	0151      	lsls	r1, r2, #5
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	440a      	add	r2, r1
 800f12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f12e:	0cdb      	lsrs	r3, r3, #19
 800f130:	04db      	lsls	r3, r3, #19
 800f132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	015a      	lsls	r2, r3, #5
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	4413      	add	r3, r2
 800f13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	693a      	ldr	r2, [r7, #16]
 800f144:	0151      	lsls	r1, r2, #5
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	440a      	add	r2, r1
 800f14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f14e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f156:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	689a      	ldr	r2, [r3, #8]
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	015a      	lsls	r2, r3, #5
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	4413      	add	r3, r2
 800f170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	0151      	lsls	r1, r2, #5
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	440a      	add	r2, r1
 800f17e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	015a      	lsls	r2, r3, #5
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	4413      	add	r3, r2
 800f190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f194:	691a      	ldr	r2, [r3, #16]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f19e:	6939      	ldr	r1, [r7, #16]
 800f1a0:	0148      	lsls	r0, r1, #5
 800f1a2:	6979      	ldr	r1, [r7, #20]
 800f1a4:	4401      	add	r1, r0
 800f1a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f1ae:	79fb      	ldrb	r3, [r7, #7]
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d10d      	bne.n	800f1d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d009      	beq.n	800f1d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	68d9      	ldr	r1, [r3, #12]
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	015a      	lsls	r2, r3, #5
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1cc:	460a      	mov	r2, r1
 800f1ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	0151      	lsls	r1, r2, #5
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	440a      	add	r2, r1
 800f1e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	371c      	adds	r7, #28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f1fe:	b480      	push	{r7}
 800f200:	b089      	sub	sp, #36	; 0x24
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	4611      	mov	r1, r2
 800f20a:	461a      	mov	r2, r3
 800f20c:	460b      	mov	r3, r1
 800f20e:	71fb      	strb	r3, [r7, #7]
 800f210:	4613      	mov	r3, r2
 800f212:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f21c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f220:	2b00      	cmp	r3, #0
 800f222:	d123      	bne.n	800f26c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f224:	88bb      	ldrh	r3, [r7, #4]
 800f226:	3303      	adds	r3, #3
 800f228:	089b      	lsrs	r3, r3, #2
 800f22a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f22c:	2300      	movs	r3, #0
 800f22e:	61bb      	str	r3, [r7, #24]
 800f230:	e018      	b.n	800f264 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	031a      	lsls	r2, r3, #12
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	4413      	add	r3, r2
 800f23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f23e:	461a      	mov	r2, r3
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	3301      	adds	r3, #1
 800f24a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	3301      	adds	r3, #1
 800f250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	3301      	adds	r3, #1
 800f256:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	3301      	adds	r3, #1
 800f25c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	3301      	adds	r3, #1
 800f262:	61bb      	str	r3, [r7, #24]
 800f264:	69ba      	ldr	r2, [r7, #24]
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d3e2      	bcc.n	800f232 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3724      	adds	r7, #36	; 0x24
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b08b      	sub	sp, #44	; 0x2c
 800f27e:	af00      	add	r7, sp, #0
 800f280:	60f8      	str	r0, [r7, #12]
 800f282:	60b9      	str	r1, [r7, #8]
 800f284:	4613      	mov	r3, r2
 800f286:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f290:	88fb      	ldrh	r3, [r7, #6]
 800f292:	089b      	lsrs	r3, r3, #2
 800f294:	b29b      	uxth	r3, r3
 800f296:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f298:	88fb      	ldrh	r3, [r7, #6]
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	623b      	str	r3, [r7, #32]
 800f2a4:	e014      	b.n	800f2d0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	601a      	str	r2, [r3, #0]
    pDest++;
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	623b      	str	r3, [r7, #32]
 800f2d0:	6a3a      	ldr	r2, [r7, #32]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d3e6      	bcc.n	800f2a6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f2d8:	8bfb      	ldrh	r3, [r7, #30]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01e      	beq.n	800f31c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	f107 0310 	add.w	r3, r7, #16
 800f2ee:	6812      	ldr	r2, [r2, #0]
 800f2f0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	6a3b      	ldr	r3, [r7, #32]
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f2fe:	b2da      	uxtb	r2, r3
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f302:	701a      	strb	r2, [r3, #0]
      i++;
 800f304:	6a3b      	ldr	r3, [r7, #32]
 800f306:	3301      	adds	r3, #1
 800f308:	623b      	str	r3, [r7, #32]
      pDest++;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	3301      	adds	r3, #1
 800f30e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f310:	8bfb      	ldrh	r3, [r7, #30]
 800f312:	3b01      	subs	r3, #1
 800f314:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f316:	8bfb      	ldrh	r3, [r7, #30]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1ea      	bne.n	800f2f2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f31e:	4618      	mov	r0, r3
 800f320:	372c      	adds	r7, #44	; 0x2c
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b085      	sub	sp, #20
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
 800f332:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	785b      	ldrb	r3, [r3, #1]
 800f342:	2b01      	cmp	r3, #1
 800f344:	d12c      	bne.n	800f3a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	db12      	blt.n	800f37e <USB_EPSetStall+0x54>
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00f      	beq.n	800f37e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	015a      	lsls	r2, r3, #5
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	4413      	add	r3, r2
 800f366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68ba      	ldr	r2, [r7, #8]
 800f36e:	0151      	lsls	r1, r2, #5
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	440a      	add	r2, r1
 800f374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f37c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	015a      	lsls	r2, r3, #5
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	4413      	add	r3, r2
 800f386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	0151      	lsls	r1, r2, #5
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	440a      	add	r2, r1
 800f394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f39c:	6013      	str	r3, [r2, #0]
 800f39e:	e02b      	b.n	800f3f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	015a      	lsls	r2, r3, #5
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	db12      	blt.n	800f3d8 <USB_EPSetStall+0xae>
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00f      	beq.n	800f3d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	0151      	lsls	r1, r2, #5
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	440a      	add	r2, r1
 800f3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f3d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	015a      	lsls	r2, r3, #5
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4413      	add	r3, r2
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	0151      	lsls	r1, r2, #5
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	440a      	add	r2, r1
 800f3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f3f8:	2300      	movs	r3, #0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr

0800f406 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f406:	b480      	push	{r7}
 800f408:	b085      	sub	sp, #20
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	785b      	ldrb	r3, [r3, #1]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d128      	bne.n	800f474 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	015a      	lsls	r2, r3, #5
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	4413      	add	r3, r2
 800f42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	0151      	lsls	r1, r2, #5
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	440a      	add	r2, r1
 800f438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f43c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f440:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	78db      	ldrb	r3, [r3, #3]
 800f446:	2b03      	cmp	r3, #3
 800f448:	d003      	beq.n	800f452 <USB_EPClearStall+0x4c>
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	78db      	ldrb	r3, [r3, #3]
 800f44e:	2b02      	cmp	r3, #2
 800f450:	d138      	bne.n	800f4c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	015a      	lsls	r2, r3, #5
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4413      	add	r3, r2
 800f45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	0151      	lsls	r1, r2, #5
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	440a      	add	r2, r1
 800f468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f46c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f470:	6013      	str	r3, [r2, #0]
 800f472:	e027      	b.n	800f4c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	015a      	lsls	r2, r3, #5
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4413      	add	r3, r2
 800f47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	68ba      	ldr	r2, [r7, #8]
 800f484:	0151      	lsls	r1, r2, #5
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	440a      	add	r2, r1
 800f48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f48e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f492:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	78db      	ldrb	r3, [r3, #3]
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d003      	beq.n	800f4a4 <USB_EPClearStall+0x9e>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	78db      	ldrb	r3, [r3, #3]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d10f      	bne.n	800f4c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	0151      	lsls	r1, r2, #5
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	440a      	add	r2, r1
 800f4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f4c4:	2300      	movs	r3, #0
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f4d2:	b480      	push	{r7}
 800f4d4:	b085      	sub	sp, #20
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f4f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	78fb      	ldrb	r3, [r7, #3]
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f506:	68f9      	ldr	r1, [r7, #12]
 800f508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f50c:	4313      	orrs	r3, r2
 800f50e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f51e:	b480      	push	{r7}
 800f520:	b085      	sub	sp, #20
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f538:	f023 0303 	bic.w	r3, r3, #3
 800f53c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f54c:	f023 0302 	bic.w	r3, r3, #2
 800f550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f57a:	f023 0303 	bic.w	r3, r3, #3
 800f57e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f58e:	f043 0302 	orr.w	r3, r3, #2
 800f592:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b085      	sub	sp, #20
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	695b      	ldr	r3, [r3, #20]
 800f5ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	4013      	ands	r3, r2
 800f5b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5da:	699b      	ldr	r3, [r3, #24]
 800f5dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e4:	69db      	ldr	r3, [r3, #28]
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	0c1b      	lsrs	r3, r3, #16
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3714      	adds	r7, #20
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f618:	69db      	ldr	r3, [r3, #28]
 800f61a:	68ba      	ldr	r2, [r7, #8]
 800f61c:	4013      	ands	r3, r2
 800f61e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	b29b      	uxth	r3, r3
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	4013      	ands	r3, r2
 800f65c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f65e:	68bb      	ldr	r3, [r7, #8]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	460b      	mov	r3, r1
 800f676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	f003 030f 	and.w	r3, r3, #15
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	fa22 f303 	lsr.w	r3, r2, r3
 800f69c:	01db      	lsls	r3, r3, #7
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f6a6:	78fb      	ldrb	r3, [r7, #3]
 800f6a8:	015a      	lsls	r2, r3, #5
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b2:	689b      	ldr	r3, [r3, #8]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	371c      	adds	r7, #28
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr

0800f6c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	f003 0301 	and.w	r3, r3, #1
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b085      	sub	sp, #20
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f702:	f023 0307 	bic.w	r3, r3, #7
 800f706:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f71a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3714      	adds	r7, #20
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr
	...

0800f72c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b087      	sub	sp, #28
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	460b      	mov	r3, r1
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	333c      	adds	r3, #60	; 0x3c
 800f742:	3304      	adds	r3, #4
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	4a26      	ldr	r2, [pc, #152]	; (800f7e4 <USB_EP0_OutStart+0xb8>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d90a      	bls.n	800f766 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f75c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f760:	d101      	bne.n	800f766 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f762:	2300      	movs	r3, #0
 800f764:	e037      	b.n	800f7d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f76c:	461a      	mov	r2, r3
 800f76e:	2300      	movs	r3, #0
 800f770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f778:	691b      	ldr	r3, [r3, #16]
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f794:	f043 0318 	orr.w	r3, r3, #24
 800f798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f7ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f7ae:	7afb      	ldrb	r3, [r7, #11]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d10f      	bne.n	800f7d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	697a      	ldr	r2, [r7, #20]
 800f7ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f7d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	371c      	adds	r7, #28
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	4f54300a 	.word	0x4f54300a

0800f7e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	60fb      	str	r3, [r7, #12]
 800f7fa:	4a13      	ldr	r2, [pc, #76]	; (800f848 <USB_CoreReset+0x60>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d901      	bls.n	800f804 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f800:	2303      	movs	r3, #3
 800f802:	e01a      	b.n	800f83a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	daf3      	bge.n	800f7f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f80c:	2300      	movs	r3, #0
 800f80e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	691b      	ldr	r3, [r3, #16]
 800f814:	f043 0201 	orr.w	r2, r3, #1
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3301      	adds	r3, #1
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	4a09      	ldr	r2, [pc, #36]	; (800f848 <USB_CoreReset+0x60>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d901      	bls.n	800f82c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f828:	2303      	movs	r3, #3
 800f82a:	e006      	b.n	800f83a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	2b01      	cmp	r3, #1
 800f836:	d0f1      	beq.n	800f81c <USB_CoreReset+0x34>

  return HAL_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	00030d40 	.word	0x00030d40

0800f84c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	460b      	mov	r3, r1
 800f856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f858:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f85c:	f002 fa08 	bl	8011c70 <USBD_static_malloc>
 800f860:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d105      	bne.n	800f874 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f870:	2302      	movs	r3, #2
 800f872:	e066      	b.n	800f942 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	7c1b      	ldrb	r3, [r3, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d119      	bne.n	800f8b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f888:	2202      	movs	r2, #2
 800f88a:	2181      	movs	r1, #129	; 0x81
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f002 f87e 	bl	801198e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2201      	movs	r2, #1
 800f896:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f89c:	2202      	movs	r2, #2
 800f89e:	2101      	movs	r1, #1
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f002 f874 	bl	801198e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2210      	movs	r2, #16
 800f8b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f8b6:	e016      	b.n	800f8e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f8b8:	2340      	movs	r3, #64	; 0x40
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	2181      	movs	r1, #129	; 0x81
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f002 f865 	bl	801198e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f8ca:	2340      	movs	r3, #64	; 0x40
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f002 f85c 	bl	801198e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2210      	movs	r2, #16
 800f8e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f8e6:	2308      	movs	r3, #8
 800f8e8:	2203      	movs	r2, #3
 800f8ea:	2182      	movs	r1, #130	; 0x82
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f002 f84e 	bl	801198e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7c1b      	ldrb	r3, [r3, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d109      	bne.n	800f930 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f922:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f926:	2101      	movs	r1, #1
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f002 f91f 	bl	8011b6c <USBD_LL_PrepareReceive>
 800f92e:	e007      	b.n	800f940 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f936:	2340      	movs	r3, #64	; 0x40
 800f938:	2101      	movs	r1, #1
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f002 f916 	bl	8011b6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b082      	sub	sp, #8
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	460b      	mov	r3, r1
 800f954:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f956:	2181      	movs	r1, #129	; 0x81
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f002 f83e 	bl	80119da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f964:	2101      	movs	r1, #1
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f002 f837 	bl	80119da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f974:	2182      	movs	r1, #130	; 0x82
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f002 f82f 	bl	80119da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00e      	beq.n	800f9b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f002 f970 	bl	8011c8c <USBD_static_free>
    pdev->pClassData = NULL;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
	...

0800f9c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d101      	bne.n	800f9e8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f9e4:	2303      	movs	r3, #3
 800f9e6:	e0af      	b.n	800fb48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d03f      	beq.n	800fa74 <USBD_CDC_Setup+0xb4>
 800f9f4:	2b20      	cmp	r3, #32
 800f9f6:	f040 809f 	bne.w	800fb38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	88db      	ldrh	r3, [r3, #6]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d02e      	beq.n	800fa60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b25b      	sxtb	r3, r3
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	da16      	bge.n	800fa3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800fa18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa1a:	683a      	ldr	r2, [r7, #0]
 800fa1c:	88d2      	ldrh	r2, [r2, #6]
 800fa1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	88db      	ldrh	r3, [r3, #6]
 800fa24:	2b07      	cmp	r3, #7
 800fa26:	bf28      	it	cs
 800fa28:	2307      	movcs	r3, #7
 800fa2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	89fa      	ldrh	r2, [r7, #14]
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f001 fb43 	bl	80110be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800fa38:	e085      	b.n	800fb46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	785a      	ldrb	r2, [r3, #1]
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	88db      	ldrh	r3, [r3, #6]
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fa50:	6939      	ldr	r1, [r7, #16]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	88db      	ldrh	r3, [r3, #6]
 800fa56:	461a      	mov	r2, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f001 fb5c 	bl	8011116 <USBD_CtlPrepareRx>
      break;
 800fa5e:	e072      	b.n	800fb46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	683a      	ldr	r2, [r7, #0]
 800fa6a:	7850      	ldrb	r0, [r2, #1]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	4798      	blx	r3
      break;
 800fa72:	e068      	b.n	800fb46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	785b      	ldrb	r3, [r3, #1]
 800fa78:	2b0b      	cmp	r3, #11
 800fa7a:	d852      	bhi.n	800fb22 <USBD_CDC_Setup+0x162>
 800fa7c:	a201      	add	r2, pc, #4	; (adr r2, 800fa84 <USBD_CDC_Setup+0xc4>)
 800fa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa82:	bf00      	nop
 800fa84:	0800fab5 	.word	0x0800fab5
 800fa88:	0800fb31 	.word	0x0800fb31
 800fa8c:	0800fb23 	.word	0x0800fb23
 800fa90:	0800fb23 	.word	0x0800fb23
 800fa94:	0800fb23 	.word	0x0800fb23
 800fa98:	0800fb23 	.word	0x0800fb23
 800fa9c:	0800fb23 	.word	0x0800fb23
 800faa0:	0800fb23 	.word	0x0800fb23
 800faa4:	0800fb23 	.word	0x0800fb23
 800faa8:	0800fb23 	.word	0x0800fb23
 800faac:	0800fadf 	.word	0x0800fadf
 800fab0:	0800fb09 	.word	0x0800fb09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d107      	bne.n	800fad0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fac0:	f107 030a 	add.w	r3, r7, #10
 800fac4:	2202      	movs	r2, #2
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f001 faf8 	bl	80110be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800face:	e032      	b.n	800fb36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f001 fa82 	bl	8010fdc <USBD_CtlError>
            ret = USBD_FAIL;
 800fad8:	2303      	movs	r3, #3
 800fada:	75fb      	strb	r3, [r7, #23]
          break;
 800fadc:	e02b      	b.n	800fb36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d107      	bne.n	800fafa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800faea:	f107 030d 	add.w	r3, r7, #13
 800faee:	2201      	movs	r2, #1
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 fae3 	bl	80110be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800faf8:	e01d      	b.n	800fb36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fafa:	6839      	ldr	r1, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f001 fa6d 	bl	8010fdc <USBD_CtlError>
            ret = USBD_FAIL;
 800fb02:	2303      	movs	r3, #3
 800fb04:	75fb      	strb	r3, [r7, #23]
          break;
 800fb06:	e016      	b.n	800fb36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b03      	cmp	r3, #3
 800fb12:	d00f      	beq.n	800fb34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 fa60 	bl	8010fdc <USBD_CtlError>
            ret = USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fb20:	e008      	b.n	800fb34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f001 fa59 	bl	8010fdc <USBD_CtlError>
          ret = USBD_FAIL;
 800fb2a:	2303      	movs	r3, #3
 800fb2c:	75fb      	strb	r3, [r7, #23]
          break;
 800fb2e:	e002      	b.n	800fb36 <USBD_CDC_Setup+0x176>
          break;
 800fb30:	bf00      	nop
 800fb32:	e008      	b.n	800fb46 <USBD_CDC_Setup+0x186>
          break;
 800fb34:	bf00      	nop
      }
      break;
 800fb36:	e006      	b.n	800fb46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f001 fa4e 	bl	8010fdc <USBD_CtlError>
      ret = USBD_FAIL;
 800fb40:	2303      	movs	r3, #3
 800fb42:	75fb      	strb	r3, [r7, #23]
      break;
 800fb44:	bf00      	nop
  }

  return (uint8_t)ret;
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3718      	adds	r7, #24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	460b      	mov	r3, r1
 800fb5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d101      	bne.n	800fb72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e04f      	b.n	800fc12 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fb7a:	78fa      	ldrb	r2, [r7, #3]
 800fb7c:	6879      	ldr	r1, [r7, #4]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	440b      	add	r3, r1
 800fb88:	3318      	adds	r3, #24
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d029      	beq.n	800fbe4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800fb90:	78fa      	ldrb	r2, [r7, #3]
 800fb92:	6879      	ldr	r1, [r7, #4]
 800fb94:	4613      	mov	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	440b      	add	r3, r1
 800fb9e:	3318      	adds	r3, #24
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	78f9      	ldrb	r1, [r7, #3]
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	460b      	mov	r3, r1
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	1a5b      	subs	r3, r3, r1
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	4403      	add	r3, r0
 800fbb0:	3344      	adds	r3, #68	; 0x44
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800fbb8:	fb03 f301 	mul.w	r3, r3, r1
 800fbbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d110      	bne.n	800fbe4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800fbc2:	78fa      	ldrb	r2, [r7, #3]
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	3318      	adds	r3, #24
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fbd6:	78f9      	ldrb	r1, [r7, #3]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	2200      	movs	r2, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f001 ffa4 	bl	8011b2a <USBD_LL_Transmit>
 800fbe2:	e015      	b.n	800fc10 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbf2:	691b      	ldr	r3, [r3, #16]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800fc0c:	78fa      	ldrb	r2, [r7, #3]
 800fc0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	460b      	mov	r3, r1
 800fc24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e015      	b.n	800fc68 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f001 ffb4 	bl	8011bae <USBD_LL_GetRxDataSize>
 800fc46:	4602      	mov	r2, r0
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fc62:	4611      	mov	r1, r2
 800fc64:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800fc86:	2303      	movs	r3, #3
 800fc88:	e01b      	b.n	800fcc2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d015      	beq.n	800fcc0 <USBD_CDC_EP0_RxReady+0x50>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fc9a:	2bff      	cmp	r3, #255	; 0xff
 800fc9c:	d010      	beq.n	800fcc0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fca4:	689b      	ldr	r3, [r3, #8]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800fcac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fcb4:	b292      	uxth	r2, r2
 800fcb6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	22ff      	movs	r2, #255	; 0xff
 800fcbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
	...

0800fccc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2243      	movs	r2, #67	; 0x43
 800fcd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fcda:	4b03      	ldr	r3, [pc, #12]	; (800fce8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	20000094 	.word	0x20000094

0800fcec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2243      	movs	r2, #67	; 0x43
 800fcf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fcfa:	4b03      	ldr	r3, [pc, #12]	; (800fd08 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr
 800fd08:	20000050 	.word	0x20000050

0800fd0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2243      	movs	r2, #67	; 0x43
 800fd18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fd1a:	4b03      	ldr	r3, [pc, #12]	; (800fd28 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	200000d8 	.word	0x200000d8

0800fd2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	220a      	movs	r2, #10
 800fd38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fd3a:	4b03      	ldr	r3, [pc, #12]	; (800fd48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	2000000c 	.word	0x2000000c

0800fd4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d101      	bne.n	800fd60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd5c:	2303      	movs	r3, #3
 800fd5e:	e004      	b.n	800fd6a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	370c      	adds	r7, #12
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fd76:	b480      	push	{r7}
 800fd78:	b087      	sub	sp, #28
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	60f8      	str	r0, [r7, #12]
 800fd7e:	60b9      	str	r1, [r7, #8]
 800fd80:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd88:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fd90:	2303      	movs	r3, #3
 800fd92:	e008      	b.n	800fda6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	371c      	adds	r7, #28
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d101      	bne.n	800fdce <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800fdca:	2303      	movs	r3, #3
 800fdcc:	e004      	b.n	800fdd8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdf2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fe02:	2303      	movs	r3, #3
 800fe04:	e01a      	b.n	800fe3c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d114      	bne.n	800fe3a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	2201      	movs	r2, #1
 800fe14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fe2e:	2181      	movs	r1, #129	; 0x81
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f001 fe7a 	bl	8011b2a <USBD_LL_Transmit>

    ret = USBD_OK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d101      	bne.n	800fe62 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	e016      	b.n	800fe90 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7c1b      	ldrb	r3, [r3, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe74:	2101      	movs	r1, #1
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f001 fe78 	bl	8011b6c <USBD_LL_PrepareReceive>
 800fe7c:	e007      	b.n	800fe8e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe84:	2340      	movs	r3, #64	; 0x40
 800fe86:	2101      	movs	r1, #1
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f001 fe6f 	bl	8011b6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe8e:	2300      	movs	r3, #0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800feac:	2303      	movs	r3, #3
 800feae:	e01f      	b.n	800fef0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d003      	beq.n	800fed6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	79fa      	ldrb	r2, [r7, #7]
 800fee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f001 fceb 	bl	80118c0 <USBD_LL_Init>
 800feea:	4603      	mov	r3, r0
 800feec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800feee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3718      	adds	r7, #24
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff02:	2300      	movs	r3, #0
 800ff04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e016      	b.n	800ff3e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00b      	beq.n	800ff3c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	f107 020e 	add.w	r2, r7, #14
 800ff30:	4610      	mov	r0, r2
 800ff32:	4798      	blx	r3
 800ff34:	4602      	mov	r2, r0
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ff3c:	2300      	movs	r3, #0
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}

0800ff46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b082      	sub	sp, #8
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f001 fd02 	bl	8011958 <USBD_LL_Start>
 800ff54:	4603      	mov	r3, r0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b083      	sub	sp, #12
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ff80:	2303      	movs	r3, #3
 800ff82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d009      	beq.n	800ffa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	78fa      	ldrb	r2, [r7, #3]
 800ff98:	4611      	mov	r1, r2
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	4798      	blx	r3
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ffa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d007      	beq.n	800ffd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	78fa      	ldrb	r2, [r7, #3]
 800ffcc:	4611      	mov	r1, r2
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	4798      	blx	r3
  }

  return USBD_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ffec:	6839      	ldr	r1, [r7, #0]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 ffba 	bl	8010f68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2201      	movs	r2, #1
 800fff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010002:	461a      	mov	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010010:	f003 031f 	and.w	r3, r3, #31
 8010014:	2b02      	cmp	r3, #2
 8010016:	d01a      	beq.n	801004e <USBD_LL_SetupStage+0x72>
 8010018:	2b02      	cmp	r3, #2
 801001a:	d822      	bhi.n	8010062 <USBD_LL_SetupStage+0x86>
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <USBD_LL_SetupStage+0x4a>
 8010020:	2b01      	cmp	r3, #1
 8010022:	d00a      	beq.n	801003a <USBD_LL_SetupStage+0x5e>
 8010024:	e01d      	b.n	8010062 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801002c:	4619      	mov	r1, r3
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 fa62 	bl	80104f8 <USBD_StdDevReq>
 8010034:	4603      	mov	r3, r0
 8010036:	73fb      	strb	r3, [r7, #15]
      break;
 8010038:	e020      	b.n	801007c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010040:	4619      	mov	r1, r3
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fac6 	bl	80105d4 <USBD_StdItfReq>
 8010048:	4603      	mov	r3, r0
 801004a:	73fb      	strb	r3, [r7, #15]
      break;
 801004c:	e016      	b.n	801007c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 fb05 	bl	8010666 <USBD_StdEPReq>
 801005c:	4603      	mov	r3, r0
 801005e:	73fb      	strb	r3, [r7, #15]
      break;
 8010060:	e00c      	b.n	801007c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010068:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801006c:	b2db      	uxtb	r3, r3
 801006e:	4619      	mov	r1, r3
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f001 fcd1 	bl	8011a18 <USBD_LL_StallEP>
 8010076:	4603      	mov	r3, r0
 8010078:	73fb      	strb	r3, [r7, #15]
      break;
 801007a:	bf00      	nop
  }

  return ret;
 801007c:	7bfb      	ldrb	r3, [r7, #15]
}
 801007e:	4618      	mov	r0, r3
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b086      	sub	sp, #24
 801008a:	af00      	add	r7, sp, #0
 801008c:	60f8      	str	r0, [r7, #12]
 801008e:	460b      	mov	r3, r1
 8010090:	607a      	str	r2, [r7, #4]
 8010092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010094:	7afb      	ldrb	r3, [r7, #11]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d138      	bne.n	801010c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80100a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d14a      	bne.n	8010142 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	689a      	ldr	r2, [r3, #8]
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d913      	bls.n	80100e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	689a      	ldr	r2, [r3, #8]
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	1ad2      	subs	r2, r2, r3
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	4293      	cmp	r3, r2
 80100d0:	bf28      	it	cs
 80100d2:	4613      	movcs	r3, r2
 80100d4:	461a      	mov	r2, r3
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f001 f839 	bl	8011150 <USBD_CtlContinueRx>
 80100de:	e030      	b.n	8010142 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b03      	cmp	r3, #3
 80100ea:	d10b      	bne.n	8010104 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d005      	beq.n	8010104 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f001 f834 	bl	8011172 <USBD_CtlSendStatus>
 801010a:	e01a      	b.n	8010142 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b03      	cmp	r3, #3
 8010116:	d114      	bne.n	8010142 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801011e:	699b      	ldr	r3, [r3, #24]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00e      	beq.n	8010142 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	7afa      	ldrb	r2, [r7, #11]
 801012e:	4611      	mov	r1, r2
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	4798      	blx	r3
 8010134:	4603      	mov	r3, r0
 8010136:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010138:	7dfb      	ldrb	r3, [r7, #23]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	e000      	b.n	8010144 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3718      	adds	r7, #24
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	460b      	mov	r3, r1
 8010156:	607a      	str	r2, [r7, #4]
 8010158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801015a:	7afb      	ldrb	r3, [r7, #11]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d16b      	bne.n	8010238 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3314      	adds	r3, #20
 8010164:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801016c:	2b02      	cmp	r3, #2
 801016e:	d156      	bne.n	801021e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	689a      	ldr	r2, [r3, #8]
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	429a      	cmp	r2, r3
 801017a:	d914      	bls.n	80101a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	689a      	ldr	r2, [r3, #8]
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	1ad2      	subs	r2, r2, r3
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	461a      	mov	r2, r3
 8010190:	6879      	ldr	r1, [r7, #4]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 ffae 	bl	80110f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010198:	2300      	movs	r3, #0
 801019a:	2200      	movs	r2, #0
 801019c:	2100      	movs	r1, #0
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f001 fce4 	bl	8011b6c <USBD_LL_PrepareReceive>
 80101a4:	e03b      	b.n	801021e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	68da      	ldr	r2, [r3, #12]
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d11c      	bne.n	80101ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d316      	bcc.n	80101ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	685a      	ldr	r2, [r3, #4]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d20f      	bcs.n	80101ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80101cc:	2200      	movs	r2, #0
 80101ce:	2100      	movs	r1, #0
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f000 ff8f 	bl	80110f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2200      	movs	r2, #0
 80101da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80101de:	2300      	movs	r3, #0
 80101e0:	2200      	movs	r2, #0
 80101e2:	2100      	movs	r1, #0
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f001 fcc1 	bl	8011b6c <USBD_LL_PrepareReceive>
 80101ea:	e018      	b.n	801021e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d10b      	bne.n	8010210 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010210:	2180      	movs	r1, #128	; 0x80
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f001 fc00 	bl	8011a18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f000 ffbd 	bl	8011198 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010224:	2b01      	cmp	r3, #1
 8010226:	d122      	bne.n	801026e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff fe98 	bl	800ff5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010236:	e01a      	b.n	801026e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801023e:	b2db      	uxtb	r3, r3
 8010240:	2b03      	cmp	r3, #3
 8010242:	d114      	bne.n	801026e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801024a:	695b      	ldr	r3, [r3, #20]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00e      	beq.n	801026e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010256:	695b      	ldr	r3, [r3, #20]
 8010258:	7afa      	ldrb	r2, [r7, #11]
 801025a:	4611      	mov	r1, r2
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	4798      	blx	r3
 8010260:	4603      	mov	r3, r0
 8010262:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010264:	7dfb      	ldrb	r3, [r7, #23]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d001      	beq.n	801026e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	e000      	b.n	8010270 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3718      	adds	r7, #24
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d101      	bne.n	80102ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80102a8:	2303      	movs	r3, #3
 80102aa:	e02f      	b.n	801030c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00f      	beq.n	80102d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d009      	beq.n	80102d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	6852      	ldr	r2, [r2, #4]
 80102ce:	b2d2      	uxtb	r2, r2
 80102d0:	4611      	mov	r1, r2
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80102d6:	2340      	movs	r3, #64	; 0x40
 80102d8:	2200      	movs	r2, #0
 80102da:	2100      	movs	r1, #0
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f001 fb56 	bl	801198e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2201      	movs	r2, #1
 80102e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2240      	movs	r2, #64	; 0x40
 80102ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80102f2:	2340      	movs	r3, #64	; 0x40
 80102f4:	2200      	movs	r2, #0
 80102f6:	2180      	movs	r1, #128	; 0x80
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f001 fb48 	bl	801198e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2240      	movs	r2, #64	; 0x40
 8010308:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	78fa      	ldrb	r2, [r7, #3]
 8010324:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010326:	2300      	movs	r3, #0
}
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010342:	b2da      	uxtb	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2204      	movs	r2, #4
 801034e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	370c      	adds	r7, #12
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b04      	cmp	r3, #4
 8010372:	d106      	bne.n	8010382 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801037a:	b2da      	uxtb	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010382:	2300      	movs	r3, #0
}
 8010384:	4618      	mov	r0, r3
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d101      	bne.n	80103a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80103a2:	2303      	movs	r3, #3
 80103a4:	e012      	b.n	80103cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	2b03      	cmp	r3, #3
 80103b0:	d10b      	bne.n	80103ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103b8:	69db      	ldr	r3, [r3, #28]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d005      	beq.n	80103ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103c4:	69db      	ldr	r3, [r3, #28]
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	460b      	mov	r3, r1
 80103de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80103ea:	2303      	movs	r3, #3
 80103ec:	e014      	b.n	8010418 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	2b03      	cmp	r3, #3
 80103f8:	d10d      	bne.n	8010416 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010400:	6a1b      	ldr	r3, [r3, #32]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d007      	beq.n	8010416 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801040c:	6a1b      	ldr	r3, [r3, #32]
 801040e:	78fa      	ldrb	r2, [r7, #3]
 8010410:	4611      	mov	r1, r2
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	460b      	mov	r3, r1
 801042a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010436:	2303      	movs	r3, #3
 8010438:	e014      	b.n	8010464 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b03      	cmp	r3, #3
 8010444:	d10d      	bne.n	8010462 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044e:	2b00      	cmp	r3, #0
 8010450:	d007      	beq.n	8010462 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045a:	78fa      	ldrb	r2, [r7, #3]
 801045c:	4611      	mov	r1, r2
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b082      	sub	sp, #8
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2201      	movs	r2, #1
 801048e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010498:	2b00      	cmp	r3, #0
 801049a:	d009      	beq.n	80104b0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	687a      	ldr	r2, [r7, #4]
 80104a6:	6852      	ldr	r2, [r2, #4]
 80104a8:	b2d2      	uxtb	r2, r2
 80104aa:	4611      	mov	r1, r2
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	4798      	blx	r3
  }

  return USBD_OK;
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80104ba:	b480      	push	{r7}
 80104bc:	b087      	sub	sp, #28
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	3301      	adds	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80104d8:	8a3b      	ldrh	r3, [r7, #16]
 80104da:	021b      	lsls	r3, r3, #8
 80104dc:	b21a      	sxth	r2, r3
 80104de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	b21b      	sxth	r3, r3
 80104e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80104e8:	89fb      	ldrh	r3, [r7, #14]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	371c      	adds	r7, #28
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr
	...

080104f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801050e:	2b40      	cmp	r3, #64	; 0x40
 8010510:	d005      	beq.n	801051e <USBD_StdDevReq+0x26>
 8010512:	2b40      	cmp	r3, #64	; 0x40
 8010514:	d853      	bhi.n	80105be <USBD_StdDevReq+0xc6>
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00b      	beq.n	8010532 <USBD_StdDevReq+0x3a>
 801051a:	2b20      	cmp	r3, #32
 801051c:	d14f      	bne.n	80105be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	4798      	blx	r3
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
      break;
 8010530:	e04a      	b.n	80105c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	785b      	ldrb	r3, [r3, #1]
 8010536:	2b09      	cmp	r3, #9
 8010538:	d83b      	bhi.n	80105b2 <USBD_StdDevReq+0xba>
 801053a:	a201      	add	r2, pc, #4	; (adr r2, 8010540 <USBD_StdDevReq+0x48>)
 801053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010540:	08010595 	.word	0x08010595
 8010544:	080105a9 	.word	0x080105a9
 8010548:	080105b3 	.word	0x080105b3
 801054c:	0801059f 	.word	0x0801059f
 8010550:	080105b3 	.word	0x080105b3
 8010554:	08010573 	.word	0x08010573
 8010558:	08010569 	.word	0x08010569
 801055c:	080105b3 	.word	0x080105b3
 8010560:	0801058b 	.word	0x0801058b
 8010564:	0801057d 	.word	0x0801057d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010568:	6839      	ldr	r1, [r7, #0]
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f9de 	bl	801092c <USBD_GetDescriptor>
          break;
 8010570:	e024      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fb6d 	bl	8010c54 <USBD_SetAddress>
          break;
 801057a:	e01f      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fbac 	bl	8010cdc <USBD_SetConfig>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]
          break;
 8010588:	e018      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801058a:	6839      	ldr	r1, [r7, #0]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fc4b 	bl	8010e28 <USBD_GetConfig>
          break;
 8010592:	e013      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fc7c 	bl	8010e94 <USBD_GetStatus>
          break;
 801059c:	e00e      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801059e:	6839      	ldr	r1, [r7, #0]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fcab 	bl	8010efc <USBD_SetFeature>
          break;
 80105a6:	e009      	b.n	80105bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105a8:	6839      	ldr	r1, [r7, #0]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fcba 	bl	8010f24 <USBD_ClrFeature>
          break;
 80105b0:	e004      	b.n	80105bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fd11 	bl	8010fdc <USBD_CtlError>
          break;
 80105ba:	bf00      	nop
      }
      break;
 80105bc:	e004      	b.n	80105c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fd0b 	bl	8010fdc <USBD_CtlError>
      break;
 80105c6:	bf00      	nop
  }

  return ret;
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop

080105d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105de:	2300      	movs	r3, #0
 80105e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105ea:	2b40      	cmp	r3, #64	; 0x40
 80105ec:	d005      	beq.n	80105fa <USBD_StdItfReq+0x26>
 80105ee:	2b40      	cmp	r3, #64	; 0x40
 80105f0:	d82f      	bhi.n	8010652 <USBD_StdItfReq+0x7e>
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <USBD_StdItfReq+0x26>
 80105f6:	2b20      	cmp	r3, #32
 80105f8:	d12b      	bne.n	8010652 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010600:	b2db      	uxtb	r3, r3
 8010602:	3b01      	subs	r3, #1
 8010604:	2b02      	cmp	r3, #2
 8010606:	d81d      	bhi.n	8010644 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	889b      	ldrh	r3, [r3, #4]
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b01      	cmp	r3, #1
 8010610:	d813      	bhi.n	801063a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	4798      	blx	r3
 8010620:	4603      	mov	r3, r0
 8010622:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	88db      	ldrh	r3, [r3, #6]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d110      	bne.n	801064e <USBD_StdItfReq+0x7a>
 801062c:	7bfb      	ldrb	r3, [r7, #15]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d10d      	bne.n	801064e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 fd9d 	bl	8011172 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010638:	e009      	b.n	801064e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801063a:	6839      	ldr	r1, [r7, #0]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 fccd 	bl	8010fdc <USBD_CtlError>
          break;
 8010642:	e004      	b.n	801064e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fcc8 	bl	8010fdc <USBD_CtlError>
          break;
 801064c:	e000      	b.n	8010650 <USBD_StdItfReq+0x7c>
          break;
 801064e:	bf00      	nop
      }
      break;
 8010650:	e004      	b.n	801065c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 fcc1 	bl	8010fdc <USBD_CtlError>
      break;
 801065a:	bf00      	nop
  }

  return ret;
 801065c:	7bfb      	ldrb	r3, [r7, #15]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b084      	sub	sp, #16
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	889b      	ldrh	r3, [r3, #4]
 8010678:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010682:	2b40      	cmp	r3, #64	; 0x40
 8010684:	d007      	beq.n	8010696 <USBD_StdEPReq+0x30>
 8010686:	2b40      	cmp	r3, #64	; 0x40
 8010688:	f200 8145 	bhi.w	8010916 <USBD_StdEPReq+0x2b0>
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00c      	beq.n	80106aa <USBD_StdEPReq+0x44>
 8010690:	2b20      	cmp	r3, #32
 8010692:	f040 8140 	bne.w	8010916 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	4798      	blx	r3
 80106a4:	4603      	mov	r3, r0
 80106a6:	73fb      	strb	r3, [r7, #15]
      break;
 80106a8:	e13a      	b.n	8010920 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	785b      	ldrb	r3, [r3, #1]
 80106ae:	2b03      	cmp	r3, #3
 80106b0:	d007      	beq.n	80106c2 <USBD_StdEPReq+0x5c>
 80106b2:	2b03      	cmp	r3, #3
 80106b4:	f300 8129 	bgt.w	801090a <USBD_StdEPReq+0x2a4>
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d07f      	beq.n	80107bc <USBD_StdEPReq+0x156>
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d03c      	beq.n	801073a <USBD_StdEPReq+0xd4>
 80106c0:	e123      	b.n	801090a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	d002      	beq.n	80106d4 <USBD_StdEPReq+0x6e>
 80106ce:	2b03      	cmp	r3, #3
 80106d0:	d016      	beq.n	8010700 <USBD_StdEPReq+0x9a>
 80106d2:	e02c      	b.n	801072e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106d4:	7bbb      	ldrb	r3, [r7, #14]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00d      	beq.n	80106f6 <USBD_StdEPReq+0x90>
 80106da:	7bbb      	ldrb	r3, [r7, #14]
 80106dc:	2b80      	cmp	r3, #128	; 0x80
 80106de:	d00a      	beq.n	80106f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f001 f997 	bl	8011a18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106ea:	2180      	movs	r1, #128	; 0x80
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f001 f993 	bl	8011a18 <USBD_LL_StallEP>
 80106f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80106f4:	e020      	b.n	8010738 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 fc6f 	bl	8010fdc <USBD_CtlError>
              break;
 80106fe:	e01b      	b.n	8010738 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	885b      	ldrh	r3, [r3, #2]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10e      	bne.n	8010726 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010708:	7bbb      	ldrb	r3, [r7, #14]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00b      	beq.n	8010726 <USBD_StdEPReq+0xc0>
 801070e:	7bbb      	ldrb	r3, [r7, #14]
 8010710:	2b80      	cmp	r3, #128	; 0x80
 8010712:	d008      	beq.n	8010726 <USBD_StdEPReq+0xc0>
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	88db      	ldrh	r3, [r3, #6]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d104      	bne.n	8010726 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801071c:	7bbb      	ldrb	r3, [r7, #14]
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f001 f979 	bl	8011a18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 fd23 	bl	8011172 <USBD_CtlSendStatus>

              break;
 801072c:	e004      	b.n	8010738 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801072e:	6839      	ldr	r1, [r7, #0]
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 fc53 	bl	8010fdc <USBD_CtlError>
              break;
 8010736:	bf00      	nop
          }
          break;
 8010738:	e0ec      	b.n	8010914 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010740:	b2db      	uxtb	r3, r3
 8010742:	2b02      	cmp	r3, #2
 8010744:	d002      	beq.n	801074c <USBD_StdEPReq+0xe6>
 8010746:	2b03      	cmp	r3, #3
 8010748:	d016      	beq.n	8010778 <USBD_StdEPReq+0x112>
 801074a:	e030      	b.n	80107ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00d      	beq.n	801076e <USBD_StdEPReq+0x108>
 8010752:	7bbb      	ldrb	r3, [r7, #14]
 8010754:	2b80      	cmp	r3, #128	; 0x80
 8010756:	d00a      	beq.n	801076e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010758:	7bbb      	ldrb	r3, [r7, #14]
 801075a:	4619      	mov	r1, r3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f001 f95b 	bl	8011a18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010762:	2180      	movs	r1, #128	; 0x80
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f001 f957 	bl	8011a18 <USBD_LL_StallEP>
 801076a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801076c:	e025      	b.n	80107ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fc33 	bl	8010fdc <USBD_CtlError>
              break;
 8010776:	e020      	b.n	80107ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	885b      	ldrh	r3, [r3, #2]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d11b      	bne.n	80107b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010780:	7bbb      	ldrb	r3, [r7, #14]
 8010782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010786:	2b00      	cmp	r3, #0
 8010788:	d004      	beq.n	8010794 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801078a:	7bbb      	ldrb	r3, [r7, #14]
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f001 f961 	bl	8011a56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f000 fcec 	bl	8011172 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107a0:	689b      	ldr	r3, [r3, #8]
 80107a2:	6839      	ldr	r1, [r7, #0]
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	4798      	blx	r3
 80107a8:	4603      	mov	r3, r0
 80107aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80107ac:	e004      	b.n	80107b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 fc13 	bl	8010fdc <USBD_CtlError>
              break;
 80107b6:	e000      	b.n	80107ba <USBD_StdEPReq+0x154>
              break;
 80107b8:	bf00      	nop
          }
          break;
 80107ba:	e0ab      	b.n	8010914 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d002      	beq.n	80107ce <USBD_StdEPReq+0x168>
 80107c8:	2b03      	cmp	r3, #3
 80107ca:	d032      	beq.n	8010832 <USBD_StdEPReq+0x1cc>
 80107cc:	e097      	b.n	80108fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107ce:	7bbb      	ldrb	r3, [r7, #14]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d007      	beq.n	80107e4 <USBD_StdEPReq+0x17e>
 80107d4:	7bbb      	ldrb	r3, [r7, #14]
 80107d6:	2b80      	cmp	r3, #128	; 0x80
 80107d8:	d004      	beq.n	80107e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 fbfd 	bl	8010fdc <USBD_CtlError>
                break;
 80107e2:	e091      	b.n	8010908 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	da0b      	bge.n	8010804 <USBD_StdEPReq+0x19e>
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107f2:	4613      	mov	r3, r2
 80107f4:	009b      	lsls	r3, r3, #2
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	3310      	adds	r3, #16
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	4413      	add	r3, r2
 8010800:	3304      	adds	r3, #4
 8010802:	e00b      	b.n	801081c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010804:	7bbb      	ldrb	r3, [r7, #14]
 8010806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	4413      	add	r3, r2
 801081a:	3304      	adds	r3, #4
 801081c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	2200      	movs	r2, #0
 8010822:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2202      	movs	r2, #2
 8010828:	4619      	mov	r1, r3
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f000 fc47 	bl	80110be <USBD_CtlSendData>
              break;
 8010830:	e06a      	b.n	8010908 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010836:	2b00      	cmp	r3, #0
 8010838:	da11      	bge.n	801085e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801083a:	7bbb      	ldrb	r3, [r7, #14]
 801083c:	f003 020f 	and.w	r2, r3, #15
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	4613      	mov	r3, r2
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	4413      	add	r3, r2
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	440b      	add	r3, r1
 801084c:	3324      	adds	r3, #36	; 0x24
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d117      	bne.n	8010884 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010854:	6839      	ldr	r1, [r7, #0]
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fbc0 	bl	8010fdc <USBD_CtlError>
                  break;
 801085c:	e054      	b.n	8010908 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801085e:	7bbb      	ldrb	r3, [r7, #14]
 8010860:	f003 020f 	and.w	r2, r3, #15
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	4613      	mov	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	4413      	add	r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	440b      	add	r3, r1
 8010870:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d104      	bne.n	8010884 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fbad 	bl	8010fdc <USBD_CtlError>
                  break;
 8010882:	e041      	b.n	8010908 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010888:	2b00      	cmp	r3, #0
 801088a:	da0b      	bge.n	80108a4 <USBD_StdEPReq+0x23e>
 801088c:	7bbb      	ldrb	r3, [r7, #14]
 801088e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010892:	4613      	mov	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	4413      	add	r3, r2
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	3310      	adds	r3, #16
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	4413      	add	r3, r2
 80108a0:	3304      	adds	r3, #4
 80108a2:	e00b      	b.n	80108bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108a4:	7bbb      	ldrb	r3, [r7, #14]
 80108a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108aa:	4613      	mov	r3, r2
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	4413      	add	r3, r2
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	4413      	add	r3, r2
 80108ba:	3304      	adds	r3, #4
 80108bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108be:	7bbb      	ldrb	r3, [r7, #14]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d002      	beq.n	80108ca <USBD_StdEPReq+0x264>
 80108c4:	7bbb      	ldrb	r3, [r7, #14]
 80108c6:	2b80      	cmp	r3, #128	; 0x80
 80108c8:	d103      	bne.n	80108d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	2200      	movs	r2, #0
 80108ce:	601a      	str	r2, [r3, #0]
 80108d0:	e00e      	b.n	80108f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80108d2:	7bbb      	ldrb	r3, [r7, #14]
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f001 f8dc 	bl	8011a94 <USBD_LL_IsStallEP>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d003      	beq.n	80108ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2201      	movs	r2, #1
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	e002      	b.n	80108f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2202      	movs	r2, #2
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fbe1 	bl	80110be <USBD_CtlSendData>
              break;
 80108fc:	e004      	b.n	8010908 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 fb6b 	bl	8010fdc <USBD_CtlError>
              break;
 8010906:	bf00      	nop
          }
          break;
 8010908:	e004      	b.n	8010914 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801090a:	6839      	ldr	r1, [r7, #0]
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f000 fb65 	bl	8010fdc <USBD_CtlError>
          break;
 8010912:	bf00      	nop
      }
      break;
 8010914:	e004      	b.n	8010920 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fb5f 	bl	8010fdc <USBD_CtlError>
      break;
 801091e:	bf00      	nop
  }

  return ret;
 8010920:	7bfb      	ldrb	r3, [r7, #15]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010936:	2300      	movs	r3, #0
 8010938:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801093a:	2300      	movs	r3, #0
 801093c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801093e:	2300      	movs	r3, #0
 8010940:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	885b      	ldrh	r3, [r3, #2]
 8010946:	0a1b      	lsrs	r3, r3, #8
 8010948:	b29b      	uxth	r3, r3
 801094a:	3b01      	subs	r3, #1
 801094c:	2b0e      	cmp	r3, #14
 801094e:	f200 8152 	bhi.w	8010bf6 <USBD_GetDescriptor+0x2ca>
 8010952:	a201      	add	r2, pc, #4	; (adr r2, 8010958 <USBD_GetDescriptor+0x2c>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	080109c9 	.word	0x080109c9
 801095c:	080109e1 	.word	0x080109e1
 8010960:	08010a21 	.word	0x08010a21
 8010964:	08010bf7 	.word	0x08010bf7
 8010968:	08010bf7 	.word	0x08010bf7
 801096c:	08010b97 	.word	0x08010b97
 8010970:	08010bc3 	.word	0x08010bc3
 8010974:	08010bf7 	.word	0x08010bf7
 8010978:	08010bf7 	.word	0x08010bf7
 801097c:	08010bf7 	.word	0x08010bf7
 8010980:	08010bf7 	.word	0x08010bf7
 8010984:	08010bf7 	.word	0x08010bf7
 8010988:	08010bf7 	.word	0x08010bf7
 801098c:	08010bf7 	.word	0x08010bf7
 8010990:	08010995 	.word	0x08010995
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801099a:	69db      	ldr	r3, [r3, #28]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00b      	beq.n	80109b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109a6:	69db      	ldr	r3, [r3, #28]
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	7c12      	ldrb	r2, [r2, #16]
 80109ac:	f107 0108 	add.w	r1, r7, #8
 80109b0:	4610      	mov	r0, r2
 80109b2:	4798      	blx	r3
 80109b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109b6:	e126      	b.n	8010c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80109b8:	6839      	ldr	r1, [r7, #0]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 fb0e 	bl	8010fdc <USBD_CtlError>
        err++;
 80109c0:	7afb      	ldrb	r3, [r7, #11]
 80109c2:	3301      	adds	r3, #1
 80109c4:	72fb      	strb	r3, [r7, #11]
      break;
 80109c6:	e11e      	b.n	8010c06 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	7c12      	ldrb	r2, [r2, #16]
 80109d4:	f107 0108 	add.w	r1, r7, #8
 80109d8:	4610      	mov	r0, r2
 80109da:	4798      	blx	r3
 80109dc:	60f8      	str	r0, [r7, #12]
      break;
 80109de:	e112      	b.n	8010c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	7c1b      	ldrb	r3, [r3, #16]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10d      	bne.n	8010a04 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f0:	f107 0208 	add.w	r2, r7, #8
 80109f4:	4610      	mov	r0, r2
 80109f6:	4798      	blx	r3
 80109f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3301      	adds	r3, #1
 80109fe:	2202      	movs	r2, #2
 8010a00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010a02:	e100      	b.n	8010c06 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a0c:	f107 0208 	add.w	r2, r7, #8
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
 8010a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	2202      	movs	r2, #2
 8010a1c:	701a      	strb	r2, [r3, #0]
      break;
 8010a1e:	e0f2      	b.n	8010c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	885b      	ldrh	r3, [r3, #2]
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b05      	cmp	r3, #5
 8010a28:	f200 80ac 	bhi.w	8010b84 <USBD_GetDescriptor+0x258>
 8010a2c:	a201      	add	r2, pc, #4	; (adr r2, 8010a34 <USBD_GetDescriptor+0x108>)
 8010a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a32:	bf00      	nop
 8010a34:	08010a4d 	.word	0x08010a4d
 8010a38:	08010a81 	.word	0x08010a81
 8010a3c:	08010ab5 	.word	0x08010ab5
 8010a40:	08010ae9 	.word	0x08010ae9
 8010a44:	08010b1d 	.word	0x08010b1d
 8010a48:	08010b51 	.word	0x08010b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00b      	beq.n	8010a70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	7c12      	ldrb	r2, [r2, #16]
 8010a64:	f107 0108 	add.w	r1, r7, #8
 8010a68:	4610      	mov	r0, r2
 8010a6a:	4798      	blx	r3
 8010a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a6e:	e091      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010a70:	6839      	ldr	r1, [r7, #0]
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 fab2 	bl	8010fdc <USBD_CtlError>
            err++;
 8010a78:	7afb      	ldrb	r3, [r7, #11]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010a7e:	e089      	b.n	8010b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00b      	beq.n	8010aa4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	7c12      	ldrb	r2, [r2, #16]
 8010a98:	f107 0108 	add.w	r1, r7, #8
 8010a9c:	4610      	mov	r0, r2
 8010a9e:	4798      	blx	r3
 8010aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aa2:	e077      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010aa4:	6839      	ldr	r1, [r7, #0]
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 fa98 	bl	8010fdc <USBD_CtlError>
            err++;
 8010aac:	7afb      	ldrb	r3, [r7, #11]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ab2:	e06f      	b.n	8010b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00b      	beq.n	8010ad8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	7c12      	ldrb	r2, [r2, #16]
 8010acc:	f107 0108 	add.w	r1, r7, #8
 8010ad0:	4610      	mov	r0, r2
 8010ad2:	4798      	blx	r3
 8010ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ad6:	e05d      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ad8:	6839      	ldr	r1, [r7, #0]
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 fa7e 	bl	8010fdc <USBD_CtlError>
            err++;
 8010ae0:	7afb      	ldrb	r3, [r7, #11]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ae6:	e055      	b.n	8010b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010aee:	691b      	ldr	r3, [r3, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00b      	beq.n	8010b0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	7c12      	ldrb	r2, [r2, #16]
 8010b00:	f107 0108 	add.w	r1, r7, #8
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
 8010b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b0a:	e043      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa64 	bl	8010fdc <USBD_CtlError>
            err++;
 8010b14:	7afb      	ldrb	r3, [r7, #11]
 8010b16:	3301      	adds	r3, #1
 8010b18:	72fb      	strb	r3, [r7, #11]
          break;
 8010b1a:	e03b      	b.n	8010b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b22:	695b      	ldr	r3, [r3, #20]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00b      	beq.n	8010b40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b2e:	695b      	ldr	r3, [r3, #20]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	7c12      	ldrb	r2, [r2, #16]
 8010b34:	f107 0108 	add.w	r1, r7, #8
 8010b38:	4610      	mov	r0, r2
 8010b3a:	4798      	blx	r3
 8010b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b3e:	e029      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fa4a 	bl	8010fdc <USBD_CtlError>
            err++;
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b4e:	e021      	b.n	8010b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00b      	beq.n	8010b74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b62:	699b      	ldr	r3, [r3, #24]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	7c12      	ldrb	r2, [r2, #16]
 8010b68:	f107 0108 	add.w	r1, r7, #8
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4798      	blx	r3
 8010b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b72:	e00f      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b74:	6839      	ldr	r1, [r7, #0]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fa30 	bl	8010fdc <USBD_CtlError>
            err++;
 8010b7c:	7afb      	ldrb	r3, [r7, #11]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	72fb      	strb	r3, [r7, #11]
          break;
 8010b82:	e007      	b.n	8010b94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010b84:	6839      	ldr	r1, [r7, #0]
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fa28 	bl	8010fdc <USBD_CtlError>
          err++;
 8010b8c:	7afb      	ldrb	r3, [r7, #11]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010b92:	bf00      	nop
      }
      break;
 8010b94:	e037      	b.n	8010c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	7c1b      	ldrb	r3, [r3, #16]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d109      	bne.n	8010bb2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba6:	f107 0208 	add.w	r2, r7, #8
 8010baa:	4610      	mov	r0, r2
 8010bac:	4798      	blx	r3
 8010bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010bb0:	e029      	b.n	8010c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fa11 	bl	8010fdc <USBD_CtlError>
        err++;
 8010bba:	7afb      	ldrb	r3, [r7, #11]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8010bc0:	e021      	b.n	8010c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	7c1b      	ldrb	r3, [r3, #16]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d10d      	bne.n	8010be6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd2:	f107 0208 	add.w	r2, r7, #8
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	4798      	blx	r3
 8010bda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3301      	adds	r3, #1
 8010be0:	2207      	movs	r2, #7
 8010be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010be4:	e00f      	b.n	8010c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 f9f7 	bl	8010fdc <USBD_CtlError>
        err++;
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8010bf4:	e007      	b.n	8010c06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 f9ef 	bl	8010fdc <USBD_CtlError>
      err++;
 8010bfe:	7afb      	ldrb	r3, [r7, #11]
 8010c00:	3301      	adds	r3, #1
 8010c02:	72fb      	strb	r3, [r7, #11]
      break;
 8010c04:	bf00      	nop
  }

  if (err != 0U)
 8010c06:	7afb      	ldrb	r3, [r7, #11]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d11e      	bne.n	8010c4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	88db      	ldrh	r3, [r3, #6]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d016      	beq.n	8010c42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010c14:	893b      	ldrh	r3, [r7, #8]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00e      	beq.n	8010c38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	88da      	ldrh	r2, [r3, #6]
 8010c1e:	893b      	ldrh	r3, [r7, #8]
 8010c20:	4293      	cmp	r3, r2
 8010c22:	bf28      	it	cs
 8010c24:	4613      	movcs	r3, r2
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c2a:	893b      	ldrh	r3, [r7, #8]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	68f9      	ldr	r1, [r7, #12]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 fa44 	bl	80110be <USBD_CtlSendData>
 8010c36:	e009      	b.n	8010c4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010c38:	6839      	ldr	r1, [r7, #0]
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 f9ce 	bl	8010fdc <USBD_CtlError>
 8010c40:	e004      	b.n	8010c4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fa95 	bl	8011172 <USBD_CtlSendStatus>
 8010c48:	e000      	b.n	8010c4c <USBD_GetDescriptor+0x320>
    return;
 8010c4a:	bf00      	nop
  }
}
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop

08010c54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	889b      	ldrh	r3, [r3, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d131      	bne.n	8010cca <USBD_SetAddress+0x76>
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	88db      	ldrh	r3, [r3, #6]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d12d      	bne.n	8010cca <USBD_SetAddress+0x76>
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	885b      	ldrh	r3, [r3, #2]
 8010c72:	2b7f      	cmp	r3, #127	; 0x7f
 8010c74:	d829      	bhi.n	8010cca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	885b      	ldrh	r3, [r3, #2]
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d104      	bne.n	8010c98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 f9a3 	bl	8010fdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c96:	e01d      	b.n	8010cd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7bfa      	ldrb	r2, [r7, #15]
 8010c9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010ca0:	7bfb      	ldrb	r3, [r7, #15]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 ff21 	bl	8011aec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fa61 	bl	8011172 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d004      	beq.n	8010cc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2202      	movs	r2, #2
 8010cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cbe:	e009      	b.n	8010cd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cc8:	e004      	b.n	8010cd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f985 	bl	8010fdc <USBD_CtlError>
  }
}
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	885b      	ldrh	r3, [r3, #2]
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	4b4c      	ldr	r3, [pc, #304]	; (8010e24 <USBD_SetConfig+0x148>)
 8010cf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010cf4:	4b4b      	ldr	r3, [pc, #300]	; (8010e24 <USBD_SetConfig+0x148>)
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d905      	bls.n	8010d08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010cfc:	6839      	ldr	r1, [r7, #0]
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f96c 	bl	8010fdc <USBD_CtlError>
    return USBD_FAIL;
 8010d04:	2303      	movs	r3, #3
 8010d06:	e088      	b.n	8010e1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d002      	beq.n	8010d1a <USBD_SetConfig+0x3e>
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	d025      	beq.n	8010d64 <USBD_SetConfig+0x88>
 8010d18:	e071      	b.n	8010dfe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010d1a:	4b42      	ldr	r3, [pc, #264]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d01c      	beq.n	8010d5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010d22:	4b40      	ldr	r3, [pc, #256]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	461a      	mov	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010d2c:	4b3d      	ldr	r3, [pc, #244]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	4619      	mov	r1, r3
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7ff f91e 	bl	800ff74 <USBD_SetClassConfig>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010d3c:	7bfb      	ldrb	r3, [r7, #15]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f949 	bl	8010fdc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d4a:	e065      	b.n	8010e18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fa10 	bl	8011172 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2203      	movs	r2, #3
 8010d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010d5a:	e05d      	b.n	8010e18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 fa08 	bl	8011172 <USBD_CtlSendStatus>
      break;
 8010d62:	e059      	b.n	8010e18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010d64:	4b2f      	ldr	r3, [pc, #188]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d112      	bne.n	8010d92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010d74:	4b2b      	ldr	r3, [pc, #172]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010d7e:	4b29      	ldr	r3, [pc, #164]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff f911 	bl	800ffac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 f9f1 	bl	8011172 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010d90:	e042      	b.n	8010e18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010d92:	4b24      	ldr	r3, [pc, #144]	; (8010e24 <USBD_SetConfig+0x148>)
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	429a      	cmp	r2, r3
 8010d9e:	d02a      	beq.n	8010df6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	4619      	mov	r1, r3
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7ff f8ff 	bl	800ffac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010dae:	4b1d      	ldr	r3, [pc, #116]	; (8010e24 <USBD_SetConfig+0x148>)
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010db8:	4b1a      	ldr	r3, [pc, #104]	; (8010e24 <USBD_SetConfig+0x148>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7ff f8d8 	bl	800ff74 <USBD_SetClassConfig>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00f      	beq.n	8010dee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f000 f903 	bl	8010fdc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	4619      	mov	r1, r3
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7ff f8e4 	bl	800ffac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2202      	movs	r2, #2
 8010de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010dec:	e014      	b.n	8010e18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 f9bf 	bl	8011172 <USBD_CtlSendStatus>
      break;
 8010df4:	e010      	b.n	8010e18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 f9bb 	bl	8011172 <USBD_CtlSendStatus>
      break;
 8010dfc:	e00c      	b.n	8010e18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 f8eb 	bl	8010fdc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e06:	4b07      	ldr	r3, [pc, #28]	; (8010e24 <USBD_SetConfig+0x148>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff f8cd 	bl	800ffac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010e12:	2303      	movs	r3, #3
 8010e14:	73fb      	strb	r3, [r7, #15]
      break;
 8010e16:	bf00      	nop
  }

  return ret;
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	20000a14 	.word	0x20000a14

08010e28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	88db      	ldrh	r3, [r3, #6]
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d004      	beq.n	8010e44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f8cd 	bl	8010fdc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010e42:	e023      	b.n	8010e8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	dc02      	bgt.n	8010e56 <USBD_GetConfig+0x2e>
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dc03      	bgt.n	8010e5c <USBD_GetConfig+0x34>
 8010e54:	e015      	b.n	8010e82 <USBD_GetConfig+0x5a>
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d00b      	beq.n	8010e72 <USBD_GetConfig+0x4a>
 8010e5a:	e012      	b.n	8010e82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	3308      	adds	r3, #8
 8010e66:	2201      	movs	r2, #1
 8010e68:	4619      	mov	r1, r3
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f927 	bl	80110be <USBD_CtlSendData>
        break;
 8010e70:	e00c      	b.n	8010e8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	3304      	adds	r3, #4
 8010e76:	2201      	movs	r2, #1
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 f91f 	bl	80110be <USBD_CtlSendData>
        break;
 8010e80:	e004      	b.n	8010e8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010e82:	6839      	ldr	r1, [r7, #0]
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f8a9 	bl	8010fdc <USBD_CtlError>
        break;
 8010e8a:	bf00      	nop
}
 8010e8c:	bf00      	nop
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d81e      	bhi.n	8010eea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	88db      	ldrh	r3, [r3, #6]
 8010eb0:	2b02      	cmp	r3, #2
 8010eb2:	d004      	beq.n	8010ebe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010eb4:	6839      	ldr	r1, [r7, #0]
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f890 	bl	8010fdc <USBD_CtlError>
        break;
 8010ebc:	e01a      	b.n	8010ef4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d005      	beq.n	8010eda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	f043 0202 	orr.w	r2, r3, #2
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	330c      	adds	r3, #12
 8010ede:	2202      	movs	r2, #2
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 f8eb 	bl	80110be <USBD_CtlSendData>
      break;
 8010ee8:	e004      	b.n	8010ef4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010eea:	6839      	ldr	r1, [r7, #0]
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f875 	bl	8010fdc <USBD_CtlError>
      break;
 8010ef2:	bf00      	nop
  }
}
 8010ef4:	bf00      	nop
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	885b      	ldrh	r3, [r3, #2]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d106      	bne.n	8010f1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2201      	movs	r2, #1
 8010f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 f92b 	bl	8011172 <USBD_CtlSendStatus>
  }
}
 8010f1c:	bf00      	nop
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	3b01      	subs	r3, #1
 8010f38:	2b02      	cmp	r3, #2
 8010f3a:	d80b      	bhi.n	8010f54 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	885b      	ldrh	r3, [r3, #2]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d10c      	bne.n	8010f5e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 f910 	bl	8011172 <USBD_CtlSendStatus>
      }
      break;
 8010f52:	e004      	b.n	8010f5e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010f54:	6839      	ldr	r1, [r7, #0]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 f840 	bl	8010fdc <USBD_CtlError>
      break;
 8010f5c:	e000      	b.n	8010f60 <USBD_ClrFeature+0x3c>
      break;
 8010f5e:	bf00      	nop
  }
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	781a      	ldrb	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	3301      	adds	r3, #1
 8010f82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	781a      	ldrb	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010f92:	68f8      	ldr	r0, [r7, #12]
 8010f94:	f7ff fa91 	bl	80104ba <SWAPBYTE>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f7ff fa84 	bl	80104ba <SWAPBYTE>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010fc6:	68f8      	ldr	r0, [r7, #12]
 8010fc8:	f7ff fa77 	bl	80104ba <SWAPBYTE>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	461a      	mov	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	80da      	strh	r2, [r3, #6]
}
 8010fd4:	bf00      	nop
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fe6:	2180      	movs	r1, #128	; 0x80
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 fd15 	bl	8011a18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010fee:	2100      	movs	r1, #0
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fd11 	bl	8011a18 <USBD_LL_StallEP>
}
 8010ff6:	bf00      	nop
 8010ff8:	3708      	adds	r7, #8
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b086      	sub	sp, #24
 8011002:	af00      	add	r7, sp, #0
 8011004:	60f8      	str	r0, [r7, #12]
 8011006:	60b9      	str	r1, [r7, #8]
 8011008:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801100a:	2300      	movs	r3, #0
 801100c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d036      	beq.n	8011082 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011018:	6938      	ldr	r0, [r7, #16]
 801101a:	f000 f836 	bl	801108a <USBD_GetLen>
 801101e:	4603      	mov	r3, r0
 8011020:	3301      	adds	r3, #1
 8011022:	b29b      	uxth	r3, r3
 8011024:	005b      	lsls	r3, r3, #1
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801102c:	7dfb      	ldrb	r3, [r7, #23]
 801102e:	68ba      	ldr	r2, [r7, #8]
 8011030:	4413      	add	r3, r2
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	7812      	ldrb	r2, [r2, #0]
 8011036:	701a      	strb	r2, [r3, #0]
  idx++;
 8011038:	7dfb      	ldrb	r3, [r7, #23]
 801103a:	3301      	adds	r3, #1
 801103c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801103e:	7dfb      	ldrb	r3, [r7, #23]
 8011040:	68ba      	ldr	r2, [r7, #8]
 8011042:	4413      	add	r3, r2
 8011044:	2203      	movs	r2, #3
 8011046:	701a      	strb	r2, [r3, #0]
  idx++;
 8011048:	7dfb      	ldrb	r3, [r7, #23]
 801104a:	3301      	adds	r3, #1
 801104c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801104e:	e013      	b.n	8011078 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011050:	7dfb      	ldrb	r3, [r7, #23]
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	4413      	add	r3, r2
 8011056:	693a      	ldr	r2, [r7, #16]
 8011058:	7812      	ldrb	r2, [r2, #0]
 801105a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	3301      	adds	r3, #1
 8011060:	613b      	str	r3, [r7, #16]
    idx++;
 8011062:	7dfb      	ldrb	r3, [r7, #23]
 8011064:	3301      	adds	r3, #1
 8011066:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011068:	7dfb      	ldrb	r3, [r7, #23]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	4413      	add	r3, r2
 801106e:	2200      	movs	r2, #0
 8011070:	701a      	strb	r2, [r3, #0]
    idx++;
 8011072:	7dfb      	ldrb	r3, [r7, #23]
 8011074:	3301      	adds	r3, #1
 8011076:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d1e7      	bne.n	8011050 <USBD_GetString+0x52>
 8011080:	e000      	b.n	8011084 <USBD_GetString+0x86>
    return;
 8011082:	bf00      	nop
  }
}
 8011084:	3718      	adds	r7, #24
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801108a:	b480      	push	{r7}
 801108c:	b085      	sub	sp, #20
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011092:	2300      	movs	r3, #0
 8011094:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801109a:	e005      	b.n	80110a8 <USBD_GetLen+0x1e>
  {
    len++;
 801109c:	7bfb      	ldrb	r3, [r7, #15]
 801109e:	3301      	adds	r3, #1
 80110a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	3301      	adds	r3, #1
 80110a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1f5      	bne.n	801109c <USBD_GetLen+0x12>
  }

  return len;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	60f8      	str	r0, [r7, #12]
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2202      	movs	r2, #2
 80110ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	68ba      	ldr	r2, [r7, #8]
 80110e2:	2100      	movs	r1, #0
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f000 fd20 	bl	8011b2a <USBD_LL_Transmit>

  return USBD_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	2100      	movs	r1, #0
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 fd0f 	bl	8011b2a <USBD_LL_Transmit>

  return USBD_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	60f8      	str	r0, [r7, #12]
 801111e:	60b9      	str	r1, [r7, #8]
 8011120:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2203      	movs	r2, #3
 8011126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	2100      	movs	r1, #0
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f000 fd13 	bl	8011b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	2100      	movs	r1, #0
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f000 fd02 	bl	8011b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}

08011172 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011172:	b580      	push	{r7, lr}
 8011174:	b082      	sub	sp, #8
 8011176:	af00      	add	r7, sp, #0
 8011178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2204      	movs	r2, #4
 801117e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011182:	2300      	movs	r3, #0
 8011184:	2200      	movs	r2, #0
 8011186:	2100      	movs	r1, #0
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 fcce 	bl	8011b2a <USBD_LL_Transmit>

  return USBD_OK;
 801118e:	2300      	movs	r3, #0
}
 8011190:	4618      	mov	r0, r3
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2205      	movs	r2, #5
 80111a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111a8:	2300      	movs	r3, #0
 80111aa:	2200      	movs	r2, #0
 80111ac:	2100      	movs	r1, #0
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 fcdc 	bl	8011b6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3708      	adds	r7, #8
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}
	...

080111c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80111c4:	2200      	movs	r2, #0
 80111c6:	4912      	ldr	r1, [pc, #72]	; (8011210 <MX_USB_DEVICE_Init+0x50>)
 80111c8:	4812      	ldr	r0, [pc, #72]	; (8011214 <MX_USB_DEVICE_Init+0x54>)
 80111ca:	f7fe fe65 	bl	800fe98 <USBD_Init>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80111d4:	f7f5 fbfa 	bl	80069cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80111d8:	490f      	ldr	r1, [pc, #60]	; (8011218 <MX_USB_DEVICE_Init+0x58>)
 80111da:	480e      	ldr	r0, [pc, #56]	; (8011214 <MX_USB_DEVICE_Init+0x54>)
 80111dc:	f7fe fe8c 	bl	800fef8 <USBD_RegisterClass>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80111e6:	f7f5 fbf1 	bl	80069cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80111ea:	490c      	ldr	r1, [pc, #48]	; (801121c <MX_USB_DEVICE_Init+0x5c>)
 80111ec:	4809      	ldr	r0, [pc, #36]	; (8011214 <MX_USB_DEVICE_Init+0x54>)
 80111ee:	f7fe fdad 	bl	800fd4c <USBD_CDC_RegisterInterface>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d001      	beq.n	80111fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80111f8:	f7f5 fbe8 	bl	80069cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80111fc:	4805      	ldr	r0, [pc, #20]	; (8011214 <MX_USB_DEVICE_Init+0x54>)
 80111fe:	f7fe fea2 	bl	800ff46 <USBD_Start>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011208:	f7f5 fbe0 	bl	80069cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801120c:	bf00      	nop
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20000130 	.word	0x20000130
 8011214:	20000c48 	.word	0x20000c48
 8011218:	20000018 	.word	0x20000018
 801121c:	2000011c 	.word	0x2000011c

08011220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011224:	2200      	movs	r2, #0
 8011226:	4905      	ldr	r1, [pc, #20]	; (801123c <CDC_Init_FS+0x1c>)
 8011228:	4805      	ldr	r0, [pc, #20]	; (8011240 <CDC_Init_FS+0x20>)
 801122a:	f7fe fda4 	bl	800fd76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801122e:	4905      	ldr	r1, [pc, #20]	; (8011244 <CDC_Init_FS+0x24>)
 8011230:	4803      	ldr	r0, [pc, #12]	; (8011240 <CDC_Init_FS+0x20>)
 8011232:	f7fe fdbe 	bl	800fdb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011238:	4618      	mov	r0, r3
 801123a:	bd80      	pop	{r7, pc}
 801123c:	20001718 	.word	0x20001718
 8011240:	20000c48 	.word	0x20000c48
 8011244:	20000f18 	.word	0x20000f18

08011248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011248:	b480      	push	{r7}
 801124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801124c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801124e:	4618      	mov	r0, r3
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr

08011258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	4603      	mov	r3, r0
 8011260:	6039      	str	r1, [r7, #0]
 8011262:	71fb      	strb	r3, [r7, #7]
 8011264:	4613      	mov	r3, r2
 8011266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	2b23      	cmp	r3, #35	; 0x23
 801126c:	d84a      	bhi.n	8011304 <CDC_Control_FS+0xac>
 801126e:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <CDC_Control_FS+0x1c>)
 8011270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011274:	08011305 	.word	0x08011305
 8011278:	08011305 	.word	0x08011305
 801127c:	08011305 	.word	0x08011305
 8011280:	08011305 	.word	0x08011305
 8011284:	08011305 	.word	0x08011305
 8011288:	08011305 	.word	0x08011305
 801128c:	08011305 	.word	0x08011305
 8011290:	08011305 	.word	0x08011305
 8011294:	08011305 	.word	0x08011305
 8011298:	08011305 	.word	0x08011305
 801129c:	08011305 	.word	0x08011305
 80112a0:	08011305 	.word	0x08011305
 80112a4:	08011305 	.word	0x08011305
 80112a8:	08011305 	.word	0x08011305
 80112ac:	08011305 	.word	0x08011305
 80112b0:	08011305 	.word	0x08011305
 80112b4:	08011305 	.word	0x08011305
 80112b8:	08011305 	.word	0x08011305
 80112bc:	08011305 	.word	0x08011305
 80112c0:	08011305 	.word	0x08011305
 80112c4:	08011305 	.word	0x08011305
 80112c8:	08011305 	.word	0x08011305
 80112cc:	08011305 	.word	0x08011305
 80112d0:	08011305 	.word	0x08011305
 80112d4:	08011305 	.word	0x08011305
 80112d8:	08011305 	.word	0x08011305
 80112dc:	08011305 	.word	0x08011305
 80112e0:	08011305 	.word	0x08011305
 80112e4:	08011305 	.word	0x08011305
 80112e8:	08011305 	.word	0x08011305
 80112ec:	08011305 	.word	0x08011305
 80112f0:	08011305 	.word	0x08011305
 80112f4:	08011305 	.word	0x08011305
 80112f8:	08011305 	.word	0x08011305
 80112fc:	08011305 	.word	0x08011305
 8011300:	08011305 	.word	0x08011305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011304:	bf00      	nop
  }

  return (USBD_OK);
 8011306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011308:	4618      	mov	r0, r3
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr

08011314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801131e:	6879      	ldr	r1, [r7, #4]
 8011320:	4805      	ldr	r0, [pc, #20]	; (8011338 <CDC_Receive_FS+0x24>)
 8011322:	f7fe fd46 	bl	800fdb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011326:	4804      	ldr	r0, [pc, #16]	; (8011338 <CDC_Receive_FS+0x24>)
 8011328:	f7fe fd8c 	bl	800fe44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801132c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801132e:	4618      	mov	r0, r3
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20000c48 	.word	0x20000c48

0801133c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011348:	2300      	movs	r3, #0
 801134a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801134c:	4b0d      	ldr	r3, [pc, #52]	; (8011384 <CDC_Transmit_FS+0x48>)
 801134e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801135e:	2301      	movs	r3, #1
 8011360:	e00b      	b.n	801137a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011362:	887b      	ldrh	r3, [r7, #2]
 8011364:	461a      	mov	r2, r3
 8011366:	6879      	ldr	r1, [r7, #4]
 8011368:	4806      	ldr	r0, [pc, #24]	; (8011384 <CDC_Transmit_FS+0x48>)
 801136a:	f7fe fd04 	bl	800fd76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801136e:	4805      	ldr	r0, [pc, #20]	; (8011384 <CDC_Transmit_FS+0x48>)
 8011370:	f7fe fd38 	bl	800fde4 <USBD_CDC_TransmitPacket>
 8011374:	4603      	mov	r3, r0
 8011376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011378:	7bfb      	ldrb	r3, [r7, #15]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	20000c48 	.word	0x20000c48

08011388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011388:	b480      	push	{r7}
 801138a:	b087      	sub	sp, #28
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801139a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	371c      	adds	r7, #28
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
	...

080113ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	6039      	str	r1, [r7, #0]
 80113b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	2212      	movs	r2, #18
 80113bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80113be:	4b03      	ldr	r3, [pc, #12]	; (80113cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	20000150 	.word	0x20000150

080113d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	6039      	str	r1, [r7, #0]
 80113da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	2204      	movs	r2, #4
 80113e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113e2:	4b03      	ldr	r3, [pc, #12]	; (80113f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	370c      	adds	r7, #12
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr
 80113f0:	20000170 	.word	0x20000170

080113f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	4603      	mov	r3, r0
 80113fc:	6039      	str	r1, [r7, #0]
 80113fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011400:	79fb      	ldrb	r3, [r7, #7]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d105      	bne.n	8011412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	4907      	ldr	r1, [pc, #28]	; (8011428 <USBD_FS_ProductStrDescriptor+0x34>)
 801140a:	4808      	ldr	r0, [pc, #32]	; (801142c <USBD_FS_ProductStrDescriptor+0x38>)
 801140c:	f7ff fdf7 	bl	8010ffe <USBD_GetString>
 8011410:	e004      	b.n	801141c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	4904      	ldr	r1, [pc, #16]	; (8011428 <USBD_FS_ProductStrDescriptor+0x34>)
 8011416:	4805      	ldr	r0, [pc, #20]	; (801142c <USBD_FS_ProductStrDescriptor+0x38>)
 8011418:	f7ff fdf1 	bl	8010ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 801141c:	4b02      	ldr	r3, [pc, #8]	; (8011428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801141e:	4618      	mov	r0, r3
 8011420:	3708      	adds	r7, #8
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	20001f18 	.word	0x20001f18
 801142c:	0801e4e0 	.word	0x0801e4e0

08011430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	4603      	mov	r3, r0
 8011438:	6039      	str	r1, [r7, #0]
 801143a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801143c:	683a      	ldr	r2, [r7, #0]
 801143e:	4904      	ldr	r1, [pc, #16]	; (8011450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011440:	4804      	ldr	r0, [pc, #16]	; (8011454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011442:	f7ff fddc 	bl	8010ffe <USBD_GetString>
  return USBD_StrDesc;
 8011446:	4b02      	ldr	r3, [pc, #8]	; (8011450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	20001f18 	.word	0x20001f18
 8011454:	0801e4f4 	.word	0x0801e4f4

08011458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	4603      	mov	r3, r0
 8011460:	6039      	str	r1, [r7, #0]
 8011462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	221a      	movs	r2, #26
 8011468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801146a:	f000 f855 	bl	8011518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801146e:	4b02      	ldr	r3, [pc, #8]	; (8011478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	20000174 	.word	0x20000174

0801147c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	6039      	str	r1, [r7, #0]
 8011486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011488:	79fb      	ldrb	r3, [r7, #7]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d105      	bne.n	801149a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	4907      	ldr	r1, [pc, #28]	; (80114b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011492:	4808      	ldr	r0, [pc, #32]	; (80114b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011494:	f7ff fdb3 	bl	8010ffe <USBD_GetString>
 8011498:	e004      	b.n	80114a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	4904      	ldr	r1, [pc, #16]	; (80114b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801149e:	4805      	ldr	r0, [pc, #20]	; (80114b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80114a0:	f7ff fdad 	bl	8010ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 80114a4:	4b02      	ldr	r3, [pc, #8]	; (80114b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	20001f18 	.word	0x20001f18
 80114b4:	0801e504 	.word	0x0801e504

080114b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	4603      	mov	r3, r0
 80114c0:	6039      	str	r1, [r7, #0]
 80114c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80114c4:	79fb      	ldrb	r3, [r7, #7]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d105      	bne.n	80114d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	4907      	ldr	r1, [pc, #28]	; (80114ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114ce:	4808      	ldr	r0, [pc, #32]	; (80114f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114d0:	f7ff fd95 	bl	8010ffe <USBD_GetString>
 80114d4:	e004      	b.n	80114e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114d6:	683a      	ldr	r2, [r7, #0]
 80114d8:	4904      	ldr	r1, [pc, #16]	; (80114ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114da:	4805      	ldr	r0, [pc, #20]	; (80114f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114dc:	f7ff fd8f 	bl	8010ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	20001f18 	.word	0x20001f18
 80114f0:	0801e510 	.word	0x0801e510

080114f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	4603      	mov	r3, r0
 80114fc:	6039      	str	r1, [r7, #0]
 80114fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	220c      	movs	r2, #12
 8011504:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011506:	4b03      	ldr	r3, [pc, #12]	; (8011514 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011508:	4618      	mov	r0, r3
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	20000164 	.word	0x20000164

08011518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801151e:	4b0f      	ldr	r3, [pc, #60]	; (801155c <Get_SerialNum+0x44>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011524:	4b0e      	ldr	r3, [pc, #56]	; (8011560 <Get_SerialNum+0x48>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801152a:	4b0e      	ldr	r3, [pc, #56]	; (8011564 <Get_SerialNum+0x4c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4413      	add	r3, r2
 8011536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d009      	beq.n	8011552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801153e:	2208      	movs	r2, #8
 8011540:	4909      	ldr	r1, [pc, #36]	; (8011568 <Get_SerialNum+0x50>)
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f000 f814 	bl	8011570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011548:	2204      	movs	r2, #4
 801154a:	4908      	ldr	r1, [pc, #32]	; (801156c <Get_SerialNum+0x54>)
 801154c:	68b8      	ldr	r0, [r7, #8]
 801154e:	f000 f80f 	bl	8011570 <IntToUnicode>
  }
}
 8011552:	bf00      	nop
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	1fff7a10 	.word	0x1fff7a10
 8011560:	1fff7a14 	.word	0x1fff7a14
 8011564:	1fff7a18 	.word	0x1fff7a18
 8011568:	20000176 	.word	0x20000176
 801156c:	20000186 	.word	0x20000186

08011570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011570:	b480      	push	{r7}
 8011572:	b087      	sub	sp, #28
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	4613      	mov	r3, r2
 801157c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801157e:	2300      	movs	r3, #0
 8011580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011582:	2300      	movs	r3, #0
 8011584:	75fb      	strb	r3, [r7, #23]
 8011586:	e027      	b.n	80115d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	0f1b      	lsrs	r3, r3, #28
 801158c:	2b09      	cmp	r3, #9
 801158e:	d80b      	bhi.n	80115a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	0f1b      	lsrs	r3, r3, #28
 8011594:	b2da      	uxtb	r2, r3
 8011596:	7dfb      	ldrb	r3, [r7, #23]
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	4619      	mov	r1, r3
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	440b      	add	r3, r1
 80115a0:	3230      	adds	r2, #48	; 0x30
 80115a2:	b2d2      	uxtb	r2, r2
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	e00a      	b.n	80115be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	0f1b      	lsrs	r3, r3, #28
 80115ac:	b2da      	uxtb	r2, r3
 80115ae:	7dfb      	ldrb	r3, [r7, #23]
 80115b0:	005b      	lsls	r3, r3, #1
 80115b2:	4619      	mov	r1, r3
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	440b      	add	r3, r1
 80115b8:	3237      	adds	r2, #55	; 0x37
 80115ba:	b2d2      	uxtb	r2, r2
 80115bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	011b      	lsls	r3, r3, #4
 80115c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
 80115c6:	005b      	lsls	r3, r3, #1
 80115c8:	3301      	adds	r3, #1
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	4413      	add	r3, r2
 80115ce:	2200      	movs	r2, #0
 80115d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80115d2:	7dfb      	ldrb	r3, [r7, #23]
 80115d4:	3301      	adds	r3, #1
 80115d6:	75fb      	strb	r3, [r7, #23]
 80115d8:	7dfa      	ldrb	r2, [r7, #23]
 80115da:	79fb      	ldrb	r3, [r7, #7]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d3d3      	bcc.n	8011588 <IntToUnicode+0x18>
  }
}
 80115e0:	bf00      	nop
 80115e2:	bf00      	nop
 80115e4:	371c      	adds	r7, #28
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr
	...

080115f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b0a0      	sub	sp, #128	; 0x80
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	605a      	str	r2, [r3, #4]
 8011602:	609a      	str	r2, [r3, #8]
 8011604:	60da      	str	r2, [r3, #12]
 8011606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011608:	f107 0310 	add.w	r3, r7, #16
 801160c:	225c      	movs	r2, #92	; 0x5c
 801160e:	2100      	movs	r1, #0
 8011610:	4618      	mov	r0, r3
 8011612:	f001 f869 	bl	80126e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801161e:	d154      	bne.n	80116ca <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011624:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 5;
 8011626:	2305      	movs	r3, #5
 8011628:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 120;
 801162a:	2378      	movs	r3, #120	; 0x78
 801162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801162e:	2302      	movs	r3, #2
 8011630:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8011632:	2304      	movs	r3, #4
 8011634:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8011636:	2301      	movs	r3, #1
 8011638:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 801163a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801163e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011640:	f107 0310 	add.w	r3, r7, #16
 8011644:	4618      	mov	r0, r3
 8011646:	f7f9 fc8f 	bl	800af68 <HAL_RCCEx_PeriphCLKConfig>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d001      	beq.n	8011654 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8011650:	f7f5 f9bc 	bl	80069cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011654:	2300      	movs	r3, #0
 8011656:	60fb      	str	r3, [r7, #12]
 8011658:	4b1e      	ldr	r3, [pc, #120]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 801165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165c:	4a1d      	ldr	r2, [pc, #116]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 801165e:	f043 0301 	orr.w	r3, r3, #1
 8011662:	6313      	str	r3, [r2, #48]	; 0x30
 8011664:	4b1b      	ldr	r3, [pc, #108]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 8011666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011668:	f003 0301 	and.w	r3, r3, #1
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011670:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011674:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011676:	2302      	movs	r3, #2
 8011678:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801167a:	2300      	movs	r3, #0
 801167c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801167e:	2303      	movs	r3, #3
 8011680:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011682:	230a      	movs	r3, #10
 8011684:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011686:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801168a:	4619      	mov	r1, r3
 801168c:	4812      	ldr	r0, [pc, #72]	; (80116d8 <HAL_PCD_MspInit+0xe8>)
 801168e:	f7f7 fe25 	bl	80092dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011692:	4b10      	ldr	r3, [pc, #64]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 8011694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011696:	4a0f      	ldr	r2, [pc, #60]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 8011698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801169c:	6353      	str	r3, [r2, #52]	; 0x34
 801169e:	2300      	movs	r3, #0
 80116a0:	60bb      	str	r3, [r7, #8]
 80116a2:	4b0c      	ldr	r3, [pc, #48]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 80116a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116a6:	4a0b      	ldr	r2, [pc, #44]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 80116a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80116ac:	6453      	str	r3, [r2, #68]	; 0x44
 80116ae:	4b09      	ldr	r3, [pc, #36]	; (80116d4 <HAL_PCD_MspInit+0xe4>)
 80116b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116b6:	60bb      	str	r3, [r7, #8]
 80116b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80116ba:	2200      	movs	r2, #0
 80116bc:	2100      	movs	r1, #0
 80116be:	2043      	movs	r0, #67	; 0x43
 80116c0:	f7f6 fc9d 	bl	8007ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80116c4:	2043      	movs	r0, #67	; 0x43
 80116c6:	f7f6 fcb6 	bl	8008036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80116ca:	bf00      	nop
 80116cc:	3780      	adds	r7, #128	; 0x80
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	40023800 	.word	0x40023800
 80116d8:	40020000 	.word	0x40020000

080116dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80116f0:	4619      	mov	r1, r3
 80116f2:	4610      	mov	r0, r2
 80116f4:	f7fe fc72 	bl	800ffdc <USBD_LL_SetupStage>
}
 80116f8:	bf00      	nop
 80116fa:	3708      	adds	r7, #8
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	460b      	mov	r3, r1
 801170a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011712:	78fa      	ldrb	r2, [r7, #3]
 8011714:	6879      	ldr	r1, [r7, #4]
 8011716:	4613      	mov	r3, r2
 8011718:	00db      	lsls	r3, r3, #3
 801171a:	1a9b      	subs	r3, r3, r2
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	440b      	add	r3, r1
 8011720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	78fb      	ldrb	r3, [r7, #3]
 8011728:	4619      	mov	r1, r3
 801172a:	f7fe fcac 	bl	8010086 <USBD_LL_DataOutStage>
}
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	460b      	mov	r3, r1
 8011740:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011748:	78fa      	ldrb	r2, [r7, #3]
 801174a:	6879      	ldr	r1, [r7, #4]
 801174c:	4613      	mov	r3, r2
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	1a9b      	subs	r3, r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	440b      	add	r3, r1
 8011756:	3348      	adds	r3, #72	; 0x48
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	78fb      	ldrb	r3, [r7, #3]
 801175c:	4619      	mov	r1, r3
 801175e:	f7fe fcf5 	bl	801014c <USBD_LL_DataInStage>
}
 8011762:	bf00      	nop
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b082      	sub	sp, #8
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe fe09 	bl	8010390 <USBD_LL_SOF>
}
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b084      	sub	sp, #16
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801178e:	2301      	movs	r3, #1
 8011790:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801179a:	2300      	movs	r3, #0
 801179c:	73fb      	strb	r3, [r7, #15]
 801179e:	e008      	b.n	80117b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	2b02      	cmp	r3, #2
 80117a6:	d102      	bne.n	80117ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80117a8:	2301      	movs	r3, #1
 80117aa:	73fb      	strb	r3, [r7, #15]
 80117ac:	e001      	b.n	80117b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80117ae:	f7f5 f90d 	bl	80069cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117b8:	7bfa      	ldrb	r2, [r7, #15]
 80117ba:	4611      	mov	r1, r2
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fe fda9 	bl	8010314 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fe fd55 	bl	8010278 <USBD_LL_Reset>
}
 80117ce:	bf00      	nop
 80117d0:	3710      	adds	r7, #16
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
	...

080117d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fda4 	bl	8010334 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	6812      	ldr	r2, [r2, #0]
 80117fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117fe:	f043 0301 	orr.w	r3, r3, #1
 8011802:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a1b      	ldr	r3, [r3, #32]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d005      	beq.n	8011818 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801180c:	4b04      	ldr	r3, [pc, #16]	; (8011820 <HAL_PCD_SuspendCallback+0x48>)
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	4a03      	ldr	r2, [pc, #12]	; (8011820 <HAL_PCD_SuspendCallback+0x48>)
 8011812:	f043 0306 	orr.w	r3, r3, #6
 8011816:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	e000ed00 	.word	0xe000ed00

08011824 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011832:	4618      	mov	r0, r3
 8011834:	f7fe fd94 	bl	8010360 <USBD_LL_Resume>
}
 8011838:	bf00      	nop
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	460b      	mov	r3, r1
 801184a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011852:	78fa      	ldrb	r2, [r7, #3]
 8011854:	4611      	mov	r1, r2
 8011856:	4618      	mov	r0, r3
 8011858:	f7fe fde2 	bl	8010420 <USBD_LL_IsoOUTIncomplete>
}
 801185c:	bf00      	nop
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011876:	78fa      	ldrb	r2, [r7, #3]
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe fdaa 	bl	80103d4 <USBD_LL_IsoINIncomplete>
}
 8011880:	bf00      	nop
 8011882:	3708      	adds	r7, #8
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011896:	4618      	mov	r0, r3
 8011898:	f7fe fde8 	bl	801046c <USBD_LL_DevConnected>
}
 801189c:	bf00      	nop
 801189e:	3708      	adds	r7, #8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fe fde5 	bl	8010482 <USBD_LL_DevDisconnected>
}
 80118b8:	bf00      	nop
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d13c      	bne.n	801194a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80118d0:	4a20      	ldr	r2, [pc, #128]	; (8011954 <USBD_LL_Init+0x94>)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a1e      	ldr	r2, [pc, #120]	; (8011954 <USBD_LL_Init+0x94>)
 80118dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80118e0:	4b1c      	ldr	r3, [pc, #112]	; (8011954 <USBD_LL_Init+0x94>)
 80118e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80118e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80118e8:	4b1a      	ldr	r3, [pc, #104]	; (8011954 <USBD_LL_Init+0x94>)
 80118ea:	2206      	movs	r2, #6
 80118ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80118ee:	4b19      	ldr	r3, [pc, #100]	; (8011954 <USBD_LL_Init+0x94>)
 80118f0:	2202      	movs	r2, #2
 80118f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80118f4:	4b17      	ldr	r3, [pc, #92]	; (8011954 <USBD_LL_Init+0x94>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80118fa:	4b16      	ldr	r3, [pc, #88]	; (8011954 <USBD_LL_Init+0x94>)
 80118fc:	2202      	movs	r2, #2
 80118fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011900:	4b14      	ldr	r3, [pc, #80]	; (8011954 <USBD_LL_Init+0x94>)
 8011902:	2200      	movs	r2, #0
 8011904:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011906:	4b13      	ldr	r3, [pc, #76]	; (8011954 <USBD_LL_Init+0x94>)
 8011908:	2200      	movs	r2, #0
 801190a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801190c:	4b11      	ldr	r3, [pc, #68]	; (8011954 <USBD_LL_Init+0x94>)
 801190e:	2200      	movs	r2, #0
 8011910:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011912:	4b10      	ldr	r3, [pc, #64]	; (8011954 <USBD_LL_Init+0x94>)
 8011914:	2200      	movs	r2, #0
 8011916:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011918:	4b0e      	ldr	r3, [pc, #56]	; (8011954 <USBD_LL_Init+0x94>)
 801191a:	2200      	movs	r2, #0
 801191c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801191e:	480d      	ldr	r0, [pc, #52]	; (8011954 <USBD_LL_Init+0x94>)
 8011920:	f7f7 ffe8 	bl	80098f4 <HAL_PCD_Init>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801192a:	f7f5 f84f 	bl	80069cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801192e:	2180      	movs	r1, #128	; 0x80
 8011930:	4808      	ldr	r0, [pc, #32]	; (8011954 <USBD_LL_Init+0x94>)
 8011932:	f7f9 f97a 	bl	800ac2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011936:	2240      	movs	r2, #64	; 0x40
 8011938:	2100      	movs	r1, #0
 801193a:	4806      	ldr	r0, [pc, #24]	; (8011954 <USBD_LL_Init+0x94>)
 801193c:	f7f9 f92e 	bl	800ab9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011940:	2280      	movs	r2, #128	; 0x80
 8011942:	2101      	movs	r1, #1
 8011944:	4803      	ldr	r0, [pc, #12]	; (8011954 <USBD_LL_Init+0x94>)
 8011946:	f7f9 f929 	bl	800ab9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801194a:	2300      	movs	r3, #0
}
 801194c:	4618      	mov	r0, r3
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	20002118 	.word	0x20002118

08011958 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011960:	2300      	movs	r3, #0
 8011962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011964:	2300      	movs	r3, #0
 8011966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801196e:	4618      	mov	r0, r3
 8011970:	f7f8 f8e4 	bl	8009b3c <HAL_PCD_Start>
 8011974:	4603      	mov	r3, r0
 8011976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	4618      	mov	r0, r3
 801197c:	f000 f990 	bl	8011ca0 <USBD_Get_USB_Status>
 8011980:	4603      	mov	r3, r0
 8011982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011984:	7bbb      	ldrb	r3, [r7, #14]
}
 8011986:	4618      	mov	r0, r3
 8011988:	3710      	adds	r7, #16
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
 8011996:	4608      	mov	r0, r1
 8011998:	4611      	mov	r1, r2
 801199a:	461a      	mov	r2, r3
 801199c:	4603      	mov	r3, r0
 801199e:	70fb      	strb	r3, [r7, #3]
 80119a0:	460b      	mov	r3, r1
 80119a2:	70bb      	strb	r3, [r7, #2]
 80119a4:	4613      	mov	r3, r2
 80119a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80119b6:	78bb      	ldrb	r3, [r7, #2]
 80119b8:	883a      	ldrh	r2, [r7, #0]
 80119ba:	78f9      	ldrb	r1, [r7, #3]
 80119bc:	f7f8 fcf5 	bl	800a3aa <HAL_PCD_EP_Open>
 80119c0:	4603      	mov	r3, r0
 80119c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c4:	7bfb      	ldrb	r3, [r7, #15]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f000 f96a 	bl	8011ca0 <USBD_Get_USB_Status>
 80119cc:	4603      	mov	r3, r0
 80119ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}

080119da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
 80119e2:	460b      	mov	r3, r1
 80119e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119e6:	2300      	movs	r3, #0
 80119e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ea:	2300      	movs	r3, #0
 80119ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119f4:	78fa      	ldrb	r2, [r7, #3]
 80119f6:	4611      	mov	r1, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7f8 fd3e 	bl	800a47a <HAL_PCD_EP_Close>
 80119fe:	4603      	mov	r3, r0
 8011a00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 f94b 	bl	8011ca0 <USBD_Get_USB_Status>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a24:	2300      	movs	r3, #0
 8011a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a32:	78fa      	ldrb	r2, [r7, #3]
 8011a34:	4611      	mov	r1, r2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7f8 fe16 	bl	800a668 <HAL_PCD_EP_SetStall>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f000 f92c 	bl	8011ca0 <USBD_Get_USB_Status>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b084      	sub	sp, #16
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	460b      	mov	r3, r1
 8011a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a62:	2300      	movs	r3, #0
 8011a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a66:	2300      	movs	r3, #0
 8011a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a70:	78fa      	ldrb	r2, [r7, #3]
 8011a72:	4611      	mov	r1, r2
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7f8 fe5b 	bl	800a730 <HAL_PCD_EP_ClrStall>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a7e:	7bfb      	ldrb	r3, [r7, #15]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 f90d 	bl	8011ca0 <USBD_Get_USB_Status>
 8011a86:	4603      	mov	r3, r0
 8011a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3710      	adds	r7, #16
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011aa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da0b      	bge.n	8011ac8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ab0:	78fb      	ldrb	r3, [r7, #3]
 8011ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011ab6:	68f9      	ldr	r1, [r7, #12]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	00db      	lsls	r3, r3, #3
 8011abc:	1a9b      	subs	r3, r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	333e      	adds	r3, #62	; 0x3e
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	e00b      	b.n	8011ae0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011ac8:	78fb      	ldrb	r3, [r7, #3]
 8011aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011ace:	68f9      	ldr	r1, [r7, #12]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	1a9b      	subs	r3, r3, r2
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	440b      	add	r3, r1
 8011ada:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ade:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3714      	adds	r7, #20
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aea:	4770      	bx	lr

08011aec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	460b      	mov	r3, r1
 8011af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af8:	2300      	movs	r3, #0
 8011afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b06:	78fa      	ldrb	r2, [r7, #3]
 8011b08:	4611      	mov	r1, r2
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f8 fc28 	bl	800a360 <HAL_PCD_SetAddress>
 8011b10:	4603      	mov	r3, r0
 8011b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f000 f8c2 	bl	8011ca0 <USBD_Get_USB_Status>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b086      	sub	sp, #24
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	60f8      	str	r0, [r7, #12]
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	603b      	str	r3, [r7, #0]
 8011b36:	460b      	mov	r3, r1
 8011b38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b48:	7af9      	ldrb	r1, [r7, #11]
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	f7f8 fd41 	bl	800a5d4 <HAL_PCD_EP_Transmit>
 8011b52:	4603      	mov	r3, r0
 8011b54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b56:	7dfb      	ldrb	r3, [r7, #23]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 f8a1 	bl	8011ca0 <USBD_Get_USB_Status>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b62:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3718      	adds	r7, #24
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	607a      	str	r2, [r7, #4]
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b8a:	7af9      	ldrb	r1, [r7, #11]
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	f7f8 fcbd 	bl	800a50e <HAL_PCD_EP_Receive>
 8011b94:	4603      	mov	r3, r0
 8011b96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b98:	7dfb      	ldrb	r3, [r7, #23]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f000 f880 	bl	8011ca0 <USBD_Get_USB_Status>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3718      	adds	r7, #24
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b082      	sub	sp, #8
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bc0:	78fa      	ldrb	r2, [r7, #3]
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7f8 fced 	bl	800a5a4 <HAL_PCD_EP_GetRxCount>
 8011bca:	4603      	mov	r3, r0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011be0:	78fb      	ldrb	r3, [r7, #3]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d002      	beq.n	8011bec <HAL_PCDEx_LPM_Callback+0x18>
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d01f      	beq.n	8011c2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011bea:	e03b      	b.n	8011c64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6a1b      	ldr	r3, [r3, #32]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d007      	beq.n	8011c04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011bf4:	f7f4 fb80 	bl	80062f8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bf8:	4b1c      	ldr	r3, [pc, #112]	; (8011c6c <HAL_PCDEx_LPM_Callback+0x98>)
 8011bfa:	691b      	ldr	r3, [r3, #16]
 8011bfc:	4a1b      	ldr	r2, [pc, #108]	; (8011c6c <HAL_PCDEx_LPM_Callback+0x98>)
 8011bfe:	f023 0306 	bic.w	r3, r3, #6
 8011c02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	6812      	ldr	r2, [r2, #0]
 8011c12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c16:	f023 0301 	bic.w	r3, r3, #1
 8011c1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fe fb9c 	bl	8010360 <USBD_LL_Resume>
    break;
 8011c28:	e01c      	b.n	8011c64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	6812      	ldr	r2, [r2, #0]
 8011c38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c3c:	f043 0301 	orr.w	r3, r3, #1
 8011c40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fe fb73 	bl	8010334 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a1b      	ldr	r3, [r3, #32]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d005      	beq.n	8011c62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011c56:	4b05      	ldr	r3, [pc, #20]	; (8011c6c <HAL_PCDEx_LPM_Callback+0x98>)
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	4a04      	ldr	r2, [pc, #16]	; (8011c6c <HAL_PCDEx_LPM_Callback+0x98>)
 8011c5c:	f043 0306 	orr.w	r3, r3, #6
 8011c60:	6113      	str	r3, [r2, #16]
    break;
 8011c62:	bf00      	nop
}
 8011c64:	bf00      	nop
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	e000ed00 	.word	0xe000ed00

08011c70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011c78:	4b03      	ldr	r3, [pc, #12]	; (8011c88 <USBD_static_malloc+0x18>)
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	20000a18 	.word	0x20000a18

08011c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]

}
 8011c94:	bf00      	nop
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b085      	sub	sp, #20
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cae:	79fb      	ldrb	r3, [r7, #7]
 8011cb0:	2b03      	cmp	r3, #3
 8011cb2:	d817      	bhi.n	8011ce4 <USBD_Get_USB_Status+0x44>
 8011cb4:	a201      	add	r2, pc, #4	; (adr r2, 8011cbc <USBD_Get_USB_Status+0x1c>)
 8011cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cba:	bf00      	nop
 8011cbc:	08011ccd 	.word	0x08011ccd
 8011cc0:	08011cd3 	.word	0x08011cd3
 8011cc4:	08011cd9 	.word	0x08011cd9
 8011cc8:	08011cdf 	.word	0x08011cdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd0:	e00b      	b.n	8011cea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011cd2:	2303      	movs	r3, #3
 8011cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd6:	e008      	b.n	8011cea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	73fb      	strb	r3, [r7, #15]
    break;
 8011cdc:	e005      	b.n	8011cea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011cde:	2303      	movs	r3, #3
 8011ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ce2:	e002      	b.n	8011cea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ce8:	bf00      	nop
  }
  return usb_status;
 8011cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3714      	adds	r7, #20
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <_ZdlPv>:
 8011cf8:	f000 bcb8 	b.w	801266c <free>

08011cfc <_Znwj>:
 8011cfc:	2801      	cmp	r0, #1
 8011cfe:	bf38      	it	cc
 8011d00:	2001      	movcc	r0, #1
 8011d02:	b510      	push	{r4, lr}
 8011d04:	4604      	mov	r4, r0
 8011d06:	4620      	mov	r0, r4
 8011d08:	f000 fca8 	bl	801265c <malloc>
 8011d0c:	b930      	cbnz	r0, 8011d1c <_Znwj+0x20>
 8011d0e:	f000 fc6b 	bl	80125e8 <_ZSt15get_new_handlerv>
 8011d12:	b908      	cbnz	r0, 8011d18 <_Znwj+0x1c>
 8011d14:	f000 fc70 	bl	80125f8 <abort>
 8011d18:	4780      	blx	r0
 8011d1a:	e7f4      	b.n	8011d06 <_Znwj+0xa>
 8011d1c:	bd10      	pop	{r4, pc}

08011d1e <_ZNSaIcEC1Ev>:
 8011d1e:	4770      	bx	lr

08011d20 <_ZNSaIcED1Ev>:
 8011d20:	4770      	bx	lr

08011d22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8011d22:	68c3      	ldr	r3, [r0, #12]
 8011d24:	689a      	ldr	r2, [r3, #8]
 8011d26:	60c2      	str	r2, [r0, #12]
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	b102      	cbz	r2, 8011d2e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8011d2c:	6050      	str	r0, [r2, #4]
 8011d2e:	6842      	ldr	r2, [r0, #4]
 8011d30:	605a      	str	r2, [r3, #4]
 8011d32:	680c      	ldr	r4, [r1, #0]
 8011d34:	4284      	cmp	r4, r0
 8011d36:	d103      	bne.n	8011d40 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8011d38:	600b      	str	r3, [r1, #0]
 8011d3a:	6098      	str	r0, [r3, #8]
 8011d3c:	6043      	str	r3, [r0, #4]
 8011d3e:	bd10      	pop	{r4, pc}
 8011d40:	6891      	ldr	r1, [r2, #8]
 8011d42:	4281      	cmp	r1, r0
 8011d44:	bf0c      	ite	eq
 8011d46:	6093      	streq	r3, [r2, #8]
 8011d48:	60d3      	strne	r3, [r2, #12]
 8011d4a:	e7f6      	b.n	8011d3a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08011d4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8011d4c:	6883      	ldr	r3, [r0, #8]
 8011d4e:	68da      	ldr	r2, [r3, #12]
 8011d50:	6082      	str	r2, [r0, #8]
 8011d52:	b510      	push	{r4, lr}
 8011d54:	b102      	cbz	r2, 8011d58 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8011d56:	6050      	str	r0, [r2, #4]
 8011d58:	6842      	ldr	r2, [r0, #4]
 8011d5a:	605a      	str	r2, [r3, #4]
 8011d5c:	680c      	ldr	r4, [r1, #0]
 8011d5e:	4284      	cmp	r4, r0
 8011d60:	d103      	bne.n	8011d6a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8011d62:	600b      	str	r3, [r1, #0]
 8011d64:	60d8      	str	r0, [r3, #12]
 8011d66:	6043      	str	r3, [r0, #4]
 8011d68:	bd10      	pop	{r4, pc}
 8011d6a:	68d1      	ldr	r1, [r2, #12]
 8011d6c:	4281      	cmp	r1, r0
 8011d6e:	bf0c      	ite	eq
 8011d70:	60d3      	streq	r3, [r2, #12]
 8011d72:	6093      	strne	r3, [r2, #8]
 8011d74:	e7f6      	b.n	8011d64 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08011d76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8011d76:	7803      	ldrb	r3, [r0, #0]
 8011d78:	b933      	cbnz	r3, 8011d88 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8011d7a:	6843      	ldr	r3, [r0, #4]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4283      	cmp	r3, r0
 8011d80:	d102      	bne.n	8011d88 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	4618      	mov	r0, r3
 8011d86:	4770      	bx	lr
 8011d88:	6882      	ldr	r2, [r0, #8]
 8011d8a:	b122      	cbz	r2, 8011d96 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	68d2      	ldr	r2, [r2, #12]
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	d1fb      	bne.n	8011d8c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8011d94:	e7f6      	b.n	8011d84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8011d96:	6843      	ldr	r3, [r0, #4]
 8011d98:	689a      	ldr	r2, [r3, #8]
 8011d9a:	4282      	cmp	r2, r0
 8011d9c:	d1f2      	bne.n	8011d84 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8011d9e:	4618      	mov	r0, r3
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	e7f9      	b.n	8011d98 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08011da4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 8011da4:	68c3      	ldr	r3, [r0, #12]
 8011da6:	b123      	cbz	r3, 8011db2 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
 8011da8:	4618      	mov	r0, r3
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1fb      	bne.n	8011da8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
 8011db0:	4770      	bx	lr
 8011db2:	6843      	ldr	r3, [r0, #4]
 8011db4:	68da      	ldr	r2, [r3, #12]
 8011db6:	4282      	cmp	r2, r0
 8011db8:	d102      	bne.n	8011dc0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
 8011dba:	4618      	mov	r0, r3
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	e7f9      	b.n	8011db4 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
 8011dc0:	68c2      	ldr	r2, [r0, #12]
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	bf18      	it	ne
 8011dc6:	4618      	movne	r0, r3
 8011dc8:	4770      	bx	lr

08011dca <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8011dca:	f7ff bfd4 	b.w	8011d76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08011dce <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>:
 8011dce:	f7ff bfd2 	b.w	8011d76 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08011dd2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8011dd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dd6:	461e      	mov	r6, r3
 8011dd8:	f103 0804 	add.w	r8, r3, #4
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8011de2:	460c      	mov	r4, r1
 8011de4:	604a      	str	r2, [r1, #4]
 8011de6:	700b      	strb	r3, [r1, #0]
 8011de8:	b300      	cbz	r0, 8011e2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8011dea:	4296      	cmp	r6, r2
 8011dec:	6091      	str	r1, [r2, #8]
 8011dee:	d118      	bne.n	8011e22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8011df0:	6071      	str	r1, [r6, #4]
 8011df2:	60f4      	str	r4, [r6, #12]
 8011df4:	2701      	movs	r7, #1
 8011df6:	f04f 0900 	mov.w	r9, #0
 8011dfa:	6873      	ldr	r3, [r6, #4]
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	d03f      	beq.n	8011e80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8011e00:	6860      	ldr	r0, [r4, #4]
 8011e02:	7802      	ldrb	r2, [r0, #0]
 8011e04:	2a00      	cmp	r2, #0
 8011e06:	d13c      	bne.n	8011e82 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8011e08:	6845      	ldr	r5, [r0, #4]
 8011e0a:	68ab      	ldr	r3, [r5, #8]
 8011e0c:	4298      	cmp	r0, r3
 8011e0e:	d123      	bne.n	8011e58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8011e10:	68eb      	ldr	r3, [r5, #12]
 8011e12:	b183      	cbz	r3, 8011e36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8011e14:	781a      	ldrb	r2, [r3, #0]
 8011e16:	b972      	cbnz	r2, 8011e36 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8011e18:	7007      	strb	r7, [r0, #0]
 8011e1a:	701f      	strb	r7, [r3, #0]
 8011e1c:	702a      	strb	r2, [r5, #0]
 8011e1e:	462c      	mov	r4, r5
 8011e20:	e7eb      	b.n	8011dfa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8011e22:	68b3      	ldr	r3, [r6, #8]
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d1e5      	bne.n	8011df4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8011e28:	60b1      	str	r1, [r6, #8]
 8011e2a:	e7e3      	b.n	8011df4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8011e2c:	60d1      	str	r1, [r2, #12]
 8011e2e:	68f3      	ldr	r3, [r6, #12]
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d1df      	bne.n	8011df4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8011e34:	e7dd      	b.n	8011df2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8011e36:	68c3      	ldr	r3, [r0, #12]
 8011e38:	42a3      	cmp	r3, r4
 8011e3a:	d103      	bne.n	8011e44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8011e3c:	4641      	mov	r1, r8
 8011e3e:	f7ff ff70 	bl	8011d22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011e42:	4604      	mov	r4, r0
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	4641      	mov	r1, r8
 8011e48:	701f      	strb	r7, [r3, #0]
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f885 9000 	strb.w	r9, [r5]
 8011e50:	f7ff ff7c 	bl	8011d4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8011e54:	4625      	mov	r5, r4
 8011e56:	e7e2      	b.n	8011e1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8011e58:	b113      	cbz	r3, 8011e60 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8011e5a:	781a      	ldrb	r2, [r3, #0]
 8011e5c:	2a00      	cmp	r2, #0
 8011e5e:	d0db      	beq.n	8011e18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8011e60:	6883      	ldr	r3, [r0, #8]
 8011e62:	42a3      	cmp	r3, r4
 8011e64:	d103      	bne.n	8011e6e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8011e66:	4641      	mov	r1, r8
 8011e68:	f7ff ff70 	bl	8011d4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	6863      	ldr	r3, [r4, #4]
 8011e70:	4641      	mov	r1, r8
 8011e72:	701f      	strb	r7, [r3, #0]
 8011e74:	4628      	mov	r0, r5
 8011e76:	f885 9000 	strb.w	r9, [r5]
 8011e7a:	f7ff ff52 	bl	8011d22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8011e7e:	e7e9      	b.n	8011e54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8011e80:	4623      	mov	r3, r4
 8011e82:	2201      	movs	r2, #1
 8011e84:	701a      	strb	r2, [r3, #0]
 8011e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011e8a <_ZSt17__throw_bad_allocv>:
 8011e8a:	b508      	push	{r3, lr}
 8011e8c:	f000 fbb4 	bl	80125f8 <abort>

08011e90 <_ZSt19__throw_logic_errorPKc>:
 8011e90:	b508      	push	{r3, lr}
 8011e92:	f000 fbb1 	bl	80125f8 <abort>

08011e96 <_ZSt20__throw_length_errorPKc>:
 8011e96:	b508      	push	{r3, lr}
 8011e98:	f000 fbae 	bl	80125f8 <abort>

08011e9c <_ZSt24__throw_out_of_range_fmtPKcz>:
 8011e9c:	b40f      	push	{r0, r1, r2, r3}
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b084      	sub	sp, #16
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	f107 0418 	add.w	r4, r7, #24
 8011ea8:	f854 2b04 	ldr.w	r2, [r4], #4
 8011eac:	607a      	str	r2, [r7, #4]
 8011eae:	4610      	mov	r0, r2
 8011eb0:	f7ee f9fe 	bl	80002b0 <strlen>
 8011eb4:	f200 2307 	addw	r3, r0, #519	; 0x207
 8011eb8:	f023 0307 	bic.w	r3, r3, #7
 8011ebc:	ebad 0d03 	sub.w	sp, sp, r3
 8011ec0:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	60fc      	str	r4, [r7, #12]
 8011ec8:	4623      	mov	r3, r4
 8011eca:	4668      	mov	r0, sp
 8011ecc:	f000 f854 	bl	8011f78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8011ed0:	f000 fb92 	bl	80125f8 <abort>

08011ed4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b09c      	sub	sp, #112	; 0x70
 8011ed8:	4606      	mov	r6, r0
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	460c      	mov	r4, r1
 8011ede:	1ba4      	subs	r4, r4, r6
 8011ee0:	490e      	ldr	r1, [pc, #56]	; (8011f1c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011ee2:	2269      	movs	r2, #105	; 0x69
 8011ee4:	1d38      	adds	r0, r7, #4
 8011ee6:	f000 fbd7 	bl	8012698 <memcpy>
 8011eea:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8011eee:	f023 0307 	bic.w	r3, r3, #7
 8011ef2:	ebad 0d03 	sub.w	sp, sp, r3
 8011ef6:	466d      	mov	r5, sp
 8011ef8:	2268      	movs	r2, #104	; 0x68
 8011efa:	1d39      	adds	r1, r7, #4
 8011efc:	4628      	mov	r0, r5
 8011efe:	f000 fbcb 	bl	8012698 <memcpy>
 8011f02:	4622      	mov	r2, r4
 8011f04:	4631      	mov	r1, r6
 8011f06:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8011f0a:	442c      	add	r4, r5
 8011f0c:	f000 fbc4 	bl	8012698 <memcpy>
 8011f10:	2300      	movs	r3, #0
 8011f12:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8011f16:	4628      	mov	r0, r5
 8011f18:	f7ff ffba 	bl	8011e90 <_ZSt19__throw_logic_errorPKc>
 8011f1c:	0801e590 	.word	0x0801e590

08011f20 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	b084      	sub	sp, #16
 8011f28:	466d      	mov	r5, sp
 8011f2a:	f105 040c 	add.w	r4, r5, #12
 8011f2e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8011f74 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8011f32:	4623      	mov	r3, r4
 8011f34:	f04f 0c0a 	mov.w	ip, #10
 8011f38:	fbb2 f6fc 	udiv	r6, r2, ip
 8011f3c:	fb0c 2e16 	mls	lr, ip, r6, r2
 8011f40:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8011f44:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8011f48:	4696      	mov	lr, r2
 8011f4a:	f1be 0f09 	cmp.w	lr, #9
 8011f4e:	4632      	mov	r2, r6
 8011f50:	d8f2      	bhi.n	8011f38 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8011f52:	1ae4      	subs	r4, r4, r3
 8011f54:	428c      	cmp	r4, r1
 8011f56:	d809      	bhi.n	8011f6c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8011f58:	f1c4 010c 	rsb	r1, r4, #12
 8011f5c:	4622      	mov	r2, r4
 8011f5e:	4429      	add	r1, r5
 8011f60:	f000 fb9a 	bl	8012698 <memcpy>
 8011f64:	4620      	mov	r0, r4
 8011f66:	46bd      	mov	sp, r7
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8011f70:	e7f8      	b.n	8011f64 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8011f72:	bf00      	nop
 8011f74:	0801e5f9 	.word	0x0801e5f9

08011f78 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011f78:	3901      	subs	r1, #1
 8011f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7e:	4607      	mov	r7, r0
 8011f80:	4615      	mov	r5, r2
 8011f82:	eb00 0801 	add.w	r8, r0, r1
 8011f86:	4604      	mov	r4, r0
 8011f88:	782a      	ldrb	r2, [r5, #0]
 8011f8a:	b362      	cbz	r2, 8011fe6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8011f8c:	4544      	cmp	r4, r8
 8011f8e:	d22e      	bcs.n	8011fee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8011f90:	2a25      	cmp	r2, #37	; 0x25
 8011f92:	d107      	bne.n	8011fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8011f94:	786a      	ldrb	r2, [r5, #1]
 8011f96:	2a73      	cmp	r2, #115	; 0x73
 8011f98:	d009      	beq.n	8011fae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8011f9a:	2a7a      	cmp	r2, #122	; 0x7a
 8011f9c:	d012      	beq.n	8011fc4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011f9e:	2a25      	cmp	r2, #37	; 0x25
 8011fa0:	d100      	bne.n	8011fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8011fa2:	3501      	adds	r5, #1
 8011fa4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011fa8:	f804 2b01 	strb.w	r2, [r4], #1
 8011fac:	e7ec      	b.n	8011f88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8011fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fb2:	3a01      	subs	r2, #1
 8011fb4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8011fb8:	b1e9      	cbz	r1, 8011ff6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8011fba:	4544      	cmp	r4, r8
 8011fbc:	d017      	beq.n	8011fee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8011fbe:	f804 1b01 	strb.w	r1, [r4], #1
 8011fc2:	e7f7      	b.n	8011fb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011fc4:	78aa      	ldrb	r2, [r5, #2]
 8011fc6:	2a75      	cmp	r2, #117	; 0x75
 8011fc8:	d1ec      	bne.n	8011fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8011fca:	461e      	mov	r6, r3
 8011fcc:	eba8 0104 	sub.w	r1, r8, r4
 8011fd0:	f856 2b04 	ldr.w	r2, [r6], #4
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	f7ff ffa3 	bl	8011f20 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	dd07      	ble.n	8011fee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8011fde:	4404      	add	r4, r0
 8011fe0:	3503      	adds	r5, #3
 8011fe2:	4633      	mov	r3, r6
 8011fe4:	e7d0      	b.n	8011f88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8011fe6:	7022      	strb	r2, [r4, #0]
 8011fe8:	1be0      	subs	r0, r4, r7
 8011fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fee:	4621      	mov	r1, r4
 8011ff0:	4638      	mov	r0, r7
 8011ff2:	f7ff ff6f 	bl	8011ed4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8011ff6:	3502      	adds	r5, #2
 8011ff8:	e7c6      	b.n	8011f88 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

08011ffa <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8011ffa:	b10a      	cbz	r2, 8012000 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8011ffc:	f000 bb3e 	b.w	801267c <memcmp>
 8012000:	4610      	mov	r0, r2
 8012002:	4770      	bx	lr

08012004 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8012004:	b10a      	cbz	r2, 801200a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8012006:	f000 bb47 	b.w	8012698 <memcpy>
 801200a:	4770      	bx	lr

0801200c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801200c:	6001      	str	r1, [r0, #0]
 801200e:	4770      	bx	lr

08012010 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8012010:	6800      	ldr	r0, [r0, #0]
 8012012:	4770      	bx	lr

08012014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8012014:	3008      	adds	r0, #8
 8012016:	4770      	bx	lr

08012018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8012018:	6081      	str	r1, [r0, #8]
 801201a:	4770      	bx	lr

0801201c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801201c:	6803      	ldr	r3, [r0, #0]
 801201e:	6041      	str	r1, [r0, #4]
 8012020:	2200      	movs	r2, #0
 8012022:	545a      	strb	r2, [r3, r1]
 8012024:	4770      	bx	lr
	...

08012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012028:	b508      	push	{r3, lr}
 801202a:	680b      	ldr	r3, [r1, #0]
 801202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012030:	d302      	bcc.n	8012038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012032:	480d      	ldr	r0, [pc, #52]	; (8012068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012034:	f7ff ff2f 	bl	8011e96 <_ZSt20__throw_length_errorPKc>
 8012038:	4293      	cmp	r3, r2
 801203a:	d90b      	bls.n	8012054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801203c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012040:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012044:	d206      	bcs.n	8012054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012046:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801204a:	bf2a      	itet	cs
 801204c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8012050:	6008      	strcc	r0, [r1, #0]
 8012052:	600b      	strcs	r3, [r1, #0]
 8012054:	6808      	ldr	r0, [r1, #0]
 8012056:	3001      	adds	r0, #1
 8012058:	d501      	bpl.n	801205e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801205a:	f7ff ff16 	bl	8011e8a <_ZSt17__throw_bad_allocv>
 801205e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012062:	f7ff be4b 	b.w	8011cfc <_Znwj>
 8012066:	bf00      	nop
 8012068:	0801e604 	.word	0x0801e604

0801206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801206c:	f850 3b08 	ldr.w	r3, [r0], #8
 8012070:	4283      	cmp	r3, r0
 8012072:	d002      	beq.n	801207a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff be3f 	b.w	8011cf8 <_ZdlPv>
 801207a:	4770      	bx	lr

0801207c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 801207c:	b508      	push	{r3, lr}
 801207e:	4603      	mov	r3, r0
 8012080:	4608      	mov	r0, r1
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	4298      	cmp	r0, r3
 8012086:	4611      	mov	r1, r2
 8012088:	d903      	bls.n	8012092 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 801208a:	4602      	mov	r2, r0
 801208c:	4801      	ldr	r0, [pc, #4]	; (8012094 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 801208e:	f7ff ff05 	bl	8011e9c <_ZSt24__throw_out_of_range_fmtPKcz>
 8012092:	bd08      	pop	{r3, pc}
 8012094:	0801e61c 	.word	0x0801e61c

08012098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012098:	6840      	ldr	r0, [r0, #4]
 801209a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801209e:	3901      	subs	r1, #1
 80120a0:	1a09      	subs	r1, r1, r0
 80120a2:	4291      	cmp	r1, r2
 80120a4:	b508      	push	{r3, lr}
 80120a6:	d202      	bcs.n	80120ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7ff fef4 	bl	8011e96 <_ZSt20__throw_length_errorPKc>
 80120ae:	bd08      	pop	{r3, pc}

080120b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80120b0:	6803      	ldr	r3, [r0, #0]
 80120b2:	428b      	cmp	r3, r1
 80120b4:	d806      	bhi.n	80120c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80120b6:	6840      	ldr	r0, [r0, #4]
 80120b8:	4418      	add	r0, r3
 80120ba:	4281      	cmp	r1, r0
 80120bc:	bf94      	ite	ls
 80120be:	2000      	movls	r0, #0
 80120c0:	2001      	movhi	r0, #1
 80120c2:	4770      	bx	lr
 80120c4:	2001      	movs	r0, #1
 80120c6:	4770      	bx	lr

080120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80120c8:	2a01      	cmp	r2, #1
 80120ca:	b510      	push	{r4, lr}
 80120cc:	d102      	bne.n	80120d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80120ce:	780a      	ldrb	r2, [r1, #0]
 80120d0:	7002      	strb	r2, [r0, #0]
 80120d2:	bd10      	pop	{r4, pc}
 80120d4:	f7ff ff96 	bl	8012004 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80120d8:	e7fb      	b.n	80120d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80120da:	2a01      	cmp	r2, #1
 80120dc:	b430      	push	{r4, r5}
 80120de:	d103      	bne.n	80120e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80120e0:	780b      	ldrb	r3, [r1, #0]
 80120e2:	7003      	strb	r3, [r0, #0]
 80120e4:	bc30      	pop	{r4, r5}
 80120e6:	4770      	bx	lr
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d0fb      	beq.n	80120e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80120ec:	bc30      	pop	{r4, r5}
 80120ee:	f000 bae1 	b.w	80126b4 <memmove>

080120f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80120f2:	b508      	push	{r3, lr}
 80120f4:	1a52      	subs	r2, r2, r1
 80120f6:	f7ff ffe7 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80120fa:	bd08      	pop	{r3, pc}

080120fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80120fc:	b508      	push	{r3, lr}
 80120fe:	1a52      	subs	r2, r2, r1
 8012100:	f7ff ffe2 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012104:	bd08      	pop	{r3, pc}

08012106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8012106:	4288      	cmp	r0, r1
 8012108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801210a:	4604      	mov	r4, r0
 801210c:	460e      	mov	r6, r1
 801210e:	d01e      	beq.n	801214e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8012110:	4603      	mov	r3, r0
 8012112:	684d      	ldr	r5, [r1, #4]
 8012114:	f853 2b08 	ldr.w	r2, [r3], #8
 8012118:	429a      	cmp	r2, r3
 801211a:	bf14      	ite	ne
 801211c:	6882      	ldrne	r2, [r0, #8]
 801211e:	220f      	moveq	r2, #15
 8012120:	42aa      	cmp	r2, r5
 8012122:	d20a      	bcs.n	801213a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8012124:	a901      	add	r1, sp, #4
 8012126:	9501      	str	r5, [sp, #4]
 8012128:	f7ff ff7e 	bl	8012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801212c:	4607      	mov	r7, r0
 801212e:	4620      	mov	r0, r4
 8012130:	f7ff ff9c 	bl	801206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	6027      	str	r7, [r4, #0]
 8012138:	60a3      	str	r3, [r4, #8]
 801213a:	b125      	cbz	r5, 8012146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 801213c:	6831      	ldr	r1, [r6, #0]
 801213e:	6820      	ldr	r0, [r4, #0]
 8012140:	462a      	mov	r2, r5
 8012142:	f7ff ffc1 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012146:	6823      	ldr	r3, [r4, #0]
 8012148:	6065      	str	r5, [r4, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	555a      	strb	r2, [r3, r5]
 801214e:	b003      	add	sp, #12
 8012150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8012152:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012156:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012158:	461f      	mov	r7, r3
 801215a:	6843      	ldr	r3, [r0, #4]
 801215c:	eb01 0802 	add.w	r8, r1, r2
 8012160:	1ab2      	subs	r2, r6, r2
 8012162:	441a      	add	r2, r3
 8012164:	eba3 0908 	sub.w	r9, r3, r8
 8012168:	4603      	mov	r3, r0
 801216a:	9201      	str	r2, [sp, #4]
 801216c:	f853 2b08 	ldr.w	r2, [r3], #8
 8012170:	429a      	cmp	r2, r3
 8012172:	bf18      	it	ne
 8012174:	6882      	ldrne	r2, [r0, #8]
 8012176:	460d      	mov	r5, r1
 8012178:	bf08      	it	eq
 801217a:	220f      	moveq	r2, #15
 801217c:	a901      	add	r1, sp, #4
 801217e:	4604      	mov	r4, r0
 8012180:	f7ff ff52 	bl	8012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012184:	4682      	mov	sl, r0
 8012186:	b11d      	cbz	r5, 8012190 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8012188:	6821      	ldr	r1, [r4, #0]
 801218a:	462a      	mov	r2, r5
 801218c:	f7ff ff9c 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012190:	b137      	cbz	r7, 80121a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8012192:	b12e      	cbz	r6, 80121a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8012194:	4632      	mov	r2, r6
 8012196:	4639      	mov	r1, r7
 8012198:	eb0a 0005 	add.w	r0, sl, r5
 801219c:	f7ff ff94 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80121a0:	f1b9 0f00 	cmp.w	r9, #0
 80121a4:	d007      	beq.n	80121b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80121a6:	6821      	ldr	r1, [r4, #0]
 80121a8:	4435      	add	r5, r6
 80121aa:	464a      	mov	r2, r9
 80121ac:	4441      	add	r1, r8
 80121ae:	eb0a 0005 	add.w	r0, sl, r5
 80121b2:	f7ff ff89 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7ff ff58 	bl	801206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80121bc:	9b01      	ldr	r3, [sp, #4]
 80121be:	f8c4 a000 	str.w	sl, [r4]
 80121c2:	60a3      	str	r3, [r4, #8]
 80121c4:	b002      	add	sp, #8
 80121c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080121ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80121ca:	f100 0208 	add.w	r2, r0, #8
 80121ce:	6002      	str	r2, [r0, #0]
 80121d0:	2200      	movs	r2, #0
 80121d2:	6042      	str	r2, [r0, #4]
 80121d4:	7202      	strb	r2, [r0, #8]
 80121d6:	4770      	bx	lr

080121d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	4604      	mov	r4, r0
 80121dc:	460e      	mov	r6, r1
 80121de:	3008      	adds	r0, #8
 80121e0:	6020      	str	r0, [r4, #0]
 80121e2:	f856 3b08 	ldr.w	r3, [r6], #8
 80121e6:	429e      	cmp	r6, r3
 80121e8:	460d      	mov	r5, r1
 80121ea:	d10b      	bne.n	8012204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80121ec:	2210      	movs	r2, #16
 80121ee:	4631      	mov	r1, r6
 80121f0:	f7ff ff08 	bl	8012004 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80121f4:	686b      	ldr	r3, [r5, #4]
 80121f6:	6063      	str	r3, [r4, #4]
 80121f8:	2300      	movs	r3, #0
 80121fa:	602e      	str	r6, [r5, #0]
 80121fc:	606b      	str	r3, [r5, #4]
 80121fe:	722b      	strb	r3, [r5, #8]
 8012200:	4620      	mov	r0, r4
 8012202:	bd70      	pop	{r4, r5, r6, pc}
 8012204:	6023      	str	r3, [r4, #0]
 8012206:	688b      	ldr	r3, [r1, #8]
 8012208:	60a3      	str	r3, [r4, #8]
 801220a:	e7f3      	b.n	80121f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0801220c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801220c:	b510      	push	{r4, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	f7ff ff2c 	bl	801206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012214:	4620      	mov	r0, r4
 8012216:	bd10      	pop	{r4, pc}

08012218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8012218:	b510      	push	{r4, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	f7ff ff73 	bl	8012106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8012220:	4620      	mov	r0, r4
 8012222:	bd10      	pop	{r4, pc}

08012224 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8012224:	6840      	ldr	r0, [r0, #4]
 8012226:	4770      	bx	lr

08012228 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8012228:	6840      	ldr	r0, [r0, #4]
 801222a:	4770      	bx	lr

0801222c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801222c:	4603      	mov	r3, r0
 801222e:	f853 2b08 	ldr.w	r2, [r3], #8
 8012232:	429a      	cmp	r2, r3
 8012234:	bf14      	ite	ne
 8012236:	6880      	ldrne	r0, [r0, #8]
 8012238:	200f      	moveq	r0, #15
 801223a:	4770      	bx	lr

0801223c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801223c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801223e:	4605      	mov	r5, r0
 8012240:	6843      	ldr	r3, [r0, #4]
 8012242:	4299      	cmp	r1, r3
 8012244:	bf2c      	ite	cs
 8012246:	9101      	strcs	r1, [sp, #4]
 8012248:	9301      	strcc	r3, [sp, #4]
 801224a:	f855 1b08 	ldr.w	r1, [r5], #8
 801224e:	428d      	cmp	r5, r1
 8012250:	bf18      	it	ne
 8012252:	6882      	ldrne	r2, [r0, #8]
 8012254:	4604      	mov	r4, r0
 8012256:	9801      	ldr	r0, [sp, #4]
 8012258:	bf08      	it	eq
 801225a:	220f      	moveq	r2, #15
 801225c:	4290      	cmp	r0, r2
 801225e:	d012      	beq.n	8012286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8012260:	d801      	bhi.n	8012266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 8012262:	280f      	cmp	r0, #15
 8012264:	d911      	bls.n	801228a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 8012266:	a901      	add	r1, sp, #4
 8012268:	4620      	mov	r0, r4
 801226a:	f7ff fedd 	bl	8012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801226e:	6862      	ldr	r2, [r4, #4]
 8012270:	6821      	ldr	r1, [r4, #0]
 8012272:	3201      	adds	r2, #1
 8012274:	4605      	mov	r5, r0
 8012276:	f7ff ff27 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801227a:	4620      	mov	r0, r4
 801227c:	f7ff fef6 	bl	801206c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012280:	9b01      	ldr	r3, [sp, #4]
 8012282:	6025      	str	r5, [r4, #0]
 8012284:	60a3      	str	r3, [r4, #8]
 8012286:	b003      	add	sp, #12
 8012288:	bd30      	pop	{r4, r5, pc}
 801228a:	428d      	cmp	r5, r1
 801228c:	d0fb      	beq.n	8012286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 801228e:	1c5a      	adds	r2, r3, #1
 8012290:	4628      	mov	r0, r5
 8012292:	f7ff ff19 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012296:	6820      	ldr	r0, [r4, #0]
 8012298:	f7ff fd2e 	bl	8011cf8 <_ZdlPv>
 801229c:	6025      	str	r5, [r4, #0]
 801229e:	e7f2      	b.n	8012286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

080122a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80122a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80122a6:	4614      	mov	r4, r2
 80122a8:	4680      	mov	r8, r0
 80122aa:	462a      	mov	r2, r5
 80122ac:	4689      	mov	r9, r1
 80122ae:	461f      	mov	r7, r3
 80122b0:	4621      	mov	r1, r4
 80122b2:	4b39      	ldr	r3, [pc, #228]	; (8012398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80122b4:	f7ff fef0 	bl	8012098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80122b8:	4642      	mov	r2, r8
 80122ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122be:	f852 6b08 	ldr.w	r6, [r2], #8
 80122c2:	4296      	cmp	r6, r2
 80122c4:	bf18      	it	ne
 80122c6:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80122ca:	eba5 0b04 	sub.w	fp, r5, r4
 80122ce:	eb03 0a0b 	add.w	sl, r3, fp
 80122d2:	bf08      	it	eq
 80122d4:	220f      	moveq	r2, #15
 80122d6:	4552      	cmp	r2, sl
 80122d8:	d351      	bcc.n	801237e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80122da:	444e      	add	r6, r9
 80122dc:	4639      	mov	r1, r7
 80122de:	44a1      	add	r9, r4
 80122e0:	4640      	mov	r0, r8
 80122e2:	eba3 0909 	sub.w	r9, r3, r9
 80122e6:	f7ff fee3 	bl	80120b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80122ea:	b180      	cbz	r0, 801230e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80122ec:	f1b9 0f00 	cmp.w	r9, #0
 80122f0:	d006      	beq.n	8012300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80122f2:	42ac      	cmp	r4, r5
 80122f4:	d004      	beq.n	8012300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80122f6:	464a      	mov	r2, r9
 80122f8:	1931      	adds	r1, r6, r4
 80122fa:	1970      	adds	r0, r6, r5
 80122fc:	f7ff feed 	bl	80120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012300:	b315      	cbz	r5, 8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012302:	462a      	mov	r2, r5
 8012304:	4639      	mov	r1, r7
 8012306:	4630      	mov	r0, r6
 8012308:	f7ff fede 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801230c:	e01c      	b.n	8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801230e:	b135      	cbz	r5, 801231e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8012310:	42ac      	cmp	r4, r5
 8012312:	d33c      	bcc.n	801238e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8012314:	462a      	mov	r2, r5
 8012316:	4639      	mov	r1, r7
 8012318:	4630      	mov	r0, r6
 801231a:	f7ff fede 	bl	80120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801231e:	f1b9 0f00 	cmp.w	r9, #0
 8012322:	d011      	beq.n	8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012324:	42ac      	cmp	r4, r5
 8012326:	d00f      	beq.n	8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012328:	464a      	mov	r2, r9
 801232a:	1931      	adds	r1, r6, r4
 801232c:	1970      	adds	r0, r6, r5
 801232e:	f7ff fed4 	bl	80120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012332:	42ac      	cmp	r4, r5
 8012334:	d208      	bcs.n	8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012336:	4434      	add	r4, r6
 8012338:	197b      	adds	r3, r7, r5
 801233a:	429c      	cmp	r4, r3
 801233c:	d30f      	bcc.n	801235e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 801233e:	462a      	mov	r2, r5
 8012340:	4639      	mov	r1, r7
 8012342:	4630      	mov	r0, r6
 8012344:	f7ff fec9 	bl	80120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012348:	f8d8 3000 	ldr.w	r3, [r8]
 801234c:	f8c8 a004 	str.w	sl, [r8, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	4640      	mov	r0, r8
 8012354:	f803 200a 	strb.w	r2, [r3, sl]
 8012358:	b003      	add	sp, #12
 801235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235e:	42bc      	cmp	r4, r7
 8012360:	d803      	bhi.n	801236a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8012362:	462a      	mov	r2, r5
 8012364:	eb07 010b 	add.w	r1, r7, fp
 8012368:	e7cd      	b.n	8012306 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 801236a:	1be4      	subs	r4, r4, r7
 801236c:	4622      	mov	r2, r4
 801236e:	4639      	mov	r1, r7
 8012370:	4630      	mov	r0, r6
 8012372:	f7ff feb2 	bl	80120da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012376:	1b2a      	subs	r2, r5, r4
 8012378:	1971      	adds	r1, r6, r5
 801237a:	1930      	adds	r0, r6, r4
 801237c:	e7c4      	b.n	8012308 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801237e:	9500      	str	r5, [sp, #0]
 8012380:	463b      	mov	r3, r7
 8012382:	4622      	mov	r2, r4
 8012384:	4649      	mov	r1, r9
 8012386:	4640      	mov	r0, r8
 8012388:	f7ff fee3 	bl	8012152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801238c:	e7dc      	b.n	8012348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801238e:	f1b9 0f00 	cmp.w	r9, #0
 8012392:	d0d0      	beq.n	8012336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8012394:	e7c8      	b.n	8012328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8012396:	bf00      	nop
 8012398:	0801e669 	.word	0x0801e669

0801239c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 801239c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801239e:	4604      	mov	r4, r0
 80123a0:	4615      	mov	r5, r2
 80123a2:	4a09      	ldr	r2, [pc, #36]	; (80123c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80123a4:	9303      	str	r3, [sp, #12]
 80123a6:	460e      	mov	r6, r1
 80123a8:	f7ff fe68 	bl	801207c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80123ac:	6862      	ldr	r2, [r4, #4]
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	1b92      	subs	r2, r2, r6
 80123b2:	4601      	mov	r1, r0
 80123b4:	42aa      	cmp	r2, r5
 80123b6:	9808      	ldr	r0, [sp, #32]
 80123b8:	9000      	str	r0, [sp, #0]
 80123ba:	bf28      	it	cs
 80123bc:	462a      	movcs	r2, r5
 80123be:	4620      	mov	r0, r4
 80123c0:	f7ff ff6e 	bl	80122a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80123c4:	b004      	add	sp, #16
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	0801e653 	.word	0x0801e653

080123cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 80123cc:	b507      	push	{r0, r1, r2, lr}
 80123ce:	6853      	ldr	r3, [r2, #4]
 80123d0:	9300      	str	r3, [sp, #0]
 80123d2:	6813      	ldr	r3, [r2, #0]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f7ff ffe1 	bl	801239c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80123da:	b003      	add	sp, #12
 80123dc:	f85d fb04 	ldr.w	pc, [sp], #4

080123e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80123e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123e2:	4604      	mov	r4, r0
 80123e4:	4610      	mov	r0, r2
 80123e6:	9103      	str	r1, [sp, #12]
 80123e8:	9202      	str	r2, [sp, #8]
 80123ea:	f7ed ff61 	bl	80002b0 <strlen>
 80123ee:	9b02      	ldr	r3, [sp, #8]
 80123f0:	9000      	str	r0, [sp, #0]
 80123f2:	9903      	ldr	r1, [sp, #12]
 80123f4:	2200      	movs	r2, #0
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff ffd0 	bl	801239c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80123fc:	b004      	add	sp, #16
 80123fe:	bd10      	pop	{r4, pc}

08012400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8012400:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012402:	4604      	mov	r4, r0
 8012404:	4623      	mov	r3, r4
 8012406:	6840      	ldr	r0, [r0, #4]
 8012408:	f853 6b08 	ldr.w	r6, [r3], #8
 801240c:	429e      	cmp	r6, r3
 801240e:	bf18      	it	ne
 8012410:	68a3      	ldrne	r3, [r4, #8]
 8012412:	eb00 0502 	add.w	r5, r0, r2
 8012416:	bf08      	it	eq
 8012418:	230f      	moveq	r3, #15
 801241a:	429d      	cmp	r5, r3
 801241c:	d80a      	bhi.n	8012434 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 801241e:	b112      	cbz	r2, 8012426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8012420:	4430      	add	r0, r6
 8012422:	f7ff fe51 	bl	80120c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012426:	6823      	ldr	r3, [r4, #0]
 8012428:	6065      	str	r5, [r4, #4]
 801242a:	2200      	movs	r2, #0
 801242c:	4620      	mov	r0, r4
 801242e:	555a      	strb	r2, [r3, r5]
 8012430:	b002      	add	sp, #8
 8012432:	bd70      	pop	{r4, r5, r6, pc}
 8012434:	9200      	str	r2, [sp, #0]
 8012436:	460b      	mov	r3, r1
 8012438:	2200      	movs	r2, #0
 801243a:	4601      	mov	r1, r0
 801243c:	4620      	mov	r0, r4
 801243e:	f7ff fe88 	bl	8012152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8012442:	e7f0      	b.n	8012426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08012444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8012444:	b508      	push	{r3, lr}
 8012446:	e9d1 1200 	ldrd	r1, r2, [r1]
 801244a:	f7ff ffd9 	bl	8012400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801244e:	bd08      	pop	{r3, pc}

08012450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	4b06      	ldr	r3, [pc, #24]	; (801246c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8012454:	4604      	mov	r4, r0
 8012456:	460d      	mov	r5, r1
 8012458:	4616      	mov	r6, r2
 801245a:	2100      	movs	r1, #0
 801245c:	f7ff fe1c 	bl	8012098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012460:	4632      	mov	r2, r6
 8012462:	4629      	mov	r1, r5
 8012464:	4620      	mov	r0, r4
 8012466:	f7ff ffcb 	bl	8012400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	0801e682 	.word	0x0801e682

08012470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8012470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012472:	4604      	mov	r4, r0
 8012474:	4608      	mov	r0, r1
 8012476:	460d      	mov	r5, r1
 8012478:	f7ed ff1a 	bl	80002b0 <strlen>
 801247c:	4b06      	ldr	r3, [pc, #24]	; (8012498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801247e:	9001      	str	r0, [sp, #4]
 8012480:	4602      	mov	r2, r0
 8012482:	2100      	movs	r1, #0
 8012484:	4620      	mov	r0, r4
 8012486:	f7ff fe07 	bl	8012098 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	4629      	mov	r1, r5
 801248e:	4620      	mov	r0, r4
 8012490:	f7ff ffb6 	bl	8012400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8012494:	b003      	add	sp, #12
 8012496:	bd30      	pop	{r4, r5, pc}
 8012498:	0801e682 	.word	0x0801e682

0801249c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801249c:	6800      	ldr	r0, [r0, #0]
 801249e:	4770      	bx	lr

080124a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	6845      	ldr	r5, [r0, #4]
 80124a4:	684c      	ldr	r4, [r1, #4]
 80124a6:	6800      	ldr	r0, [r0, #0]
 80124a8:	6809      	ldr	r1, [r1, #0]
 80124aa:	42a5      	cmp	r5, r4
 80124ac:	462a      	mov	r2, r5
 80124ae:	bf28      	it	cs
 80124b0:	4622      	movcs	r2, r4
 80124b2:	f7ff fda2 	bl	8011ffa <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80124b6:	b900      	cbnz	r0, 80124ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 80124b8:	1b28      	subs	r0, r5, r4
 80124ba:	bd38      	pop	{r3, r4, r5, pc}

080124bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80124bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124be:	6846      	ldr	r6, [r0, #4]
 80124c0:	9101      	str	r1, [sp, #4]
 80124c2:	4605      	mov	r5, r0
 80124c4:	4608      	mov	r0, r1
 80124c6:	f7ed fef3 	bl	80002b0 <strlen>
 80124ca:	4286      	cmp	r6, r0
 80124cc:	4604      	mov	r4, r0
 80124ce:	4632      	mov	r2, r6
 80124d0:	9901      	ldr	r1, [sp, #4]
 80124d2:	bf28      	it	cs
 80124d4:	4602      	movcs	r2, r0
 80124d6:	6828      	ldr	r0, [r5, #0]
 80124d8:	f7ff fd8f 	bl	8011ffa <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80124dc:	b900      	cbnz	r0, 80124e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80124de:	1b30      	subs	r0, r6, r4
 80124e0:	b002      	add	sp, #8
 80124e2:	bd70      	pop	{r4, r5, r6, pc}

080124e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80124e4:	6001      	str	r1, [r0, #0]
 80124e6:	4770      	bx	lr

080124e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	f100 0308 	add.w	r3, r0, #8
 80124ee:	6003      	str	r3, [r0, #0]
 80124f0:	e9d1 5200 	ldrd	r5, r2, [r1]
 80124f4:	4604      	mov	r4, r0
 80124f6:	f04f 0300 	mov.w	r3, #0
 80124fa:	442a      	add	r2, r5
 80124fc:	4629      	mov	r1, r5
 80124fe:	f7ef fcbf 	bl	8001e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8012502:	4620      	mov	r0, r4
 8012504:	bd38      	pop	{r3, r4, r5, pc}
	...

08012508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8012508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801250a:	4604      	mov	r4, r0
 801250c:	4616      	mov	r6, r2
 801250e:	460d      	mov	r5, r1
 8012510:	b919      	cbnz	r1, 801251a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8012512:	b112      	cbz	r2, 801251a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8012514:	480d      	ldr	r0, [pc, #52]	; (801254c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8012516:	f7ff fcbb 	bl	8011e90 <_ZSt19__throw_logic_errorPKc>
 801251a:	1b73      	subs	r3, r6, r5
 801251c:	2b0f      	cmp	r3, #15
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	d907      	bls.n	8012532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8012522:	2200      	movs	r2, #0
 8012524:	a901      	add	r1, sp, #4
 8012526:	4620      	mov	r0, r4
 8012528:	f7ff fd7e 	bl	8012028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801252c:	9b01      	ldr	r3, [sp, #4]
 801252e:	6020      	str	r0, [r4, #0]
 8012530:	60a3      	str	r3, [r4, #8]
 8012532:	4632      	mov	r2, r6
 8012534:	4629      	mov	r1, r5
 8012536:	6820      	ldr	r0, [r4, #0]
 8012538:	f7ff fde0 	bl	80120fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801253c:	9b01      	ldr	r3, [sp, #4]
 801253e:	6822      	ldr	r2, [r4, #0]
 8012540:	6063      	str	r3, [r4, #4]
 8012542:	2100      	movs	r1, #0
 8012544:	54d1      	strb	r1, [r2, r3]
 8012546:	b002      	add	sp, #8
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	bf00      	nop
 801254c:	0801e697 	.word	0x0801e697

08012550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	f100 0308 	add.w	r3, r0, #8
 8012556:	4604      	mov	r4, r0
 8012558:	6003      	str	r3, [r0, #0]
 801255a:	460d      	mov	r5, r1
 801255c:	b159      	cbz	r1, 8012576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801255e:	4608      	mov	r0, r1
 8012560:	f7ed fea6 	bl	80002b0 <strlen>
 8012564:	182a      	adds	r2, r5, r0
 8012566:	4620      	mov	r0, r4
 8012568:	f04f 0300 	mov.w	r3, #0
 801256c:	4629      	mov	r1, r5
 801256e:	f7ff ffcb 	bl	8012508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8012572:	4620      	mov	r0, r4
 8012574:	bd38      	pop	{r3, r4, r5, pc}
 8012576:	f04f 32ff 	mov.w	r2, #4294967295
 801257a:	e7f4      	b.n	8012566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801257c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 801257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012580:	460d      	mov	r5, r1
 8012582:	4617      	mov	r7, r2
 8012584:	4698      	mov	r8, r3
 8012586:	f100 0308 	add.w	r3, r0, #8
 801258a:	4604      	mov	r4, r0
 801258c:	6003      	str	r3, [r0, #0]
 801258e:	4639      	mov	r1, r7
 8012590:	4a0a      	ldr	r2, [pc, #40]	; (80125bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8012592:	4628      	mov	r0, r5
 8012594:	f7ff fd72 	bl	801207c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8012598:	682e      	ldr	r6, [r5, #0]
 801259a:	686a      	ldr	r2, [r5, #4]
 801259c:	1831      	adds	r1, r6, r0
 801259e:	1bd2      	subs	r2, r2, r7
 80125a0:	4620      	mov	r0, r4
 80125a2:	f04f 0300 	mov.w	r3, #0
 80125a6:	4542      	cmp	r2, r8
 80125a8:	bf94      	ite	ls
 80125aa:	188a      	addls	r2, r1, r2
 80125ac:	eb01 0208 	addhi.w	r2, r1, r8
 80125b0:	f7ff ffaa 	bl	8012508 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80125b4:	4620      	mov	r0, r4
 80125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ba:	bf00      	nop
 80125bc:	0801e6c1 	.word	0x0801e6c1

080125c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80125c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125c2:	460d      	mov	r5, r1
 80125c4:	4604      	mov	r4, r0
 80125c6:	4611      	mov	r1, r2
 80125c8:	4628      	mov	r0, r5
 80125ca:	4a06      	ldr	r2, [pc, #24]	; (80125e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80125cc:	9301      	str	r3, [sp, #4]
 80125ce:	f7ff fd55 	bl	801207c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80125d2:	9b01      	ldr	r3, [sp, #4]
 80125d4:	4602      	mov	r2, r0
 80125d6:	4629      	mov	r1, r5
 80125d8:	4620      	mov	r0, r4
 80125da:	f7ff ffcf 	bl	801257c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80125de:	4620      	mov	r0, r4
 80125e0:	b003      	add	sp, #12
 80125e2:	bd30      	pop	{r4, r5, pc}
 80125e4:	0801e6dc 	.word	0x0801e6dc

080125e8 <_ZSt15get_new_handlerv>:
 80125e8:	4b02      	ldr	r3, [pc, #8]	; (80125f4 <_ZSt15get_new_handlerv+0xc>)
 80125ea:	6818      	ldr	r0, [r3, #0]
 80125ec:	f3bf 8f5b 	dmb	ish
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	20000c38 	.word	0x20000c38

080125f8 <abort>:
 80125f8:	b508      	push	{r3, lr}
 80125fa:	2006      	movs	r0, #6
 80125fc:	f000 fe56 	bl	80132ac <raise>
 8012600:	2001      	movs	r0, #1
 8012602:	f7f4 fead 	bl	8007360 <_exit>
	...

08012608 <__errno>:
 8012608:	4b01      	ldr	r3, [pc, #4]	; (8012610 <__errno+0x8>)
 801260a:	6818      	ldr	r0, [r3, #0]
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	20000190 	.word	0x20000190

08012614 <__libc_init_array>:
 8012614:	b570      	push	{r4, r5, r6, lr}
 8012616:	4d0d      	ldr	r5, [pc, #52]	; (801264c <__libc_init_array+0x38>)
 8012618:	4c0d      	ldr	r4, [pc, #52]	; (8012650 <__libc_init_array+0x3c>)
 801261a:	1b64      	subs	r4, r4, r5
 801261c:	10a4      	asrs	r4, r4, #2
 801261e:	2600      	movs	r6, #0
 8012620:	42a6      	cmp	r6, r4
 8012622:	d109      	bne.n	8012638 <__libc_init_array+0x24>
 8012624:	4d0b      	ldr	r5, [pc, #44]	; (8012654 <__libc_init_array+0x40>)
 8012626:	4c0c      	ldr	r4, [pc, #48]	; (8012658 <__libc_init_array+0x44>)
 8012628:	f002 ff6a 	bl	8015500 <_init>
 801262c:	1b64      	subs	r4, r4, r5
 801262e:	10a4      	asrs	r4, r4, #2
 8012630:	2600      	movs	r6, #0
 8012632:	42a6      	cmp	r6, r4
 8012634:	d105      	bne.n	8012642 <__libc_init_array+0x2e>
 8012636:	bd70      	pop	{r4, r5, r6, pc}
 8012638:	f855 3b04 	ldr.w	r3, [r5], #4
 801263c:	4798      	blx	r3
 801263e:	3601      	adds	r6, #1
 8012640:	e7ee      	b.n	8012620 <__libc_init_array+0xc>
 8012642:	f855 3b04 	ldr.w	r3, [r5], #4
 8012646:	4798      	blx	r3
 8012648:	3601      	adds	r6, #1
 801264a:	e7f2      	b.n	8012632 <__libc_init_array+0x1e>
 801264c:	0801eadc 	.word	0x0801eadc
 8012650:	0801eadc 	.word	0x0801eadc
 8012654:	0801eadc 	.word	0x0801eadc
 8012658:	0801eb00 	.word	0x0801eb00

0801265c <malloc>:
 801265c:	4b02      	ldr	r3, [pc, #8]	; (8012668 <malloc+0xc>)
 801265e:	4601      	mov	r1, r0
 8012660:	6818      	ldr	r0, [r3, #0]
 8012662:	f000 b899 	b.w	8012798 <_malloc_r>
 8012666:	bf00      	nop
 8012668:	20000190 	.word	0x20000190

0801266c <free>:
 801266c:	4b02      	ldr	r3, [pc, #8]	; (8012678 <free+0xc>)
 801266e:	4601      	mov	r1, r0
 8012670:	6818      	ldr	r0, [r3, #0]
 8012672:	f000 b841 	b.w	80126f8 <_free_r>
 8012676:	bf00      	nop
 8012678:	20000190 	.word	0x20000190

0801267c <memcmp>:
 801267c:	b530      	push	{r4, r5, lr}
 801267e:	3901      	subs	r1, #1
 8012680:	2400      	movs	r4, #0
 8012682:	42a2      	cmp	r2, r4
 8012684:	d101      	bne.n	801268a <memcmp+0xe>
 8012686:	2000      	movs	r0, #0
 8012688:	e005      	b.n	8012696 <memcmp+0x1a>
 801268a:	5d03      	ldrb	r3, [r0, r4]
 801268c:	3401      	adds	r4, #1
 801268e:	5d0d      	ldrb	r5, [r1, r4]
 8012690:	42ab      	cmp	r3, r5
 8012692:	d0f6      	beq.n	8012682 <memcmp+0x6>
 8012694:	1b58      	subs	r0, r3, r5
 8012696:	bd30      	pop	{r4, r5, pc}

08012698 <memcpy>:
 8012698:	440a      	add	r2, r1
 801269a:	4291      	cmp	r1, r2
 801269c:	f100 33ff 	add.w	r3, r0, #4294967295
 80126a0:	d100      	bne.n	80126a4 <memcpy+0xc>
 80126a2:	4770      	bx	lr
 80126a4:	b510      	push	{r4, lr}
 80126a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126ae:	4291      	cmp	r1, r2
 80126b0:	d1f9      	bne.n	80126a6 <memcpy+0xe>
 80126b2:	bd10      	pop	{r4, pc}

080126b4 <memmove>:
 80126b4:	4288      	cmp	r0, r1
 80126b6:	b510      	push	{r4, lr}
 80126b8:	eb01 0402 	add.w	r4, r1, r2
 80126bc:	d902      	bls.n	80126c4 <memmove+0x10>
 80126be:	4284      	cmp	r4, r0
 80126c0:	4623      	mov	r3, r4
 80126c2:	d807      	bhi.n	80126d4 <memmove+0x20>
 80126c4:	1e43      	subs	r3, r0, #1
 80126c6:	42a1      	cmp	r1, r4
 80126c8:	d008      	beq.n	80126dc <memmove+0x28>
 80126ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126d2:	e7f8      	b.n	80126c6 <memmove+0x12>
 80126d4:	4402      	add	r2, r0
 80126d6:	4601      	mov	r1, r0
 80126d8:	428a      	cmp	r2, r1
 80126da:	d100      	bne.n	80126de <memmove+0x2a>
 80126dc:	bd10      	pop	{r4, pc}
 80126de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80126e6:	e7f7      	b.n	80126d8 <memmove+0x24>

080126e8 <memset>:
 80126e8:	4402      	add	r2, r0
 80126ea:	4603      	mov	r3, r0
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d100      	bne.n	80126f2 <memset+0xa>
 80126f0:	4770      	bx	lr
 80126f2:	f803 1b01 	strb.w	r1, [r3], #1
 80126f6:	e7f9      	b.n	80126ec <memset+0x4>

080126f8 <_free_r>:
 80126f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126fa:	2900      	cmp	r1, #0
 80126fc:	d048      	beq.n	8012790 <_free_r+0x98>
 80126fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012702:	9001      	str	r0, [sp, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	f1a1 0404 	sub.w	r4, r1, #4
 801270a:	bfb8      	it	lt
 801270c:	18e4      	addlt	r4, r4, r3
 801270e:	f001 ff7f 	bl	8014610 <__malloc_lock>
 8012712:	4a20      	ldr	r2, [pc, #128]	; (8012794 <_free_r+0x9c>)
 8012714:	9801      	ldr	r0, [sp, #4]
 8012716:	6813      	ldr	r3, [r2, #0]
 8012718:	4615      	mov	r5, r2
 801271a:	b933      	cbnz	r3, 801272a <_free_r+0x32>
 801271c:	6063      	str	r3, [r4, #4]
 801271e:	6014      	str	r4, [r2, #0]
 8012720:	b003      	add	sp, #12
 8012722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012726:	f001 bf79 	b.w	801461c <__malloc_unlock>
 801272a:	42a3      	cmp	r3, r4
 801272c:	d90b      	bls.n	8012746 <_free_r+0x4e>
 801272e:	6821      	ldr	r1, [r4, #0]
 8012730:	1862      	adds	r2, r4, r1
 8012732:	4293      	cmp	r3, r2
 8012734:	bf04      	itt	eq
 8012736:	681a      	ldreq	r2, [r3, #0]
 8012738:	685b      	ldreq	r3, [r3, #4]
 801273a:	6063      	str	r3, [r4, #4]
 801273c:	bf04      	itt	eq
 801273e:	1852      	addeq	r2, r2, r1
 8012740:	6022      	streq	r2, [r4, #0]
 8012742:	602c      	str	r4, [r5, #0]
 8012744:	e7ec      	b.n	8012720 <_free_r+0x28>
 8012746:	461a      	mov	r2, r3
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	b10b      	cbz	r3, 8012750 <_free_r+0x58>
 801274c:	42a3      	cmp	r3, r4
 801274e:	d9fa      	bls.n	8012746 <_free_r+0x4e>
 8012750:	6811      	ldr	r1, [r2, #0]
 8012752:	1855      	adds	r5, r2, r1
 8012754:	42a5      	cmp	r5, r4
 8012756:	d10b      	bne.n	8012770 <_free_r+0x78>
 8012758:	6824      	ldr	r4, [r4, #0]
 801275a:	4421      	add	r1, r4
 801275c:	1854      	adds	r4, r2, r1
 801275e:	42a3      	cmp	r3, r4
 8012760:	6011      	str	r1, [r2, #0]
 8012762:	d1dd      	bne.n	8012720 <_free_r+0x28>
 8012764:	681c      	ldr	r4, [r3, #0]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	6053      	str	r3, [r2, #4]
 801276a:	4421      	add	r1, r4
 801276c:	6011      	str	r1, [r2, #0]
 801276e:	e7d7      	b.n	8012720 <_free_r+0x28>
 8012770:	d902      	bls.n	8012778 <_free_r+0x80>
 8012772:	230c      	movs	r3, #12
 8012774:	6003      	str	r3, [r0, #0]
 8012776:	e7d3      	b.n	8012720 <_free_r+0x28>
 8012778:	6825      	ldr	r5, [r4, #0]
 801277a:	1961      	adds	r1, r4, r5
 801277c:	428b      	cmp	r3, r1
 801277e:	bf04      	itt	eq
 8012780:	6819      	ldreq	r1, [r3, #0]
 8012782:	685b      	ldreq	r3, [r3, #4]
 8012784:	6063      	str	r3, [r4, #4]
 8012786:	bf04      	itt	eq
 8012788:	1949      	addeq	r1, r1, r5
 801278a:	6021      	streq	r1, [r4, #0]
 801278c:	6054      	str	r4, [r2, #4]
 801278e:	e7c7      	b.n	8012720 <_free_r+0x28>
 8012790:	b003      	add	sp, #12
 8012792:	bd30      	pop	{r4, r5, pc}
 8012794:	20000c3c 	.word	0x20000c3c

08012798 <_malloc_r>:
 8012798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279a:	1ccd      	adds	r5, r1, #3
 801279c:	f025 0503 	bic.w	r5, r5, #3
 80127a0:	3508      	adds	r5, #8
 80127a2:	2d0c      	cmp	r5, #12
 80127a4:	bf38      	it	cc
 80127a6:	250c      	movcc	r5, #12
 80127a8:	2d00      	cmp	r5, #0
 80127aa:	4606      	mov	r6, r0
 80127ac:	db01      	blt.n	80127b2 <_malloc_r+0x1a>
 80127ae:	42a9      	cmp	r1, r5
 80127b0:	d903      	bls.n	80127ba <_malloc_r+0x22>
 80127b2:	230c      	movs	r3, #12
 80127b4:	6033      	str	r3, [r6, #0]
 80127b6:	2000      	movs	r0, #0
 80127b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ba:	f001 ff29 	bl	8014610 <__malloc_lock>
 80127be:	4921      	ldr	r1, [pc, #132]	; (8012844 <_malloc_r+0xac>)
 80127c0:	680a      	ldr	r2, [r1, #0]
 80127c2:	4614      	mov	r4, r2
 80127c4:	b99c      	cbnz	r4, 80127ee <_malloc_r+0x56>
 80127c6:	4f20      	ldr	r7, [pc, #128]	; (8012848 <_malloc_r+0xb0>)
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	b923      	cbnz	r3, 80127d6 <_malloc_r+0x3e>
 80127cc:	4621      	mov	r1, r4
 80127ce:	4630      	mov	r0, r6
 80127d0:	f000 fd34 	bl	801323c <_sbrk_r>
 80127d4:	6038      	str	r0, [r7, #0]
 80127d6:	4629      	mov	r1, r5
 80127d8:	4630      	mov	r0, r6
 80127da:	f000 fd2f 	bl	801323c <_sbrk_r>
 80127de:	1c43      	adds	r3, r0, #1
 80127e0:	d123      	bne.n	801282a <_malloc_r+0x92>
 80127e2:	230c      	movs	r3, #12
 80127e4:	6033      	str	r3, [r6, #0]
 80127e6:	4630      	mov	r0, r6
 80127e8:	f001 ff18 	bl	801461c <__malloc_unlock>
 80127ec:	e7e3      	b.n	80127b6 <_malloc_r+0x1e>
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	1b5b      	subs	r3, r3, r5
 80127f2:	d417      	bmi.n	8012824 <_malloc_r+0x8c>
 80127f4:	2b0b      	cmp	r3, #11
 80127f6:	d903      	bls.n	8012800 <_malloc_r+0x68>
 80127f8:	6023      	str	r3, [r4, #0]
 80127fa:	441c      	add	r4, r3
 80127fc:	6025      	str	r5, [r4, #0]
 80127fe:	e004      	b.n	801280a <_malloc_r+0x72>
 8012800:	6863      	ldr	r3, [r4, #4]
 8012802:	42a2      	cmp	r2, r4
 8012804:	bf0c      	ite	eq
 8012806:	600b      	streq	r3, [r1, #0]
 8012808:	6053      	strne	r3, [r2, #4]
 801280a:	4630      	mov	r0, r6
 801280c:	f001 ff06 	bl	801461c <__malloc_unlock>
 8012810:	f104 000b 	add.w	r0, r4, #11
 8012814:	1d23      	adds	r3, r4, #4
 8012816:	f020 0007 	bic.w	r0, r0, #7
 801281a:	1ac2      	subs	r2, r0, r3
 801281c:	d0cc      	beq.n	80127b8 <_malloc_r+0x20>
 801281e:	1a1b      	subs	r3, r3, r0
 8012820:	50a3      	str	r3, [r4, r2]
 8012822:	e7c9      	b.n	80127b8 <_malloc_r+0x20>
 8012824:	4622      	mov	r2, r4
 8012826:	6864      	ldr	r4, [r4, #4]
 8012828:	e7cc      	b.n	80127c4 <_malloc_r+0x2c>
 801282a:	1cc4      	adds	r4, r0, #3
 801282c:	f024 0403 	bic.w	r4, r4, #3
 8012830:	42a0      	cmp	r0, r4
 8012832:	d0e3      	beq.n	80127fc <_malloc_r+0x64>
 8012834:	1a21      	subs	r1, r4, r0
 8012836:	4630      	mov	r0, r6
 8012838:	f000 fd00 	bl	801323c <_sbrk_r>
 801283c:	3001      	adds	r0, #1
 801283e:	d1dd      	bne.n	80127fc <_malloc_r+0x64>
 8012840:	e7cf      	b.n	80127e2 <_malloc_r+0x4a>
 8012842:	bf00      	nop
 8012844:	20000c3c 	.word	0x20000c3c
 8012848:	20000c40 	.word	0x20000c40

0801284c <__cvt>:
 801284c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012850:	ec55 4b10 	vmov	r4, r5, d0
 8012854:	2d00      	cmp	r5, #0
 8012856:	460e      	mov	r6, r1
 8012858:	4619      	mov	r1, r3
 801285a:	462b      	mov	r3, r5
 801285c:	bfbb      	ittet	lt
 801285e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012862:	461d      	movlt	r5, r3
 8012864:	2300      	movge	r3, #0
 8012866:	232d      	movlt	r3, #45	; 0x2d
 8012868:	700b      	strb	r3, [r1, #0]
 801286a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801286c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012870:	4691      	mov	r9, r2
 8012872:	f023 0820 	bic.w	r8, r3, #32
 8012876:	bfbc      	itt	lt
 8012878:	4622      	movlt	r2, r4
 801287a:	4614      	movlt	r4, r2
 801287c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012880:	d005      	beq.n	801288e <__cvt+0x42>
 8012882:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012886:	d100      	bne.n	801288a <__cvt+0x3e>
 8012888:	3601      	adds	r6, #1
 801288a:	2102      	movs	r1, #2
 801288c:	e000      	b.n	8012890 <__cvt+0x44>
 801288e:	2103      	movs	r1, #3
 8012890:	ab03      	add	r3, sp, #12
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	ab02      	add	r3, sp, #8
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	ec45 4b10 	vmov	d0, r4, r5
 801289c:	4653      	mov	r3, sl
 801289e:	4632      	mov	r2, r6
 80128a0:	f000 fea6 	bl	80135f0 <_dtoa_r>
 80128a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80128a8:	4607      	mov	r7, r0
 80128aa:	d102      	bne.n	80128b2 <__cvt+0x66>
 80128ac:	f019 0f01 	tst.w	r9, #1
 80128b0:	d022      	beq.n	80128f8 <__cvt+0xac>
 80128b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80128b6:	eb07 0906 	add.w	r9, r7, r6
 80128ba:	d110      	bne.n	80128de <__cvt+0x92>
 80128bc:	783b      	ldrb	r3, [r7, #0]
 80128be:	2b30      	cmp	r3, #48	; 0x30
 80128c0:	d10a      	bne.n	80128d8 <__cvt+0x8c>
 80128c2:	2200      	movs	r2, #0
 80128c4:	2300      	movs	r3, #0
 80128c6:	4620      	mov	r0, r4
 80128c8:	4629      	mov	r1, r5
 80128ca:	f7ee f91d 	bl	8000b08 <__aeabi_dcmpeq>
 80128ce:	b918      	cbnz	r0, 80128d8 <__cvt+0x8c>
 80128d0:	f1c6 0601 	rsb	r6, r6, #1
 80128d4:	f8ca 6000 	str.w	r6, [sl]
 80128d8:	f8da 3000 	ldr.w	r3, [sl]
 80128dc:	4499      	add	r9, r3
 80128de:	2200      	movs	r2, #0
 80128e0:	2300      	movs	r3, #0
 80128e2:	4620      	mov	r0, r4
 80128e4:	4629      	mov	r1, r5
 80128e6:	f7ee f90f 	bl	8000b08 <__aeabi_dcmpeq>
 80128ea:	b108      	cbz	r0, 80128f0 <__cvt+0xa4>
 80128ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80128f0:	2230      	movs	r2, #48	; 0x30
 80128f2:	9b03      	ldr	r3, [sp, #12]
 80128f4:	454b      	cmp	r3, r9
 80128f6:	d307      	bcc.n	8012908 <__cvt+0xbc>
 80128f8:	9b03      	ldr	r3, [sp, #12]
 80128fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128fc:	1bdb      	subs	r3, r3, r7
 80128fe:	4638      	mov	r0, r7
 8012900:	6013      	str	r3, [r2, #0]
 8012902:	b004      	add	sp, #16
 8012904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012908:	1c59      	adds	r1, r3, #1
 801290a:	9103      	str	r1, [sp, #12]
 801290c:	701a      	strb	r2, [r3, #0]
 801290e:	e7f0      	b.n	80128f2 <__cvt+0xa6>

08012910 <__exponent>:
 8012910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012912:	4603      	mov	r3, r0
 8012914:	2900      	cmp	r1, #0
 8012916:	bfb8      	it	lt
 8012918:	4249      	neglt	r1, r1
 801291a:	f803 2b02 	strb.w	r2, [r3], #2
 801291e:	bfb4      	ite	lt
 8012920:	222d      	movlt	r2, #45	; 0x2d
 8012922:	222b      	movge	r2, #43	; 0x2b
 8012924:	2909      	cmp	r1, #9
 8012926:	7042      	strb	r2, [r0, #1]
 8012928:	dd2a      	ble.n	8012980 <__exponent+0x70>
 801292a:	f10d 0407 	add.w	r4, sp, #7
 801292e:	46a4      	mov	ip, r4
 8012930:	270a      	movs	r7, #10
 8012932:	46a6      	mov	lr, r4
 8012934:	460a      	mov	r2, r1
 8012936:	fb91 f6f7 	sdiv	r6, r1, r7
 801293a:	fb07 1516 	mls	r5, r7, r6, r1
 801293e:	3530      	adds	r5, #48	; 0x30
 8012940:	2a63      	cmp	r2, #99	; 0x63
 8012942:	f104 34ff 	add.w	r4, r4, #4294967295
 8012946:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801294a:	4631      	mov	r1, r6
 801294c:	dcf1      	bgt.n	8012932 <__exponent+0x22>
 801294e:	3130      	adds	r1, #48	; 0x30
 8012950:	f1ae 0502 	sub.w	r5, lr, #2
 8012954:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012958:	1c44      	adds	r4, r0, #1
 801295a:	4629      	mov	r1, r5
 801295c:	4561      	cmp	r1, ip
 801295e:	d30a      	bcc.n	8012976 <__exponent+0x66>
 8012960:	f10d 0209 	add.w	r2, sp, #9
 8012964:	eba2 020e 	sub.w	r2, r2, lr
 8012968:	4565      	cmp	r5, ip
 801296a:	bf88      	it	hi
 801296c:	2200      	movhi	r2, #0
 801296e:	4413      	add	r3, r2
 8012970:	1a18      	subs	r0, r3, r0
 8012972:	b003      	add	sp, #12
 8012974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012976:	f811 2b01 	ldrb.w	r2, [r1], #1
 801297a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801297e:	e7ed      	b.n	801295c <__exponent+0x4c>
 8012980:	2330      	movs	r3, #48	; 0x30
 8012982:	3130      	adds	r1, #48	; 0x30
 8012984:	7083      	strb	r3, [r0, #2]
 8012986:	70c1      	strb	r1, [r0, #3]
 8012988:	1d03      	adds	r3, r0, #4
 801298a:	e7f1      	b.n	8012970 <__exponent+0x60>

0801298c <_printf_float>:
 801298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012990:	ed2d 8b02 	vpush	{d8}
 8012994:	b08d      	sub	sp, #52	; 0x34
 8012996:	460c      	mov	r4, r1
 8012998:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801299c:	4616      	mov	r6, r2
 801299e:	461f      	mov	r7, r3
 80129a0:	4605      	mov	r5, r0
 80129a2:	f001 fdc9 	bl	8014538 <_localeconv_r>
 80129a6:	f8d0 a000 	ldr.w	sl, [r0]
 80129aa:	4650      	mov	r0, sl
 80129ac:	f7ed fc80 	bl	80002b0 <strlen>
 80129b0:	2300      	movs	r3, #0
 80129b2:	930a      	str	r3, [sp, #40]	; 0x28
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	9305      	str	r3, [sp, #20]
 80129b8:	f8d8 3000 	ldr.w	r3, [r8]
 80129bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80129c0:	3307      	adds	r3, #7
 80129c2:	f023 0307 	bic.w	r3, r3, #7
 80129c6:	f103 0208 	add.w	r2, r3, #8
 80129ca:	f8c8 2000 	str.w	r2, [r8]
 80129ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80129d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80129da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80129de:	9307      	str	r3, [sp, #28]
 80129e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80129e4:	ee08 0a10 	vmov	s16, r0
 80129e8:	4b9f      	ldr	r3, [pc, #636]	; (8012c68 <_printf_float+0x2dc>)
 80129ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129ee:	f04f 32ff 	mov.w	r2, #4294967295
 80129f2:	f7ee f8bb 	bl	8000b6c <__aeabi_dcmpun>
 80129f6:	bb88      	cbnz	r0, 8012a5c <_printf_float+0xd0>
 80129f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129fc:	4b9a      	ldr	r3, [pc, #616]	; (8012c68 <_printf_float+0x2dc>)
 80129fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012a02:	f7ee f895 	bl	8000b30 <__aeabi_dcmple>
 8012a06:	bb48      	cbnz	r0, 8012a5c <_printf_float+0xd0>
 8012a08:	2200      	movs	r2, #0
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4649      	mov	r1, r9
 8012a10:	f7ee f884 	bl	8000b1c <__aeabi_dcmplt>
 8012a14:	b110      	cbz	r0, 8012a1c <_printf_float+0x90>
 8012a16:	232d      	movs	r3, #45	; 0x2d
 8012a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a1c:	4b93      	ldr	r3, [pc, #588]	; (8012c6c <_printf_float+0x2e0>)
 8012a1e:	4894      	ldr	r0, [pc, #592]	; (8012c70 <_printf_float+0x2e4>)
 8012a20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012a24:	bf94      	ite	ls
 8012a26:	4698      	movls	r8, r3
 8012a28:	4680      	movhi	r8, r0
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	6123      	str	r3, [r4, #16]
 8012a2e:	9b05      	ldr	r3, [sp, #20]
 8012a30:	f023 0204 	bic.w	r2, r3, #4
 8012a34:	6022      	str	r2, [r4, #0]
 8012a36:	f04f 0900 	mov.w	r9, #0
 8012a3a:	9700      	str	r7, [sp, #0]
 8012a3c:	4633      	mov	r3, r6
 8012a3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012a40:	4621      	mov	r1, r4
 8012a42:	4628      	mov	r0, r5
 8012a44:	f000 f9d8 	bl	8012df8 <_printf_common>
 8012a48:	3001      	adds	r0, #1
 8012a4a:	f040 8090 	bne.w	8012b6e <_printf_float+0x1e2>
 8012a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a52:	b00d      	add	sp, #52	; 0x34
 8012a54:	ecbd 8b02 	vpop	{d8}
 8012a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5c:	4642      	mov	r2, r8
 8012a5e:	464b      	mov	r3, r9
 8012a60:	4640      	mov	r0, r8
 8012a62:	4649      	mov	r1, r9
 8012a64:	f7ee f882 	bl	8000b6c <__aeabi_dcmpun>
 8012a68:	b140      	cbz	r0, 8012a7c <_printf_float+0xf0>
 8012a6a:	464b      	mov	r3, r9
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	bfbc      	itt	lt
 8012a70:	232d      	movlt	r3, #45	; 0x2d
 8012a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a76:	487f      	ldr	r0, [pc, #508]	; (8012c74 <_printf_float+0x2e8>)
 8012a78:	4b7f      	ldr	r3, [pc, #508]	; (8012c78 <_printf_float+0x2ec>)
 8012a7a:	e7d1      	b.n	8012a20 <_printf_float+0x94>
 8012a7c:	6863      	ldr	r3, [r4, #4]
 8012a7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012a82:	9206      	str	r2, [sp, #24]
 8012a84:	1c5a      	adds	r2, r3, #1
 8012a86:	d13f      	bne.n	8012b08 <_printf_float+0x17c>
 8012a88:	2306      	movs	r3, #6
 8012a8a:	6063      	str	r3, [r4, #4]
 8012a8c:	9b05      	ldr	r3, [sp, #20]
 8012a8e:	6861      	ldr	r1, [r4, #4]
 8012a90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012a94:	2300      	movs	r3, #0
 8012a96:	9303      	str	r3, [sp, #12]
 8012a98:	ab0a      	add	r3, sp, #40	; 0x28
 8012a9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012a9e:	ab09      	add	r3, sp, #36	; 0x24
 8012aa0:	ec49 8b10 	vmov	d0, r8, r9
 8012aa4:	9300      	str	r3, [sp, #0]
 8012aa6:	6022      	str	r2, [r4, #0]
 8012aa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012aac:	4628      	mov	r0, r5
 8012aae:	f7ff fecd 	bl	801284c <__cvt>
 8012ab2:	9b06      	ldr	r3, [sp, #24]
 8012ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ab6:	2b47      	cmp	r3, #71	; 0x47
 8012ab8:	4680      	mov	r8, r0
 8012aba:	d108      	bne.n	8012ace <_printf_float+0x142>
 8012abc:	1cc8      	adds	r0, r1, #3
 8012abe:	db02      	blt.n	8012ac6 <_printf_float+0x13a>
 8012ac0:	6863      	ldr	r3, [r4, #4]
 8012ac2:	4299      	cmp	r1, r3
 8012ac4:	dd41      	ble.n	8012b4a <_printf_float+0x1be>
 8012ac6:	f1ab 0b02 	sub.w	fp, fp, #2
 8012aca:	fa5f fb8b 	uxtb.w	fp, fp
 8012ace:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012ad2:	d820      	bhi.n	8012b16 <_printf_float+0x18a>
 8012ad4:	3901      	subs	r1, #1
 8012ad6:	465a      	mov	r2, fp
 8012ad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012adc:	9109      	str	r1, [sp, #36]	; 0x24
 8012ade:	f7ff ff17 	bl	8012910 <__exponent>
 8012ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ae4:	1813      	adds	r3, r2, r0
 8012ae6:	2a01      	cmp	r2, #1
 8012ae8:	4681      	mov	r9, r0
 8012aea:	6123      	str	r3, [r4, #16]
 8012aec:	dc02      	bgt.n	8012af4 <_printf_float+0x168>
 8012aee:	6822      	ldr	r2, [r4, #0]
 8012af0:	07d2      	lsls	r2, r2, #31
 8012af2:	d501      	bpl.n	8012af8 <_printf_float+0x16c>
 8012af4:	3301      	adds	r3, #1
 8012af6:	6123      	str	r3, [r4, #16]
 8012af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d09c      	beq.n	8012a3a <_printf_float+0xae>
 8012b00:	232d      	movs	r3, #45	; 0x2d
 8012b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b06:	e798      	b.n	8012a3a <_printf_float+0xae>
 8012b08:	9a06      	ldr	r2, [sp, #24]
 8012b0a:	2a47      	cmp	r2, #71	; 0x47
 8012b0c:	d1be      	bne.n	8012a8c <_printf_float+0x100>
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1bc      	bne.n	8012a8c <_printf_float+0x100>
 8012b12:	2301      	movs	r3, #1
 8012b14:	e7b9      	b.n	8012a8a <_printf_float+0xfe>
 8012b16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012b1a:	d118      	bne.n	8012b4e <_printf_float+0x1c2>
 8012b1c:	2900      	cmp	r1, #0
 8012b1e:	6863      	ldr	r3, [r4, #4]
 8012b20:	dd0b      	ble.n	8012b3a <_printf_float+0x1ae>
 8012b22:	6121      	str	r1, [r4, #16]
 8012b24:	b913      	cbnz	r3, 8012b2c <_printf_float+0x1a0>
 8012b26:	6822      	ldr	r2, [r4, #0]
 8012b28:	07d0      	lsls	r0, r2, #31
 8012b2a:	d502      	bpl.n	8012b32 <_printf_float+0x1a6>
 8012b2c:	3301      	adds	r3, #1
 8012b2e:	440b      	add	r3, r1
 8012b30:	6123      	str	r3, [r4, #16]
 8012b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8012b34:	f04f 0900 	mov.w	r9, #0
 8012b38:	e7de      	b.n	8012af8 <_printf_float+0x16c>
 8012b3a:	b913      	cbnz	r3, 8012b42 <_printf_float+0x1b6>
 8012b3c:	6822      	ldr	r2, [r4, #0]
 8012b3e:	07d2      	lsls	r2, r2, #31
 8012b40:	d501      	bpl.n	8012b46 <_printf_float+0x1ba>
 8012b42:	3302      	adds	r3, #2
 8012b44:	e7f4      	b.n	8012b30 <_printf_float+0x1a4>
 8012b46:	2301      	movs	r3, #1
 8012b48:	e7f2      	b.n	8012b30 <_printf_float+0x1a4>
 8012b4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b50:	4299      	cmp	r1, r3
 8012b52:	db05      	blt.n	8012b60 <_printf_float+0x1d4>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	6121      	str	r1, [r4, #16]
 8012b58:	07d8      	lsls	r0, r3, #31
 8012b5a:	d5ea      	bpl.n	8012b32 <_printf_float+0x1a6>
 8012b5c:	1c4b      	adds	r3, r1, #1
 8012b5e:	e7e7      	b.n	8012b30 <_printf_float+0x1a4>
 8012b60:	2900      	cmp	r1, #0
 8012b62:	bfd4      	ite	le
 8012b64:	f1c1 0202 	rsble	r2, r1, #2
 8012b68:	2201      	movgt	r2, #1
 8012b6a:	4413      	add	r3, r2
 8012b6c:	e7e0      	b.n	8012b30 <_printf_float+0x1a4>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	055a      	lsls	r2, r3, #21
 8012b72:	d407      	bmi.n	8012b84 <_printf_float+0x1f8>
 8012b74:	6923      	ldr	r3, [r4, #16]
 8012b76:	4642      	mov	r2, r8
 8012b78:	4631      	mov	r1, r6
 8012b7a:	4628      	mov	r0, r5
 8012b7c:	47b8      	blx	r7
 8012b7e:	3001      	adds	r0, #1
 8012b80:	d12c      	bne.n	8012bdc <_printf_float+0x250>
 8012b82:	e764      	b.n	8012a4e <_printf_float+0xc2>
 8012b84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012b88:	f240 80e0 	bls.w	8012d4c <_printf_float+0x3c0>
 8012b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b90:	2200      	movs	r2, #0
 8012b92:	2300      	movs	r3, #0
 8012b94:	f7ed ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d034      	beq.n	8012c06 <_printf_float+0x27a>
 8012b9c:	4a37      	ldr	r2, [pc, #220]	; (8012c7c <_printf_float+0x2f0>)
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	4631      	mov	r1, r6
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	47b8      	blx	r7
 8012ba6:	3001      	adds	r0, #1
 8012ba8:	f43f af51 	beq.w	8012a4e <_printf_float+0xc2>
 8012bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	db02      	blt.n	8012bba <_printf_float+0x22e>
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	07d8      	lsls	r0, r3, #31
 8012bb8:	d510      	bpl.n	8012bdc <_printf_float+0x250>
 8012bba:	ee18 3a10 	vmov	r3, s16
 8012bbe:	4652      	mov	r2, sl
 8012bc0:	4631      	mov	r1, r6
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	47b8      	blx	r7
 8012bc6:	3001      	adds	r0, #1
 8012bc8:	f43f af41 	beq.w	8012a4e <_printf_float+0xc2>
 8012bcc:	f04f 0800 	mov.w	r8, #0
 8012bd0:	f104 091a 	add.w	r9, r4, #26
 8012bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	4543      	cmp	r3, r8
 8012bda:	dc09      	bgt.n	8012bf0 <_printf_float+0x264>
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	079b      	lsls	r3, r3, #30
 8012be0:	f100 8105 	bmi.w	8012dee <_printf_float+0x462>
 8012be4:	68e0      	ldr	r0, [r4, #12]
 8012be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012be8:	4298      	cmp	r0, r3
 8012bea:	bfb8      	it	lt
 8012bec:	4618      	movlt	r0, r3
 8012bee:	e730      	b.n	8012a52 <_printf_float+0xc6>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	464a      	mov	r2, r9
 8012bf4:	4631      	mov	r1, r6
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	47b8      	blx	r7
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	f43f af27 	beq.w	8012a4e <_printf_float+0xc2>
 8012c00:	f108 0801 	add.w	r8, r8, #1
 8012c04:	e7e6      	b.n	8012bd4 <_printf_float+0x248>
 8012c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dc39      	bgt.n	8012c80 <_printf_float+0x2f4>
 8012c0c:	4a1b      	ldr	r2, [pc, #108]	; (8012c7c <_printf_float+0x2f0>)
 8012c0e:	2301      	movs	r3, #1
 8012c10:	4631      	mov	r1, r6
 8012c12:	4628      	mov	r0, r5
 8012c14:	47b8      	blx	r7
 8012c16:	3001      	adds	r0, #1
 8012c18:	f43f af19 	beq.w	8012a4e <_printf_float+0xc2>
 8012c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c20:	4313      	orrs	r3, r2
 8012c22:	d102      	bne.n	8012c2a <_printf_float+0x29e>
 8012c24:	6823      	ldr	r3, [r4, #0]
 8012c26:	07d9      	lsls	r1, r3, #31
 8012c28:	d5d8      	bpl.n	8012bdc <_printf_float+0x250>
 8012c2a:	ee18 3a10 	vmov	r3, s16
 8012c2e:	4652      	mov	r2, sl
 8012c30:	4631      	mov	r1, r6
 8012c32:	4628      	mov	r0, r5
 8012c34:	47b8      	blx	r7
 8012c36:	3001      	adds	r0, #1
 8012c38:	f43f af09 	beq.w	8012a4e <_printf_float+0xc2>
 8012c3c:	f04f 0900 	mov.w	r9, #0
 8012c40:	f104 0a1a 	add.w	sl, r4, #26
 8012c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c46:	425b      	negs	r3, r3
 8012c48:	454b      	cmp	r3, r9
 8012c4a:	dc01      	bgt.n	8012c50 <_printf_float+0x2c4>
 8012c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c4e:	e792      	b.n	8012b76 <_printf_float+0x1ea>
 8012c50:	2301      	movs	r3, #1
 8012c52:	4652      	mov	r2, sl
 8012c54:	4631      	mov	r1, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	47b8      	blx	r7
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	f43f aef7 	beq.w	8012a4e <_printf_float+0xc2>
 8012c60:	f109 0901 	add.w	r9, r9, #1
 8012c64:	e7ee      	b.n	8012c44 <_printf_float+0x2b8>
 8012c66:	bf00      	nop
 8012c68:	7fefffff 	.word	0x7fefffff
 8012c6c:	0801e6f8 	.word	0x0801e6f8
 8012c70:	0801e6fc 	.word	0x0801e6fc
 8012c74:	0801e704 	.word	0x0801e704
 8012c78:	0801e700 	.word	0x0801e700
 8012c7c:	0801e708 	.word	0x0801e708
 8012c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c84:	429a      	cmp	r2, r3
 8012c86:	bfa8      	it	ge
 8012c88:	461a      	movge	r2, r3
 8012c8a:	2a00      	cmp	r2, #0
 8012c8c:	4691      	mov	r9, r2
 8012c8e:	dc37      	bgt.n	8012d00 <_printf_float+0x374>
 8012c90:	f04f 0b00 	mov.w	fp, #0
 8012c94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c98:	f104 021a 	add.w	r2, r4, #26
 8012c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c9e:	9305      	str	r3, [sp, #20]
 8012ca0:	eba3 0309 	sub.w	r3, r3, r9
 8012ca4:	455b      	cmp	r3, fp
 8012ca6:	dc33      	bgt.n	8012d10 <_printf_float+0x384>
 8012ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cac:	429a      	cmp	r2, r3
 8012cae:	db3b      	blt.n	8012d28 <_printf_float+0x39c>
 8012cb0:	6823      	ldr	r3, [r4, #0]
 8012cb2:	07da      	lsls	r2, r3, #31
 8012cb4:	d438      	bmi.n	8012d28 <_printf_float+0x39c>
 8012cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cb8:	9b05      	ldr	r3, [sp, #20]
 8012cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cbc:	1ad3      	subs	r3, r2, r3
 8012cbe:	eba2 0901 	sub.w	r9, r2, r1
 8012cc2:	4599      	cmp	r9, r3
 8012cc4:	bfa8      	it	ge
 8012cc6:	4699      	movge	r9, r3
 8012cc8:	f1b9 0f00 	cmp.w	r9, #0
 8012ccc:	dc35      	bgt.n	8012d3a <_printf_float+0x3ae>
 8012cce:	f04f 0800 	mov.w	r8, #0
 8012cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cd6:	f104 0a1a 	add.w	sl, r4, #26
 8012cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cde:	1a9b      	subs	r3, r3, r2
 8012ce0:	eba3 0309 	sub.w	r3, r3, r9
 8012ce4:	4543      	cmp	r3, r8
 8012ce6:	f77f af79 	ble.w	8012bdc <_printf_float+0x250>
 8012cea:	2301      	movs	r3, #1
 8012cec:	4652      	mov	r2, sl
 8012cee:	4631      	mov	r1, r6
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	47b8      	blx	r7
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	f43f aeaa 	beq.w	8012a4e <_printf_float+0xc2>
 8012cfa:	f108 0801 	add.w	r8, r8, #1
 8012cfe:	e7ec      	b.n	8012cda <_printf_float+0x34e>
 8012d00:	4613      	mov	r3, r2
 8012d02:	4631      	mov	r1, r6
 8012d04:	4642      	mov	r2, r8
 8012d06:	4628      	mov	r0, r5
 8012d08:	47b8      	blx	r7
 8012d0a:	3001      	adds	r0, #1
 8012d0c:	d1c0      	bne.n	8012c90 <_printf_float+0x304>
 8012d0e:	e69e      	b.n	8012a4e <_printf_float+0xc2>
 8012d10:	2301      	movs	r3, #1
 8012d12:	4631      	mov	r1, r6
 8012d14:	4628      	mov	r0, r5
 8012d16:	9205      	str	r2, [sp, #20]
 8012d18:	47b8      	blx	r7
 8012d1a:	3001      	adds	r0, #1
 8012d1c:	f43f ae97 	beq.w	8012a4e <_printf_float+0xc2>
 8012d20:	9a05      	ldr	r2, [sp, #20]
 8012d22:	f10b 0b01 	add.w	fp, fp, #1
 8012d26:	e7b9      	b.n	8012c9c <_printf_float+0x310>
 8012d28:	ee18 3a10 	vmov	r3, s16
 8012d2c:	4652      	mov	r2, sl
 8012d2e:	4631      	mov	r1, r6
 8012d30:	4628      	mov	r0, r5
 8012d32:	47b8      	blx	r7
 8012d34:	3001      	adds	r0, #1
 8012d36:	d1be      	bne.n	8012cb6 <_printf_float+0x32a>
 8012d38:	e689      	b.n	8012a4e <_printf_float+0xc2>
 8012d3a:	9a05      	ldr	r2, [sp, #20]
 8012d3c:	464b      	mov	r3, r9
 8012d3e:	4442      	add	r2, r8
 8012d40:	4631      	mov	r1, r6
 8012d42:	4628      	mov	r0, r5
 8012d44:	47b8      	blx	r7
 8012d46:	3001      	adds	r0, #1
 8012d48:	d1c1      	bne.n	8012cce <_printf_float+0x342>
 8012d4a:	e680      	b.n	8012a4e <_printf_float+0xc2>
 8012d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d4e:	2a01      	cmp	r2, #1
 8012d50:	dc01      	bgt.n	8012d56 <_printf_float+0x3ca>
 8012d52:	07db      	lsls	r3, r3, #31
 8012d54:	d538      	bpl.n	8012dc8 <_printf_float+0x43c>
 8012d56:	2301      	movs	r3, #1
 8012d58:	4642      	mov	r2, r8
 8012d5a:	4631      	mov	r1, r6
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	47b8      	blx	r7
 8012d60:	3001      	adds	r0, #1
 8012d62:	f43f ae74 	beq.w	8012a4e <_printf_float+0xc2>
 8012d66:	ee18 3a10 	vmov	r3, s16
 8012d6a:	4652      	mov	r2, sl
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	4628      	mov	r0, r5
 8012d70:	47b8      	blx	r7
 8012d72:	3001      	adds	r0, #1
 8012d74:	f43f ae6b 	beq.w	8012a4e <_printf_float+0xc2>
 8012d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	2300      	movs	r3, #0
 8012d80:	f7ed fec2 	bl	8000b08 <__aeabi_dcmpeq>
 8012d84:	b9d8      	cbnz	r0, 8012dbe <_printf_float+0x432>
 8012d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d88:	f108 0201 	add.w	r2, r8, #1
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	4631      	mov	r1, r6
 8012d90:	4628      	mov	r0, r5
 8012d92:	47b8      	blx	r7
 8012d94:	3001      	adds	r0, #1
 8012d96:	d10e      	bne.n	8012db6 <_printf_float+0x42a>
 8012d98:	e659      	b.n	8012a4e <_printf_float+0xc2>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	4652      	mov	r2, sl
 8012d9e:	4631      	mov	r1, r6
 8012da0:	4628      	mov	r0, r5
 8012da2:	47b8      	blx	r7
 8012da4:	3001      	adds	r0, #1
 8012da6:	f43f ae52 	beq.w	8012a4e <_printf_float+0xc2>
 8012daa:	f108 0801 	add.w	r8, r8, #1
 8012dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012db0:	3b01      	subs	r3, #1
 8012db2:	4543      	cmp	r3, r8
 8012db4:	dcf1      	bgt.n	8012d9a <_printf_float+0x40e>
 8012db6:	464b      	mov	r3, r9
 8012db8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012dbc:	e6dc      	b.n	8012b78 <_printf_float+0x1ec>
 8012dbe:	f04f 0800 	mov.w	r8, #0
 8012dc2:	f104 0a1a 	add.w	sl, r4, #26
 8012dc6:	e7f2      	b.n	8012dae <_printf_float+0x422>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	4642      	mov	r2, r8
 8012dcc:	e7df      	b.n	8012d8e <_printf_float+0x402>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	464a      	mov	r2, r9
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	47b8      	blx	r7
 8012dd8:	3001      	adds	r0, #1
 8012dda:	f43f ae38 	beq.w	8012a4e <_printf_float+0xc2>
 8012dde:	f108 0801 	add.w	r8, r8, #1
 8012de2:	68e3      	ldr	r3, [r4, #12]
 8012de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012de6:	1a5b      	subs	r3, r3, r1
 8012de8:	4543      	cmp	r3, r8
 8012dea:	dcf0      	bgt.n	8012dce <_printf_float+0x442>
 8012dec:	e6fa      	b.n	8012be4 <_printf_float+0x258>
 8012dee:	f04f 0800 	mov.w	r8, #0
 8012df2:	f104 0919 	add.w	r9, r4, #25
 8012df6:	e7f4      	b.n	8012de2 <_printf_float+0x456>

08012df8 <_printf_common>:
 8012df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dfc:	4616      	mov	r6, r2
 8012dfe:	4699      	mov	r9, r3
 8012e00:	688a      	ldr	r2, [r1, #8]
 8012e02:	690b      	ldr	r3, [r1, #16]
 8012e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	bfb8      	it	lt
 8012e0c:	4613      	movlt	r3, r2
 8012e0e:	6033      	str	r3, [r6, #0]
 8012e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e14:	4607      	mov	r7, r0
 8012e16:	460c      	mov	r4, r1
 8012e18:	b10a      	cbz	r2, 8012e1e <_printf_common+0x26>
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	6033      	str	r3, [r6, #0]
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	0699      	lsls	r1, r3, #26
 8012e22:	bf42      	ittt	mi
 8012e24:	6833      	ldrmi	r3, [r6, #0]
 8012e26:	3302      	addmi	r3, #2
 8012e28:	6033      	strmi	r3, [r6, #0]
 8012e2a:	6825      	ldr	r5, [r4, #0]
 8012e2c:	f015 0506 	ands.w	r5, r5, #6
 8012e30:	d106      	bne.n	8012e40 <_printf_common+0x48>
 8012e32:	f104 0a19 	add.w	sl, r4, #25
 8012e36:	68e3      	ldr	r3, [r4, #12]
 8012e38:	6832      	ldr	r2, [r6, #0]
 8012e3a:	1a9b      	subs	r3, r3, r2
 8012e3c:	42ab      	cmp	r3, r5
 8012e3e:	dc26      	bgt.n	8012e8e <_printf_common+0x96>
 8012e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e44:	1e13      	subs	r3, r2, #0
 8012e46:	6822      	ldr	r2, [r4, #0]
 8012e48:	bf18      	it	ne
 8012e4a:	2301      	movne	r3, #1
 8012e4c:	0692      	lsls	r2, r2, #26
 8012e4e:	d42b      	bmi.n	8012ea8 <_printf_common+0xb0>
 8012e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e54:	4649      	mov	r1, r9
 8012e56:	4638      	mov	r0, r7
 8012e58:	47c0      	blx	r8
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	d01e      	beq.n	8012e9c <_printf_common+0xa4>
 8012e5e:	6823      	ldr	r3, [r4, #0]
 8012e60:	68e5      	ldr	r5, [r4, #12]
 8012e62:	6832      	ldr	r2, [r6, #0]
 8012e64:	f003 0306 	and.w	r3, r3, #6
 8012e68:	2b04      	cmp	r3, #4
 8012e6a:	bf08      	it	eq
 8012e6c:	1aad      	subeq	r5, r5, r2
 8012e6e:	68a3      	ldr	r3, [r4, #8]
 8012e70:	6922      	ldr	r2, [r4, #16]
 8012e72:	bf0c      	ite	eq
 8012e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e78:	2500      	movne	r5, #0
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	bfc4      	itt	gt
 8012e7e:	1a9b      	subgt	r3, r3, r2
 8012e80:	18ed      	addgt	r5, r5, r3
 8012e82:	2600      	movs	r6, #0
 8012e84:	341a      	adds	r4, #26
 8012e86:	42b5      	cmp	r5, r6
 8012e88:	d11a      	bne.n	8012ec0 <_printf_common+0xc8>
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	e008      	b.n	8012ea0 <_printf_common+0xa8>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	4652      	mov	r2, sl
 8012e92:	4649      	mov	r1, r9
 8012e94:	4638      	mov	r0, r7
 8012e96:	47c0      	blx	r8
 8012e98:	3001      	adds	r0, #1
 8012e9a:	d103      	bne.n	8012ea4 <_printf_common+0xac>
 8012e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	e7c6      	b.n	8012e36 <_printf_common+0x3e>
 8012ea8:	18e1      	adds	r1, r4, r3
 8012eaa:	1c5a      	adds	r2, r3, #1
 8012eac:	2030      	movs	r0, #48	; 0x30
 8012eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012eb2:	4422      	add	r2, r4
 8012eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ebc:	3302      	adds	r3, #2
 8012ebe:	e7c7      	b.n	8012e50 <_printf_common+0x58>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	4649      	mov	r1, r9
 8012ec6:	4638      	mov	r0, r7
 8012ec8:	47c0      	blx	r8
 8012eca:	3001      	adds	r0, #1
 8012ecc:	d0e6      	beq.n	8012e9c <_printf_common+0xa4>
 8012ece:	3601      	adds	r6, #1
 8012ed0:	e7d9      	b.n	8012e86 <_printf_common+0x8e>
	...

08012ed4 <_printf_i>:
 8012ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed8:	460c      	mov	r4, r1
 8012eda:	4691      	mov	r9, r2
 8012edc:	7e27      	ldrb	r7, [r4, #24]
 8012ede:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012ee0:	2f78      	cmp	r7, #120	; 0x78
 8012ee2:	4680      	mov	r8, r0
 8012ee4:	469a      	mov	sl, r3
 8012ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012eea:	d807      	bhi.n	8012efc <_printf_i+0x28>
 8012eec:	2f62      	cmp	r7, #98	; 0x62
 8012eee:	d80a      	bhi.n	8012f06 <_printf_i+0x32>
 8012ef0:	2f00      	cmp	r7, #0
 8012ef2:	f000 80d8 	beq.w	80130a6 <_printf_i+0x1d2>
 8012ef6:	2f58      	cmp	r7, #88	; 0x58
 8012ef8:	f000 80a3 	beq.w	8013042 <_printf_i+0x16e>
 8012efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f04:	e03a      	b.n	8012f7c <_printf_i+0xa8>
 8012f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f0a:	2b15      	cmp	r3, #21
 8012f0c:	d8f6      	bhi.n	8012efc <_printf_i+0x28>
 8012f0e:	a001      	add	r0, pc, #4	; (adr r0, 8012f14 <_printf_i+0x40>)
 8012f10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012f14:	08012f6d 	.word	0x08012f6d
 8012f18:	08012f81 	.word	0x08012f81
 8012f1c:	08012efd 	.word	0x08012efd
 8012f20:	08012efd 	.word	0x08012efd
 8012f24:	08012efd 	.word	0x08012efd
 8012f28:	08012efd 	.word	0x08012efd
 8012f2c:	08012f81 	.word	0x08012f81
 8012f30:	08012efd 	.word	0x08012efd
 8012f34:	08012efd 	.word	0x08012efd
 8012f38:	08012efd 	.word	0x08012efd
 8012f3c:	08012efd 	.word	0x08012efd
 8012f40:	0801308d 	.word	0x0801308d
 8012f44:	08012fb1 	.word	0x08012fb1
 8012f48:	0801306f 	.word	0x0801306f
 8012f4c:	08012efd 	.word	0x08012efd
 8012f50:	08012efd 	.word	0x08012efd
 8012f54:	080130af 	.word	0x080130af
 8012f58:	08012efd 	.word	0x08012efd
 8012f5c:	08012fb1 	.word	0x08012fb1
 8012f60:	08012efd 	.word	0x08012efd
 8012f64:	08012efd 	.word	0x08012efd
 8012f68:	08013077 	.word	0x08013077
 8012f6c:	680b      	ldr	r3, [r1, #0]
 8012f6e:	1d1a      	adds	r2, r3, #4
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	600a      	str	r2, [r1, #0]
 8012f74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	e0a3      	b.n	80130c8 <_printf_i+0x1f4>
 8012f80:	6825      	ldr	r5, [r4, #0]
 8012f82:	6808      	ldr	r0, [r1, #0]
 8012f84:	062e      	lsls	r6, r5, #24
 8012f86:	f100 0304 	add.w	r3, r0, #4
 8012f8a:	d50a      	bpl.n	8012fa2 <_printf_i+0xce>
 8012f8c:	6805      	ldr	r5, [r0, #0]
 8012f8e:	600b      	str	r3, [r1, #0]
 8012f90:	2d00      	cmp	r5, #0
 8012f92:	da03      	bge.n	8012f9c <_printf_i+0xc8>
 8012f94:	232d      	movs	r3, #45	; 0x2d
 8012f96:	426d      	negs	r5, r5
 8012f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f9c:	485e      	ldr	r0, [pc, #376]	; (8013118 <_printf_i+0x244>)
 8012f9e:	230a      	movs	r3, #10
 8012fa0:	e019      	b.n	8012fd6 <_printf_i+0x102>
 8012fa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012fa6:	6805      	ldr	r5, [r0, #0]
 8012fa8:	600b      	str	r3, [r1, #0]
 8012faa:	bf18      	it	ne
 8012fac:	b22d      	sxthne	r5, r5
 8012fae:	e7ef      	b.n	8012f90 <_printf_i+0xbc>
 8012fb0:	680b      	ldr	r3, [r1, #0]
 8012fb2:	6825      	ldr	r5, [r4, #0]
 8012fb4:	1d18      	adds	r0, r3, #4
 8012fb6:	6008      	str	r0, [r1, #0]
 8012fb8:	0628      	lsls	r0, r5, #24
 8012fba:	d501      	bpl.n	8012fc0 <_printf_i+0xec>
 8012fbc:	681d      	ldr	r5, [r3, #0]
 8012fbe:	e002      	b.n	8012fc6 <_printf_i+0xf2>
 8012fc0:	0669      	lsls	r1, r5, #25
 8012fc2:	d5fb      	bpl.n	8012fbc <_printf_i+0xe8>
 8012fc4:	881d      	ldrh	r5, [r3, #0]
 8012fc6:	4854      	ldr	r0, [pc, #336]	; (8013118 <_printf_i+0x244>)
 8012fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8012fca:	bf0c      	ite	eq
 8012fcc:	2308      	moveq	r3, #8
 8012fce:	230a      	movne	r3, #10
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fd6:	6866      	ldr	r6, [r4, #4]
 8012fd8:	60a6      	str	r6, [r4, #8]
 8012fda:	2e00      	cmp	r6, #0
 8012fdc:	bfa2      	ittt	ge
 8012fde:	6821      	ldrge	r1, [r4, #0]
 8012fe0:	f021 0104 	bicge.w	r1, r1, #4
 8012fe4:	6021      	strge	r1, [r4, #0]
 8012fe6:	b90d      	cbnz	r5, 8012fec <_printf_i+0x118>
 8012fe8:	2e00      	cmp	r6, #0
 8012fea:	d04d      	beq.n	8013088 <_printf_i+0x1b4>
 8012fec:	4616      	mov	r6, r2
 8012fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8012ff6:	5dc7      	ldrb	r7, [r0, r7]
 8012ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ffc:	462f      	mov	r7, r5
 8012ffe:	42bb      	cmp	r3, r7
 8013000:	460d      	mov	r5, r1
 8013002:	d9f4      	bls.n	8012fee <_printf_i+0x11a>
 8013004:	2b08      	cmp	r3, #8
 8013006:	d10b      	bne.n	8013020 <_printf_i+0x14c>
 8013008:	6823      	ldr	r3, [r4, #0]
 801300a:	07df      	lsls	r7, r3, #31
 801300c:	d508      	bpl.n	8013020 <_printf_i+0x14c>
 801300e:	6923      	ldr	r3, [r4, #16]
 8013010:	6861      	ldr	r1, [r4, #4]
 8013012:	4299      	cmp	r1, r3
 8013014:	bfde      	ittt	le
 8013016:	2330      	movle	r3, #48	; 0x30
 8013018:	f806 3c01 	strble.w	r3, [r6, #-1]
 801301c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013020:	1b92      	subs	r2, r2, r6
 8013022:	6122      	str	r2, [r4, #16]
 8013024:	f8cd a000 	str.w	sl, [sp]
 8013028:	464b      	mov	r3, r9
 801302a:	aa03      	add	r2, sp, #12
 801302c:	4621      	mov	r1, r4
 801302e:	4640      	mov	r0, r8
 8013030:	f7ff fee2 	bl	8012df8 <_printf_common>
 8013034:	3001      	adds	r0, #1
 8013036:	d14c      	bne.n	80130d2 <_printf_i+0x1fe>
 8013038:	f04f 30ff 	mov.w	r0, #4294967295
 801303c:	b004      	add	sp, #16
 801303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013042:	4835      	ldr	r0, [pc, #212]	; (8013118 <_printf_i+0x244>)
 8013044:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013048:	6823      	ldr	r3, [r4, #0]
 801304a:	680e      	ldr	r6, [r1, #0]
 801304c:	061f      	lsls	r7, r3, #24
 801304e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013052:	600e      	str	r6, [r1, #0]
 8013054:	d514      	bpl.n	8013080 <_printf_i+0x1ac>
 8013056:	07d9      	lsls	r1, r3, #31
 8013058:	bf44      	itt	mi
 801305a:	f043 0320 	orrmi.w	r3, r3, #32
 801305e:	6023      	strmi	r3, [r4, #0]
 8013060:	b91d      	cbnz	r5, 801306a <_printf_i+0x196>
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	f023 0320 	bic.w	r3, r3, #32
 8013068:	6023      	str	r3, [r4, #0]
 801306a:	2310      	movs	r3, #16
 801306c:	e7b0      	b.n	8012fd0 <_printf_i+0xfc>
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	f043 0320 	orr.w	r3, r3, #32
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	2378      	movs	r3, #120	; 0x78
 8013078:	4828      	ldr	r0, [pc, #160]	; (801311c <_printf_i+0x248>)
 801307a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801307e:	e7e3      	b.n	8013048 <_printf_i+0x174>
 8013080:	065e      	lsls	r6, r3, #25
 8013082:	bf48      	it	mi
 8013084:	b2ad      	uxthmi	r5, r5
 8013086:	e7e6      	b.n	8013056 <_printf_i+0x182>
 8013088:	4616      	mov	r6, r2
 801308a:	e7bb      	b.n	8013004 <_printf_i+0x130>
 801308c:	680b      	ldr	r3, [r1, #0]
 801308e:	6826      	ldr	r6, [r4, #0]
 8013090:	6960      	ldr	r0, [r4, #20]
 8013092:	1d1d      	adds	r5, r3, #4
 8013094:	600d      	str	r5, [r1, #0]
 8013096:	0635      	lsls	r5, r6, #24
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	d501      	bpl.n	80130a0 <_printf_i+0x1cc>
 801309c:	6018      	str	r0, [r3, #0]
 801309e:	e002      	b.n	80130a6 <_printf_i+0x1d2>
 80130a0:	0671      	lsls	r1, r6, #25
 80130a2:	d5fb      	bpl.n	801309c <_printf_i+0x1c8>
 80130a4:	8018      	strh	r0, [r3, #0]
 80130a6:	2300      	movs	r3, #0
 80130a8:	6123      	str	r3, [r4, #16]
 80130aa:	4616      	mov	r6, r2
 80130ac:	e7ba      	b.n	8013024 <_printf_i+0x150>
 80130ae:	680b      	ldr	r3, [r1, #0]
 80130b0:	1d1a      	adds	r2, r3, #4
 80130b2:	600a      	str	r2, [r1, #0]
 80130b4:	681e      	ldr	r6, [r3, #0]
 80130b6:	6862      	ldr	r2, [r4, #4]
 80130b8:	2100      	movs	r1, #0
 80130ba:	4630      	mov	r0, r6
 80130bc:	f7ed f8a8 	bl	8000210 <memchr>
 80130c0:	b108      	cbz	r0, 80130c6 <_printf_i+0x1f2>
 80130c2:	1b80      	subs	r0, r0, r6
 80130c4:	6060      	str	r0, [r4, #4]
 80130c6:	6863      	ldr	r3, [r4, #4]
 80130c8:	6123      	str	r3, [r4, #16]
 80130ca:	2300      	movs	r3, #0
 80130cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130d0:	e7a8      	b.n	8013024 <_printf_i+0x150>
 80130d2:	6923      	ldr	r3, [r4, #16]
 80130d4:	4632      	mov	r2, r6
 80130d6:	4649      	mov	r1, r9
 80130d8:	4640      	mov	r0, r8
 80130da:	47d0      	blx	sl
 80130dc:	3001      	adds	r0, #1
 80130de:	d0ab      	beq.n	8013038 <_printf_i+0x164>
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	079b      	lsls	r3, r3, #30
 80130e4:	d413      	bmi.n	801310e <_printf_i+0x23a>
 80130e6:	68e0      	ldr	r0, [r4, #12]
 80130e8:	9b03      	ldr	r3, [sp, #12]
 80130ea:	4298      	cmp	r0, r3
 80130ec:	bfb8      	it	lt
 80130ee:	4618      	movlt	r0, r3
 80130f0:	e7a4      	b.n	801303c <_printf_i+0x168>
 80130f2:	2301      	movs	r3, #1
 80130f4:	4632      	mov	r2, r6
 80130f6:	4649      	mov	r1, r9
 80130f8:	4640      	mov	r0, r8
 80130fa:	47d0      	blx	sl
 80130fc:	3001      	adds	r0, #1
 80130fe:	d09b      	beq.n	8013038 <_printf_i+0x164>
 8013100:	3501      	adds	r5, #1
 8013102:	68e3      	ldr	r3, [r4, #12]
 8013104:	9903      	ldr	r1, [sp, #12]
 8013106:	1a5b      	subs	r3, r3, r1
 8013108:	42ab      	cmp	r3, r5
 801310a:	dcf2      	bgt.n	80130f2 <_printf_i+0x21e>
 801310c:	e7eb      	b.n	80130e6 <_printf_i+0x212>
 801310e:	2500      	movs	r5, #0
 8013110:	f104 0619 	add.w	r6, r4, #25
 8013114:	e7f5      	b.n	8013102 <_printf_i+0x22e>
 8013116:	bf00      	nop
 8013118:	0801e70a 	.word	0x0801e70a
 801311c:	0801e71b 	.word	0x0801e71b

08013120 <iprintf>:
 8013120:	b40f      	push	{r0, r1, r2, r3}
 8013122:	4b0a      	ldr	r3, [pc, #40]	; (801314c <iprintf+0x2c>)
 8013124:	b513      	push	{r0, r1, r4, lr}
 8013126:	681c      	ldr	r4, [r3, #0]
 8013128:	b124      	cbz	r4, 8013134 <iprintf+0x14>
 801312a:	69a3      	ldr	r3, [r4, #24]
 801312c:	b913      	cbnz	r3, 8013134 <iprintf+0x14>
 801312e:	4620      	mov	r0, r4
 8013130:	f001 f964 	bl	80143fc <__sinit>
 8013134:	ab05      	add	r3, sp, #20
 8013136:	9a04      	ldr	r2, [sp, #16]
 8013138:	68a1      	ldr	r1, [r4, #8]
 801313a:	9301      	str	r3, [sp, #4]
 801313c:	4620      	mov	r0, r4
 801313e:	f001 ff85 	bl	801504c <_vfiprintf_r>
 8013142:	b002      	add	sp, #8
 8013144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013148:	b004      	add	sp, #16
 801314a:	4770      	bx	lr
 801314c:	20000190 	.word	0x20000190

08013150 <_puts_r>:
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	460e      	mov	r6, r1
 8013154:	4605      	mov	r5, r0
 8013156:	b118      	cbz	r0, 8013160 <_puts_r+0x10>
 8013158:	6983      	ldr	r3, [r0, #24]
 801315a:	b90b      	cbnz	r3, 8013160 <_puts_r+0x10>
 801315c:	f001 f94e 	bl	80143fc <__sinit>
 8013160:	69ab      	ldr	r3, [r5, #24]
 8013162:	68ac      	ldr	r4, [r5, #8]
 8013164:	b913      	cbnz	r3, 801316c <_puts_r+0x1c>
 8013166:	4628      	mov	r0, r5
 8013168:	f001 f948 	bl	80143fc <__sinit>
 801316c:	4b2c      	ldr	r3, [pc, #176]	; (8013220 <_puts_r+0xd0>)
 801316e:	429c      	cmp	r4, r3
 8013170:	d120      	bne.n	80131b4 <_puts_r+0x64>
 8013172:	686c      	ldr	r4, [r5, #4]
 8013174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013176:	07db      	lsls	r3, r3, #31
 8013178:	d405      	bmi.n	8013186 <_puts_r+0x36>
 801317a:	89a3      	ldrh	r3, [r4, #12]
 801317c:	0598      	lsls	r0, r3, #22
 801317e:	d402      	bmi.n	8013186 <_puts_r+0x36>
 8013180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013182:	f001 f9de 	bl	8014542 <__retarget_lock_acquire_recursive>
 8013186:	89a3      	ldrh	r3, [r4, #12]
 8013188:	0719      	lsls	r1, r3, #28
 801318a:	d51d      	bpl.n	80131c8 <_puts_r+0x78>
 801318c:	6923      	ldr	r3, [r4, #16]
 801318e:	b1db      	cbz	r3, 80131c8 <_puts_r+0x78>
 8013190:	3e01      	subs	r6, #1
 8013192:	68a3      	ldr	r3, [r4, #8]
 8013194:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013198:	3b01      	subs	r3, #1
 801319a:	60a3      	str	r3, [r4, #8]
 801319c:	bb39      	cbnz	r1, 80131ee <_puts_r+0x9e>
 801319e:	2b00      	cmp	r3, #0
 80131a0:	da38      	bge.n	8013214 <_puts_r+0xc4>
 80131a2:	4622      	mov	r2, r4
 80131a4:	210a      	movs	r1, #10
 80131a6:	4628      	mov	r0, r5
 80131a8:	f000 f8d6 	bl	8013358 <__swbuf_r>
 80131ac:	3001      	adds	r0, #1
 80131ae:	d011      	beq.n	80131d4 <_puts_r+0x84>
 80131b0:	250a      	movs	r5, #10
 80131b2:	e011      	b.n	80131d8 <_puts_r+0x88>
 80131b4:	4b1b      	ldr	r3, [pc, #108]	; (8013224 <_puts_r+0xd4>)
 80131b6:	429c      	cmp	r4, r3
 80131b8:	d101      	bne.n	80131be <_puts_r+0x6e>
 80131ba:	68ac      	ldr	r4, [r5, #8]
 80131bc:	e7da      	b.n	8013174 <_puts_r+0x24>
 80131be:	4b1a      	ldr	r3, [pc, #104]	; (8013228 <_puts_r+0xd8>)
 80131c0:	429c      	cmp	r4, r3
 80131c2:	bf08      	it	eq
 80131c4:	68ec      	ldreq	r4, [r5, #12]
 80131c6:	e7d5      	b.n	8013174 <_puts_r+0x24>
 80131c8:	4621      	mov	r1, r4
 80131ca:	4628      	mov	r0, r5
 80131cc:	f000 f916 	bl	80133fc <__swsetup_r>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d0dd      	beq.n	8013190 <_puts_r+0x40>
 80131d4:	f04f 35ff 	mov.w	r5, #4294967295
 80131d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131da:	07da      	lsls	r2, r3, #31
 80131dc:	d405      	bmi.n	80131ea <_puts_r+0x9a>
 80131de:	89a3      	ldrh	r3, [r4, #12]
 80131e0:	059b      	lsls	r3, r3, #22
 80131e2:	d402      	bmi.n	80131ea <_puts_r+0x9a>
 80131e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131e6:	f001 f9ad 	bl	8014544 <__retarget_lock_release_recursive>
 80131ea:	4628      	mov	r0, r5
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	da04      	bge.n	80131fc <_puts_r+0xac>
 80131f2:	69a2      	ldr	r2, [r4, #24]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	dc06      	bgt.n	8013206 <_puts_r+0xb6>
 80131f8:	290a      	cmp	r1, #10
 80131fa:	d004      	beq.n	8013206 <_puts_r+0xb6>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	1c5a      	adds	r2, r3, #1
 8013200:	6022      	str	r2, [r4, #0]
 8013202:	7019      	strb	r1, [r3, #0]
 8013204:	e7c5      	b.n	8013192 <_puts_r+0x42>
 8013206:	4622      	mov	r2, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f000 f8a5 	bl	8013358 <__swbuf_r>
 801320e:	3001      	adds	r0, #1
 8013210:	d1bf      	bne.n	8013192 <_puts_r+0x42>
 8013212:	e7df      	b.n	80131d4 <_puts_r+0x84>
 8013214:	6823      	ldr	r3, [r4, #0]
 8013216:	250a      	movs	r5, #10
 8013218:	1c5a      	adds	r2, r3, #1
 801321a:	6022      	str	r2, [r4, #0]
 801321c:	701d      	strb	r5, [r3, #0]
 801321e:	e7db      	b.n	80131d8 <_puts_r+0x88>
 8013220:	0801e7e0 	.word	0x0801e7e0
 8013224:	0801e800 	.word	0x0801e800
 8013228:	0801e7c0 	.word	0x0801e7c0

0801322c <puts>:
 801322c:	4b02      	ldr	r3, [pc, #8]	; (8013238 <puts+0xc>)
 801322e:	4601      	mov	r1, r0
 8013230:	6818      	ldr	r0, [r3, #0]
 8013232:	f7ff bf8d 	b.w	8013150 <_puts_r>
 8013236:	bf00      	nop
 8013238:	20000190 	.word	0x20000190

0801323c <_sbrk_r>:
 801323c:	b538      	push	{r3, r4, r5, lr}
 801323e:	4d06      	ldr	r5, [pc, #24]	; (8013258 <_sbrk_r+0x1c>)
 8013240:	2300      	movs	r3, #0
 8013242:	4604      	mov	r4, r0
 8013244:	4608      	mov	r0, r1
 8013246:	602b      	str	r3, [r5, #0]
 8013248:	f7f4 f8e6 	bl	8007418 <_sbrk>
 801324c:	1c43      	adds	r3, r0, #1
 801324e:	d102      	bne.n	8013256 <_sbrk_r+0x1a>
 8013250:	682b      	ldr	r3, [r5, #0]
 8013252:	b103      	cbz	r3, 8013256 <_sbrk_r+0x1a>
 8013254:	6023      	str	r3, [r4, #0]
 8013256:	bd38      	pop	{r3, r4, r5, pc}
 8013258:	2000252c 	.word	0x2000252c

0801325c <_raise_r>:
 801325c:	291f      	cmp	r1, #31
 801325e:	b538      	push	{r3, r4, r5, lr}
 8013260:	4604      	mov	r4, r0
 8013262:	460d      	mov	r5, r1
 8013264:	d904      	bls.n	8013270 <_raise_r+0x14>
 8013266:	2316      	movs	r3, #22
 8013268:	6003      	str	r3, [r0, #0]
 801326a:	f04f 30ff 	mov.w	r0, #4294967295
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013272:	b112      	cbz	r2, 801327a <_raise_r+0x1e>
 8013274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013278:	b94b      	cbnz	r3, 801328e <_raise_r+0x32>
 801327a:	4620      	mov	r0, r4
 801327c:	f000 f830 	bl	80132e0 <_getpid_r>
 8013280:	462a      	mov	r2, r5
 8013282:	4601      	mov	r1, r0
 8013284:	4620      	mov	r0, r4
 8013286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801328a:	f000 b817 	b.w	80132bc <_kill_r>
 801328e:	2b01      	cmp	r3, #1
 8013290:	d00a      	beq.n	80132a8 <_raise_r+0x4c>
 8013292:	1c59      	adds	r1, r3, #1
 8013294:	d103      	bne.n	801329e <_raise_r+0x42>
 8013296:	2316      	movs	r3, #22
 8013298:	6003      	str	r3, [r0, #0]
 801329a:	2001      	movs	r0, #1
 801329c:	e7e7      	b.n	801326e <_raise_r+0x12>
 801329e:	2400      	movs	r4, #0
 80132a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80132a4:	4628      	mov	r0, r5
 80132a6:	4798      	blx	r3
 80132a8:	2000      	movs	r0, #0
 80132aa:	e7e0      	b.n	801326e <_raise_r+0x12>

080132ac <raise>:
 80132ac:	4b02      	ldr	r3, [pc, #8]	; (80132b8 <raise+0xc>)
 80132ae:	4601      	mov	r1, r0
 80132b0:	6818      	ldr	r0, [r3, #0]
 80132b2:	f7ff bfd3 	b.w	801325c <_raise_r>
 80132b6:	bf00      	nop
 80132b8:	20000190 	.word	0x20000190

080132bc <_kill_r>:
 80132bc:	b538      	push	{r3, r4, r5, lr}
 80132be:	4d07      	ldr	r5, [pc, #28]	; (80132dc <_kill_r+0x20>)
 80132c0:	2300      	movs	r3, #0
 80132c2:	4604      	mov	r4, r0
 80132c4:	4608      	mov	r0, r1
 80132c6:	4611      	mov	r1, r2
 80132c8:	602b      	str	r3, [r5, #0]
 80132ca:	f7f4 f839 	bl	8007340 <_kill>
 80132ce:	1c43      	adds	r3, r0, #1
 80132d0:	d102      	bne.n	80132d8 <_kill_r+0x1c>
 80132d2:	682b      	ldr	r3, [r5, #0]
 80132d4:	b103      	cbz	r3, 80132d8 <_kill_r+0x1c>
 80132d6:	6023      	str	r3, [r4, #0]
 80132d8:	bd38      	pop	{r3, r4, r5, pc}
 80132da:	bf00      	nop
 80132dc:	2000252c 	.word	0x2000252c

080132e0 <_getpid_r>:
 80132e0:	f7f4 b826 	b.w	8007330 <_getpid>

080132e4 <_vsniprintf_r>:
 80132e4:	b530      	push	{r4, r5, lr}
 80132e6:	1e14      	subs	r4, r2, #0
 80132e8:	4605      	mov	r5, r0
 80132ea:	b09b      	sub	sp, #108	; 0x6c
 80132ec:	4618      	mov	r0, r3
 80132ee:	da05      	bge.n	80132fc <_vsniprintf_r+0x18>
 80132f0:	238b      	movs	r3, #139	; 0x8b
 80132f2:	602b      	str	r3, [r5, #0]
 80132f4:	f04f 30ff 	mov.w	r0, #4294967295
 80132f8:	b01b      	add	sp, #108	; 0x6c
 80132fa:	bd30      	pop	{r4, r5, pc}
 80132fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013300:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013304:	bf14      	ite	ne
 8013306:	f104 33ff 	addne.w	r3, r4, #4294967295
 801330a:	4623      	moveq	r3, r4
 801330c:	9302      	str	r3, [sp, #8]
 801330e:	9305      	str	r3, [sp, #20]
 8013310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013314:	9100      	str	r1, [sp, #0]
 8013316:	9104      	str	r1, [sp, #16]
 8013318:	f8ad 300e 	strh.w	r3, [sp, #14]
 801331c:	4602      	mov	r2, r0
 801331e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013320:	4669      	mov	r1, sp
 8013322:	4628      	mov	r0, r5
 8013324:	f001 fd68 	bl	8014df8 <_svfiprintf_r>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	bfbc      	itt	lt
 801332c:	238b      	movlt	r3, #139	; 0x8b
 801332e:	602b      	strlt	r3, [r5, #0]
 8013330:	2c00      	cmp	r4, #0
 8013332:	d0e1      	beq.n	80132f8 <_vsniprintf_r+0x14>
 8013334:	9b00      	ldr	r3, [sp, #0]
 8013336:	2200      	movs	r2, #0
 8013338:	701a      	strb	r2, [r3, #0]
 801333a:	e7dd      	b.n	80132f8 <_vsniprintf_r+0x14>

0801333c <vsniprintf>:
 801333c:	b507      	push	{r0, r1, r2, lr}
 801333e:	9300      	str	r3, [sp, #0]
 8013340:	4613      	mov	r3, r2
 8013342:	460a      	mov	r2, r1
 8013344:	4601      	mov	r1, r0
 8013346:	4803      	ldr	r0, [pc, #12]	; (8013354 <vsniprintf+0x18>)
 8013348:	6800      	ldr	r0, [r0, #0]
 801334a:	f7ff ffcb 	bl	80132e4 <_vsniprintf_r>
 801334e:	b003      	add	sp, #12
 8013350:	f85d fb04 	ldr.w	pc, [sp], #4
 8013354:	20000190 	.word	0x20000190

08013358 <__swbuf_r>:
 8013358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335a:	460e      	mov	r6, r1
 801335c:	4614      	mov	r4, r2
 801335e:	4605      	mov	r5, r0
 8013360:	b118      	cbz	r0, 801336a <__swbuf_r+0x12>
 8013362:	6983      	ldr	r3, [r0, #24]
 8013364:	b90b      	cbnz	r3, 801336a <__swbuf_r+0x12>
 8013366:	f001 f849 	bl	80143fc <__sinit>
 801336a:	4b21      	ldr	r3, [pc, #132]	; (80133f0 <__swbuf_r+0x98>)
 801336c:	429c      	cmp	r4, r3
 801336e:	d12b      	bne.n	80133c8 <__swbuf_r+0x70>
 8013370:	686c      	ldr	r4, [r5, #4]
 8013372:	69a3      	ldr	r3, [r4, #24]
 8013374:	60a3      	str	r3, [r4, #8]
 8013376:	89a3      	ldrh	r3, [r4, #12]
 8013378:	071a      	lsls	r2, r3, #28
 801337a:	d52f      	bpl.n	80133dc <__swbuf_r+0x84>
 801337c:	6923      	ldr	r3, [r4, #16]
 801337e:	b36b      	cbz	r3, 80133dc <__swbuf_r+0x84>
 8013380:	6923      	ldr	r3, [r4, #16]
 8013382:	6820      	ldr	r0, [r4, #0]
 8013384:	1ac0      	subs	r0, r0, r3
 8013386:	6963      	ldr	r3, [r4, #20]
 8013388:	b2f6      	uxtb	r6, r6
 801338a:	4283      	cmp	r3, r0
 801338c:	4637      	mov	r7, r6
 801338e:	dc04      	bgt.n	801339a <__swbuf_r+0x42>
 8013390:	4621      	mov	r1, r4
 8013392:	4628      	mov	r0, r5
 8013394:	f000 ff9e 	bl	80142d4 <_fflush_r>
 8013398:	bb30      	cbnz	r0, 80133e8 <__swbuf_r+0x90>
 801339a:	68a3      	ldr	r3, [r4, #8]
 801339c:	3b01      	subs	r3, #1
 801339e:	60a3      	str	r3, [r4, #8]
 80133a0:	6823      	ldr	r3, [r4, #0]
 80133a2:	1c5a      	adds	r2, r3, #1
 80133a4:	6022      	str	r2, [r4, #0]
 80133a6:	701e      	strb	r6, [r3, #0]
 80133a8:	6963      	ldr	r3, [r4, #20]
 80133aa:	3001      	adds	r0, #1
 80133ac:	4283      	cmp	r3, r0
 80133ae:	d004      	beq.n	80133ba <__swbuf_r+0x62>
 80133b0:	89a3      	ldrh	r3, [r4, #12]
 80133b2:	07db      	lsls	r3, r3, #31
 80133b4:	d506      	bpl.n	80133c4 <__swbuf_r+0x6c>
 80133b6:	2e0a      	cmp	r6, #10
 80133b8:	d104      	bne.n	80133c4 <__swbuf_r+0x6c>
 80133ba:	4621      	mov	r1, r4
 80133bc:	4628      	mov	r0, r5
 80133be:	f000 ff89 	bl	80142d4 <_fflush_r>
 80133c2:	b988      	cbnz	r0, 80133e8 <__swbuf_r+0x90>
 80133c4:	4638      	mov	r0, r7
 80133c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133c8:	4b0a      	ldr	r3, [pc, #40]	; (80133f4 <__swbuf_r+0x9c>)
 80133ca:	429c      	cmp	r4, r3
 80133cc:	d101      	bne.n	80133d2 <__swbuf_r+0x7a>
 80133ce:	68ac      	ldr	r4, [r5, #8]
 80133d0:	e7cf      	b.n	8013372 <__swbuf_r+0x1a>
 80133d2:	4b09      	ldr	r3, [pc, #36]	; (80133f8 <__swbuf_r+0xa0>)
 80133d4:	429c      	cmp	r4, r3
 80133d6:	bf08      	it	eq
 80133d8:	68ec      	ldreq	r4, [r5, #12]
 80133da:	e7ca      	b.n	8013372 <__swbuf_r+0x1a>
 80133dc:	4621      	mov	r1, r4
 80133de:	4628      	mov	r0, r5
 80133e0:	f000 f80c 	bl	80133fc <__swsetup_r>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	d0cb      	beq.n	8013380 <__swbuf_r+0x28>
 80133e8:	f04f 37ff 	mov.w	r7, #4294967295
 80133ec:	e7ea      	b.n	80133c4 <__swbuf_r+0x6c>
 80133ee:	bf00      	nop
 80133f0:	0801e7e0 	.word	0x0801e7e0
 80133f4:	0801e800 	.word	0x0801e800
 80133f8:	0801e7c0 	.word	0x0801e7c0

080133fc <__swsetup_r>:
 80133fc:	4b32      	ldr	r3, [pc, #200]	; (80134c8 <__swsetup_r+0xcc>)
 80133fe:	b570      	push	{r4, r5, r6, lr}
 8013400:	681d      	ldr	r5, [r3, #0]
 8013402:	4606      	mov	r6, r0
 8013404:	460c      	mov	r4, r1
 8013406:	b125      	cbz	r5, 8013412 <__swsetup_r+0x16>
 8013408:	69ab      	ldr	r3, [r5, #24]
 801340a:	b913      	cbnz	r3, 8013412 <__swsetup_r+0x16>
 801340c:	4628      	mov	r0, r5
 801340e:	f000 fff5 	bl	80143fc <__sinit>
 8013412:	4b2e      	ldr	r3, [pc, #184]	; (80134cc <__swsetup_r+0xd0>)
 8013414:	429c      	cmp	r4, r3
 8013416:	d10f      	bne.n	8013438 <__swsetup_r+0x3c>
 8013418:	686c      	ldr	r4, [r5, #4]
 801341a:	89a3      	ldrh	r3, [r4, #12]
 801341c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013420:	0719      	lsls	r1, r3, #28
 8013422:	d42c      	bmi.n	801347e <__swsetup_r+0x82>
 8013424:	06dd      	lsls	r5, r3, #27
 8013426:	d411      	bmi.n	801344c <__swsetup_r+0x50>
 8013428:	2309      	movs	r3, #9
 801342a:	6033      	str	r3, [r6, #0]
 801342c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013430:	81a3      	strh	r3, [r4, #12]
 8013432:	f04f 30ff 	mov.w	r0, #4294967295
 8013436:	e03e      	b.n	80134b6 <__swsetup_r+0xba>
 8013438:	4b25      	ldr	r3, [pc, #148]	; (80134d0 <__swsetup_r+0xd4>)
 801343a:	429c      	cmp	r4, r3
 801343c:	d101      	bne.n	8013442 <__swsetup_r+0x46>
 801343e:	68ac      	ldr	r4, [r5, #8]
 8013440:	e7eb      	b.n	801341a <__swsetup_r+0x1e>
 8013442:	4b24      	ldr	r3, [pc, #144]	; (80134d4 <__swsetup_r+0xd8>)
 8013444:	429c      	cmp	r4, r3
 8013446:	bf08      	it	eq
 8013448:	68ec      	ldreq	r4, [r5, #12]
 801344a:	e7e6      	b.n	801341a <__swsetup_r+0x1e>
 801344c:	0758      	lsls	r0, r3, #29
 801344e:	d512      	bpl.n	8013476 <__swsetup_r+0x7a>
 8013450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013452:	b141      	cbz	r1, 8013466 <__swsetup_r+0x6a>
 8013454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013458:	4299      	cmp	r1, r3
 801345a:	d002      	beq.n	8013462 <__swsetup_r+0x66>
 801345c:	4630      	mov	r0, r6
 801345e:	f7ff f94b 	bl	80126f8 <_free_r>
 8013462:	2300      	movs	r3, #0
 8013464:	6363      	str	r3, [r4, #52]	; 0x34
 8013466:	89a3      	ldrh	r3, [r4, #12]
 8013468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801346c:	81a3      	strh	r3, [r4, #12]
 801346e:	2300      	movs	r3, #0
 8013470:	6063      	str	r3, [r4, #4]
 8013472:	6923      	ldr	r3, [r4, #16]
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	89a3      	ldrh	r3, [r4, #12]
 8013478:	f043 0308 	orr.w	r3, r3, #8
 801347c:	81a3      	strh	r3, [r4, #12]
 801347e:	6923      	ldr	r3, [r4, #16]
 8013480:	b94b      	cbnz	r3, 8013496 <__swsetup_r+0x9a>
 8013482:	89a3      	ldrh	r3, [r4, #12]
 8013484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801348c:	d003      	beq.n	8013496 <__swsetup_r+0x9a>
 801348e:	4621      	mov	r1, r4
 8013490:	4630      	mov	r0, r6
 8013492:	f001 f87d 	bl	8014590 <__smakebuf_r>
 8013496:	89a0      	ldrh	r0, [r4, #12]
 8013498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801349c:	f010 0301 	ands.w	r3, r0, #1
 80134a0:	d00a      	beq.n	80134b8 <__swsetup_r+0xbc>
 80134a2:	2300      	movs	r3, #0
 80134a4:	60a3      	str	r3, [r4, #8]
 80134a6:	6963      	ldr	r3, [r4, #20]
 80134a8:	425b      	negs	r3, r3
 80134aa:	61a3      	str	r3, [r4, #24]
 80134ac:	6923      	ldr	r3, [r4, #16]
 80134ae:	b943      	cbnz	r3, 80134c2 <__swsetup_r+0xc6>
 80134b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134b4:	d1ba      	bne.n	801342c <__swsetup_r+0x30>
 80134b6:	bd70      	pop	{r4, r5, r6, pc}
 80134b8:	0781      	lsls	r1, r0, #30
 80134ba:	bf58      	it	pl
 80134bc:	6963      	ldrpl	r3, [r4, #20]
 80134be:	60a3      	str	r3, [r4, #8]
 80134c0:	e7f4      	b.n	80134ac <__swsetup_r+0xb0>
 80134c2:	2000      	movs	r0, #0
 80134c4:	e7f7      	b.n	80134b6 <__swsetup_r+0xba>
 80134c6:	bf00      	nop
 80134c8:	20000190 	.word	0x20000190
 80134cc:	0801e7e0 	.word	0x0801e7e0
 80134d0:	0801e800 	.word	0x0801e800
 80134d4:	0801e7c0 	.word	0x0801e7c0

080134d8 <quorem>:
 80134d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	6903      	ldr	r3, [r0, #16]
 80134de:	690c      	ldr	r4, [r1, #16]
 80134e0:	42a3      	cmp	r3, r4
 80134e2:	4607      	mov	r7, r0
 80134e4:	f2c0 8081 	blt.w	80135ea <quorem+0x112>
 80134e8:	3c01      	subs	r4, #1
 80134ea:	f101 0814 	add.w	r8, r1, #20
 80134ee:	f100 0514 	add.w	r5, r0, #20
 80134f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80134f6:	9301      	str	r3, [sp, #4]
 80134f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80134fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013500:	3301      	adds	r3, #1
 8013502:	429a      	cmp	r2, r3
 8013504:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801350c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013510:	d331      	bcc.n	8013576 <quorem+0x9e>
 8013512:	f04f 0e00 	mov.w	lr, #0
 8013516:	4640      	mov	r0, r8
 8013518:	46ac      	mov	ip, r5
 801351a:	46f2      	mov	sl, lr
 801351c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013520:	b293      	uxth	r3, r2
 8013522:	fb06 e303 	mla	r3, r6, r3, lr
 8013526:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801352a:	b29b      	uxth	r3, r3
 801352c:	ebaa 0303 	sub.w	r3, sl, r3
 8013530:	0c12      	lsrs	r2, r2, #16
 8013532:	f8dc a000 	ldr.w	sl, [ip]
 8013536:	fb06 e202 	mla	r2, r6, r2, lr
 801353a:	fa13 f38a 	uxtah	r3, r3, sl
 801353e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013542:	fa1f fa82 	uxth.w	sl, r2
 8013546:	f8dc 2000 	ldr.w	r2, [ip]
 801354a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801354e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013552:	b29b      	uxth	r3, r3
 8013554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013558:	4581      	cmp	r9, r0
 801355a:	f84c 3b04 	str.w	r3, [ip], #4
 801355e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013562:	d2db      	bcs.n	801351c <quorem+0x44>
 8013564:	f855 300b 	ldr.w	r3, [r5, fp]
 8013568:	b92b      	cbnz	r3, 8013576 <quorem+0x9e>
 801356a:	9b01      	ldr	r3, [sp, #4]
 801356c:	3b04      	subs	r3, #4
 801356e:	429d      	cmp	r5, r3
 8013570:	461a      	mov	r2, r3
 8013572:	d32e      	bcc.n	80135d2 <quorem+0xfa>
 8013574:	613c      	str	r4, [r7, #16]
 8013576:	4638      	mov	r0, r7
 8013578:	f001 fad4 	bl	8014b24 <__mcmp>
 801357c:	2800      	cmp	r0, #0
 801357e:	db24      	blt.n	80135ca <quorem+0xf2>
 8013580:	3601      	adds	r6, #1
 8013582:	4628      	mov	r0, r5
 8013584:	f04f 0c00 	mov.w	ip, #0
 8013588:	f858 2b04 	ldr.w	r2, [r8], #4
 801358c:	f8d0 e000 	ldr.w	lr, [r0]
 8013590:	b293      	uxth	r3, r2
 8013592:	ebac 0303 	sub.w	r3, ip, r3
 8013596:	0c12      	lsrs	r2, r2, #16
 8013598:	fa13 f38e 	uxtah	r3, r3, lr
 801359c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80135a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135aa:	45c1      	cmp	r9, r8
 80135ac:	f840 3b04 	str.w	r3, [r0], #4
 80135b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80135b4:	d2e8      	bcs.n	8013588 <quorem+0xb0>
 80135b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80135ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135be:	b922      	cbnz	r2, 80135ca <quorem+0xf2>
 80135c0:	3b04      	subs	r3, #4
 80135c2:	429d      	cmp	r5, r3
 80135c4:	461a      	mov	r2, r3
 80135c6:	d30a      	bcc.n	80135de <quorem+0x106>
 80135c8:	613c      	str	r4, [r7, #16]
 80135ca:	4630      	mov	r0, r6
 80135cc:	b003      	add	sp, #12
 80135ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d2:	6812      	ldr	r2, [r2, #0]
 80135d4:	3b04      	subs	r3, #4
 80135d6:	2a00      	cmp	r2, #0
 80135d8:	d1cc      	bne.n	8013574 <quorem+0x9c>
 80135da:	3c01      	subs	r4, #1
 80135dc:	e7c7      	b.n	801356e <quorem+0x96>
 80135de:	6812      	ldr	r2, [r2, #0]
 80135e0:	3b04      	subs	r3, #4
 80135e2:	2a00      	cmp	r2, #0
 80135e4:	d1f0      	bne.n	80135c8 <quorem+0xf0>
 80135e6:	3c01      	subs	r4, #1
 80135e8:	e7eb      	b.n	80135c2 <quorem+0xea>
 80135ea:	2000      	movs	r0, #0
 80135ec:	e7ee      	b.n	80135cc <quorem+0xf4>
	...

080135f0 <_dtoa_r>:
 80135f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f4:	ed2d 8b02 	vpush	{d8}
 80135f8:	ec57 6b10 	vmov	r6, r7, d0
 80135fc:	b095      	sub	sp, #84	; 0x54
 80135fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013600:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013604:	9105      	str	r1, [sp, #20]
 8013606:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801360a:	4604      	mov	r4, r0
 801360c:	9209      	str	r2, [sp, #36]	; 0x24
 801360e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013610:	b975      	cbnz	r5, 8013630 <_dtoa_r+0x40>
 8013612:	2010      	movs	r0, #16
 8013614:	f7ff f822 	bl	801265c <malloc>
 8013618:	4602      	mov	r2, r0
 801361a:	6260      	str	r0, [r4, #36]	; 0x24
 801361c:	b920      	cbnz	r0, 8013628 <_dtoa_r+0x38>
 801361e:	4bb2      	ldr	r3, [pc, #712]	; (80138e8 <_dtoa_r+0x2f8>)
 8013620:	21ea      	movs	r1, #234	; 0xea
 8013622:	48b2      	ldr	r0, [pc, #712]	; (80138ec <_dtoa_r+0x2fc>)
 8013624:	f001 fe98 	bl	8015358 <__assert_func>
 8013628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801362c:	6005      	str	r5, [r0, #0]
 801362e:	60c5      	str	r5, [r0, #12]
 8013630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013632:	6819      	ldr	r1, [r3, #0]
 8013634:	b151      	cbz	r1, 801364c <_dtoa_r+0x5c>
 8013636:	685a      	ldr	r2, [r3, #4]
 8013638:	604a      	str	r2, [r1, #4]
 801363a:	2301      	movs	r3, #1
 801363c:	4093      	lsls	r3, r2
 801363e:	608b      	str	r3, [r1, #8]
 8013640:	4620      	mov	r0, r4
 8013642:	f001 f831 	bl	80146a8 <_Bfree>
 8013646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013648:	2200      	movs	r2, #0
 801364a:	601a      	str	r2, [r3, #0]
 801364c:	1e3b      	subs	r3, r7, #0
 801364e:	bfb9      	ittee	lt
 8013650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013654:	9303      	strlt	r3, [sp, #12]
 8013656:	2300      	movge	r3, #0
 8013658:	f8c8 3000 	strge.w	r3, [r8]
 801365c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013660:	4ba3      	ldr	r3, [pc, #652]	; (80138f0 <_dtoa_r+0x300>)
 8013662:	bfbc      	itt	lt
 8013664:	2201      	movlt	r2, #1
 8013666:	f8c8 2000 	strlt.w	r2, [r8]
 801366a:	ea33 0309 	bics.w	r3, r3, r9
 801366e:	d11b      	bne.n	80136a8 <_dtoa_r+0xb8>
 8013670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013672:	f242 730f 	movw	r3, #9999	; 0x270f
 8013676:	6013      	str	r3, [r2, #0]
 8013678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801367c:	4333      	orrs	r3, r6
 801367e:	f000 857a 	beq.w	8014176 <_dtoa_r+0xb86>
 8013682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013684:	b963      	cbnz	r3, 80136a0 <_dtoa_r+0xb0>
 8013686:	4b9b      	ldr	r3, [pc, #620]	; (80138f4 <_dtoa_r+0x304>)
 8013688:	e024      	b.n	80136d4 <_dtoa_r+0xe4>
 801368a:	4b9b      	ldr	r3, [pc, #620]	; (80138f8 <_dtoa_r+0x308>)
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	3308      	adds	r3, #8
 8013690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013692:	6013      	str	r3, [r2, #0]
 8013694:	9800      	ldr	r0, [sp, #0]
 8013696:	b015      	add	sp, #84	; 0x54
 8013698:	ecbd 8b02 	vpop	{d8}
 801369c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a0:	4b94      	ldr	r3, [pc, #592]	; (80138f4 <_dtoa_r+0x304>)
 80136a2:	9300      	str	r3, [sp, #0]
 80136a4:	3303      	adds	r3, #3
 80136a6:	e7f3      	b.n	8013690 <_dtoa_r+0xa0>
 80136a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136ac:	2200      	movs	r2, #0
 80136ae:	ec51 0b17 	vmov	r0, r1, d7
 80136b2:	2300      	movs	r3, #0
 80136b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80136b8:	f7ed fa26 	bl	8000b08 <__aeabi_dcmpeq>
 80136bc:	4680      	mov	r8, r0
 80136be:	b158      	cbz	r0, 80136d8 <_dtoa_r+0xe8>
 80136c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136c2:	2301      	movs	r3, #1
 80136c4:	6013      	str	r3, [r2, #0]
 80136c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 8551 	beq.w	8014170 <_dtoa_r+0xb80>
 80136ce:	488b      	ldr	r0, [pc, #556]	; (80138fc <_dtoa_r+0x30c>)
 80136d0:	6018      	str	r0, [r3, #0]
 80136d2:	1e43      	subs	r3, r0, #1
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	e7dd      	b.n	8013694 <_dtoa_r+0xa4>
 80136d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80136dc:	aa12      	add	r2, sp, #72	; 0x48
 80136de:	a913      	add	r1, sp, #76	; 0x4c
 80136e0:	4620      	mov	r0, r4
 80136e2:	f001 fac3 	bl	8014c6c <__d2b>
 80136e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80136ea:	4683      	mov	fp, r0
 80136ec:	2d00      	cmp	r5, #0
 80136ee:	d07c      	beq.n	80137ea <_dtoa_r+0x1fa>
 80136f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80136f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80136fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801370a:	4b7d      	ldr	r3, [pc, #500]	; (8013900 <_dtoa_r+0x310>)
 801370c:	2200      	movs	r2, #0
 801370e:	4630      	mov	r0, r6
 8013710:	4639      	mov	r1, r7
 8013712:	f7ec fdd9 	bl	80002c8 <__aeabi_dsub>
 8013716:	a36e      	add	r3, pc, #440	; (adr r3, 80138d0 <_dtoa_r+0x2e0>)
 8013718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371c:	f7ec ff8c 	bl	8000638 <__aeabi_dmul>
 8013720:	a36d      	add	r3, pc, #436	; (adr r3, 80138d8 <_dtoa_r+0x2e8>)
 8013722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013726:	f7ec fdd1 	bl	80002cc <__adddf3>
 801372a:	4606      	mov	r6, r0
 801372c:	4628      	mov	r0, r5
 801372e:	460f      	mov	r7, r1
 8013730:	f7ec ff18 	bl	8000564 <__aeabi_i2d>
 8013734:	a36a      	add	r3, pc, #424	; (adr r3, 80138e0 <_dtoa_r+0x2f0>)
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	f7ec ff7d 	bl	8000638 <__aeabi_dmul>
 801373e:	4602      	mov	r2, r0
 8013740:	460b      	mov	r3, r1
 8013742:	4630      	mov	r0, r6
 8013744:	4639      	mov	r1, r7
 8013746:	f7ec fdc1 	bl	80002cc <__adddf3>
 801374a:	4606      	mov	r6, r0
 801374c:	460f      	mov	r7, r1
 801374e:	f7ed fa23 	bl	8000b98 <__aeabi_d2iz>
 8013752:	2200      	movs	r2, #0
 8013754:	4682      	mov	sl, r0
 8013756:	2300      	movs	r3, #0
 8013758:	4630      	mov	r0, r6
 801375a:	4639      	mov	r1, r7
 801375c:	f7ed f9de 	bl	8000b1c <__aeabi_dcmplt>
 8013760:	b148      	cbz	r0, 8013776 <_dtoa_r+0x186>
 8013762:	4650      	mov	r0, sl
 8013764:	f7ec fefe 	bl	8000564 <__aeabi_i2d>
 8013768:	4632      	mov	r2, r6
 801376a:	463b      	mov	r3, r7
 801376c:	f7ed f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8013770:	b908      	cbnz	r0, 8013776 <_dtoa_r+0x186>
 8013772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013776:	f1ba 0f16 	cmp.w	sl, #22
 801377a:	d854      	bhi.n	8013826 <_dtoa_r+0x236>
 801377c:	4b61      	ldr	r3, [pc, #388]	; (8013904 <_dtoa_r+0x314>)
 801377e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801378a:	f7ed f9c7 	bl	8000b1c <__aeabi_dcmplt>
 801378e:	2800      	cmp	r0, #0
 8013790:	d04b      	beq.n	801382a <_dtoa_r+0x23a>
 8013792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013796:	2300      	movs	r3, #0
 8013798:	930e      	str	r3, [sp, #56]	; 0x38
 801379a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801379c:	1b5d      	subs	r5, r3, r5
 801379e:	1e6b      	subs	r3, r5, #1
 80137a0:	9304      	str	r3, [sp, #16]
 80137a2:	bf43      	ittte	mi
 80137a4:	2300      	movmi	r3, #0
 80137a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80137aa:	9304      	strmi	r3, [sp, #16]
 80137ac:	f04f 0800 	movpl.w	r8, #0
 80137b0:	f1ba 0f00 	cmp.w	sl, #0
 80137b4:	db3b      	blt.n	801382e <_dtoa_r+0x23e>
 80137b6:	9b04      	ldr	r3, [sp, #16]
 80137b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80137bc:	4453      	add	r3, sl
 80137be:	9304      	str	r3, [sp, #16]
 80137c0:	2300      	movs	r3, #0
 80137c2:	9306      	str	r3, [sp, #24]
 80137c4:	9b05      	ldr	r3, [sp, #20]
 80137c6:	2b09      	cmp	r3, #9
 80137c8:	d869      	bhi.n	801389e <_dtoa_r+0x2ae>
 80137ca:	2b05      	cmp	r3, #5
 80137cc:	bfc4      	itt	gt
 80137ce:	3b04      	subgt	r3, #4
 80137d0:	9305      	strgt	r3, [sp, #20]
 80137d2:	9b05      	ldr	r3, [sp, #20]
 80137d4:	f1a3 0302 	sub.w	r3, r3, #2
 80137d8:	bfcc      	ite	gt
 80137da:	2500      	movgt	r5, #0
 80137dc:	2501      	movle	r5, #1
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d869      	bhi.n	80138b6 <_dtoa_r+0x2c6>
 80137e2:	e8df f003 	tbb	[pc, r3]
 80137e6:	4e2c      	.short	0x4e2c
 80137e8:	5a4c      	.short	0x5a4c
 80137ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80137ee:	441d      	add	r5, r3
 80137f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80137f4:	2b20      	cmp	r3, #32
 80137f6:	bfc1      	itttt	gt
 80137f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80137fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013800:	fa09 f303 	lslgt.w	r3, r9, r3
 8013804:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013808:	bfda      	itte	le
 801380a:	f1c3 0320 	rsble	r3, r3, #32
 801380e:	fa06 f003 	lslle.w	r0, r6, r3
 8013812:	4318      	orrgt	r0, r3
 8013814:	f7ec fe96 	bl	8000544 <__aeabi_ui2d>
 8013818:	2301      	movs	r3, #1
 801381a:	4606      	mov	r6, r0
 801381c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013820:	3d01      	subs	r5, #1
 8013822:	9310      	str	r3, [sp, #64]	; 0x40
 8013824:	e771      	b.n	801370a <_dtoa_r+0x11a>
 8013826:	2301      	movs	r3, #1
 8013828:	e7b6      	b.n	8013798 <_dtoa_r+0x1a8>
 801382a:	900e      	str	r0, [sp, #56]	; 0x38
 801382c:	e7b5      	b.n	801379a <_dtoa_r+0x1aa>
 801382e:	f1ca 0300 	rsb	r3, sl, #0
 8013832:	9306      	str	r3, [sp, #24]
 8013834:	2300      	movs	r3, #0
 8013836:	eba8 080a 	sub.w	r8, r8, sl
 801383a:	930d      	str	r3, [sp, #52]	; 0x34
 801383c:	e7c2      	b.n	80137c4 <_dtoa_r+0x1d4>
 801383e:	2300      	movs	r3, #0
 8013840:	9308      	str	r3, [sp, #32]
 8013842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013844:	2b00      	cmp	r3, #0
 8013846:	dc39      	bgt.n	80138bc <_dtoa_r+0x2cc>
 8013848:	f04f 0901 	mov.w	r9, #1
 801384c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013850:	464b      	mov	r3, r9
 8013852:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013856:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013858:	2200      	movs	r2, #0
 801385a:	6042      	str	r2, [r0, #4]
 801385c:	2204      	movs	r2, #4
 801385e:	f102 0614 	add.w	r6, r2, #20
 8013862:	429e      	cmp	r6, r3
 8013864:	6841      	ldr	r1, [r0, #4]
 8013866:	d92f      	bls.n	80138c8 <_dtoa_r+0x2d8>
 8013868:	4620      	mov	r0, r4
 801386a:	f000 fedd 	bl	8014628 <_Balloc>
 801386e:	9000      	str	r0, [sp, #0]
 8013870:	2800      	cmp	r0, #0
 8013872:	d14b      	bne.n	801390c <_dtoa_r+0x31c>
 8013874:	4b24      	ldr	r3, [pc, #144]	; (8013908 <_dtoa_r+0x318>)
 8013876:	4602      	mov	r2, r0
 8013878:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801387c:	e6d1      	b.n	8013622 <_dtoa_r+0x32>
 801387e:	2301      	movs	r3, #1
 8013880:	e7de      	b.n	8013840 <_dtoa_r+0x250>
 8013882:	2300      	movs	r3, #0
 8013884:	9308      	str	r3, [sp, #32]
 8013886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013888:	eb0a 0903 	add.w	r9, sl, r3
 801388c:	f109 0301 	add.w	r3, r9, #1
 8013890:	2b01      	cmp	r3, #1
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	bfb8      	it	lt
 8013896:	2301      	movlt	r3, #1
 8013898:	e7dd      	b.n	8013856 <_dtoa_r+0x266>
 801389a:	2301      	movs	r3, #1
 801389c:	e7f2      	b.n	8013884 <_dtoa_r+0x294>
 801389e:	2501      	movs	r5, #1
 80138a0:	2300      	movs	r3, #0
 80138a2:	9305      	str	r3, [sp, #20]
 80138a4:	9508      	str	r5, [sp, #32]
 80138a6:	f04f 39ff 	mov.w	r9, #4294967295
 80138aa:	2200      	movs	r2, #0
 80138ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80138b0:	2312      	movs	r3, #18
 80138b2:	9209      	str	r2, [sp, #36]	; 0x24
 80138b4:	e7cf      	b.n	8013856 <_dtoa_r+0x266>
 80138b6:	2301      	movs	r3, #1
 80138b8:	9308      	str	r3, [sp, #32]
 80138ba:	e7f4      	b.n	80138a6 <_dtoa_r+0x2b6>
 80138bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80138c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80138c4:	464b      	mov	r3, r9
 80138c6:	e7c6      	b.n	8013856 <_dtoa_r+0x266>
 80138c8:	3101      	adds	r1, #1
 80138ca:	6041      	str	r1, [r0, #4]
 80138cc:	0052      	lsls	r2, r2, #1
 80138ce:	e7c6      	b.n	801385e <_dtoa_r+0x26e>
 80138d0:	636f4361 	.word	0x636f4361
 80138d4:	3fd287a7 	.word	0x3fd287a7
 80138d8:	8b60c8b3 	.word	0x8b60c8b3
 80138dc:	3fc68a28 	.word	0x3fc68a28
 80138e0:	509f79fb 	.word	0x509f79fb
 80138e4:	3fd34413 	.word	0x3fd34413
 80138e8:	0801e739 	.word	0x0801e739
 80138ec:	0801e750 	.word	0x0801e750
 80138f0:	7ff00000 	.word	0x7ff00000
 80138f4:	0801e735 	.word	0x0801e735
 80138f8:	0801e72c 	.word	0x0801e72c
 80138fc:	0801e709 	.word	0x0801e709
 8013900:	3ff80000 	.word	0x3ff80000
 8013904:	0801e8a8 	.word	0x0801e8a8
 8013908:	0801e7af 	.word	0x0801e7af
 801390c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801390e:	9a00      	ldr	r2, [sp, #0]
 8013910:	601a      	str	r2, [r3, #0]
 8013912:	9b01      	ldr	r3, [sp, #4]
 8013914:	2b0e      	cmp	r3, #14
 8013916:	f200 80ad 	bhi.w	8013a74 <_dtoa_r+0x484>
 801391a:	2d00      	cmp	r5, #0
 801391c:	f000 80aa 	beq.w	8013a74 <_dtoa_r+0x484>
 8013920:	f1ba 0f00 	cmp.w	sl, #0
 8013924:	dd36      	ble.n	8013994 <_dtoa_r+0x3a4>
 8013926:	4ac3      	ldr	r2, [pc, #780]	; (8013c34 <_dtoa_r+0x644>)
 8013928:	f00a 030f 	and.w	r3, sl, #15
 801392c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013930:	ed93 7b00 	vldr	d7, [r3]
 8013934:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013938:	ea4f 172a 	mov.w	r7, sl, asr #4
 801393c:	eeb0 8a47 	vmov.f32	s16, s14
 8013940:	eef0 8a67 	vmov.f32	s17, s15
 8013944:	d016      	beq.n	8013974 <_dtoa_r+0x384>
 8013946:	4bbc      	ldr	r3, [pc, #752]	; (8013c38 <_dtoa_r+0x648>)
 8013948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801394c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013950:	f7ec ff9c 	bl	800088c <__aeabi_ddiv>
 8013954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013958:	f007 070f 	and.w	r7, r7, #15
 801395c:	2503      	movs	r5, #3
 801395e:	4eb6      	ldr	r6, [pc, #728]	; (8013c38 <_dtoa_r+0x648>)
 8013960:	b957      	cbnz	r7, 8013978 <_dtoa_r+0x388>
 8013962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013966:	ec53 2b18 	vmov	r2, r3, d8
 801396a:	f7ec ff8f 	bl	800088c <__aeabi_ddiv>
 801396e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013972:	e029      	b.n	80139c8 <_dtoa_r+0x3d8>
 8013974:	2502      	movs	r5, #2
 8013976:	e7f2      	b.n	801395e <_dtoa_r+0x36e>
 8013978:	07f9      	lsls	r1, r7, #31
 801397a:	d508      	bpl.n	801398e <_dtoa_r+0x39e>
 801397c:	ec51 0b18 	vmov	r0, r1, d8
 8013980:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013984:	f7ec fe58 	bl	8000638 <__aeabi_dmul>
 8013988:	ec41 0b18 	vmov	d8, r0, r1
 801398c:	3501      	adds	r5, #1
 801398e:	107f      	asrs	r7, r7, #1
 8013990:	3608      	adds	r6, #8
 8013992:	e7e5      	b.n	8013960 <_dtoa_r+0x370>
 8013994:	f000 80a6 	beq.w	8013ae4 <_dtoa_r+0x4f4>
 8013998:	f1ca 0600 	rsb	r6, sl, #0
 801399c:	4ba5      	ldr	r3, [pc, #660]	; (8013c34 <_dtoa_r+0x644>)
 801399e:	4fa6      	ldr	r7, [pc, #664]	; (8013c38 <_dtoa_r+0x648>)
 80139a0:	f006 020f 	and.w	r2, r6, #15
 80139a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139b0:	f7ec fe42 	bl	8000638 <__aeabi_dmul>
 80139b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139b8:	1136      	asrs	r6, r6, #4
 80139ba:	2300      	movs	r3, #0
 80139bc:	2502      	movs	r5, #2
 80139be:	2e00      	cmp	r6, #0
 80139c0:	f040 8085 	bne.w	8013ace <_dtoa_r+0x4de>
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d1d2      	bne.n	801396e <_dtoa_r+0x37e>
 80139c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f000 808c 	beq.w	8013ae8 <_dtoa_r+0x4f8>
 80139d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80139d4:	4b99      	ldr	r3, [pc, #612]	; (8013c3c <_dtoa_r+0x64c>)
 80139d6:	2200      	movs	r2, #0
 80139d8:	4630      	mov	r0, r6
 80139da:	4639      	mov	r1, r7
 80139dc:	f7ed f89e 	bl	8000b1c <__aeabi_dcmplt>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	f000 8081 	beq.w	8013ae8 <_dtoa_r+0x4f8>
 80139e6:	9b01      	ldr	r3, [sp, #4]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d07d      	beq.n	8013ae8 <_dtoa_r+0x4f8>
 80139ec:	f1b9 0f00 	cmp.w	r9, #0
 80139f0:	dd3c      	ble.n	8013a6c <_dtoa_r+0x47c>
 80139f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80139f6:	9307      	str	r3, [sp, #28]
 80139f8:	2200      	movs	r2, #0
 80139fa:	4b91      	ldr	r3, [pc, #580]	; (8013c40 <_dtoa_r+0x650>)
 80139fc:	4630      	mov	r0, r6
 80139fe:	4639      	mov	r1, r7
 8013a00:	f7ec fe1a 	bl	8000638 <__aeabi_dmul>
 8013a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a08:	3501      	adds	r5, #1
 8013a0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013a0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013a12:	4628      	mov	r0, r5
 8013a14:	f7ec fda6 	bl	8000564 <__aeabi_i2d>
 8013a18:	4632      	mov	r2, r6
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	f7ec fe0c 	bl	8000638 <__aeabi_dmul>
 8013a20:	4b88      	ldr	r3, [pc, #544]	; (8013c44 <_dtoa_r+0x654>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	f7ec fc52 	bl	80002cc <__adddf3>
 8013a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a30:	9303      	str	r3, [sp, #12]
 8013a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d15c      	bne.n	8013af2 <_dtoa_r+0x502>
 8013a38:	4b83      	ldr	r3, [pc, #524]	; (8013c48 <_dtoa_r+0x658>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	4639      	mov	r1, r7
 8013a40:	f7ec fc42 	bl	80002c8 <__aeabi_dsub>
 8013a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a48:	4606      	mov	r6, r0
 8013a4a:	460f      	mov	r7, r1
 8013a4c:	f7ed f884 	bl	8000b58 <__aeabi_dcmpgt>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f040 8296 	bne.w	8013f82 <_dtoa_r+0x992>
 8013a56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a60:	4639      	mov	r1, r7
 8013a62:	f7ed f85b 	bl	8000b1c <__aeabi_dcmplt>
 8013a66:	2800      	cmp	r0, #0
 8013a68:	f040 8288 	bne.w	8013f7c <_dtoa_r+0x98c>
 8013a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f2c0 8158 	blt.w	8013d2c <_dtoa_r+0x73c>
 8013a7c:	f1ba 0f0e 	cmp.w	sl, #14
 8013a80:	f300 8154 	bgt.w	8013d2c <_dtoa_r+0x73c>
 8013a84:	4b6b      	ldr	r3, [pc, #428]	; (8013c34 <_dtoa_r+0x644>)
 8013a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	f280 80e3 	bge.w	8013c5c <_dtoa_r+0x66c>
 8013a96:	9b01      	ldr	r3, [sp, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f300 80df 	bgt.w	8013c5c <_dtoa_r+0x66c>
 8013a9e:	f040 826d 	bne.w	8013f7c <_dtoa_r+0x98c>
 8013aa2:	4b69      	ldr	r3, [pc, #420]	; (8013c48 <_dtoa_r+0x658>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	4640      	mov	r0, r8
 8013aa8:	4649      	mov	r1, r9
 8013aaa:	f7ec fdc5 	bl	8000638 <__aeabi_dmul>
 8013aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ab2:	f7ed f847 	bl	8000b44 <__aeabi_dcmpge>
 8013ab6:	9e01      	ldr	r6, [sp, #4]
 8013ab8:	4637      	mov	r7, r6
 8013aba:	2800      	cmp	r0, #0
 8013abc:	f040 8243 	bne.w	8013f46 <_dtoa_r+0x956>
 8013ac0:	9d00      	ldr	r5, [sp, #0]
 8013ac2:	2331      	movs	r3, #49	; 0x31
 8013ac4:	f805 3b01 	strb.w	r3, [r5], #1
 8013ac8:	f10a 0a01 	add.w	sl, sl, #1
 8013acc:	e23f      	b.n	8013f4e <_dtoa_r+0x95e>
 8013ace:	07f2      	lsls	r2, r6, #31
 8013ad0:	d505      	bpl.n	8013ade <_dtoa_r+0x4ee>
 8013ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ad6:	f7ec fdaf 	bl	8000638 <__aeabi_dmul>
 8013ada:	3501      	adds	r5, #1
 8013adc:	2301      	movs	r3, #1
 8013ade:	1076      	asrs	r6, r6, #1
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	e76c      	b.n	80139be <_dtoa_r+0x3ce>
 8013ae4:	2502      	movs	r5, #2
 8013ae6:	e76f      	b.n	80139c8 <_dtoa_r+0x3d8>
 8013ae8:	9b01      	ldr	r3, [sp, #4]
 8013aea:	f8cd a01c 	str.w	sl, [sp, #28]
 8013aee:	930c      	str	r3, [sp, #48]	; 0x30
 8013af0:	e78d      	b.n	8013a0e <_dtoa_r+0x41e>
 8013af2:	9900      	ldr	r1, [sp, #0]
 8013af4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013af8:	4b4e      	ldr	r3, [pc, #312]	; (8013c34 <_dtoa_r+0x644>)
 8013afa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013afe:	4401      	add	r1, r0
 8013b00:	9102      	str	r1, [sp, #8]
 8013b02:	9908      	ldr	r1, [sp, #32]
 8013b04:	eeb0 8a47 	vmov.f32	s16, s14
 8013b08:	eef0 8a67 	vmov.f32	s17, s15
 8013b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b14:	2900      	cmp	r1, #0
 8013b16:	d045      	beq.n	8013ba4 <_dtoa_r+0x5b4>
 8013b18:	494c      	ldr	r1, [pc, #304]	; (8013c4c <_dtoa_r+0x65c>)
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	f7ec feb6 	bl	800088c <__aeabi_ddiv>
 8013b20:	ec53 2b18 	vmov	r2, r3, d8
 8013b24:	f7ec fbd0 	bl	80002c8 <__aeabi_dsub>
 8013b28:	9d00      	ldr	r5, [sp, #0]
 8013b2a:	ec41 0b18 	vmov	d8, r0, r1
 8013b2e:	4639      	mov	r1, r7
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7ed f831 	bl	8000b98 <__aeabi_d2iz>
 8013b36:	900c      	str	r0, [sp, #48]	; 0x30
 8013b38:	f7ec fd14 	bl	8000564 <__aeabi_i2d>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	460b      	mov	r3, r1
 8013b40:	4630      	mov	r0, r6
 8013b42:	4639      	mov	r1, r7
 8013b44:	f7ec fbc0 	bl	80002c8 <__aeabi_dsub>
 8013b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b4a:	3330      	adds	r3, #48	; 0x30
 8013b4c:	f805 3b01 	strb.w	r3, [r5], #1
 8013b50:	ec53 2b18 	vmov	r2, r3, d8
 8013b54:	4606      	mov	r6, r0
 8013b56:	460f      	mov	r7, r1
 8013b58:	f7ec ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	d165      	bne.n	8013c2c <_dtoa_r+0x63c>
 8013b60:	4632      	mov	r2, r6
 8013b62:	463b      	mov	r3, r7
 8013b64:	4935      	ldr	r1, [pc, #212]	; (8013c3c <_dtoa_r+0x64c>)
 8013b66:	2000      	movs	r0, #0
 8013b68:	f7ec fbae 	bl	80002c8 <__aeabi_dsub>
 8013b6c:	ec53 2b18 	vmov	r2, r3, d8
 8013b70:	f7ec ffd4 	bl	8000b1c <__aeabi_dcmplt>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	f040 80b9 	bne.w	8013cec <_dtoa_r+0x6fc>
 8013b7a:	9b02      	ldr	r3, [sp, #8]
 8013b7c:	429d      	cmp	r5, r3
 8013b7e:	f43f af75 	beq.w	8013a6c <_dtoa_r+0x47c>
 8013b82:	4b2f      	ldr	r3, [pc, #188]	; (8013c40 <_dtoa_r+0x650>)
 8013b84:	ec51 0b18 	vmov	r0, r1, d8
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f7ec fd55 	bl	8000638 <__aeabi_dmul>
 8013b8e:	4b2c      	ldr	r3, [pc, #176]	; (8013c40 <_dtoa_r+0x650>)
 8013b90:	ec41 0b18 	vmov	d8, r0, r1
 8013b94:	2200      	movs	r2, #0
 8013b96:	4630      	mov	r0, r6
 8013b98:	4639      	mov	r1, r7
 8013b9a:	f7ec fd4d 	bl	8000638 <__aeabi_dmul>
 8013b9e:	4606      	mov	r6, r0
 8013ba0:	460f      	mov	r7, r1
 8013ba2:	e7c4      	b.n	8013b2e <_dtoa_r+0x53e>
 8013ba4:	ec51 0b17 	vmov	r0, r1, d7
 8013ba8:	f7ec fd46 	bl	8000638 <__aeabi_dmul>
 8013bac:	9b02      	ldr	r3, [sp, #8]
 8013bae:	9d00      	ldr	r5, [sp, #0]
 8013bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8013bb2:	ec41 0b18 	vmov	d8, r0, r1
 8013bb6:	4639      	mov	r1, r7
 8013bb8:	4630      	mov	r0, r6
 8013bba:	f7ec ffed 	bl	8000b98 <__aeabi_d2iz>
 8013bbe:	9011      	str	r0, [sp, #68]	; 0x44
 8013bc0:	f7ec fcd0 	bl	8000564 <__aeabi_i2d>
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	4630      	mov	r0, r6
 8013bca:	4639      	mov	r1, r7
 8013bcc:	f7ec fb7c 	bl	80002c8 <__aeabi_dsub>
 8013bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bd2:	3330      	adds	r3, #48	; 0x30
 8013bd4:	f805 3b01 	strb.w	r3, [r5], #1
 8013bd8:	9b02      	ldr	r3, [sp, #8]
 8013bda:	429d      	cmp	r5, r3
 8013bdc:	4606      	mov	r6, r0
 8013bde:	460f      	mov	r7, r1
 8013be0:	f04f 0200 	mov.w	r2, #0
 8013be4:	d134      	bne.n	8013c50 <_dtoa_r+0x660>
 8013be6:	4b19      	ldr	r3, [pc, #100]	; (8013c4c <_dtoa_r+0x65c>)
 8013be8:	ec51 0b18 	vmov	r0, r1, d8
 8013bec:	f7ec fb6e 	bl	80002cc <__adddf3>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	4639      	mov	r1, r7
 8013bf8:	f7ec ffae 	bl	8000b58 <__aeabi_dcmpgt>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d175      	bne.n	8013cec <_dtoa_r+0x6fc>
 8013c00:	ec53 2b18 	vmov	r2, r3, d8
 8013c04:	4911      	ldr	r1, [pc, #68]	; (8013c4c <_dtoa_r+0x65c>)
 8013c06:	2000      	movs	r0, #0
 8013c08:	f7ec fb5e 	bl	80002c8 <__aeabi_dsub>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	4630      	mov	r0, r6
 8013c12:	4639      	mov	r1, r7
 8013c14:	f7ec ff82 	bl	8000b1c <__aeabi_dcmplt>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	f43f af27 	beq.w	8013a6c <_dtoa_r+0x47c>
 8013c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c20:	1e6b      	subs	r3, r5, #1
 8013c22:	930c      	str	r3, [sp, #48]	; 0x30
 8013c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013c28:	2b30      	cmp	r3, #48	; 0x30
 8013c2a:	d0f8      	beq.n	8013c1e <_dtoa_r+0x62e>
 8013c2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013c30:	e04a      	b.n	8013cc8 <_dtoa_r+0x6d8>
 8013c32:	bf00      	nop
 8013c34:	0801e8a8 	.word	0x0801e8a8
 8013c38:	0801e880 	.word	0x0801e880
 8013c3c:	3ff00000 	.word	0x3ff00000
 8013c40:	40240000 	.word	0x40240000
 8013c44:	401c0000 	.word	0x401c0000
 8013c48:	40140000 	.word	0x40140000
 8013c4c:	3fe00000 	.word	0x3fe00000
 8013c50:	4baf      	ldr	r3, [pc, #700]	; (8013f10 <_dtoa_r+0x920>)
 8013c52:	f7ec fcf1 	bl	8000638 <__aeabi_dmul>
 8013c56:	4606      	mov	r6, r0
 8013c58:	460f      	mov	r7, r1
 8013c5a:	e7ac      	b.n	8013bb6 <_dtoa_r+0x5c6>
 8013c5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013c60:	9d00      	ldr	r5, [sp, #0]
 8013c62:	4642      	mov	r2, r8
 8013c64:	464b      	mov	r3, r9
 8013c66:	4630      	mov	r0, r6
 8013c68:	4639      	mov	r1, r7
 8013c6a:	f7ec fe0f 	bl	800088c <__aeabi_ddiv>
 8013c6e:	f7ec ff93 	bl	8000b98 <__aeabi_d2iz>
 8013c72:	9002      	str	r0, [sp, #8]
 8013c74:	f7ec fc76 	bl	8000564 <__aeabi_i2d>
 8013c78:	4642      	mov	r2, r8
 8013c7a:	464b      	mov	r3, r9
 8013c7c:	f7ec fcdc 	bl	8000638 <__aeabi_dmul>
 8013c80:	4602      	mov	r2, r0
 8013c82:	460b      	mov	r3, r1
 8013c84:	4630      	mov	r0, r6
 8013c86:	4639      	mov	r1, r7
 8013c88:	f7ec fb1e 	bl	80002c8 <__aeabi_dsub>
 8013c8c:	9e02      	ldr	r6, [sp, #8]
 8013c8e:	9f01      	ldr	r7, [sp, #4]
 8013c90:	3630      	adds	r6, #48	; 0x30
 8013c92:	f805 6b01 	strb.w	r6, [r5], #1
 8013c96:	9e00      	ldr	r6, [sp, #0]
 8013c98:	1bae      	subs	r6, r5, r6
 8013c9a:	42b7      	cmp	r7, r6
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	d137      	bne.n	8013d12 <_dtoa_r+0x722>
 8013ca2:	f7ec fb13 	bl	80002cc <__adddf3>
 8013ca6:	4642      	mov	r2, r8
 8013ca8:	464b      	mov	r3, r9
 8013caa:	4606      	mov	r6, r0
 8013cac:	460f      	mov	r7, r1
 8013cae:	f7ec ff53 	bl	8000b58 <__aeabi_dcmpgt>
 8013cb2:	b9c8      	cbnz	r0, 8013ce8 <_dtoa_r+0x6f8>
 8013cb4:	4642      	mov	r2, r8
 8013cb6:	464b      	mov	r3, r9
 8013cb8:	4630      	mov	r0, r6
 8013cba:	4639      	mov	r1, r7
 8013cbc:	f7ec ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8013cc0:	b110      	cbz	r0, 8013cc8 <_dtoa_r+0x6d8>
 8013cc2:	9b02      	ldr	r3, [sp, #8]
 8013cc4:	07d9      	lsls	r1, r3, #31
 8013cc6:	d40f      	bmi.n	8013ce8 <_dtoa_r+0x6f8>
 8013cc8:	4620      	mov	r0, r4
 8013cca:	4659      	mov	r1, fp
 8013ccc:	f000 fcec 	bl	80146a8 <_Bfree>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	702b      	strb	r3, [r5, #0]
 8013cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cd6:	f10a 0001 	add.w	r0, sl, #1
 8013cda:	6018      	str	r0, [r3, #0]
 8013cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f43f acd8 	beq.w	8013694 <_dtoa_r+0xa4>
 8013ce4:	601d      	str	r5, [r3, #0]
 8013ce6:	e4d5      	b.n	8013694 <_dtoa_r+0xa4>
 8013ce8:	f8cd a01c 	str.w	sl, [sp, #28]
 8013cec:	462b      	mov	r3, r5
 8013cee:	461d      	mov	r5, r3
 8013cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013cf4:	2a39      	cmp	r2, #57	; 0x39
 8013cf6:	d108      	bne.n	8013d0a <_dtoa_r+0x71a>
 8013cf8:	9a00      	ldr	r2, [sp, #0]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d1f7      	bne.n	8013cee <_dtoa_r+0x6fe>
 8013cfe:	9a07      	ldr	r2, [sp, #28]
 8013d00:	9900      	ldr	r1, [sp, #0]
 8013d02:	3201      	adds	r2, #1
 8013d04:	9207      	str	r2, [sp, #28]
 8013d06:	2230      	movs	r2, #48	; 0x30
 8013d08:	700a      	strb	r2, [r1, #0]
 8013d0a:	781a      	ldrb	r2, [r3, #0]
 8013d0c:	3201      	adds	r2, #1
 8013d0e:	701a      	strb	r2, [r3, #0]
 8013d10:	e78c      	b.n	8013c2c <_dtoa_r+0x63c>
 8013d12:	4b7f      	ldr	r3, [pc, #508]	; (8013f10 <_dtoa_r+0x920>)
 8013d14:	2200      	movs	r2, #0
 8013d16:	f7ec fc8f 	bl	8000638 <__aeabi_dmul>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	4606      	mov	r6, r0
 8013d20:	460f      	mov	r7, r1
 8013d22:	f7ec fef1 	bl	8000b08 <__aeabi_dcmpeq>
 8013d26:	2800      	cmp	r0, #0
 8013d28:	d09b      	beq.n	8013c62 <_dtoa_r+0x672>
 8013d2a:	e7cd      	b.n	8013cc8 <_dtoa_r+0x6d8>
 8013d2c:	9a08      	ldr	r2, [sp, #32]
 8013d2e:	2a00      	cmp	r2, #0
 8013d30:	f000 80c4 	beq.w	8013ebc <_dtoa_r+0x8cc>
 8013d34:	9a05      	ldr	r2, [sp, #20]
 8013d36:	2a01      	cmp	r2, #1
 8013d38:	f300 80a8 	bgt.w	8013e8c <_dtoa_r+0x89c>
 8013d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d3e:	2a00      	cmp	r2, #0
 8013d40:	f000 80a0 	beq.w	8013e84 <_dtoa_r+0x894>
 8013d44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013d48:	9e06      	ldr	r6, [sp, #24]
 8013d4a:	4645      	mov	r5, r8
 8013d4c:	9a04      	ldr	r2, [sp, #16]
 8013d4e:	2101      	movs	r1, #1
 8013d50:	441a      	add	r2, r3
 8013d52:	4620      	mov	r0, r4
 8013d54:	4498      	add	r8, r3
 8013d56:	9204      	str	r2, [sp, #16]
 8013d58:	f000 fd62 	bl	8014820 <__i2b>
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	2d00      	cmp	r5, #0
 8013d60:	dd0b      	ble.n	8013d7a <_dtoa_r+0x78a>
 8013d62:	9b04      	ldr	r3, [sp, #16]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	dd08      	ble.n	8013d7a <_dtoa_r+0x78a>
 8013d68:	42ab      	cmp	r3, r5
 8013d6a:	9a04      	ldr	r2, [sp, #16]
 8013d6c:	bfa8      	it	ge
 8013d6e:	462b      	movge	r3, r5
 8013d70:	eba8 0803 	sub.w	r8, r8, r3
 8013d74:	1aed      	subs	r5, r5, r3
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	9304      	str	r3, [sp, #16]
 8013d7a:	9b06      	ldr	r3, [sp, #24]
 8013d7c:	b1fb      	cbz	r3, 8013dbe <_dtoa_r+0x7ce>
 8013d7e:	9b08      	ldr	r3, [sp, #32]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	f000 809f 	beq.w	8013ec4 <_dtoa_r+0x8d4>
 8013d86:	2e00      	cmp	r6, #0
 8013d88:	dd11      	ble.n	8013dae <_dtoa_r+0x7be>
 8013d8a:	4639      	mov	r1, r7
 8013d8c:	4632      	mov	r2, r6
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f000 fe02 	bl	8014998 <__pow5mult>
 8013d94:	465a      	mov	r2, fp
 8013d96:	4601      	mov	r1, r0
 8013d98:	4607      	mov	r7, r0
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f000 fd56 	bl	801484c <__multiply>
 8013da0:	4659      	mov	r1, fp
 8013da2:	9007      	str	r0, [sp, #28]
 8013da4:	4620      	mov	r0, r4
 8013da6:	f000 fc7f 	bl	80146a8 <_Bfree>
 8013daa:	9b07      	ldr	r3, [sp, #28]
 8013dac:	469b      	mov	fp, r3
 8013dae:	9b06      	ldr	r3, [sp, #24]
 8013db0:	1b9a      	subs	r2, r3, r6
 8013db2:	d004      	beq.n	8013dbe <_dtoa_r+0x7ce>
 8013db4:	4659      	mov	r1, fp
 8013db6:	4620      	mov	r0, r4
 8013db8:	f000 fdee 	bl	8014998 <__pow5mult>
 8013dbc:	4683      	mov	fp, r0
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f000 fd2d 	bl	8014820 <__i2b>
 8013dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	4606      	mov	r6, r0
 8013dcc:	dd7c      	ble.n	8013ec8 <_dtoa_r+0x8d8>
 8013dce:	461a      	mov	r2, r3
 8013dd0:	4601      	mov	r1, r0
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f000 fde0 	bl	8014998 <__pow5mult>
 8013dd8:	9b05      	ldr	r3, [sp, #20]
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	4606      	mov	r6, r0
 8013dde:	dd76      	ble.n	8013ece <_dtoa_r+0x8de>
 8013de0:	2300      	movs	r3, #0
 8013de2:	9306      	str	r3, [sp, #24]
 8013de4:	6933      	ldr	r3, [r6, #16]
 8013de6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013dea:	6918      	ldr	r0, [r3, #16]
 8013dec:	f000 fcc8 	bl	8014780 <__hi0bits>
 8013df0:	f1c0 0020 	rsb	r0, r0, #32
 8013df4:	9b04      	ldr	r3, [sp, #16]
 8013df6:	4418      	add	r0, r3
 8013df8:	f010 001f 	ands.w	r0, r0, #31
 8013dfc:	f000 8086 	beq.w	8013f0c <_dtoa_r+0x91c>
 8013e00:	f1c0 0320 	rsb	r3, r0, #32
 8013e04:	2b04      	cmp	r3, #4
 8013e06:	dd7f      	ble.n	8013f08 <_dtoa_r+0x918>
 8013e08:	f1c0 001c 	rsb	r0, r0, #28
 8013e0c:	9b04      	ldr	r3, [sp, #16]
 8013e0e:	4403      	add	r3, r0
 8013e10:	4480      	add	r8, r0
 8013e12:	4405      	add	r5, r0
 8013e14:	9304      	str	r3, [sp, #16]
 8013e16:	f1b8 0f00 	cmp.w	r8, #0
 8013e1a:	dd05      	ble.n	8013e28 <_dtoa_r+0x838>
 8013e1c:	4659      	mov	r1, fp
 8013e1e:	4642      	mov	r2, r8
 8013e20:	4620      	mov	r0, r4
 8013e22:	f000 fe13 	bl	8014a4c <__lshift>
 8013e26:	4683      	mov	fp, r0
 8013e28:	9b04      	ldr	r3, [sp, #16]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	dd05      	ble.n	8013e3a <_dtoa_r+0x84a>
 8013e2e:	4631      	mov	r1, r6
 8013e30:	461a      	mov	r2, r3
 8013e32:	4620      	mov	r0, r4
 8013e34:	f000 fe0a 	bl	8014a4c <__lshift>
 8013e38:	4606      	mov	r6, r0
 8013e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d069      	beq.n	8013f14 <_dtoa_r+0x924>
 8013e40:	4631      	mov	r1, r6
 8013e42:	4658      	mov	r0, fp
 8013e44:	f000 fe6e 	bl	8014b24 <__mcmp>
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	da63      	bge.n	8013f14 <_dtoa_r+0x924>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	4659      	mov	r1, fp
 8013e50:	220a      	movs	r2, #10
 8013e52:	4620      	mov	r0, r4
 8013e54:	f000 fc4a 	bl	80146ec <__multadd>
 8013e58:	9b08      	ldr	r3, [sp, #32]
 8013e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e5e:	4683      	mov	fp, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f000 818f 	beq.w	8014184 <_dtoa_r+0xb94>
 8013e66:	4639      	mov	r1, r7
 8013e68:	2300      	movs	r3, #0
 8013e6a:	220a      	movs	r2, #10
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f000 fc3d 	bl	80146ec <__multadd>
 8013e72:	f1b9 0f00 	cmp.w	r9, #0
 8013e76:	4607      	mov	r7, r0
 8013e78:	f300 808e 	bgt.w	8013f98 <_dtoa_r+0x9a8>
 8013e7c:	9b05      	ldr	r3, [sp, #20]
 8013e7e:	2b02      	cmp	r3, #2
 8013e80:	dc50      	bgt.n	8013f24 <_dtoa_r+0x934>
 8013e82:	e089      	b.n	8013f98 <_dtoa_r+0x9a8>
 8013e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e8a:	e75d      	b.n	8013d48 <_dtoa_r+0x758>
 8013e8c:	9b01      	ldr	r3, [sp, #4]
 8013e8e:	1e5e      	subs	r6, r3, #1
 8013e90:	9b06      	ldr	r3, [sp, #24]
 8013e92:	42b3      	cmp	r3, r6
 8013e94:	bfbf      	itttt	lt
 8013e96:	9b06      	ldrlt	r3, [sp, #24]
 8013e98:	9606      	strlt	r6, [sp, #24]
 8013e9a:	1af2      	sublt	r2, r6, r3
 8013e9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013e9e:	bfb6      	itet	lt
 8013ea0:	189b      	addlt	r3, r3, r2
 8013ea2:	1b9e      	subge	r6, r3, r6
 8013ea4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013ea6:	9b01      	ldr	r3, [sp, #4]
 8013ea8:	bfb8      	it	lt
 8013eaa:	2600      	movlt	r6, #0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	bfb5      	itete	lt
 8013eb0:	eba8 0503 	sublt.w	r5, r8, r3
 8013eb4:	9b01      	ldrge	r3, [sp, #4]
 8013eb6:	2300      	movlt	r3, #0
 8013eb8:	4645      	movge	r5, r8
 8013eba:	e747      	b.n	8013d4c <_dtoa_r+0x75c>
 8013ebc:	9e06      	ldr	r6, [sp, #24]
 8013ebe:	9f08      	ldr	r7, [sp, #32]
 8013ec0:	4645      	mov	r5, r8
 8013ec2:	e74c      	b.n	8013d5e <_dtoa_r+0x76e>
 8013ec4:	9a06      	ldr	r2, [sp, #24]
 8013ec6:	e775      	b.n	8013db4 <_dtoa_r+0x7c4>
 8013ec8:	9b05      	ldr	r3, [sp, #20]
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	dc18      	bgt.n	8013f00 <_dtoa_r+0x910>
 8013ece:	9b02      	ldr	r3, [sp, #8]
 8013ed0:	b9b3      	cbnz	r3, 8013f00 <_dtoa_r+0x910>
 8013ed2:	9b03      	ldr	r3, [sp, #12]
 8013ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ed8:	b9a3      	cbnz	r3, 8013f04 <_dtoa_r+0x914>
 8013eda:	9b03      	ldr	r3, [sp, #12]
 8013edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ee0:	0d1b      	lsrs	r3, r3, #20
 8013ee2:	051b      	lsls	r3, r3, #20
 8013ee4:	b12b      	cbz	r3, 8013ef2 <_dtoa_r+0x902>
 8013ee6:	9b04      	ldr	r3, [sp, #16]
 8013ee8:	3301      	adds	r3, #1
 8013eea:	9304      	str	r3, [sp, #16]
 8013eec:	f108 0801 	add.w	r8, r8, #1
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	9306      	str	r3, [sp, #24]
 8013ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f47f af74 	bne.w	8013de4 <_dtoa_r+0x7f4>
 8013efc:	2001      	movs	r0, #1
 8013efe:	e779      	b.n	8013df4 <_dtoa_r+0x804>
 8013f00:	2300      	movs	r3, #0
 8013f02:	e7f6      	b.n	8013ef2 <_dtoa_r+0x902>
 8013f04:	9b02      	ldr	r3, [sp, #8]
 8013f06:	e7f4      	b.n	8013ef2 <_dtoa_r+0x902>
 8013f08:	d085      	beq.n	8013e16 <_dtoa_r+0x826>
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	301c      	adds	r0, #28
 8013f0e:	e77d      	b.n	8013e0c <_dtoa_r+0x81c>
 8013f10:	40240000 	.word	0x40240000
 8013f14:	9b01      	ldr	r3, [sp, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	dc38      	bgt.n	8013f8c <_dtoa_r+0x99c>
 8013f1a:	9b05      	ldr	r3, [sp, #20]
 8013f1c:	2b02      	cmp	r3, #2
 8013f1e:	dd35      	ble.n	8013f8c <_dtoa_r+0x99c>
 8013f20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013f24:	f1b9 0f00 	cmp.w	r9, #0
 8013f28:	d10d      	bne.n	8013f46 <_dtoa_r+0x956>
 8013f2a:	4631      	mov	r1, r6
 8013f2c:	464b      	mov	r3, r9
 8013f2e:	2205      	movs	r2, #5
 8013f30:	4620      	mov	r0, r4
 8013f32:	f000 fbdb 	bl	80146ec <__multadd>
 8013f36:	4601      	mov	r1, r0
 8013f38:	4606      	mov	r6, r0
 8013f3a:	4658      	mov	r0, fp
 8013f3c:	f000 fdf2 	bl	8014b24 <__mcmp>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	f73f adbd 	bgt.w	8013ac0 <_dtoa_r+0x4d0>
 8013f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f48:	9d00      	ldr	r5, [sp, #0]
 8013f4a:	ea6f 0a03 	mvn.w	sl, r3
 8013f4e:	f04f 0800 	mov.w	r8, #0
 8013f52:	4631      	mov	r1, r6
 8013f54:	4620      	mov	r0, r4
 8013f56:	f000 fba7 	bl	80146a8 <_Bfree>
 8013f5a:	2f00      	cmp	r7, #0
 8013f5c:	f43f aeb4 	beq.w	8013cc8 <_dtoa_r+0x6d8>
 8013f60:	f1b8 0f00 	cmp.w	r8, #0
 8013f64:	d005      	beq.n	8013f72 <_dtoa_r+0x982>
 8013f66:	45b8      	cmp	r8, r7
 8013f68:	d003      	beq.n	8013f72 <_dtoa_r+0x982>
 8013f6a:	4641      	mov	r1, r8
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f000 fb9b 	bl	80146a8 <_Bfree>
 8013f72:	4639      	mov	r1, r7
 8013f74:	4620      	mov	r0, r4
 8013f76:	f000 fb97 	bl	80146a8 <_Bfree>
 8013f7a:	e6a5      	b.n	8013cc8 <_dtoa_r+0x6d8>
 8013f7c:	2600      	movs	r6, #0
 8013f7e:	4637      	mov	r7, r6
 8013f80:	e7e1      	b.n	8013f46 <_dtoa_r+0x956>
 8013f82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013f88:	4637      	mov	r7, r6
 8013f8a:	e599      	b.n	8013ac0 <_dtoa_r+0x4d0>
 8013f8c:	9b08      	ldr	r3, [sp, #32]
 8013f8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f000 80fd 	beq.w	8014192 <_dtoa_r+0xba2>
 8013f98:	2d00      	cmp	r5, #0
 8013f9a:	dd05      	ble.n	8013fa8 <_dtoa_r+0x9b8>
 8013f9c:	4639      	mov	r1, r7
 8013f9e:	462a      	mov	r2, r5
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 fd53 	bl	8014a4c <__lshift>
 8013fa6:	4607      	mov	r7, r0
 8013fa8:	9b06      	ldr	r3, [sp, #24]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d05c      	beq.n	8014068 <_dtoa_r+0xa78>
 8013fae:	6879      	ldr	r1, [r7, #4]
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f000 fb39 	bl	8014628 <_Balloc>
 8013fb6:	4605      	mov	r5, r0
 8013fb8:	b928      	cbnz	r0, 8013fc6 <_dtoa_r+0x9d6>
 8013fba:	4b80      	ldr	r3, [pc, #512]	; (80141bc <_dtoa_r+0xbcc>)
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013fc2:	f7ff bb2e 	b.w	8013622 <_dtoa_r+0x32>
 8013fc6:	693a      	ldr	r2, [r7, #16]
 8013fc8:	3202      	adds	r2, #2
 8013fca:	0092      	lsls	r2, r2, #2
 8013fcc:	f107 010c 	add.w	r1, r7, #12
 8013fd0:	300c      	adds	r0, #12
 8013fd2:	f7fe fb61 	bl	8012698 <memcpy>
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	4629      	mov	r1, r5
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 fd36 	bl	8014a4c <__lshift>
 8013fe0:	9b00      	ldr	r3, [sp, #0]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	9301      	str	r3, [sp, #4]
 8013fe6:	9b00      	ldr	r3, [sp, #0]
 8013fe8:	444b      	add	r3, r9
 8013fea:	9307      	str	r3, [sp, #28]
 8013fec:	9b02      	ldr	r3, [sp, #8]
 8013fee:	f003 0301 	and.w	r3, r3, #1
 8013ff2:	46b8      	mov	r8, r7
 8013ff4:	9306      	str	r3, [sp, #24]
 8013ff6:	4607      	mov	r7, r0
 8013ff8:	9b01      	ldr	r3, [sp, #4]
 8013ffa:	4631      	mov	r1, r6
 8013ffc:	3b01      	subs	r3, #1
 8013ffe:	4658      	mov	r0, fp
 8014000:	9302      	str	r3, [sp, #8]
 8014002:	f7ff fa69 	bl	80134d8 <quorem>
 8014006:	4603      	mov	r3, r0
 8014008:	3330      	adds	r3, #48	; 0x30
 801400a:	9004      	str	r0, [sp, #16]
 801400c:	4641      	mov	r1, r8
 801400e:	4658      	mov	r0, fp
 8014010:	9308      	str	r3, [sp, #32]
 8014012:	f000 fd87 	bl	8014b24 <__mcmp>
 8014016:	463a      	mov	r2, r7
 8014018:	4681      	mov	r9, r0
 801401a:	4631      	mov	r1, r6
 801401c:	4620      	mov	r0, r4
 801401e:	f000 fd9d 	bl	8014b5c <__mdiff>
 8014022:	68c2      	ldr	r2, [r0, #12]
 8014024:	9b08      	ldr	r3, [sp, #32]
 8014026:	4605      	mov	r5, r0
 8014028:	bb02      	cbnz	r2, 801406c <_dtoa_r+0xa7c>
 801402a:	4601      	mov	r1, r0
 801402c:	4658      	mov	r0, fp
 801402e:	f000 fd79 	bl	8014b24 <__mcmp>
 8014032:	9b08      	ldr	r3, [sp, #32]
 8014034:	4602      	mov	r2, r0
 8014036:	4629      	mov	r1, r5
 8014038:	4620      	mov	r0, r4
 801403a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801403e:	f000 fb33 	bl	80146a8 <_Bfree>
 8014042:	9b05      	ldr	r3, [sp, #20]
 8014044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014046:	9d01      	ldr	r5, [sp, #4]
 8014048:	ea43 0102 	orr.w	r1, r3, r2
 801404c:	9b06      	ldr	r3, [sp, #24]
 801404e:	430b      	orrs	r3, r1
 8014050:	9b08      	ldr	r3, [sp, #32]
 8014052:	d10d      	bne.n	8014070 <_dtoa_r+0xa80>
 8014054:	2b39      	cmp	r3, #57	; 0x39
 8014056:	d029      	beq.n	80140ac <_dtoa_r+0xabc>
 8014058:	f1b9 0f00 	cmp.w	r9, #0
 801405c:	dd01      	ble.n	8014062 <_dtoa_r+0xa72>
 801405e:	9b04      	ldr	r3, [sp, #16]
 8014060:	3331      	adds	r3, #49	; 0x31
 8014062:	9a02      	ldr	r2, [sp, #8]
 8014064:	7013      	strb	r3, [r2, #0]
 8014066:	e774      	b.n	8013f52 <_dtoa_r+0x962>
 8014068:	4638      	mov	r0, r7
 801406a:	e7b9      	b.n	8013fe0 <_dtoa_r+0x9f0>
 801406c:	2201      	movs	r2, #1
 801406e:	e7e2      	b.n	8014036 <_dtoa_r+0xa46>
 8014070:	f1b9 0f00 	cmp.w	r9, #0
 8014074:	db06      	blt.n	8014084 <_dtoa_r+0xa94>
 8014076:	9905      	ldr	r1, [sp, #20]
 8014078:	ea41 0909 	orr.w	r9, r1, r9
 801407c:	9906      	ldr	r1, [sp, #24]
 801407e:	ea59 0101 	orrs.w	r1, r9, r1
 8014082:	d120      	bne.n	80140c6 <_dtoa_r+0xad6>
 8014084:	2a00      	cmp	r2, #0
 8014086:	ddec      	ble.n	8014062 <_dtoa_r+0xa72>
 8014088:	4659      	mov	r1, fp
 801408a:	2201      	movs	r2, #1
 801408c:	4620      	mov	r0, r4
 801408e:	9301      	str	r3, [sp, #4]
 8014090:	f000 fcdc 	bl	8014a4c <__lshift>
 8014094:	4631      	mov	r1, r6
 8014096:	4683      	mov	fp, r0
 8014098:	f000 fd44 	bl	8014b24 <__mcmp>
 801409c:	2800      	cmp	r0, #0
 801409e:	9b01      	ldr	r3, [sp, #4]
 80140a0:	dc02      	bgt.n	80140a8 <_dtoa_r+0xab8>
 80140a2:	d1de      	bne.n	8014062 <_dtoa_r+0xa72>
 80140a4:	07da      	lsls	r2, r3, #31
 80140a6:	d5dc      	bpl.n	8014062 <_dtoa_r+0xa72>
 80140a8:	2b39      	cmp	r3, #57	; 0x39
 80140aa:	d1d8      	bne.n	801405e <_dtoa_r+0xa6e>
 80140ac:	9a02      	ldr	r2, [sp, #8]
 80140ae:	2339      	movs	r3, #57	; 0x39
 80140b0:	7013      	strb	r3, [r2, #0]
 80140b2:	462b      	mov	r3, r5
 80140b4:	461d      	mov	r5, r3
 80140b6:	3b01      	subs	r3, #1
 80140b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80140bc:	2a39      	cmp	r2, #57	; 0x39
 80140be:	d050      	beq.n	8014162 <_dtoa_r+0xb72>
 80140c0:	3201      	adds	r2, #1
 80140c2:	701a      	strb	r2, [r3, #0]
 80140c4:	e745      	b.n	8013f52 <_dtoa_r+0x962>
 80140c6:	2a00      	cmp	r2, #0
 80140c8:	dd03      	ble.n	80140d2 <_dtoa_r+0xae2>
 80140ca:	2b39      	cmp	r3, #57	; 0x39
 80140cc:	d0ee      	beq.n	80140ac <_dtoa_r+0xabc>
 80140ce:	3301      	adds	r3, #1
 80140d0:	e7c7      	b.n	8014062 <_dtoa_r+0xa72>
 80140d2:	9a01      	ldr	r2, [sp, #4]
 80140d4:	9907      	ldr	r1, [sp, #28]
 80140d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80140da:	428a      	cmp	r2, r1
 80140dc:	d02a      	beq.n	8014134 <_dtoa_r+0xb44>
 80140de:	4659      	mov	r1, fp
 80140e0:	2300      	movs	r3, #0
 80140e2:	220a      	movs	r2, #10
 80140e4:	4620      	mov	r0, r4
 80140e6:	f000 fb01 	bl	80146ec <__multadd>
 80140ea:	45b8      	cmp	r8, r7
 80140ec:	4683      	mov	fp, r0
 80140ee:	f04f 0300 	mov.w	r3, #0
 80140f2:	f04f 020a 	mov.w	r2, #10
 80140f6:	4641      	mov	r1, r8
 80140f8:	4620      	mov	r0, r4
 80140fa:	d107      	bne.n	801410c <_dtoa_r+0xb1c>
 80140fc:	f000 faf6 	bl	80146ec <__multadd>
 8014100:	4680      	mov	r8, r0
 8014102:	4607      	mov	r7, r0
 8014104:	9b01      	ldr	r3, [sp, #4]
 8014106:	3301      	adds	r3, #1
 8014108:	9301      	str	r3, [sp, #4]
 801410a:	e775      	b.n	8013ff8 <_dtoa_r+0xa08>
 801410c:	f000 faee 	bl	80146ec <__multadd>
 8014110:	4639      	mov	r1, r7
 8014112:	4680      	mov	r8, r0
 8014114:	2300      	movs	r3, #0
 8014116:	220a      	movs	r2, #10
 8014118:	4620      	mov	r0, r4
 801411a:	f000 fae7 	bl	80146ec <__multadd>
 801411e:	4607      	mov	r7, r0
 8014120:	e7f0      	b.n	8014104 <_dtoa_r+0xb14>
 8014122:	f1b9 0f00 	cmp.w	r9, #0
 8014126:	9a00      	ldr	r2, [sp, #0]
 8014128:	bfcc      	ite	gt
 801412a:	464d      	movgt	r5, r9
 801412c:	2501      	movle	r5, #1
 801412e:	4415      	add	r5, r2
 8014130:	f04f 0800 	mov.w	r8, #0
 8014134:	4659      	mov	r1, fp
 8014136:	2201      	movs	r2, #1
 8014138:	4620      	mov	r0, r4
 801413a:	9301      	str	r3, [sp, #4]
 801413c:	f000 fc86 	bl	8014a4c <__lshift>
 8014140:	4631      	mov	r1, r6
 8014142:	4683      	mov	fp, r0
 8014144:	f000 fcee 	bl	8014b24 <__mcmp>
 8014148:	2800      	cmp	r0, #0
 801414a:	dcb2      	bgt.n	80140b2 <_dtoa_r+0xac2>
 801414c:	d102      	bne.n	8014154 <_dtoa_r+0xb64>
 801414e:	9b01      	ldr	r3, [sp, #4]
 8014150:	07db      	lsls	r3, r3, #31
 8014152:	d4ae      	bmi.n	80140b2 <_dtoa_r+0xac2>
 8014154:	462b      	mov	r3, r5
 8014156:	461d      	mov	r5, r3
 8014158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801415c:	2a30      	cmp	r2, #48	; 0x30
 801415e:	d0fa      	beq.n	8014156 <_dtoa_r+0xb66>
 8014160:	e6f7      	b.n	8013f52 <_dtoa_r+0x962>
 8014162:	9a00      	ldr	r2, [sp, #0]
 8014164:	429a      	cmp	r2, r3
 8014166:	d1a5      	bne.n	80140b4 <_dtoa_r+0xac4>
 8014168:	f10a 0a01 	add.w	sl, sl, #1
 801416c:	2331      	movs	r3, #49	; 0x31
 801416e:	e779      	b.n	8014064 <_dtoa_r+0xa74>
 8014170:	4b13      	ldr	r3, [pc, #76]	; (80141c0 <_dtoa_r+0xbd0>)
 8014172:	f7ff baaf 	b.w	80136d4 <_dtoa_r+0xe4>
 8014176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014178:	2b00      	cmp	r3, #0
 801417a:	f47f aa86 	bne.w	801368a <_dtoa_r+0x9a>
 801417e:	4b11      	ldr	r3, [pc, #68]	; (80141c4 <_dtoa_r+0xbd4>)
 8014180:	f7ff baa8 	b.w	80136d4 <_dtoa_r+0xe4>
 8014184:	f1b9 0f00 	cmp.w	r9, #0
 8014188:	dc03      	bgt.n	8014192 <_dtoa_r+0xba2>
 801418a:	9b05      	ldr	r3, [sp, #20]
 801418c:	2b02      	cmp	r3, #2
 801418e:	f73f aec9 	bgt.w	8013f24 <_dtoa_r+0x934>
 8014192:	9d00      	ldr	r5, [sp, #0]
 8014194:	4631      	mov	r1, r6
 8014196:	4658      	mov	r0, fp
 8014198:	f7ff f99e 	bl	80134d8 <quorem>
 801419c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80141a0:	f805 3b01 	strb.w	r3, [r5], #1
 80141a4:	9a00      	ldr	r2, [sp, #0]
 80141a6:	1aaa      	subs	r2, r5, r2
 80141a8:	4591      	cmp	r9, r2
 80141aa:	ddba      	ble.n	8014122 <_dtoa_r+0xb32>
 80141ac:	4659      	mov	r1, fp
 80141ae:	2300      	movs	r3, #0
 80141b0:	220a      	movs	r2, #10
 80141b2:	4620      	mov	r0, r4
 80141b4:	f000 fa9a 	bl	80146ec <__multadd>
 80141b8:	4683      	mov	fp, r0
 80141ba:	e7eb      	b.n	8014194 <_dtoa_r+0xba4>
 80141bc:	0801e7af 	.word	0x0801e7af
 80141c0:	0801e708 	.word	0x0801e708
 80141c4:	0801e72c 	.word	0x0801e72c

080141c8 <__sflush_r>:
 80141c8:	898a      	ldrh	r2, [r1, #12]
 80141ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ce:	4605      	mov	r5, r0
 80141d0:	0710      	lsls	r0, r2, #28
 80141d2:	460c      	mov	r4, r1
 80141d4:	d458      	bmi.n	8014288 <__sflush_r+0xc0>
 80141d6:	684b      	ldr	r3, [r1, #4]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dc05      	bgt.n	80141e8 <__sflush_r+0x20>
 80141dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141de:	2b00      	cmp	r3, #0
 80141e0:	dc02      	bgt.n	80141e8 <__sflush_r+0x20>
 80141e2:	2000      	movs	r0, #0
 80141e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141ea:	2e00      	cmp	r6, #0
 80141ec:	d0f9      	beq.n	80141e2 <__sflush_r+0x1a>
 80141ee:	2300      	movs	r3, #0
 80141f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141f4:	682f      	ldr	r7, [r5, #0]
 80141f6:	602b      	str	r3, [r5, #0]
 80141f8:	d032      	beq.n	8014260 <__sflush_r+0x98>
 80141fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80141fc:	89a3      	ldrh	r3, [r4, #12]
 80141fe:	075a      	lsls	r2, r3, #29
 8014200:	d505      	bpl.n	801420e <__sflush_r+0x46>
 8014202:	6863      	ldr	r3, [r4, #4]
 8014204:	1ac0      	subs	r0, r0, r3
 8014206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014208:	b10b      	cbz	r3, 801420e <__sflush_r+0x46>
 801420a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801420c:	1ac0      	subs	r0, r0, r3
 801420e:	2300      	movs	r3, #0
 8014210:	4602      	mov	r2, r0
 8014212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014214:	6a21      	ldr	r1, [r4, #32]
 8014216:	4628      	mov	r0, r5
 8014218:	47b0      	blx	r6
 801421a:	1c43      	adds	r3, r0, #1
 801421c:	89a3      	ldrh	r3, [r4, #12]
 801421e:	d106      	bne.n	801422e <__sflush_r+0x66>
 8014220:	6829      	ldr	r1, [r5, #0]
 8014222:	291d      	cmp	r1, #29
 8014224:	d82c      	bhi.n	8014280 <__sflush_r+0xb8>
 8014226:	4a2a      	ldr	r2, [pc, #168]	; (80142d0 <__sflush_r+0x108>)
 8014228:	40ca      	lsrs	r2, r1
 801422a:	07d6      	lsls	r6, r2, #31
 801422c:	d528      	bpl.n	8014280 <__sflush_r+0xb8>
 801422e:	2200      	movs	r2, #0
 8014230:	6062      	str	r2, [r4, #4]
 8014232:	04d9      	lsls	r1, r3, #19
 8014234:	6922      	ldr	r2, [r4, #16]
 8014236:	6022      	str	r2, [r4, #0]
 8014238:	d504      	bpl.n	8014244 <__sflush_r+0x7c>
 801423a:	1c42      	adds	r2, r0, #1
 801423c:	d101      	bne.n	8014242 <__sflush_r+0x7a>
 801423e:	682b      	ldr	r3, [r5, #0]
 8014240:	b903      	cbnz	r3, 8014244 <__sflush_r+0x7c>
 8014242:	6560      	str	r0, [r4, #84]	; 0x54
 8014244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014246:	602f      	str	r7, [r5, #0]
 8014248:	2900      	cmp	r1, #0
 801424a:	d0ca      	beq.n	80141e2 <__sflush_r+0x1a>
 801424c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014250:	4299      	cmp	r1, r3
 8014252:	d002      	beq.n	801425a <__sflush_r+0x92>
 8014254:	4628      	mov	r0, r5
 8014256:	f7fe fa4f 	bl	80126f8 <_free_r>
 801425a:	2000      	movs	r0, #0
 801425c:	6360      	str	r0, [r4, #52]	; 0x34
 801425e:	e7c1      	b.n	80141e4 <__sflush_r+0x1c>
 8014260:	6a21      	ldr	r1, [r4, #32]
 8014262:	2301      	movs	r3, #1
 8014264:	4628      	mov	r0, r5
 8014266:	47b0      	blx	r6
 8014268:	1c41      	adds	r1, r0, #1
 801426a:	d1c7      	bne.n	80141fc <__sflush_r+0x34>
 801426c:	682b      	ldr	r3, [r5, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d0c4      	beq.n	80141fc <__sflush_r+0x34>
 8014272:	2b1d      	cmp	r3, #29
 8014274:	d001      	beq.n	801427a <__sflush_r+0xb2>
 8014276:	2b16      	cmp	r3, #22
 8014278:	d101      	bne.n	801427e <__sflush_r+0xb6>
 801427a:	602f      	str	r7, [r5, #0]
 801427c:	e7b1      	b.n	80141e2 <__sflush_r+0x1a>
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014284:	81a3      	strh	r3, [r4, #12]
 8014286:	e7ad      	b.n	80141e4 <__sflush_r+0x1c>
 8014288:	690f      	ldr	r7, [r1, #16]
 801428a:	2f00      	cmp	r7, #0
 801428c:	d0a9      	beq.n	80141e2 <__sflush_r+0x1a>
 801428e:	0793      	lsls	r3, r2, #30
 8014290:	680e      	ldr	r6, [r1, #0]
 8014292:	bf08      	it	eq
 8014294:	694b      	ldreq	r3, [r1, #20]
 8014296:	600f      	str	r7, [r1, #0]
 8014298:	bf18      	it	ne
 801429a:	2300      	movne	r3, #0
 801429c:	eba6 0807 	sub.w	r8, r6, r7
 80142a0:	608b      	str	r3, [r1, #8]
 80142a2:	f1b8 0f00 	cmp.w	r8, #0
 80142a6:	dd9c      	ble.n	80141e2 <__sflush_r+0x1a>
 80142a8:	6a21      	ldr	r1, [r4, #32]
 80142aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142ac:	4643      	mov	r3, r8
 80142ae:	463a      	mov	r2, r7
 80142b0:	4628      	mov	r0, r5
 80142b2:	47b0      	blx	r6
 80142b4:	2800      	cmp	r0, #0
 80142b6:	dc06      	bgt.n	80142c6 <__sflush_r+0xfe>
 80142b8:	89a3      	ldrh	r3, [r4, #12]
 80142ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142be:	81a3      	strh	r3, [r4, #12]
 80142c0:	f04f 30ff 	mov.w	r0, #4294967295
 80142c4:	e78e      	b.n	80141e4 <__sflush_r+0x1c>
 80142c6:	4407      	add	r7, r0
 80142c8:	eba8 0800 	sub.w	r8, r8, r0
 80142cc:	e7e9      	b.n	80142a2 <__sflush_r+0xda>
 80142ce:	bf00      	nop
 80142d0:	20400001 	.word	0x20400001

080142d4 <_fflush_r>:
 80142d4:	b538      	push	{r3, r4, r5, lr}
 80142d6:	690b      	ldr	r3, [r1, #16]
 80142d8:	4605      	mov	r5, r0
 80142da:	460c      	mov	r4, r1
 80142dc:	b913      	cbnz	r3, 80142e4 <_fflush_r+0x10>
 80142de:	2500      	movs	r5, #0
 80142e0:	4628      	mov	r0, r5
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	b118      	cbz	r0, 80142ee <_fflush_r+0x1a>
 80142e6:	6983      	ldr	r3, [r0, #24]
 80142e8:	b90b      	cbnz	r3, 80142ee <_fflush_r+0x1a>
 80142ea:	f000 f887 	bl	80143fc <__sinit>
 80142ee:	4b14      	ldr	r3, [pc, #80]	; (8014340 <_fflush_r+0x6c>)
 80142f0:	429c      	cmp	r4, r3
 80142f2:	d11b      	bne.n	801432c <_fflush_r+0x58>
 80142f4:	686c      	ldr	r4, [r5, #4]
 80142f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d0ef      	beq.n	80142de <_fflush_r+0xa>
 80142fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014300:	07d0      	lsls	r0, r2, #31
 8014302:	d404      	bmi.n	801430e <_fflush_r+0x3a>
 8014304:	0599      	lsls	r1, r3, #22
 8014306:	d402      	bmi.n	801430e <_fflush_r+0x3a>
 8014308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801430a:	f000 f91a 	bl	8014542 <__retarget_lock_acquire_recursive>
 801430e:	4628      	mov	r0, r5
 8014310:	4621      	mov	r1, r4
 8014312:	f7ff ff59 	bl	80141c8 <__sflush_r>
 8014316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014318:	07da      	lsls	r2, r3, #31
 801431a:	4605      	mov	r5, r0
 801431c:	d4e0      	bmi.n	80142e0 <_fflush_r+0xc>
 801431e:	89a3      	ldrh	r3, [r4, #12]
 8014320:	059b      	lsls	r3, r3, #22
 8014322:	d4dd      	bmi.n	80142e0 <_fflush_r+0xc>
 8014324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014326:	f000 f90d 	bl	8014544 <__retarget_lock_release_recursive>
 801432a:	e7d9      	b.n	80142e0 <_fflush_r+0xc>
 801432c:	4b05      	ldr	r3, [pc, #20]	; (8014344 <_fflush_r+0x70>)
 801432e:	429c      	cmp	r4, r3
 8014330:	d101      	bne.n	8014336 <_fflush_r+0x62>
 8014332:	68ac      	ldr	r4, [r5, #8]
 8014334:	e7df      	b.n	80142f6 <_fflush_r+0x22>
 8014336:	4b04      	ldr	r3, [pc, #16]	; (8014348 <_fflush_r+0x74>)
 8014338:	429c      	cmp	r4, r3
 801433a:	bf08      	it	eq
 801433c:	68ec      	ldreq	r4, [r5, #12]
 801433e:	e7da      	b.n	80142f6 <_fflush_r+0x22>
 8014340:	0801e7e0 	.word	0x0801e7e0
 8014344:	0801e800 	.word	0x0801e800
 8014348:	0801e7c0 	.word	0x0801e7c0

0801434c <std>:
 801434c:	2300      	movs	r3, #0
 801434e:	b510      	push	{r4, lr}
 8014350:	4604      	mov	r4, r0
 8014352:	e9c0 3300 	strd	r3, r3, [r0]
 8014356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801435a:	6083      	str	r3, [r0, #8]
 801435c:	8181      	strh	r1, [r0, #12]
 801435e:	6643      	str	r3, [r0, #100]	; 0x64
 8014360:	81c2      	strh	r2, [r0, #14]
 8014362:	6183      	str	r3, [r0, #24]
 8014364:	4619      	mov	r1, r3
 8014366:	2208      	movs	r2, #8
 8014368:	305c      	adds	r0, #92	; 0x5c
 801436a:	f7fe f9bd 	bl	80126e8 <memset>
 801436e:	4b05      	ldr	r3, [pc, #20]	; (8014384 <std+0x38>)
 8014370:	6263      	str	r3, [r4, #36]	; 0x24
 8014372:	4b05      	ldr	r3, [pc, #20]	; (8014388 <std+0x3c>)
 8014374:	62a3      	str	r3, [r4, #40]	; 0x28
 8014376:	4b05      	ldr	r3, [pc, #20]	; (801438c <std+0x40>)
 8014378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801437a:	4b05      	ldr	r3, [pc, #20]	; (8014390 <std+0x44>)
 801437c:	6224      	str	r4, [r4, #32]
 801437e:	6323      	str	r3, [r4, #48]	; 0x30
 8014380:	bd10      	pop	{r4, pc}
 8014382:	bf00      	nop
 8014384:	080152ad 	.word	0x080152ad
 8014388:	080152cf 	.word	0x080152cf
 801438c:	08015307 	.word	0x08015307
 8014390:	0801532b 	.word	0x0801532b

08014394 <_cleanup_r>:
 8014394:	4901      	ldr	r1, [pc, #4]	; (801439c <_cleanup_r+0x8>)
 8014396:	f000 b8af 	b.w	80144f8 <_fwalk_reent>
 801439a:	bf00      	nop
 801439c:	080142d5 	.word	0x080142d5

080143a0 <__sfmoreglue>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	1e4a      	subs	r2, r1, #1
 80143a4:	2568      	movs	r5, #104	; 0x68
 80143a6:	4355      	muls	r5, r2
 80143a8:	460e      	mov	r6, r1
 80143aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143ae:	f7fe f9f3 	bl	8012798 <_malloc_r>
 80143b2:	4604      	mov	r4, r0
 80143b4:	b140      	cbz	r0, 80143c8 <__sfmoreglue+0x28>
 80143b6:	2100      	movs	r1, #0
 80143b8:	e9c0 1600 	strd	r1, r6, [r0]
 80143bc:	300c      	adds	r0, #12
 80143be:	60a0      	str	r0, [r4, #8]
 80143c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143c4:	f7fe f990 	bl	80126e8 <memset>
 80143c8:	4620      	mov	r0, r4
 80143ca:	bd70      	pop	{r4, r5, r6, pc}

080143cc <__sfp_lock_acquire>:
 80143cc:	4801      	ldr	r0, [pc, #4]	; (80143d4 <__sfp_lock_acquire+0x8>)
 80143ce:	f000 b8b8 	b.w	8014542 <__retarget_lock_acquire_recursive>
 80143d2:	bf00      	nop
 80143d4:	20002528 	.word	0x20002528

080143d8 <__sfp_lock_release>:
 80143d8:	4801      	ldr	r0, [pc, #4]	; (80143e0 <__sfp_lock_release+0x8>)
 80143da:	f000 b8b3 	b.w	8014544 <__retarget_lock_release_recursive>
 80143de:	bf00      	nop
 80143e0:	20002528 	.word	0x20002528

080143e4 <__sinit_lock_acquire>:
 80143e4:	4801      	ldr	r0, [pc, #4]	; (80143ec <__sinit_lock_acquire+0x8>)
 80143e6:	f000 b8ac 	b.w	8014542 <__retarget_lock_acquire_recursive>
 80143ea:	bf00      	nop
 80143ec:	20002523 	.word	0x20002523

080143f0 <__sinit_lock_release>:
 80143f0:	4801      	ldr	r0, [pc, #4]	; (80143f8 <__sinit_lock_release+0x8>)
 80143f2:	f000 b8a7 	b.w	8014544 <__retarget_lock_release_recursive>
 80143f6:	bf00      	nop
 80143f8:	20002523 	.word	0x20002523

080143fc <__sinit>:
 80143fc:	b510      	push	{r4, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	f7ff fff0 	bl	80143e4 <__sinit_lock_acquire>
 8014404:	69a3      	ldr	r3, [r4, #24]
 8014406:	b11b      	cbz	r3, 8014410 <__sinit+0x14>
 8014408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801440c:	f7ff bff0 	b.w	80143f0 <__sinit_lock_release>
 8014410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014414:	6523      	str	r3, [r4, #80]	; 0x50
 8014416:	4b13      	ldr	r3, [pc, #76]	; (8014464 <__sinit+0x68>)
 8014418:	4a13      	ldr	r2, [pc, #76]	; (8014468 <__sinit+0x6c>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	62a2      	str	r2, [r4, #40]	; 0x28
 801441e:	42a3      	cmp	r3, r4
 8014420:	bf04      	itt	eq
 8014422:	2301      	moveq	r3, #1
 8014424:	61a3      	streq	r3, [r4, #24]
 8014426:	4620      	mov	r0, r4
 8014428:	f000 f820 	bl	801446c <__sfp>
 801442c:	6060      	str	r0, [r4, #4]
 801442e:	4620      	mov	r0, r4
 8014430:	f000 f81c 	bl	801446c <__sfp>
 8014434:	60a0      	str	r0, [r4, #8]
 8014436:	4620      	mov	r0, r4
 8014438:	f000 f818 	bl	801446c <__sfp>
 801443c:	2200      	movs	r2, #0
 801443e:	60e0      	str	r0, [r4, #12]
 8014440:	2104      	movs	r1, #4
 8014442:	6860      	ldr	r0, [r4, #4]
 8014444:	f7ff ff82 	bl	801434c <std>
 8014448:	68a0      	ldr	r0, [r4, #8]
 801444a:	2201      	movs	r2, #1
 801444c:	2109      	movs	r1, #9
 801444e:	f7ff ff7d 	bl	801434c <std>
 8014452:	68e0      	ldr	r0, [r4, #12]
 8014454:	2202      	movs	r2, #2
 8014456:	2112      	movs	r1, #18
 8014458:	f7ff ff78 	bl	801434c <std>
 801445c:	2301      	movs	r3, #1
 801445e:	61a3      	str	r3, [r4, #24]
 8014460:	e7d2      	b.n	8014408 <__sinit+0xc>
 8014462:	bf00      	nop
 8014464:	0801e6f4 	.word	0x0801e6f4
 8014468:	08014395 	.word	0x08014395

0801446c <__sfp>:
 801446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446e:	4607      	mov	r7, r0
 8014470:	f7ff ffac 	bl	80143cc <__sfp_lock_acquire>
 8014474:	4b1e      	ldr	r3, [pc, #120]	; (80144f0 <__sfp+0x84>)
 8014476:	681e      	ldr	r6, [r3, #0]
 8014478:	69b3      	ldr	r3, [r6, #24]
 801447a:	b913      	cbnz	r3, 8014482 <__sfp+0x16>
 801447c:	4630      	mov	r0, r6
 801447e:	f7ff ffbd 	bl	80143fc <__sinit>
 8014482:	3648      	adds	r6, #72	; 0x48
 8014484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014488:	3b01      	subs	r3, #1
 801448a:	d503      	bpl.n	8014494 <__sfp+0x28>
 801448c:	6833      	ldr	r3, [r6, #0]
 801448e:	b30b      	cbz	r3, 80144d4 <__sfp+0x68>
 8014490:	6836      	ldr	r6, [r6, #0]
 8014492:	e7f7      	b.n	8014484 <__sfp+0x18>
 8014494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014498:	b9d5      	cbnz	r5, 80144d0 <__sfp+0x64>
 801449a:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <__sfp+0x88>)
 801449c:	60e3      	str	r3, [r4, #12]
 801449e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144a2:	6665      	str	r5, [r4, #100]	; 0x64
 80144a4:	f000 f84c 	bl	8014540 <__retarget_lock_init_recursive>
 80144a8:	f7ff ff96 	bl	80143d8 <__sfp_lock_release>
 80144ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144b4:	6025      	str	r5, [r4, #0]
 80144b6:	61a5      	str	r5, [r4, #24]
 80144b8:	2208      	movs	r2, #8
 80144ba:	4629      	mov	r1, r5
 80144bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144c0:	f7fe f912 	bl	80126e8 <memset>
 80144c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144cc:	4620      	mov	r0, r4
 80144ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d0:	3468      	adds	r4, #104	; 0x68
 80144d2:	e7d9      	b.n	8014488 <__sfp+0x1c>
 80144d4:	2104      	movs	r1, #4
 80144d6:	4638      	mov	r0, r7
 80144d8:	f7ff ff62 	bl	80143a0 <__sfmoreglue>
 80144dc:	4604      	mov	r4, r0
 80144de:	6030      	str	r0, [r6, #0]
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d1d5      	bne.n	8014490 <__sfp+0x24>
 80144e4:	f7ff ff78 	bl	80143d8 <__sfp_lock_release>
 80144e8:	230c      	movs	r3, #12
 80144ea:	603b      	str	r3, [r7, #0]
 80144ec:	e7ee      	b.n	80144cc <__sfp+0x60>
 80144ee:	bf00      	nop
 80144f0:	0801e6f4 	.word	0x0801e6f4
 80144f4:	ffff0001 	.word	0xffff0001

080144f8 <_fwalk_reent>:
 80144f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144fc:	4606      	mov	r6, r0
 80144fe:	4688      	mov	r8, r1
 8014500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014504:	2700      	movs	r7, #0
 8014506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801450a:	f1b9 0901 	subs.w	r9, r9, #1
 801450e:	d505      	bpl.n	801451c <_fwalk_reent+0x24>
 8014510:	6824      	ldr	r4, [r4, #0]
 8014512:	2c00      	cmp	r4, #0
 8014514:	d1f7      	bne.n	8014506 <_fwalk_reent+0xe>
 8014516:	4638      	mov	r0, r7
 8014518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801451c:	89ab      	ldrh	r3, [r5, #12]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d907      	bls.n	8014532 <_fwalk_reent+0x3a>
 8014522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014526:	3301      	adds	r3, #1
 8014528:	d003      	beq.n	8014532 <_fwalk_reent+0x3a>
 801452a:	4629      	mov	r1, r5
 801452c:	4630      	mov	r0, r6
 801452e:	47c0      	blx	r8
 8014530:	4307      	orrs	r7, r0
 8014532:	3568      	adds	r5, #104	; 0x68
 8014534:	e7e9      	b.n	801450a <_fwalk_reent+0x12>
	...

08014538 <_localeconv_r>:
 8014538:	4800      	ldr	r0, [pc, #0]	; (801453c <_localeconv_r+0x4>)
 801453a:	4770      	bx	lr
 801453c:	200002e4 	.word	0x200002e4

08014540 <__retarget_lock_init_recursive>:
 8014540:	4770      	bx	lr

08014542 <__retarget_lock_acquire_recursive>:
 8014542:	4770      	bx	lr

08014544 <__retarget_lock_release_recursive>:
 8014544:	4770      	bx	lr

08014546 <__swhatbuf_r>:
 8014546:	b570      	push	{r4, r5, r6, lr}
 8014548:	460e      	mov	r6, r1
 801454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801454e:	2900      	cmp	r1, #0
 8014550:	b096      	sub	sp, #88	; 0x58
 8014552:	4614      	mov	r4, r2
 8014554:	461d      	mov	r5, r3
 8014556:	da07      	bge.n	8014568 <__swhatbuf_r+0x22>
 8014558:	2300      	movs	r3, #0
 801455a:	602b      	str	r3, [r5, #0]
 801455c:	89b3      	ldrh	r3, [r6, #12]
 801455e:	061a      	lsls	r2, r3, #24
 8014560:	d410      	bmi.n	8014584 <__swhatbuf_r+0x3e>
 8014562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014566:	e00e      	b.n	8014586 <__swhatbuf_r+0x40>
 8014568:	466a      	mov	r2, sp
 801456a:	f000 ff35 	bl	80153d8 <_fstat_r>
 801456e:	2800      	cmp	r0, #0
 8014570:	dbf2      	blt.n	8014558 <__swhatbuf_r+0x12>
 8014572:	9a01      	ldr	r2, [sp, #4]
 8014574:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014578:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801457c:	425a      	negs	r2, r3
 801457e:	415a      	adcs	r2, r3
 8014580:	602a      	str	r2, [r5, #0]
 8014582:	e7ee      	b.n	8014562 <__swhatbuf_r+0x1c>
 8014584:	2340      	movs	r3, #64	; 0x40
 8014586:	2000      	movs	r0, #0
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	b016      	add	sp, #88	; 0x58
 801458c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014590 <__smakebuf_r>:
 8014590:	898b      	ldrh	r3, [r1, #12]
 8014592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014594:	079d      	lsls	r5, r3, #30
 8014596:	4606      	mov	r6, r0
 8014598:	460c      	mov	r4, r1
 801459a:	d507      	bpl.n	80145ac <__smakebuf_r+0x1c>
 801459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145a0:	6023      	str	r3, [r4, #0]
 80145a2:	6123      	str	r3, [r4, #16]
 80145a4:	2301      	movs	r3, #1
 80145a6:	6163      	str	r3, [r4, #20]
 80145a8:	b002      	add	sp, #8
 80145aa:	bd70      	pop	{r4, r5, r6, pc}
 80145ac:	ab01      	add	r3, sp, #4
 80145ae:	466a      	mov	r2, sp
 80145b0:	f7ff ffc9 	bl	8014546 <__swhatbuf_r>
 80145b4:	9900      	ldr	r1, [sp, #0]
 80145b6:	4605      	mov	r5, r0
 80145b8:	4630      	mov	r0, r6
 80145ba:	f7fe f8ed 	bl	8012798 <_malloc_r>
 80145be:	b948      	cbnz	r0, 80145d4 <__smakebuf_r+0x44>
 80145c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145c4:	059a      	lsls	r2, r3, #22
 80145c6:	d4ef      	bmi.n	80145a8 <__smakebuf_r+0x18>
 80145c8:	f023 0303 	bic.w	r3, r3, #3
 80145cc:	f043 0302 	orr.w	r3, r3, #2
 80145d0:	81a3      	strh	r3, [r4, #12]
 80145d2:	e7e3      	b.n	801459c <__smakebuf_r+0xc>
 80145d4:	4b0d      	ldr	r3, [pc, #52]	; (801460c <__smakebuf_r+0x7c>)
 80145d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145d8:	89a3      	ldrh	r3, [r4, #12]
 80145da:	6020      	str	r0, [r4, #0]
 80145dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	9b00      	ldr	r3, [sp, #0]
 80145e4:	6163      	str	r3, [r4, #20]
 80145e6:	9b01      	ldr	r3, [sp, #4]
 80145e8:	6120      	str	r0, [r4, #16]
 80145ea:	b15b      	cbz	r3, 8014604 <__smakebuf_r+0x74>
 80145ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145f0:	4630      	mov	r0, r6
 80145f2:	f000 ff03 	bl	80153fc <_isatty_r>
 80145f6:	b128      	cbz	r0, 8014604 <__smakebuf_r+0x74>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f023 0303 	bic.w	r3, r3, #3
 80145fe:	f043 0301 	orr.w	r3, r3, #1
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	89a0      	ldrh	r0, [r4, #12]
 8014606:	4305      	orrs	r5, r0
 8014608:	81a5      	strh	r5, [r4, #12]
 801460a:	e7cd      	b.n	80145a8 <__smakebuf_r+0x18>
 801460c:	08014395 	.word	0x08014395

08014610 <__malloc_lock>:
 8014610:	4801      	ldr	r0, [pc, #4]	; (8014618 <__malloc_lock+0x8>)
 8014612:	f7ff bf96 	b.w	8014542 <__retarget_lock_acquire_recursive>
 8014616:	bf00      	nop
 8014618:	20002524 	.word	0x20002524

0801461c <__malloc_unlock>:
 801461c:	4801      	ldr	r0, [pc, #4]	; (8014624 <__malloc_unlock+0x8>)
 801461e:	f7ff bf91 	b.w	8014544 <__retarget_lock_release_recursive>
 8014622:	bf00      	nop
 8014624:	20002524 	.word	0x20002524

08014628 <_Balloc>:
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801462c:	4604      	mov	r4, r0
 801462e:	460d      	mov	r5, r1
 8014630:	b976      	cbnz	r6, 8014650 <_Balloc+0x28>
 8014632:	2010      	movs	r0, #16
 8014634:	f7fe f812 	bl	801265c <malloc>
 8014638:	4602      	mov	r2, r0
 801463a:	6260      	str	r0, [r4, #36]	; 0x24
 801463c:	b920      	cbnz	r0, 8014648 <_Balloc+0x20>
 801463e:	4b18      	ldr	r3, [pc, #96]	; (80146a0 <_Balloc+0x78>)
 8014640:	4818      	ldr	r0, [pc, #96]	; (80146a4 <_Balloc+0x7c>)
 8014642:	2166      	movs	r1, #102	; 0x66
 8014644:	f000 fe88 	bl	8015358 <__assert_func>
 8014648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801464c:	6006      	str	r6, [r0, #0]
 801464e:	60c6      	str	r6, [r0, #12]
 8014650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014652:	68f3      	ldr	r3, [r6, #12]
 8014654:	b183      	cbz	r3, 8014678 <_Balloc+0x50>
 8014656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801465e:	b9b8      	cbnz	r0, 8014690 <_Balloc+0x68>
 8014660:	2101      	movs	r1, #1
 8014662:	fa01 f605 	lsl.w	r6, r1, r5
 8014666:	1d72      	adds	r2, r6, #5
 8014668:	0092      	lsls	r2, r2, #2
 801466a:	4620      	mov	r0, r4
 801466c:	f000 fb5a 	bl	8014d24 <_calloc_r>
 8014670:	b160      	cbz	r0, 801468c <_Balloc+0x64>
 8014672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014676:	e00e      	b.n	8014696 <_Balloc+0x6e>
 8014678:	2221      	movs	r2, #33	; 0x21
 801467a:	2104      	movs	r1, #4
 801467c:	4620      	mov	r0, r4
 801467e:	f000 fb51 	bl	8014d24 <_calloc_r>
 8014682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014684:	60f0      	str	r0, [r6, #12]
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d1e4      	bne.n	8014656 <_Balloc+0x2e>
 801468c:	2000      	movs	r0, #0
 801468e:	bd70      	pop	{r4, r5, r6, pc}
 8014690:	6802      	ldr	r2, [r0, #0]
 8014692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014696:	2300      	movs	r3, #0
 8014698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801469c:	e7f7      	b.n	801468e <_Balloc+0x66>
 801469e:	bf00      	nop
 80146a0:	0801e739 	.word	0x0801e739
 80146a4:	0801e820 	.word	0x0801e820

080146a8 <_Bfree>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146ac:	4605      	mov	r5, r0
 80146ae:	460c      	mov	r4, r1
 80146b0:	b976      	cbnz	r6, 80146d0 <_Bfree+0x28>
 80146b2:	2010      	movs	r0, #16
 80146b4:	f7fd ffd2 	bl	801265c <malloc>
 80146b8:	4602      	mov	r2, r0
 80146ba:	6268      	str	r0, [r5, #36]	; 0x24
 80146bc:	b920      	cbnz	r0, 80146c8 <_Bfree+0x20>
 80146be:	4b09      	ldr	r3, [pc, #36]	; (80146e4 <_Bfree+0x3c>)
 80146c0:	4809      	ldr	r0, [pc, #36]	; (80146e8 <_Bfree+0x40>)
 80146c2:	218a      	movs	r1, #138	; 0x8a
 80146c4:	f000 fe48 	bl	8015358 <__assert_func>
 80146c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146cc:	6006      	str	r6, [r0, #0]
 80146ce:	60c6      	str	r6, [r0, #12]
 80146d0:	b13c      	cbz	r4, 80146e2 <_Bfree+0x3a>
 80146d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146d4:	6862      	ldr	r2, [r4, #4]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146dc:	6021      	str	r1, [r4, #0]
 80146de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80146e2:	bd70      	pop	{r4, r5, r6, pc}
 80146e4:	0801e739 	.word	0x0801e739
 80146e8:	0801e820 	.word	0x0801e820

080146ec <__multadd>:
 80146ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f0:	690e      	ldr	r6, [r1, #16]
 80146f2:	4607      	mov	r7, r0
 80146f4:	4698      	mov	r8, r3
 80146f6:	460c      	mov	r4, r1
 80146f8:	f101 0014 	add.w	r0, r1, #20
 80146fc:	2300      	movs	r3, #0
 80146fe:	6805      	ldr	r5, [r0, #0]
 8014700:	b2a9      	uxth	r1, r5
 8014702:	fb02 8101 	mla	r1, r2, r1, r8
 8014706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801470a:	0c2d      	lsrs	r5, r5, #16
 801470c:	fb02 c505 	mla	r5, r2, r5, ip
 8014710:	b289      	uxth	r1, r1
 8014712:	3301      	adds	r3, #1
 8014714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014718:	429e      	cmp	r6, r3
 801471a:	f840 1b04 	str.w	r1, [r0], #4
 801471e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014722:	dcec      	bgt.n	80146fe <__multadd+0x12>
 8014724:	f1b8 0f00 	cmp.w	r8, #0
 8014728:	d022      	beq.n	8014770 <__multadd+0x84>
 801472a:	68a3      	ldr	r3, [r4, #8]
 801472c:	42b3      	cmp	r3, r6
 801472e:	dc19      	bgt.n	8014764 <__multadd+0x78>
 8014730:	6861      	ldr	r1, [r4, #4]
 8014732:	4638      	mov	r0, r7
 8014734:	3101      	adds	r1, #1
 8014736:	f7ff ff77 	bl	8014628 <_Balloc>
 801473a:	4605      	mov	r5, r0
 801473c:	b928      	cbnz	r0, 801474a <__multadd+0x5e>
 801473e:	4602      	mov	r2, r0
 8014740:	4b0d      	ldr	r3, [pc, #52]	; (8014778 <__multadd+0x8c>)
 8014742:	480e      	ldr	r0, [pc, #56]	; (801477c <__multadd+0x90>)
 8014744:	21b5      	movs	r1, #181	; 0xb5
 8014746:	f000 fe07 	bl	8015358 <__assert_func>
 801474a:	6922      	ldr	r2, [r4, #16]
 801474c:	3202      	adds	r2, #2
 801474e:	f104 010c 	add.w	r1, r4, #12
 8014752:	0092      	lsls	r2, r2, #2
 8014754:	300c      	adds	r0, #12
 8014756:	f7fd ff9f 	bl	8012698 <memcpy>
 801475a:	4621      	mov	r1, r4
 801475c:	4638      	mov	r0, r7
 801475e:	f7ff ffa3 	bl	80146a8 <_Bfree>
 8014762:	462c      	mov	r4, r5
 8014764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014768:	3601      	adds	r6, #1
 801476a:	f8c3 8014 	str.w	r8, [r3, #20]
 801476e:	6126      	str	r6, [r4, #16]
 8014770:	4620      	mov	r0, r4
 8014772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014776:	bf00      	nop
 8014778:	0801e7af 	.word	0x0801e7af
 801477c:	0801e820 	.word	0x0801e820

08014780 <__hi0bits>:
 8014780:	0c03      	lsrs	r3, r0, #16
 8014782:	041b      	lsls	r3, r3, #16
 8014784:	b9d3      	cbnz	r3, 80147bc <__hi0bits+0x3c>
 8014786:	0400      	lsls	r0, r0, #16
 8014788:	2310      	movs	r3, #16
 801478a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801478e:	bf04      	itt	eq
 8014790:	0200      	lsleq	r0, r0, #8
 8014792:	3308      	addeq	r3, #8
 8014794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014798:	bf04      	itt	eq
 801479a:	0100      	lsleq	r0, r0, #4
 801479c:	3304      	addeq	r3, #4
 801479e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80147a2:	bf04      	itt	eq
 80147a4:	0080      	lsleq	r0, r0, #2
 80147a6:	3302      	addeq	r3, #2
 80147a8:	2800      	cmp	r0, #0
 80147aa:	db05      	blt.n	80147b8 <__hi0bits+0x38>
 80147ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80147b0:	f103 0301 	add.w	r3, r3, #1
 80147b4:	bf08      	it	eq
 80147b6:	2320      	moveq	r3, #32
 80147b8:	4618      	mov	r0, r3
 80147ba:	4770      	bx	lr
 80147bc:	2300      	movs	r3, #0
 80147be:	e7e4      	b.n	801478a <__hi0bits+0xa>

080147c0 <__lo0bits>:
 80147c0:	6803      	ldr	r3, [r0, #0]
 80147c2:	f013 0207 	ands.w	r2, r3, #7
 80147c6:	4601      	mov	r1, r0
 80147c8:	d00b      	beq.n	80147e2 <__lo0bits+0x22>
 80147ca:	07da      	lsls	r2, r3, #31
 80147cc:	d424      	bmi.n	8014818 <__lo0bits+0x58>
 80147ce:	0798      	lsls	r0, r3, #30
 80147d0:	bf49      	itett	mi
 80147d2:	085b      	lsrmi	r3, r3, #1
 80147d4:	089b      	lsrpl	r3, r3, #2
 80147d6:	2001      	movmi	r0, #1
 80147d8:	600b      	strmi	r3, [r1, #0]
 80147da:	bf5c      	itt	pl
 80147dc:	600b      	strpl	r3, [r1, #0]
 80147de:	2002      	movpl	r0, #2
 80147e0:	4770      	bx	lr
 80147e2:	b298      	uxth	r0, r3
 80147e4:	b9b0      	cbnz	r0, 8014814 <__lo0bits+0x54>
 80147e6:	0c1b      	lsrs	r3, r3, #16
 80147e8:	2010      	movs	r0, #16
 80147ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80147ee:	bf04      	itt	eq
 80147f0:	0a1b      	lsreq	r3, r3, #8
 80147f2:	3008      	addeq	r0, #8
 80147f4:	071a      	lsls	r2, r3, #28
 80147f6:	bf04      	itt	eq
 80147f8:	091b      	lsreq	r3, r3, #4
 80147fa:	3004      	addeq	r0, #4
 80147fc:	079a      	lsls	r2, r3, #30
 80147fe:	bf04      	itt	eq
 8014800:	089b      	lsreq	r3, r3, #2
 8014802:	3002      	addeq	r0, #2
 8014804:	07da      	lsls	r2, r3, #31
 8014806:	d403      	bmi.n	8014810 <__lo0bits+0x50>
 8014808:	085b      	lsrs	r3, r3, #1
 801480a:	f100 0001 	add.w	r0, r0, #1
 801480e:	d005      	beq.n	801481c <__lo0bits+0x5c>
 8014810:	600b      	str	r3, [r1, #0]
 8014812:	4770      	bx	lr
 8014814:	4610      	mov	r0, r2
 8014816:	e7e8      	b.n	80147ea <__lo0bits+0x2a>
 8014818:	2000      	movs	r0, #0
 801481a:	4770      	bx	lr
 801481c:	2020      	movs	r0, #32
 801481e:	4770      	bx	lr

08014820 <__i2b>:
 8014820:	b510      	push	{r4, lr}
 8014822:	460c      	mov	r4, r1
 8014824:	2101      	movs	r1, #1
 8014826:	f7ff feff 	bl	8014628 <_Balloc>
 801482a:	4602      	mov	r2, r0
 801482c:	b928      	cbnz	r0, 801483a <__i2b+0x1a>
 801482e:	4b05      	ldr	r3, [pc, #20]	; (8014844 <__i2b+0x24>)
 8014830:	4805      	ldr	r0, [pc, #20]	; (8014848 <__i2b+0x28>)
 8014832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014836:	f000 fd8f 	bl	8015358 <__assert_func>
 801483a:	2301      	movs	r3, #1
 801483c:	6144      	str	r4, [r0, #20]
 801483e:	6103      	str	r3, [r0, #16]
 8014840:	bd10      	pop	{r4, pc}
 8014842:	bf00      	nop
 8014844:	0801e7af 	.word	0x0801e7af
 8014848:	0801e820 	.word	0x0801e820

0801484c <__multiply>:
 801484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014850:	4614      	mov	r4, r2
 8014852:	690a      	ldr	r2, [r1, #16]
 8014854:	6923      	ldr	r3, [r4, #16]
 8014856:	429a      	cmp	r2, r3
 8014858:	bfb8      	it	lt
 801485a:	460b      	movlt	r3, r1
 801485c:	460d      	mov	r5, r1
 801485e:	bfbc      	itt	lt
 8014860:	4625      	movlt	r5, r4
 8014862:	461c      	movlt	r4, r3
 8014864:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801486c:	68ab      	ldr	r3, [r5, #8]
 801486e:	6869      	ldr	r1, [r5, #4]
 8014870:	eb0a 0709 	add.w	r7, sl, r9
 8014874:	42bb      	cmp	r3, r7
 8014876:	b085      	sub	sp, #20
 8014878:	bfb8      	it	lt
 801487a:	3101      	addlt	r1, #1
 801487c:	f7ff fed4 	bl	8014628 <_Balloc>
 8014880:	b930      	cbnz	r0, 8014890 <__multiply+0x44>
 8014882:	4602      	mov	r2, r0
 8014884:	4b42      	ldr	r3, [pc, #264]	; (8014990 <__multiply+0x144>)
 8014886:	4843      	ldr	r0, [pc, #268]	; (8014994 <__multiply+0x148>)
 8014888:	f240 115d 	movw	r1, #349	; 0x15d
 801488c:	f000 fd64 	bl	8015358 <__assert_func>
 8014890:	f100 0614 	add.w	r6, r0, #20
 8014894:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014898:	4633      	mov	r3, r6
 801489a:	2200      	movs	r2, #0
 801489c:	4543      	cmp	r3, r8
 801489e:	d31e      	bcc.n	80148de <__multiply+0x92>
 80148a0:	f105 0c14 	add.w	ip, r5, #20
 80148a4:	f104 0314 	add.w	r3, r4, #20
 80148a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80148ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80148b0:	9202      	str	r2, [sp, #8]
 80148b2:	ebac 0205 	sub.w	r2, ip, r5
 80148b6:	3a15      	subs	r2, #21
 80148b8:	f022 0203 	bic.w	r2, r2, #3
 80148bc:	3204      	adds	r2, #4
 80148be:	f105 0115 	add.w	r1, r5, #21
 80148c2:	458c      	cmp	ip, r1
 80148c4:	bf38      	it	cc
 80148c6:	2204      	movcc	r2, #4
 80148c8:	9201      	str	r2, [sp, #4]
 80148ca:	9a02      	ldr	r2, [sp, #8]
 80148cc:	9303      	str	r3, [sp, #12]
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d808      	bhi.n	80148e4 <__multiply+0x98>
 80148d2:	2f00      	cmp	r7, #0
 80148d4:	dc55      	bgt.n	8014982 <__multiply+0x136>
 80148d6:	6107      	str	r7, [r0, #16]
 80148d8:	b005      	add	sp, #20
 80148da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148de:	f843 2b04 	str.w	r2, [r3], #4
 80148e2:	e7db      	b.n	801489c <__multiply+0x50>
 80148e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80148e8:	f1ba 0f00 	cmp.w	sl, #0
 80148ec:	d020      	beq.n	8014930 <__multiply+0xe4>
 80148ee:	f105 0e14 	add.w	lr, r5, #20
 80148f2:	46b1      	mov	r9, r6
 80148f4:	2200      	movs	r2, #0
 80148f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80148fa:	f8d9 b000 	ldr.w	fp, [r9]
 80148fe:	b2a1      	uxth	r1, r4
 8014900:	fa1f fb8b 	uxth.w	fp, fp
 8014904:	fb0a b101 	mla	r1, sl, r1, fp
 8014908:	4411      	add	r1, r2
 801490a:	f8d9 2000 	ldr.w	r2, [r9]
 801490e:	0c24      	lsrs	r4, r4, #16
 8014910:	0c12      	lsrs	r2, r2, #16
 8014912:	fb0a 2404 	mla	r4, sl, r4, r2
 8014916:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801491a:	b289      	uxth	r1, r1
 801491c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014920:	45f4      	cmp	ip, lr
 8014922:	f849 1b04 	str.w	r1, [r9], #4
 8014926:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801492a:	d8e4      	bhi.n	80148f6 <__multiply+0xaa>
 801492c:	9901      	ldr	r1, [sp, #4]
 801492e:	5072      	str	r2, [r6, r1]
 8014930:	9a03      	ldr	r2, [sp, #12]
 8014932:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014936:	3304      	adds	r3, #4
 8014938:	f1b9 0f00 	cmp.w	r9, #0
 801493c:	d01f      	beq.n	801497e <__multiply+0x132>
 801493e:	6834      	ldr	r4, [r6, #0]
 8014940:	f105 0114 	add.w	r1, r5, #20
 8014944:	46b6      	mov	lr, r6
 8014946:	f04f 0a00 	mov.w	sl, #0
 801494a:	880a      	ldrh	r2, [r1, #0]
 801494c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014950:	fb09 b202 	mla	r2, r9, r2, fp
 8014954:	4492      	add	sl, r2
 8014956:	b2a4      	uxth	r4, r4
 8014958:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801495c:	f84e 4b04 	str.w	r4, [lr], #4
 8014960:	f851 4b04 	ldr.w	r4, [r1], #4
 8014964:	f8be 2000 	ldrh.w	r2, [lr]
 8014968:	0c24      	lsrs	r4, r4, #16
 801496a:	fb09 2404 	mla	r4, r9, r4, r2
 801496e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014972:	458c      	cmp	ip, r1
 8014974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014978:	d8e7      	bhi.n	801494a <__multiply+0xfe>
 801497a:	9a01      	ldr	r2, [sp, #4]
 801497c:	50b4      	str	r4, [r6, r2]
 801497e:	3604      	adds	r6, #4
 8014980:	e7a3      	b.n	80148ca <__multiply+0x7e>
 8014982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1a5      	bne.n	80148d6 <__multiply+0x8a>
 801498a:	3f01      	subs	r7, #1
 801498c:	e7a1      	b.n	80148d2 <__multiply+0x86>
 801498e:	bf00      	nop
 8014990:	0801e7af 	.word	0x0801e7af
 8014994:	0801e820 	.word	0x0801e820

08014998 <__pow5mult>:
 8014998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801499c:	4615      	mov	r5, r2
 801499e:	f012 0203 	ands.w	r2, r2, #3
 80149a2:	4606      	mov	r6, r0
 80149a4:	460f      	mov	r7, r1
 80149a6:	d007      	beq.n	80149b8 <__pow5mult+0x20>
 80149a8:	4c25      	ldr	r4, [pc, #148]	; (8014a40 <__pow5mult+0xa8>)
 80149aa:	3a01      	subs	r2, #1
 80149ac:	2300      	movs	r3, #0
 80149ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80149b2:	f7ff fe9b 	bl	80146ec <__multadd>
 80149b6:	4607      	mov	r7, r0
 80149b8:	10ad      	asrs	r5, r5, #2
 80149ba:	d03d      	beq.n	8014a38 <__pow5mult+0xa0>
 80149bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80149be:	b97c      	cbnz	r4, 80149e0 <__pow5mult+0x48>
 80149c0:	2010      	movs	r0, #16
 80149c2:	f7fd fe4b 	bl	801265c <malloc>
 80149c6:	4602      	mov	r2, r0
 80149c8:	6270      	str	r0, [r6, #36]	; 0x24
 80149ca:	b928      	cbnz	r0, 80149d8 <__pow5mult+0x40>
 80149cc:	4b1d      	ldr	r3, [pc, #116]	; (8014a44 <__pow5mult+0xac>)
 80149ce:	481e      	ldr	r0, [pc, #120]	; (8014a48 <__pow5mult+0xb0>)
 80149d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80149d4:	f000 fcc0 	bl	8015358 <__assert_func>
 80149d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149dc:	6004      	str	r4, [r0, #0]
 80149de:	60c4      	str	r4, [r0, #12]
 80149e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80149e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80149e8:	b94c      	cbnz	r4, 80149fe <__pow5mult+0x66>
 80149ea:	f240 2171 	movw	r1, #625	; 0x271
 80149ee:	4630      	mov	r0, r6
 80149f0:	f7ff ff16 	bl	8014820 <__i2b>
 80149f4:	2300      	movs	r3, #0
 80149f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80149fa:	4604      	mov	r4, r0
 80149fc:	6003      	str	r3, [r0, #0]
 80149fe:	f04f 0900 	mov.w	r9, #0
 8014a02:	07eb      	lsls	r3, r5, #31
 8014a04:	d50a      	bpl.n	8014a1c <__pow5mult+0x84>
 8014a06:	4639      	mov	r1, r7
 8014a08:	4622      	mov	r2, r4
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f7ff ff1e 	bl	801484c <__multiply>
 8014a10:	4639      	mov	r1, r7
 8014a12:	4680      	mov	r8, r0
 8014a14:	4630      	mov	r0, r6
 8014a16:	f7ff fe47 	bl	80146a8 <_Bfree>
 8014a1a:	4647      	mov	r7, r8
 8014a1c:	106d      	asrs	r5, r5, #1
 8014a1e:	d00b      	beq.n	8014a38 <__pow5mult+0xa0>
 8014a20:	6820      	ldr	r0, [r4, #0]
 8014a22:	b938      	cbnz	r0, 8014a34 <__pow5mult+0x9c>
 8014a24:	4622      	mov	r2, r4
 8014a26:	4621      	mov	r1, r4
 8014a28:	4630      	mov	r0, r6
 8014a2a:	f7ff ff0f 	bl	801484c <__multiply>
 8014a2e:	6020      	str	r0, [r4, #0]
 8014a30:	f8c0 9000 	str.w	r9, [r0]
 8014a34:	4604      	mov	r4, r0
 8014a36:	e7e4      	b.n	8014a02 <__pow5mult+0x6a>
 8014a38:	4638      	mov	r0, r7
 8014a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a3e:	bf00      	nop
 8014a40:	0801e970 	.word	0x0801e970
 8014a44:	0801e739 	.word	0x0801e739
 8014a48:	0801e820 	.word	0x0801e820

08014a4c <__lshift>:
 8014a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a50:	460c      	mov	r4, r1
 8014a52:	6849      	ldr	r1, [r1, #4]
 8014a54:	6923      	ldr	r3, [r4, #16]
 8014a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a5a:	68a3      	ldr	r3, [r4, #8]
 8014a5c:	4607      	mov	r7, r0
 8014a5e:	4691      	mov	r9, r2
 8014a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a64:	f108 0601 	add.w	r6, r8, #1
 8014a68:	42b3      	cmp	r3, r6
 8014a6a:	db0b      	blt.n	8014a84 <__lshift+0x38>
 8014a6c:	4638      	mov	r0, r7
 8014a6e:	f7ff fddb 	bl	8014628 <_Balloc>
 8014a72:	4605      	mov	r5, r0
 8014a74:	b948      	cbnz	r0, 8014a8a <__lshift+0x3e>
 8014a76:	4602      	mov	r2, r0
 8014a78:	4b28      	ldr	r3, [pc, #160]	; (8014b1c <__lshift+0xd0>)
 8014a7a:	4829      	ldr	r0, [pc, #164]	; (8014b20 <__lshift+0xd4>)
 8014a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014a80:	f000 fc6a 	bl	8015358 <__assert_func>
 8014a84:	3101      	adds	r1, #1
 8014a86:	005b      	lsls	r3, r3, #1
 8014a88:	e7ee      	b.n	8014a68 <__lshift+0x1c>
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	f100 0114 	add.w	r1, r0, #20
 8014a90:	f100 0210 	add.w	r2, r0, #16
 8014a94:	4618      	mov	r0, r3
 8014a96:	4553      	cmp	r3, sl
 8014a98:	db33      	blt.n	8014b02 <__lshift+0xb6>
 8014a9a:	6920      	ldr	r0, [r4, #16]
 8014a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014aa0:	f104 0314 	add.w	r3, r4, #20
 8014aa4:	f019 091f 	ands.w	r9, r9, #31
 8014aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014ab0:	d02b      	beq.n	8014b0a <__lshift+0xbe>
 8014ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8014ab6:	468a      	mov	sl, r1
 8014ab8:	2200      	movs	r2, #0
 8014aba:	6818      	ldr	r0, [r3, #0]
 8014abc:	fa00 f009 	lsl.w	r0, r0, r9
 8014ac0:	4302      	orrs	r2, r0
 8014ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8014ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aca:	459c      	cmp	ip, r3
 8014acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014ad0:	d8f3      	bhi.n	8014aba <__lshift+0x6e>
 8014ad2:	ebac 0304 	sub.w	r3, ip, r4
 8014ad6:	3b15      	subs	r3, #21
 8014ad8:	f023 0303 	bic.w	r3, r3, #3
 8014adc:	3304      	adds	r3, #4
 8014ade:	f104 0015 	add.w	r0, r4, #21
 8014ae2:	4584      	cmp	ip, r0
 8014ae4:	bf38      	it	cc
 8014ae6:	2304      	movcc	r3, #4
 8014ae8:	50ca      	str	r2, [r1, r3]
 8014aea:	b10a      	cbz	r2, 8014af0 <__lshift+0xa4>
 8014aec:	f108 0602 	add.w	r6, r8, #2
 8014af0:	3e01      	subs	r6, #1
 8014af2:	4638      	mov	r0, r7
 8014af4:	612e      	str	r6, [r5, #16]
 8014af6:	4621      	mov	r1, r4
 8014af8:	f7ff fdd6 	bl	80146a8 <_Bfree>
 8014afc:	4628      	mov	r0, r5
 8014afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b06:	3301      	adds	r3, #1
 8014b08:	e7c5      	b.n	8014a96 <__lshift+0x4a>
 8014b0a:	3904      	subs	r1, #4
 8014b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b14:	459c      	cmp	ip, r3
 8014b16:	d8f9      	bhi.n	8014b0c <__lshift+0xc0>
 8014b18:	e7ea      	b.n	8014af0 <__lshift+0xa4>
 8014b1a:	bf00      	nop
 8014b1c:	0801e7af 	.word	0x0801e7af
 8014b20:	0801e820 	.word	0x0801e820

08014b24 <__mcmp>:
 8014b24:	b530      	push	{r4, r5, lr}
 8014b26:	6902      	ldr	r2, [r0, #16]
 8014b28:	690c      	ldr	r4, [r1, #16]
 8014b2a:	1b12      	subs	r2, r2, r4
 8014b2c:	d10e      	bne.n	8014b4c <__mcmp+0x28>
 8014b2e:	f100 0314 	add.w	r3, r0, #20
 8014b32:	3114      	adds	r1, #20
 8014b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b44:	42a5      	cmp	r5, r4
 8014b46:	d003      	beq.n	8014b50 <__mcmp+0x2c>
 8014b48:	d305      	bcc.n	8014b56 <__mcmp+0x32>
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	bd30      	pop	{r4, r5, pc}
 8014b50:	4283      	cmp	r3, r0
 8014b52:	d3f3      	bcc.n	8014b3c <__mcmp+0x18>
 8014b54:	e7fa      	b.n	8014b4c <__mcmp+0x28>
 8014b56:	f04f 32ff 	mov.w	r2, #4294967295
 8014b5a:	e7f7      	b.n	8014b4c <__mcmp+0x28>

08014b5c <__mdiff>:
 8014b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b60:	460c      	mov	r4, r1
 8014b62:	4606      	mov	r6, r0
 8014b64:	4611      	mov	r1, r2
 8014b66:	4620      	mov	r0, r4
 8014b68:	4617      	mov	r7, r2
 8014b6a:	f7ff ffdb 	bl	8014b24 <__mcmp>
 8014b6e:	1e05      	subs	r5, r0, #0
 8014b70:	d110      	bne.n	8014b94 <__mdiff+0x38>
 8014b72:	4629      	mov	r1, r5
 8014b74:	4630      	mov	r0, r6
 8014b76:	f7ff fd57 	bl	8014628 <_Balloc>
 8014b7a:	b930      	cbnz	r0, 8014b8a <__mdiff+0x2e>
 8014b7c:	4b39      	ldr	r3, [pc, #228]	; (8014c64 <__mdiff+0x108>)
 8014b7e:	4602      	mov	r2, r0
 8014b80:	f240 2132 	movw	r1, #562	; 0x232
 8014b84:	4838      	ldr	r0, [pc, #224]	; (8014c68 <__mdiff+0x10c>)
 8014b86:	f000 fbe7 	bl	8015358 <__assert_func>
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b94:	bfa4      	itt	ge
 8014b96:	463b      	movge	r3, r7
 8014b98:	4627      	movge	r7, r4
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	6879      	ldr	r1, [r7, #4]
 8014b9e:	bfa6      	itte	ge
 8014ba0:	461c      	movge	r4, r3
 8014ba2:	2500      	movge	r5, #0
 8014ba4:	2501      	movlt	r5, #1
 8014ba6:	f7ff fd3f 	bl	8014628 <_Balloc>
 8014baa:	b920      	cbnz	r0, 8014bb6 <__mdiff+0x5a>
 8014bac:	4b2d      	ldr	r3, [pc, #180]	; (8014c64 <__mdiff+0x108>)
 8014bae:	4602      	mov	r2, r0
 8014bb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014bb4:	e7e6      	b.n	8014b84 <__mdiff+0x28>
 8014bb6:	693e      	ldr	r6, [r7, #16]
 8014bb8:	60c5      	str	r5, [r0, #12]
 8014bba:	6925      	ldr	r5, [r4, #16]
 8014bbc:	f107 0114 	add.w	r1, r7, #20
 8014bc0:	f104 0914 	add.w	r9, r4, #20
 8014bc4:	f100 0e14 	add.w	lr, r0, #20
 8014bc8:	f107 0210 	add.w	r2, r7, #16
 8014bcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014bd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014bd4:	46f2      	mov	sl, lr
 8014bd6:	2700      	movs	r7, #0
 8014bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014be0:	fa1f f883 	uxth.w	r8, r3
 8014be4:	fa17 f78b 	uxtah	r7, r7, fp
 8014be8:	0c1b      	lsrs	r3, r3, #16
 8014bea:	eba7 0808 	sub.w	r8, r7, r8
 8014bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014bf6:	fa1f f888 	uxth.w	r8, r8
 8014bfa:	141f      	asrs	r7, r3, #16
 8014bfc:	454d      	cmp	r5, r9
 8014bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c02:	f84a 3b04 	str.w	r3, [sl], #4
 8014c06:	d8e7      	bhi.n	8014bd8 <__mdiff+0x7c>
 8014c08:	1b2b      	subs	r3, r5, r4
 8014c0a:	3b15      	subs	r3, #21
 8014c0c:	f023 0303 	bic.w	r3, r3, #3
 8014c10:	3304      	adds	r3, #4
 8014c12:	3415      	adds	r4, #21
 8014c14:	42a5      	cmp	r5, r4
 8014c16:	bf38      	it	cc
 8014c18:	2304      	movcc	r3, #4
 8014c1a:	4419      	add	r1, r3
 8014c1c:	4473      	add	r3, lr
 8014c1e:	469e      	mov	lr, r3
 8014c20:	460d      	mov	r5, r1
 8014c22:	4565      	cmp	r5, ip
 8014c24:	d30e      	bcc.n	8014c44 <__mdiff+0xe8>
 8014c26:	f10c 0203 	add.w	r2, ip, #3
 8014c2a:	1a52      	subs	r2, r2, r1
 8014c2c:	f022 0203 	bic.w	r2, r2, #3
 8014c30:	3903      	subs	r1, #3
 8014c32:	458c      	cmp	ip, r1
 8014c34:	bf38      	it	cc
 8014c36:	2200      	movcc	r2, #0
 8014c38:	441a      	add	r2, r3
 8014c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014c3e:	b17b      	cbz	r3, 8014c60 <__mdiff+0x104>
 8014c40:	6106      	str	r6, [r0, #16]
 8014c42:	e7a5      	b.n	8014b90 <__mdiff+0x34>
 8014c44:	f855 8b04 	ldr.w	r8, [r5], #4
 8014c48:	fa17 f488 	uxtah	r4, r7, r8
 8014c4c:	1422      	asrs	r2, r4, #16
 8014c4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014c52:	b2a4      	uxth	r4, r4
 8014c54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014c58:	f84e 4b04 	str.w	r4, [lr], #4
 8014c5c:	1417      	asrs	r7, r2, #16
 8014c5e:	e7e0      	b.n	8014c22 <__mdiff+0xc6>
 8014c60:	3e01      	subs	r6, #1
 8014c62:	e7ea      	b.n	8014c3a <__mdiff+0xde>
 8014c64:	0801e7af 	.word	0x0801e7af
 8014c68:	0801e820 	.word	0x0801e820

08014c6c <__d2b>:
 8014c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c70:	4689      	mov	r9, r1
 8014c72:	2101      	movs	r1, #1
 8014c74:	ec57 6b10 	vmov	r6, r7, d0
 8014c78:	4690      	mov	r8, r2
 8014c7a:	f7ff fcd5 	bl	8014628 <_Balloc>
 8014c7e:	4604      	mov	r4, r0
 8014c80:	b930      	cbnz	r0, 8014c90 <__d2b+0x24>
 8014c82:	4602      	mov	r2, r0
 8014c84:	4b25      	ldr	r3, [pc, #148]	; (8014d1c <__d2b+0xb0>)
 8014c86:	4826      	ldr	r0, [pc, #152]	; (8014d20 <__d2b+0xb4>)
 8014c88:	f240 310a 	movw	r1, #778	; 0x30a
 8014c8c:	f000 fb64 	bl	8015358 <__assert_func>
 8014c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c98:	bb35      	cbnz	r5, 8014ce8 <__d2b+0x7c>
 8014c9a:	2e00      	cmp	r6, #0
 8014c9c:	9301      	str	r3, [sp, #4]
 8014c9e:	d028      	beq.n	8014cf2 <__d2b+0x86>
 8014ca0:	4668      	mov	r0, sp
 8014ca2:	9600      	str	r6, [sp, #0]
 8014ca4:	f7ff fd8c 	bl	80147c0 <__lo0bits>
 8014ca8:	9900      	ldr	r1, [sp, #0]
 8014caa:	b300      	cbz	r0, 8014cee <__d2b+0x82>
 8014cac:	9a01      	ldr	r2, [sp, #4]
 8014cae:	f1c0 0320 	rsb	r3, r0, #32
 8014cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8014cb6:	430b      	orrs	r3, r1
 8014cb8:	40c2      	lsrs	r2, r0
 8014cba:	6163      	str	r3, [r4, #20]
 8014cbc:	9201      	str	r2, [sp, #4]
 8014cbe:	9b01      	ldr	r3, [sp, #4]
 8014cc0:	61a3      	str	r3, [r4, #24]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	bf14      	ite	ne
 8014cc6:	2202      	movne	r2, #2
 8014cc8:	2201      	moveq	r2, #1
 8014cca:	6122      	str	r2, [r4, #16]
 8014ccc:	b1d5      	cbz	r5, 8014d04 <__d2b+0x98>
 8014cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014cd2:	4405      	add	r5, r0
 8014cd4:	f8c9 5000 	str.w	r5, [r9]
 8014cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cdc:	f8c8 0000 	str.w	r0, [r8]
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	b003      	add	sp, #12
 8014ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014cec:	e7d5      	b.n	8014c9a <__d2b+0x2e>
 8014cee:	6161      	str	r1, [r4, #20]
 8014cf0:	e7e5      	b.n	8014cbe <__d2b+0x52>
 8014cf2:	a801      	add	r0, sp, #4
 8014cf4:	f7ff fd64 	bl	80147c0 <__lo0bits>
 8014cf8:	9b01      	ldr	r3, [sp, #4]
 8014cfa:	6163      	str	r3, [r4, #20]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	6122      	str	r2, [r4, #16]
 8014d00:	3020      	adds	r0, #32
 8014d02:	e7e3      	b.n	8014ccc <__d2b+0x60>
 8014d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d0c:	f8c9 0000 	str.w	r0, [r9]
 8014d10:	6918      	ldr	r0, [r3, #16]
 8014d12:	f7ff fd35 	bl	8014780 <__hi0bits>
 8014d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d1a:	e7df      	b.n	8014cdc <__d2b+0x70>
 8014d1c:	0801e7af 	.word	0x0801e7af
 8014d20:	0801e820 	.word	0x0801e820

08014d24 <_calloc_r>:
 8014d24:	b513      	push	{r0, r1, r4, lr}
 8014d26:	434a      	muls	r2, r1
 8014d28:	4611      	mov	r1, r2
 8014d2a:	9201      	str	r2, [sp, #4]
 8014d2c:	f7fd fd34 	bl	8012798 <_malloc_r>
 8014d30:	4604      	mov	r4, r0
 8014d32:	b118      	cbz	r0, 8014d3c <_calloc_r+0x18>
 8014d34:	9a01      	ldr	r2, [sp, #4]
 8014d36:	2100      	movs	r1, #0
 8014d38:	f7fd fcd6 	bl	80126e8 <memset>
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	b002      	add	sp, #8
 8014d40:	bd10      	pop	{r4, pc}

08014d42 <__ssputs_r>:
 8014d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d46:	688e      	ldr	r6, [r1, #8]
 8014d48:	429e      	cmp	r6, r3
 8014d4a:	4682      	mov	sl, r0
 8014d4c:	460c      	mov	r4, r1
 8014d4e:	4690      	mov	r8, r2
 8014d50:	461f      	mov	r7, r3
 8014d52:	d838      	bhi.n	8014dc6 <__ssputs_r+0x84>
 8014d54:	898a      	ldrh	r2, [r1, #12]
 8014d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d5a:	d032      	beq.n	8014dc2 <__ssputs_r+0x80>
 8014d5c:	6825      	ldr	r5, [r4, #0]
 8014d5e:	6909      	ldr	r1, [r1, #16]
 8014d60:	eba5 0901 	sub.w	r9, r5, r1
 8014d64:	6965      	ldr	r5, [r4, #20]
 8014d66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d6e:	3301      	adds	r3, #1
 8014d70:	444b      	add	r3, r9
 8014d72:	106d      	asrs	r5, r5, #1
 8014d74:	429d      	cmp	r5, r3
 8014d76:	bf38      	it	cc
 8014d78:	461d      	movcc	r5, r3
 8014d7a:	0553      	lsls	r3, r2, #21
 8014d7c:	d531      	bpl.n	8014de2 <__ssputs_r+0xa0>
 8014d7e:	4629      	mov	r1, r5
 8014d80:	f7fd fd0a 	bl	8012798 <_malloc_r>
 8014d84:	4606      	mov	r6, r0
 8014d86:	b950      	cbnz	r0, 8014d9e <__ssputs_r+0x5c>
 8014d88:	230c      	movs	r3, #12
 8014d8a:	f8ca 3000 	str.w	r3, [sl]
 8014d8e:	89a3      	ldrh	r3, [r4, #12]
 8014d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d94:	81a3      	strh	r3, [r4, #12]
 8014d96:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9e:	6921      	ldr	r1, [r4, #16]
 8014da0:	464a      	mov	r2, r9
 8014da2:	f7fd fc79 	bl	8012698 <memcpy>
 8014da6:	89a3      	ldrh	r3, [r4, #12]
 8014da8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db0:	81a3      	strh	r3, [r4, #12]
 8014db2:	6126      	str	r6, [r4, #16]
 8014db4:	6165      	str	r5, [r4, #20]
 8014db6:	444e      	add	r6, r9
 8014db8:	eba5 0509 	sub.w	r5, r5, r9
 8014dbc:	6026      	str	r6, [r4, #0]
 8014dbe:	60a5      	str	r5, [r4, #8]
 8014dc0:	463e      	mov	r6, r7
 8014dc2:	42be      	cmp	r6, r7
 8014dc4:	d900      	bls.n	8014dc8 <__ssputs_r+0x86>
 8014dc6:	463e      	mov	r6, r7
 8014dc8:	4632      	mov	r2, r6
 8014dca:	6820      	ldr	r0, [r4, #0]
 8014dcc:	4641      	mov	r1, r8
 8014dce:	f7fd fc71 	bl	80126b4 <memmove>
 8014dd2:	68a3      	ldr	r3, [r4, #8]
 8014dd4:	6822      	ldr	r2, [r4, #0]
 8014dd6:	1b9b      	subs	r3, r3, r6
 8014dd8:	4432      	add	r2, r6
 8014dda:	60a3      	str	r3, [r4, #8]
 8014ddc:	6022      	str	r2, [r4, #0]
 8014dde:	2000      	movs	r0, #0
 8014de0:	e7db      	b.n	8014d9a <__ssputs_r+0x58>
 8014de2:	462a      	mov	r2, r5
 8014de4:	f000 fb3e 	bl	8015464 <_realloc_r>
 8014de8:	4606      	mov	r6, r0
 8014dea:	2800      	cmp	r0, #0
 8014dec:	d1e1      	bne.n	8014db2 <__ssputs_r+0x70>
 8014dee:	6921      	ldr	r1, [r4, #16]
 8014df0:	4650      	mov	r0, sl
 8014df2:	f7fd fc81 	bl	80126f8 <_free_r>
 8014df6:	e7c7      	b.n	8014d88 <__ssputs_r+0x46>

08014df8 <_svfiprintf_r>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	4698      	mov	r8, r3
 8014dfe:	898b      	ldrh	r3, [r1, #12]
 8014e00:	061b      	lsls	r3, r3, #24
 8014e02:	b09d      	sub	sp, #116	; 0x74
 8014e04:	4607      	mov	r7, r0
 8014e06:	460d      	mov	r5, r1
 8014e08:	4614      	mov	r4, r2
 8014e0a:	d50e      	bpl.n	8014e2a <_svfiprintf_r+0x32>
 8014e0c:	690b      	ldr	r3, [r1, #16]
 8014e0e:	b963      	cbnz	r3, 8014e2a <_svfiprintf_r+0x32>
 8014e10:	2140      	movs	r1, #64	; 0x40
 8014e12:	f7fd fcc1 	bl	8012798 <_malloc_r>
 8014e16:	6028      	str	r0, [r5, #0]
 8014e18:	6128      	str	r0, [r5, #16]
 8014e1a:	b920      	cbnz	r0, 8014e26 <_svfiprintf_r+0x2e>
 8014e1c:	230c      	movs	r3, #12
 8014e1e:	603b      	str	r3, [r7, #0]
 8014e20:	f04f 30ff 	mov.w	r0, #4294967295
 8014e24:	e0d1      	b.n	8014fca <_svfiprintf_r+0x1d2>
 8014e26:	2340      	movs	r3, #64	; 0x40
 8014e28:	616b      	str	r3, [r5, #20]
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e2e:	2320      	movs	r3, #32
 8014e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e38:	2330      	movs	r3, #48	; 0x30
 8014e3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014fe4 <_svfiprintf_r+0x1ec>
 8014e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e42:	f04f 0901 	mov.w	r9, #1
 8014e46:	4623      	mov	r3, r4
 8014e48:	469a      	mov	sl, r3
 8014e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e4e:	b10a      	cbz	r2, 8014e54 <_svfiprintf_r+0x5c>
 8014e50:	2a25      	cmp	r2, #37	; 0x25
 8014e52:	d1f9      	bne.n	8014e48 <_svfiprintf_r+0x50>
 8014e54:	ebba 0b04 	subs.w	fp, sl, r4
 8014e58:	d00b      	beq.n	8014e72 <_svfiprintf_r+0x7a>
 8014e5a:	465b      	mov	r3, fp
 8014e5c:	4622      	mov	r2, r4
 8014e5e:	4629      	mov	r1, r5
 8014e60:	4638      	mov	r0, r7
 8014e62:	f7ff ff6e 	bl	8014d42 <__ssputs_r>
 8014e66:	3001      	adds	r0, #1
 8014e68:	f000 80aa 	beq.w	8014fc0 <_svfiprintf_r+0x1c8>
 8014e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e6e:	445a      	add	r2, fp
 8014e70:	9209      	str	r2, [sp, #36]	; 0x24
 8014e72:	f89a 3000 	ldrb.w	r3, [sl]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f000 80a2 	beq.w	8014fc0 <_svfiprintf_r+0x1c8>
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e86:	f10a 0a01 	add.w	sl, sl, #1
 8014e8a:	9304      	str	r3, [sp, #16]
 8014e8c:	9307      	str	r3, [sp, #28]
 8014e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e92:	931a      	str	r3, [sp, #104]	; 0x68
 8014e94:	4654      	mov	r4, sl
 8014e96:	2205      	movs	r2, #5
 8014e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e9c:	4851      	ldr	r0, [pc, #324]	; (8014fe4 <_svfiprintf_r+0x1ec>)
 8014e9e:	f7eb f9b7 	bl	8000210 <memchr>
 8014ea2:	9a04      	ldr	r2, [sp, #16]
 8014ea4:	b9d8      	cbnz	r0, 8014ede <_svfiprintf_r+0xe6>
 8014ea6:	06d0      	lsls	r0, r2, #27
 8014ea8:	bf44      	itt	mi
 8014eaa:	2320      	movmi	r3, #32
 8014eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eb0:	0711      	lsls	r1, r2, #28
 8014eb2:	bf44      	itt	mi
 8014eb4:	232b      	movmi	r3, #43	; 0x2b
 8014eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eba:	f89a 3000 	ldrb.w	r3, [sl]
 8014ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec0:	d015      	beq.n	8014eee <_svfiprintf_r+0xf6>
 8014ec2:	9a07      	ldr	r2, [sp, #28]
 8014ec4:	4654      	mov	r4, sl
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	f04f 0c0a 	mov.w	ip, #10
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ed2:	3b30      	subs	r3, #48	; 0x30
 8014ed4:	2b09      	cmp	r3, #9
 8014ed6:	d94e      	bls.n	8014f76 <_svfiprintf_r+0x17e>
 8014ed8:	b1b0      	cbz	r0, 8014f08 <_svfiprintf_r+0x110>
 8014eda:	9207      	str	r2, [sp, #28]
 8014edc:	e014      	b.n	8014f08 <_svfiprintf_r+0x110>
 8014ede:	eba0 0308 	sub.w	r3, r0, r8
 8014ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8014ee6:	4313      	orrs	r3, r2
 8014ee8:	9304      	str	r3, [sp, #16]
 8014eea:	46a2      	mov	sl, r4
 8014eec:	e7d2      	b.n	8014e94 <_svfiprintf_r+0x9c>
 8014eee:	9b03      	ldr	r3, [sp, #12]
 8014ef0:	1d19      	adds	r1, r3, #4
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	9103      	str	r1, [sp, #12]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	bfbb      	ittet	lt
 8014efa:	425b      	neglt	r3, r3
 8014efc:	f042 0202 	orrlt.w	r2, r2, #2
 8014f00:	9307      	strge	r3, [sp, #28]
 8014f02:	9307      	strlt	r3, [sp, #28]
 8014f04:	bfb8      	it	lt
 8014f06:	9204      	strlt	r2, [sp, #16]
 8014f08:	7823      	ldrb	r3, [r4, #0]
 8014f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8014f0c:	d10c      	bne.n	8014f28 <_svfiprintf_r+0x130>
 8014f0e:	7863      	ldrb	r3, [r4, #1]
 8014f10:	2b2a      	cmp	r3, #42	; 0x2a
 8014f12:	d135      	bne.n	8014f80 <_svfiprintf_r+0x188>
 8014f14:	9b03      	ldr	r3, [sp, #12]
 8014f16:	1d1a      	adds	r2, r3, #4
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	9203      	str	r2, [sp, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	bfb8      	it	lt
 8014f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f24:	3402      	adds	r4, #2
 8014f26:	9305      	str	r3, [sp, #20]
 8014f28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014ff4 <_svfiprintf_r+0x1fc>
 8014f2c:	7821      	ldrb	r1, [r4, #0]
 8014f2e:	2203      	movs	r2, #3
 8014f30:	4650      	mov	r0, sl
 8014f32:	f7eb f96d 	bl	8000210 <memchr>
 8014f36:	b140      	cbz	r0, 8014f4a <_svfiprintf_r+0x152>
 8014f38:	2340      	movs	r3, #64	; 0x40
 8014f3a:	eba0 000a 	sub.w	r0, r0, sl
 8014f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f42:	9b04      	ldr	r3, [sp, #16]
 8014f44:	4303      	orrs	r3, r0
 8014f46:	3401      	adds	r4, #1
 8014f48:	9304      	str	r3, [sp, #16]
 8014f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f4e:	4826      	ldr	r0, [pc, #152]	; (8014fe8 <_svfiprintf_r+0x1f0>)
 8014f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f54:	2206      	movs	r2, #6
 8014f56:	f7eb f95b 	bl	8000210 <memchr>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	d038      	beq.n	8014fd0 <_svfiprintf_r+0x1d8>
 8014f5e:	4b23      	ldr	r3, [pc, #140]	; (8014fec <_svfiprintf_r+0x1f4>)
 8014f60:	bb1b      	cbnz	r3, 8014faa <_svfiprintf_r+0x1b2>
 8014f62:	9b03      	ldr	r3, [sp, #12]
 8014f64:	3307      	adds	r3, #7
 8014f66:	f023 0307 	bic.w	r3, r3, #7
 8014f6a:	3308      	adds	r3, #8
 8014f6c:	9303      	str	r3, [sp, #12]
 8014f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f70:	4433      	add	r3, r6
 8014f72:	9309      	str	r3, [sp, #36]	; 0x24
 8014f74:	e767      	b.n	8014e46 <_svfiprintf_r+0x4e>
 8014f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	2001      	movs	r0, #1
 8014f7e:	e7a5      	b.n	8014ecc <_svfiprintf_r+0xd4>
 8014f80:	2300      	movs	r3, #0
 8014f82:	3401      	adds	r4, #1
 8014f84:	9305      	str	r3, [sp, #20]
 8014f86:	4619      	mov	r1, r3
 8014f88:	f04f 0c0a 	mov.w	ip, #10
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f92:	3a30      	subs	r2, #48	; 0x30
 8014f94:	2a09      	cmp	r2, #9
 8014f96:	d903      	bls.n	8014fa0 <_svfiprintf_r+0x1a8>
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d0c5      	beq.n	8014f28 <_svfiprintf_r+0x130>
 8014f9c:	9105      	str	r1, [sp, #20]
 8014f9e:	e7c3      	b.n	8014f28 <_svfiprintf_r+0x130>
 8014fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e7f0      	b.n	8014f8c <_svfiprintf_r+0x194>
 8014faa:	ab03      	add	r3, sp, #12
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	462a      	mov	r2, r5
 8014fb0:	4b0f      	ldr	r3, [pc, #60]	; (8014ff0 <_svfiprintf_r+0x1f8>)
 8014fb2:	a904      	add	r1, sp, #16
 8014fb4:	4638      	mov	r0, r7
 8014fb6:	f7fd fce9 	bl	801298c <_printf_float>
 8014fba:	1c42      	adds	r2, r0, #1
 8014fbc:	4606      	mov	r6, r0
 8014fbe:	d1d6      	bne.n	8014f6e <_svfiprintf_r+0x176>
 8014fc0:	89ab      	ldrh	r3, [r5, #12]
 8014fc2:	065b      	lsls	r3, r3, #25
 8014fc4:	f53f af2c 	bmi.w	8014e20 <_svfiprintf_r+0x28>
 8014fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fca:	b01d      	add	sp, #116	; 0x74
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	ab03      	add	r3, sp, #12
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	462a      	mov	r2, r5
 8014fd6:	4b06      	ldr	r3, [pc, #24]	; (8014ff0 <_svfiprintf_r+0x1f8>)
 8014fd8:	a904      	add	r1, sp, #16
 8014fda:	4638      	mov	r0, r7
 8014fdc:	f7fd ff7a 	bl	8012ed4 <_printf_i>
 8014fe0:	e7eb      	b.n	8014fba <_svfiprintf_r+0x1c2>
 8014fe2:	bf00      	nop
 8014fe4:	0801e97c 	.word	0x0801e97c
 8014fe8:	0801e986 	.word	0x0801e986
 8014fec:	0801298d 	.word	0x0801298d
 8014ff0:	08014d43 	.word	0x08014d43
 8014ff4:	0801e982 	.word	0x0801e982

08014ff8 <__sfputc_r>:
 8014ff8:	6893      	ldr	r3, [r2, #8]
 8014ffa:	3b01      	subs	r3, #1
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	b410      	push	{r4}
 8015000:	6093      	str	r3, [r2, #8]
 8015002:	da08      	bge.n	8015016 <__sfputc_r+0x1e>
 8015004:	6994      	ldr	r4, [r2, #24]
 8015006:	42a3      	cmp	r3, r4
 8015008:	db01      	blt.n	801500e <__sfputc_r+0x16>
 801500a:	290a      	cmp	r1, #10
 801500c:	d103      	bne.n	8015016 <__sfputc_r+0x1e>
 801500e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015012:	f7fe b9a1 	b.w	8013358 <__swbuf_r>
 8015016:	6813      	ldr	r3, [r2, #0]
 8015018:	1c58      	adds	r0, r3, #1
 801501a:	6010      	str	r0, [r2, #0]
 801501c:	7019      	strb	r1, [r3, #0]
 801501e:	4608      	mov	r0, r1
 8015020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015024:	4770      	bx	lr

08015026 <__sfputs_r>:
 8015026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015028:	4606      	mov	r6, r0
 801502a:	460f      	mov	r7, r1
 801502c:	4614      	mov	r4, r2
 801502e:	18d5      	adds	r5, r2, r3
 8015030:	42ac      	cmp	r4, r5
 8015032:	d101      	bne.n	8015038 <__sfputs_r+0x12>
 8015034:	2000      	movs	r0, #0
 8015036:	e007      	b.n	8015048 <__sfputs_r+0x22>
 8015038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801503c:	463a      	mov	r2, r7
 801503e:	4630      	mov	r0, r6
 8015040:	f7ff ffda 	bl	8014ff8 <__sfputc_r>
 8015044:	1c43      	adds	r3, r0, #1
 8015046:	d1f3      	bne.n	8015030 <__sfputs_r+0xa>
 8015048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801504c <_vfiprintf_r>:
 801504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015050:	460d      	mov	r5, r1
 8015052:	b09d      	sub	sp, #116	; 0x74
 8015054:	4614      	mov	r4, r2
 8015056:	4698      	mov	r8, r3
 8015058:	4606      	mov	r6, r0
 801505a:	b118      	cbz	r0, 8015064 <_vfiprintf_r+0x18>
 801505c:	6983      	ldr	r3, [r0, #24]
 801505e:	b90b      	cbnz	r3, 8015064 <_vfiprintf_r+0x18>
 8015060:	f7ff f9cc 	bl	80143fc <__sinit>
 8015064:	4b89      	ldr	r3, [pc, #548]	; (801528c <_vfiprintf_r+0x240>)
 8015066:	429d      	cmp	r5, r3
 8015068:	d11b      	bne.n	80150a2 <_vfiprintf_r+0x56>
 801506a:	6875      	ldr	r5, [r6, #4]
 801506c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801506e:	07d9      	lsls	r1, r3, #31
 8015070:	d405      	bmi.n	801507e <_vfiprintf_r+0x32>
 8015072:	89ab      	ldrh	r3, [r5, #12]
 8015074:	059a      	lsls	r2, r3, #22
 8015076:	d402      	bmi.n	801507e <_vfiprintf_r+0x32>
 8015078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801507a:	f7ff fa62 	bl	8014542 <__retarget_lock_acquire_recursive>
 801507e:	89ab      	ldrh	r3, [r5, #12]
 8015080:	071b      	lsls	r3, r3, #28
 8015082:	d501      	bpl.n	8015088 <_vfiprintf_r+0x3c>
 8015084:	692b      	ldr	r3, [r5, #16]
 8015086:	b9eb      	cbnz	r3, 80150c4 <_vfiprintf_r+0x78>
 8015088:	4629      	mov	r1, r5
 801508a:	4630      	mov	r0, r6
 801508c:	f7fe f9b6 	bl	80133fc <__swsetup_r>
 8015090:	b1c0      	cbz	r0, 80150c4 <_vfiprintf_r+0x78>
 8015092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015094:	07dc      	lsls	r4, r3, #31
 8015096:	d50e      	bpl.n	80150b6 <_vfiprintf_r+0x6a>
 8015098:	f04f 30ff 	mov.w	r0, #4294967295
 801509c:	b01d      	add	sp, #116	; 0x74
 801509e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a2:	4b7b      	ldr	r3, [pc, #492]	; (8015290 <_vfiprintf_r+0x244>)
 80150a4:	429d      	cmp	r5, r3
 80150a6:	d101      	bne.n	80150ac <_vfiprintf_r+0x60>
 80150a8:	68b5      	ldr	r5, [r6, #8]
 80150aa:	e7df      	b.n	801506c <_vfiprintf_r+0x20>
 80150ac:	4b79      	ldr	r3, [pc, #484]	; (8015294 <_vfiprintf_r+0x248>)
 80150ae:	429d      	cmp	r5, r3
 80150b0:	bf08      	it	eq
 80150b2:	68f5      	ldreq	r5, [r6, #12]
 80150b4:	e7da      	b.n	801506c <_vfiprintf_r+0x20>
 80150b6:	89ab      	ldrh	r3, [r5, #12]
 80150b8:	0598      	lsls	r0, r3, #22
 80150ba:	d4ed      	bmi.n	8015098 <_vfiprintf_r+0x4c>
 80150bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150be:	f7ff fa41 	bl	8014544 <__retarget_lock_release_recursive>
 80150c2:	e7e9      	b.n	8015098 <_vfiprintf_r+0x4c>
 80150c4:	2300      	movs	r3, #0
 80150c6:	9309      	str	r3, [sp, #36]	; 0x24
 80150c8:	2320      	movs	r3, #32
 80150ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80150d2:	2330      	movs	r3, #48	; 0x30
 80150d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015298 <_vfiprintf_r+0x24c>
 80150d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150dc:	f04f 0901 	mov.w	r9, #1
 80150e0:	4623      	mov	r3, r4
 80150e2:	469a      	mov	sl, r3
 80150e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150e8:	b10a      	cbz	r2, 80150ee <_vfiprintf_r+0xa2>
 80150ea:	2a25      	cmp	r2, #37	; 0x25
 80150ec:	d1f9      	bne.n	80150e2 <_vfiprintf_r+0x96>
 80150ee:	ebba 0b04 	subs.w	fp, sl, r4
 80150f2:	d00b      	beq.n	801510c <_vfiprintf_r+0xc0>
 80150f4:	465b      	mov	r3, fp
 80150f6:	4622      	mov	r2, r4
 80150f8:	4629      	mov	r1, r5
 80150fa:	4630      	mov	r0, r6
 80150fc:	f7ff ff93 	bl	8015026 <__sfputs_r>
 8015100:	3001      	adds	r0, #1
 8015102:	f000 80aa 	beq.w	801525a <_vfiprintf_r+0x20e>
 8015106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015108:	445a      	add	r2, fp
 801510a:	9209      	str	r2, [sp, #36]	; 0x24
 801510c:	f89a 3000 	ldrb.w	r3, [sl]
 8015110:	2b00      	cmp	r3, #0
 8015112:	f000 80a2 	beq.w	801525a <_vfiprintf_r+0x20e>
 8015116:	2300      	movs	r3, #0
 8015118:	f04f 32ff 	mov.w	r2, #4294967295
 801511c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015120:	f10a 0a01 	add.w	sl, sl, #1
 8015124:	9304      	str	r3, [sp, #16]
 8015126:	9307      	str	r3, [sp, #28]
 8015128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801512c:	931a      	str	r3, [sp, #104]	; 0x68
 801512e:	4654      	mov	r4, sl
 8015130:	2205      	movs	r2, #5
 8015132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015136:	4858      	ldr	r0, [pc, #352]	; (8015298 <_vfiprintf_r+0x24c>)
 8015138:	f7eb f86a 	bl	8000210 <memchr>
 801513c:	9a04      	ldr	r2, [sp, #16]
 801513e:	b9d8      	cbnz	r0, 8015178 <_vfiprintf_r+0x12c>
 8015140:	06d1      	lsls	r1, r2, #27
 8015142:	bf44      	itt	mi
 8015144:	2320      	movmi	r3, #32
 8015146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801514a:	0713      	lsls	r3, r2, #28
 801514c:	bf44      	itt	mi
 801514e:	232b      	movmi	r3, #43	; 0x2b
 8015150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015154:	f89a 3000 	ldrb.w	r3, [sl]
 8015158:	2b2a      	cmp	r3, #42	; 0x2a
 801515a:	d015      	beq.n	8015188 <_vfiprintf_r+0x13c>
 801515c:	9a07      	ldr	r2, [sp, #28]
 801515e:	4654      	mov	r4, sl
 8015160:	2000      	movs	r0, #0
 8015162:	f04f 0c0a 	mov.w	ip, #10
 8015166:	4621      	mov	r1, r4
 8015168:	f811 3b01 	ldrb.w	r3, [r1], #1
 801516c:	3b30      	subs	r3, #48	; 0x30
 801516e:	2b09      	cmp	r3, #9
 8015170:	d94e      	bls.n	8015210 <_vfiprintf_r+0x1c4>
 8015172:	b1b0      	cbz	r0, 80151a2 <_vfiprintf_r+0x156>
 8015174:	9207      	str	r2, [sp, #28]
 8015176:	e014      	b.n	80151a2 <_vfiprintf_r+0x156>
 8015178:	eba0 0308 	sub.w	r3, r0, r8
 801517c:	fa09 f303 	lsl.w	r3, r9, r3
 8015180:	4313      	orrs	r3, r2
 8015182:	9304      	str	r3, [sp, #16]
 8015184:	46a2      	mov	sl, r4
 8015186:	e7d2      	b.n	801512e <_vfiprintf_r+0xe2>
 8015188:	9b03      	ldr	r3, [sp, #12]
 801518a:	1d19      	adds	r1, r3, #4
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	9103      	str	r1, [sp, #12]
 8015190:	2b00      	cmp	r3, #0
 8015192:	bfbb      	ittet	lt
 8015194:	425b      	neglt	r3, r3
 8015196:	f042 0202 	orrlt.w	r2, r2, #2
 801519a:	9307      	strge	r3, [sp, #28]
 801519c:	9307      	strlt	r3, [sp, #28]
 801519e:	bfb8      	it	lt
 80151a0:	9204      	strlt	r2, [sp, #16]
 80151a2:	7823      	ldrb	r3, [r4, #0]
 80151a4:	2b2e      	cmp	r3, #46	; 0x2e
 80151a6:	d10c      	bne.n	80151c2 <_vfiprintf_r+0x176>
 80151a8:	7863      	ldrb	r3, [r4, #1]
 80151aa:	2b2a      	cmp	r3, #42	; 0x2a
 80151ac:	d135      	bne.n	801521a <_vfiprintf_r+0x1ce>
 80151ae:	9b03      	ldr	r3, [sp, #12]
 80151b0:	1d1a      	adds	r2, r3, #4
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	9203      	str	r2, [sp, #12]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	bfb8      	it	lt
 80151ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80151be:	3402      	adds	r4, #2
 80151c0:	9305      	str	r3, [sp, #20]
 80151c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80152a8 <_vfiprintf_r+0x25c>
 80151c6:	7821      	ldrb	r1, [r4, #0]
 80151c8:	2203      	movs	r2, #3
 80151ca:	4650      	mov	r0, sl
 80151cc:	f7eb f820 	bl	8000210 <memchr>
 80151d0:	b140      	cbz	r0, 80151e4 <_vfiprintf_r+0x198>
 80151d2:	2340      	movs	r3, #64	; 0x40
 80151d4:	eba0 000a 	sub.w	r0, r0, sl
 80151d8:	fa03 f000 	lsl.w	r0, r3, r0
 80151dc:	9b04      	ldr	r3, [sp, #16]
 80151de:	4303      	orrs	r3, r0
 80151e0:	3401      	adds	r4, #1
 80151e2:	9304      	str	r3, [sp, #16]
 80151e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151e8:	482c      	ldr	r0, [pc, #176]	; (801529c <_vfiprintf_r+0x250>)
 80151ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151ee:	2206      	movs	r2, #6
 80151f0:	f7eb f80e 	bl	8000210 <memchr>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d03f      	beq.n	8015278 <_vfiprintf_r+0x22c>
 80151f8:	4b29      	ldr	r3, [pc, #164]	; (80152a0 <_vfiprintf_r+0x254>)
 80151fa:	bb1b      	cbnz	r3, 8015244 <_vfiprintf_r+0x1f8>
 80151fc:	9b03      	ldr	r3, [sp, #12]
 80151fe:	3307      	adds	r3, #7
 8015200:	f023 0307 	bic.w	r3, r3, #7
 8015204:	3308      	adds	r3, #8
 8015206:	9303      	str	r3, [sp, #12]
 8015208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801520a:	443b      	add	r3, r7
 801520c:	9309      	str	r3, [sp, #36]	; 0x24
 801520e:	e767      	b.n	80150e0 <_vfiprintf_r+0x94>
 8015210:	fb0c 3202 	mla	r2, ip, r2, r3
 8015214:	460c      	mov	r4, r1
 8015216:	2001      	movs	r0, #1
 8015218:	e7a5      	b.n	8015166 <_vfiprintf_r+0x11a>
 801521a:	2300      	movs	r3, #0
 801521c:	3401      	adds	r4, #1
 801521e:	9305      	str	r3, [sp, #20]
 8015220:	4619      	mov	r1, r3
 8015222:	f04f 0c0a 	mov.w	ip, #10
 8015226:	4620      	mov	r0, r4
 8015228:	f810 2b01 	ldrb.w	r2, [r0], #1
 801522c:	3a30      	subs	r2, #48	; 0x30
 801522e:	2a09      	cmp	r2, #9
 8015230:	d903      	bls.n	801523a <_vfiprintf_r+0x1ee>
 8015232:	2b00      	cmp	r3, #0
 8015234:	d0c5      	beq.n	80151c2 <_vfiprintf_r+0x176>
 8015236:	9105      	str	r1, [sp, #20]
 8015238:	e7c3      	b.n	80151c2 <_vfiprintf_r+0x176>
 801523a:	fb0c 2101 	mla	r1, ip, r1, r2
 801523e:	4604      	mov	r4, r0
 8015240:	2301      	movs	r3, #1
 8015242:	e7f0      	b.n	8015226 <_vfiprintf_r+0x1da>
 8015244:	ab03      	add	r3, sp, #12
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	462a      	mov	r2, r5
 801524a:	4b16      	ldr	r3, [pc, #88]	; (80152a4 <_vfiprintf_r+0x258>)
 801524c:	a904      	add	r1, sp, #16
 801524e:	4630      	mov	r0, r6
 8015250:	f7fd fb9c 	bl	801298c <_printf_float>
 8015254:	4607      	mov	r7, r0
 8015256:	1c78      	adds	r0, r7, #1
 8015258:	d1d6      	bne.n	8015208 <_vfiprintf_r+0x1bc>
 801525a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801525c:	07d9      	lsls	r1, r3, #31
 801525e:	d405      	bmi.n	801526c <_vfiprintf_r+0x220>
 8015260:	89ab      	ldrh	r3, [r5, #12]
 8015262:	059a      	lsls	r2, r3, #22
 8015264:	d402      	bmi.n	801526c <_vfiprintf_r+0x220>
 8015266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015268:	f7ff f96c 	bl	8014544 <__retarget_lock_release_recursive>
 801526c:	89ab      	ldrh	r3, [r5, #12]
 801526e:	065b      	lsls	r3, r3, #25
 8015270:	f53f af12 	bmi.w	8015098 <_vfiprintf_r+0x4c>
 8015274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015276:	e711      	b.n	801509c <_vfiprintf_r+0x50>
 8015278:	ab03      	add	r3, sp, #12
 801527a:	9300      	str	r3, [sp, #0]
 801527c:	462a      	mov	r2, r5
 801527e:	4b09      	ldr	r3, [pc, #36]	; (80152a4 <_vfiprintf_r+0x258>)
 8015280:	a904      	add	r1, sp, #16
 8015282:	4630      	mov	r0, r6
 8015284:	f7fd fe26 	bl	8012ed4 <_printf_i>
 8015288:	e7e4      	b.n	8015254 <_vfiprintf_r+0x208>
 801528a:	bf00      	nop
 801528c:	0801e7e0 	.word	0x0801e7e0
 8015290:	0801e800 	.word	0x0801e800
 8015294:	0801e7c0 	.word	0x0801e7c0
 8015298:	0801e97c 	.word	0x0801e97c
 801529c:	0801e986 	.word	0x0801e986
 80152a0:	0801298d 	.word	0x0801298d
 80152a4:	08015027 	.word	0x08015027
 80152a8:	0801e982 	.word	0x0801e982

080152ac <__sread>:
 80152ac:	b510      	push	{r4, lr}
 80152ae:	460c      	mov	r4, r1
 80152b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b4:	f000 f8fc 	bl	80154b0 <_read_r>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	bfab      	itete	ge
 80152bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80152be:	89a3      	ldrhlt	r3, [r4, #12]
 80152c0:	181b      	addge	r3, r3, r0
 80152c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80152c6:	bfac      	ite	ge
 80152c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80152ca:	81a3      	strhlt	r3, [r4, #12]
 80152cc:	bd10      	pop	{r4, pc}

080152ce <__swrite>:
 80152ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152d2:	461f      	mov	r7, r3
 80152d4:	898b      	ldrh	r3, [r1, #12]
 80152d6:	05db      	lsls	r3, r3, #23
 80152d8:	4605      	mov	r5, r0
 80152da:	460c      	mov	r4, r1
 80152dc:	4616      	mov	r6, r2
 80152de:	d505      	bpl.n	80152ec <__swrite+0x1e>
 80152e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152e4:	2302      	movs	r3, #2
 80152e6:	2200      	movs	r2, #0
 80152e8:	f000 f898 	bl	801541c <_lseek_r>
 80152ec:	89a3      	ldrh	r3, [r4, #12]
 80152ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80152f6:	81a3      	strh	r3, [r4, #12]
 80152f8:	4632      	mov	r2, r6
 80152fa:	463b      	mov	r3, r7
 80152fc:	4628      	mov	r0, r5
 80152fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015302:	f000 b817 	b.w	8015334 <_write_r>

08015306 <__sseek>:
 8015306:	b510      	push	{r4, lr}
 8015308:	460c      	mov	r4, r1
 801530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801530e:	f000 f885 	bl	801541c <_lseek_r>
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	bf15      	itete	ne
 8015318:	6560      	strne	r0, [r4, #84]	; 0x54
 801531a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801531e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015322:	81a3      	strheq	r3, [r4, #12]
 8015324:	bf18      	it	ne
 8015326:	81a3      	strhne	r3, [r4, #12]
 8015328:	bd10      	pop	{r4, pc}

0801532a <__sclose>:
 801532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801532e:	f000 b831 	b.w	8015394 <_close_r>
	...

08015334 <_write_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4d07      	ldr	r5, [pc, #28]	; (8015354 <_write_r+0x20>)
 8015338:	4604      	mov	r4, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	602a      	str	r2, [r5, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7f0 feda 	bl	80060fc <_write>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_write_r+0x1e>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_write_r+0x1e>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	2000252c 	.word	0x2000252c

08015358 <__assert_func>:
 8015358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801535a:	4614      	mov	r4, r2
 801535c:	461a      	mov	r2, r3
 801535e:	4b09      	ldr	r3, [pc, #36]	; (8015384 <__assert_func+0x2c>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4605      	mov	r5, r0
 8015364:	68d8      	ldr	r0, [r3, #12]
 8015366:	b14c      	cbz	r4, 801537c <__assert_func+0x24>
 8015368:	4b07      	ldr	r3, [pc, #28]	; (8015388 <__assert_func+0x30>)
 801536a:	9100      	str	r1, [sp, #0]
 801536c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015370:	4906      	ldr	r1, [pc, #24]	; (801538c <__assert_func+0x34>)
 8015372:	462b      	mov	r3, r5
 8015374:	f000 f81e 	bl	80153b4 <fiprintf>
 8015378:	f7fd f93e 	bl	80125f8 <abort>
 801537c:	4b04      	ldr	r3, [pc, #16]	; (8015390 <__assert_func+0x38>)
 801537e:	461c      	mov	r4, r3
 8015380:	e7f3      	b.n	801536a <__assert_func+0x12>
 8015382:	bf00      	nop
 8015384:	20000190 	.word	0x20000190
 8015388:	0801e98d 	.word	0x0801e98d
 801538c:	0801e99a 	.word	0x0801e99a
 8015390:	0801e9c8 	.word	0x0801e9c8

08015394 <_close_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4d06      	ldr	r5, [pc, #24]	; (80153b0 <_close_r+0x1c>)
 8015398:	2300      	movs	r3, #0
 801539a:	4604      	mov	r4, r0
 801539c:	4608      	mov	r0, r1
 801539e:	602b      	str	r3, [r5, #0]
 80153a0:	f7f2 f805 	bl	80073ae <_close>
 80153a4:	1c43      	adds	r3, r0, #1
 80153a6:	d102      	bne.n	80153ae <_close_r+0x1a>
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	b103      	cbz	r3, 80153ae <_close_r+0x1a>
 80153ac:	6023      	str	r3, [r4, #0]
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	2000252c 	.word	0x2000252c

080153b4 <fiprintf>:
 80153b4:	b40e      	push	{r1, r2, r3}
 80153b6:	b503      	push	{r0, r1, lr}
 80153b8:	4601      	mov	r1, r0
 80153ba:	ab03      	add	r3, sp, #12
 80153bc:	4805      	ldr	r0, [pc, #20]	; (80153d4 <fiprintf+0x20>)
 80153be:	f853 2b04 	ldr.w	r2, [r3], #4
 80153c2:	6800      	ldr	r0, [r0, #0]
 80153c4:	9301      	str	r3, [sp, #4]
 80153c6:	f7ff fe41 	bl	801504c <_vfiprintf_r>
 80153ca:	b002      	add	sp, #8
 80153cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80153d0:	b003      	add	sp, #12
 80153d2:	4770      	bx	lr
 80153d4:	20000190 	.word	0x20000190

080153d8 <_fstat_r>:
 80153d8:	b538      	push	{r3, r4, r5, lr}
 80153da:	4d07      	ldr	r5, [pc, #28]	; (80153f8 <_fstat_r+0x20>)
 80153dc:	2300      	movs	r3, #0
 80153de:	4604      	mov	r4, r0
 80153e0:	4608      	mov	r0, r1
 80153e2:	4611      	mov	r1, r2
 80153e4:	602b      	str	r3, [r5, #0]
 80153e6:	f7f1 ffee 	bl	80073c6 <_fstat>
 80153ea:	1c43      	adds	r3, r0, #1
 80153ec:	d102      	bne.n	80153f4 <_fstat_r+0x1c>
 80153ee:	682b      	ldr	r3, [r5, #0]
 80153f0:	b103      	cbz	r3, 80153f4 <_fstat_r+0x1c>
 80153f2:	6023      	str	r3, [r4, #0]
 80153f4:	bd38      	pop	{r3, r4, r5, pc}
 80153f6:	bf00      	nop
 80153f8:	2000252c 	.word	0x2000252c

080153fc <_isatty_r>:
 80153fc:	b538      	push	{r3, r4, r5, lr}
 80153fe:	4d06      	ldr	r5, [pc, #24]	; (8015418 <_isatty_r+0x1c>)
 8015400:	2300      	movs	r3, #0
 8015402:	4604      	mov	r4, r0
 8015404:	4608      	mov	r0, r1
 8015406:	602b      	str	r3, [r5, #0]
 8015408:	f7f1 ffed 	bl	80073e6 <_isatty>
 801540c:	1c43      	adds	r3, r0, #1
 801540e:	d102      	bne.n	8015416 <_isatty_r+0x1a>
 8015410:	682b      	ldr	r3, [r5, #0]
 8015412:	b103      	cbz	r3, 8015416 <_isatty_r+0x1a>
 8015414:	6023      	str	r3, [r4, #0]
 8015416:	bd38      	pop	{r3, r4, r5, pc}
 8015418:	2000252c 	.word	0x2000252c

0801541c <_lseek_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d07      	ldr	r5, [pc, #28]	; (801543c <_lseek_r+0x20>)
 8015420:	4604      	mov	r4, r0
 8015422:	4608      	mov	r0, r1
 8015424:	4611      	mov	r1, r2
 8015426:	2200      	movs	r2, #0
 8015428:	602a      	str	r2, [r5, #0]
 801542a:	461a      	mov	r2, r3
 801542c:	f7f1 ffe6 	bl	80073fc <_lseek>
 8015430:	1c43      	adds	r3, r0, #1
 8015432:	d102      	bne.n	801543a <_lseek_r+0x1e>
 8015434:	682b      	ldr	r3, [r5, #0]
 8015436:	b103      	cbz	r3, 801543a <_lseek_r+0x1e>
 8015438:	6023      	str	r3, [r4, #0]
 801543a:	bd38      	pop	{r3, r4, r5, pc}
 801543c:	2000252c 	.word	0x2000252c

08015440 <__ascii_mbtowc>:
 8015440:	b082      	sub	sp, #8
 8015442:	b901      	cbnz	r1, 8015446 <__ascii_mbtowc+0x6>
 8015444:	a901      	add	r1, sp, #4
 8015446:	b142      	cbz	r2, 801545a <__ascii_mbtowc+0x1a>
 8015448:	b14b      	cbz	r3, 801545e <__ascii_mbtowc+0x1e>
 801544a:	7813      	ldrb	r3, [r2, #0]
 801544c:	600b      	str	r3, [r1, #0]
 801544e:	7812      	ldrb	r2, [r2, #0]
 8015450:	1e10      	subs	r0, r2, #0
 8015452:	bf18      	it	ne
 8015454:	2001      	movne	r0, #1
 8015456:	b002      	add	sp, #8
 8015458:	4770      	bx	lr
 801545a:	4610      	mov	r0, r2
 801545c:	e7fb      	b.n	8015456 <__ascii_mbtowc+0x16>
 801545e:	f06f 0001 	mvn.w	r0, #1
 8015462:	e7f8      	b.n	8015456 <__ascii_mbtowc+0x16>

08015464 <_realloc_r>:
 8015464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015466:	4607      	mov	r7, r0
 8015468:	4614      	mov	r4, r2
 801546a:	460e      	mov	r6, r1
 801546c:	b921      	cbnz	r1, 8015478 <_realloc_r+0x14>
 801546e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015472:	4611      	mov	r1, r2
 8015474:	f7fd b990 	b.w	8012798 <_malloc_r>
 8015478:	b922      	cbnz	r2, 8015484 <_realloc_r+0x20>
 801547a:	f7fd f93d 	bl	80126f8 <_free_r>
 801547e:	4625      	mov	r5, r4
 8015480:	4628      	mov	r0, r5
 8015482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015484:	f000 f833 	bl	80154ee <_malloc_usable_size_r>
 8015488:	42a0      	cmp	r0, r4
 801548a:	d20f      	bcs.n	80154ac <_realloc_r+0x48>
 801548c:	4621      	mov	r1, r4
 801548e:	4638      	mov	r0, r7
 8015490:	f7fd f982 	bl	8012798 <_malloc_r>
 8015494:	4605      	mov	r5, r0
 8015496:	2800      	cmp	r0, #0
 8015498:	d0f2      	beq.n	8015480 <_realloc_r+0x1c>
 801549a:	4631      	mov	r1, r6
 801549c:	4622      	mov	r2, r4
 801549e:	f7fd f8fb 	bl	8012698 <memcpy>
 80154a2:	4631      	mov	r1, r6
 80154a4:	4638      	mov	r0, r7
 80154a6:	f7fd f927 	bl	80126f8 <_free_r>
 80154aa:	e7e9      	b.n	8015480 <_realloc_r+0x1c>
 80154ac:	4635      	mov	r5, r6
 80154ae:	e7e7      	b.n	8015480 <_realloc_r+0x1c>

080154b0 <_read_r>:
 80154b0:	b538      	push	{r3, r4, r5, lr}
 80154b2:	4d07      	ldr	r5, [pc, #28]	; (80154d0 <_read_r+0x20>)
 80154b4:	4604      	mov	r4, r0
 80154b6:	4608      	mov	r0, r1
 80154b8:	4611      	mov	r1, r2
 80154ba:	2200      	movs	r2, #0
 80154bc:	602a      	str	r2, [r5, #0]
 80154be:	461a      	mov	r2, r3
 80154c0:	f7f1 ff58 	bl	8007374 <_read>
 80154c4:	1c43      	adds	r3, r0, #1
 80154c6:	d102      	bne.n	80154ce <_read_r+0x1e>
 80154c8:	682b      	ldr	r3, [r5, #0]
 80154ca:	b103      	cbz	r3, 80154ce <_read_r+0x1e>
 80154cc:	6023      	str	r3, [r4, #0]
 80154ce:	bd38      	pop	{r3, r4, r5, pc}
 80154d0:	2000252c 	.word	0x2000252c

080154d4 <__ascii_wctomb>:
 80154d4:	b149      	cbz	r1, 80154ea <__ascii_wctomb+0x16>
 80154d6:	2aff      	cmp	r2, #255	; 0xff
 80154d8:	bf85      	ittet	hi
 80154da:	238a      	movhi	r3, #138	; 0x8a
 80154dc:	6003      	strhi	r3, [r0, #0]
 80154de:	700a      	strbls	r2, [r1, #0]
 80154e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80154e4:	bf98      	it	ls
 80154e6:	2001      	movls	r0, #1
 80154e8:	4770      	bx	lr
 80154ea:	4608      	mov	r0, r1
 80154ec:	4770      	bx	lr

080154ee <_malloc_usable_size_r>:
 80154ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154f2:	1f18      	subs	r0, r3, #4
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	bfbc      	itt	lt
 80154f8:	580b      	ldrlt	r3, [r1, r0]
 80154fa:	18c0      	addlt	r0, r0, r3
 80154fc:	4770      	bx	lr
	...

08015500 <_init>:
 8015500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015502:	bf00      	nop
 8015504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015506:	bc08      	pop	{r3}
 8015508:	469e      	mov	lr, r3
 801550a:	4770      	bx	lr

0801550c <_fini>:
 801550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801550e:	bf00      	nop
 8015510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015512:	bc08      	pop	{r3}
 8015514:	469e      	mov	lr, r3
 8015516:	4770      	bx	lr
