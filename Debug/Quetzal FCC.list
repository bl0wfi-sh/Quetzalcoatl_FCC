
Quetzal FCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a894  08015f20  08015f20  00025f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080207b4  080207b4  00040360  2**0
                  CONTENTS
  4 .ARM          00000008  080207b4  080207b4  000307b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080207bc  080207bc  00040360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  080207bc  080207bc  000307bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000028  080207e8  080207e8  000307e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08020810  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002234  20000360  08020b70  00040360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  08020b70  00042594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008d9a7  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b1fc  00000000  00000000  000cdd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd8  00000000  00000000  000d8f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b88  00000000  00000000  000dbd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000320f0  00000000  00000000  000de898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003704e  00000000  00000000  00110988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118461  00000000  00000000  001479d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025fe37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eed4  00000000  00000000  0025fe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000360 	.word	0x20000360
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015f08 	.word	0x08015f08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000364 	.word	0x20000364
 800020c:	08015f08 	.word	0x08015f08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_ZNSt7__cxx119to_stringEi+0x24>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <_ZNSt7__cxx119to_stringEi+0x28>)
 8000ef6:	f000 ff09 	bl	8001d0c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08015f20 	.word	0x08015f20
 8000f08:	08013d45 	.word	0x08013d45

08000f0c <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	ed87 0a00 	vstr	s0, [r7]
    const int __n =
 8000f18:	233a      	movs	r3, #58	; 0x3a
 8000f1a:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8000f1c:	6838      	ldr	r0, [r7, #0]
 8000f1e:	f7ff fb33 	bl	8000588 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	e9cd 2300 	strd	r2, r3, [sp]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <_ZNSt7__cxx119to_stringEf+0x34>)
 8000f2e:	223a      	movs	r2, #58	; 0x3a
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <_ZNSt7__cxx119to_stringEf+0x38>)
 8000f32:	f000 feeb 	bl	8001d0c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08015f24 	.word	0x08015f24
 8000f44:	08013d45 	.word	0x08013d45

08000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
}

// Print string with new line.
static void println(std::string s)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f011 ffa7 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f56:	4604      	mov	r4, r0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f011 fe61 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	4621      	mov	r1, r4
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f6a:	f00c fcf2 	bl	800d952 <HAL_UART_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8000f72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f76:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8000f78:	f107 010c 	add.w	r1, r7, #12
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	2202      	movs	r2, #2
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f84:	f00c fce5 	bl	800d952 <HAL_UART_Transmit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	20000958 	.word	0x20000958

08000f98 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *  Created on: Sep 16, 2022
 *      Author: heapr0ll
 */
#include "BMI088Driver.hpp"

BMI088::BMI088(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08d      	sub	sp, #52	; 0x34
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6178      	str	r0, [r7, #20]
 8000fa0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fa4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fa8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fac:	460b      	mov	r3, r1
 8000fae:	603a      	str	r2, [r7, #0]
 8000fb0:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 8000fb2:	697c      	ldr	r4, [r7, #20]
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f011 ff98 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000fc0:	f107 0218 	add.w	r2, r7, #24
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	ed97 1a02 	vldr	s2, [r7, #8]
 8000fcc:	edd7 0a03 	vldr	s1, [r7, #12]
 8000fd0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f004 fe17 	bl	8005c08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f011 fe10 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 8000fee:	64da      	str	r2, [r3, #76]	; 0x4c
{
	devAddrAcc = BMI088_ACC_ADDRESS;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2218      	movs	r2, #24
 8000ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	devAddrGyro = BMI088_GYRO_ADDRESS;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2268      	movs	r2, #104	; 0x68
 8000ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gcal_x = 0;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
	gcal_y = 0;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
	gcal_z = 0;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4618      	mov	r0, r3
 800101c:	3734      	adds	r7, #52	; 0x34
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	bf00      	nop
 8001024:	080201f0 	.word	0x080201f0
 8001028:	20000a44 	.word	0x20000a44

0800102c <_ZN6BMI08812consoleFuncaEv>:

bool BMI088::consoleFunca()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09e      	sub	sp, #120	; 0x78
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f011 fb6c 	bl	8012716 <_ZNSaIcEC1Ev>
 800103e:	f107 0220 	add.w	r2, r7, #32
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4936      	ldr	r1, [pc, #216]	; (8001120 <_ZN6BMI08812consoleFuncaEv+0xf4>)
 8001048:	4618      	mov	r0, r3
 800104a:	f011 ff85 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff78 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f011 fdd1 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f011 fb56 	bl	8012718 <_ZNSaIcED1Ev>
	println("Read BMI088 accel, gyro, and temp data @ 800Hz.");
 800106c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001070:	4618      	mov	r0, r3
 8001072:	f011 fb50 	bl	8012716 <_ZNSaIcEC1Ev>
 8001076:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4929      	ldr	r1, [pc, #164]	; (8001124 <_ZN6BMI08812consoleFuncaEv+0xf8>)
 8001080:	4618      	mov	r0, r3
 8001082:	f011 ff69 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff5c 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4618      	mov	r0, r3
 8001096:	f011 fdb5 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800109a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800109e:	4618      	mov	r0, r3
 80010a0:	f011 fb3a 	bl	8012718 <_ZNSaIcED1Ev>
	println("\tArgs");
 80010a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a8:	4618      	mov	r0, r3
 80010aa:	f011 fb34 	bl	8012716 <_ZNSaIcEC1Ev>
 80010ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80010b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b6:	491c      	ldr	r1, [pc, #112]	; (8001128 <_ZN6BMI08812consoleFuncaEv+0xfc>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f011 ff4d 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff40 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80010c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010cc:	4618      	mov	r0, r3
 80010ce:	f011 fd99 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80010d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d6:	4618      	mov	r0, r3
 80010d8:	f011 fb1e 	bl	8012718 <_ZNSaIcED1Ev>
	println("\t* status - Show most recent accel, gyro, and temp data.");
 80010dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e0:	4618      	mov	r0, r3
 80010e2:	f011 fb18 	bl	8012716 <_ZNSaIcEC1Ev>
 80010e6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80010ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ee:	490f      	ldr	r1, [pc, #60]	; (800112c <_ZN6BMI08812consoleFuncaEv+0x100>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f011 ff31 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff24 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001100:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001104:	4618      	mov	r0, r3
 8001106:	f011 fd7d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800110a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800110e:	4618      	mov	r0, r3
 8001110:	f011 fb02 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	3778      	adds	r7, #120	; 0x78
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	08015f2c 	.word	0x08015f2c
 8001124:	08015f3c 	.word	0x08015f3c
 8001128:	08015f6c 	.word	0x08015f6c
 800112c:	08015f74 	.word	0x08015f74

08001130 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BMI088::consoleFuncb(std::string& s)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8001136:	af00      	add	r7, sp, #0
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	6018      	str	r0, [r3, #0]
 800113c:	463b      	mov	r3, r7
 800113e:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 8001140:	463b      	mov	r3, r7
 8001142:	49df      	ldr	r1, [pc, #892]	; (80014c0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x390>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f000 fe19 	bl	8001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 818a 	beq.w	8001466 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x336>
	{

		if (!imu_msg_pntr->locked)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	7e9b      	ldrb	r3, [r3, #26]
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8163 	beq.w	800142c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fc>
		{
			println("BMI088 Units - [rads, m/s^2, C]");
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f011 fad3 	bl	8012716 <_ZNSaIcEC1Ev>
 8001170:	f107 0220 	add.w	r2, r7, #32
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	49d2      	ldr	r1, [pc, #840]	; (80014c4 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x394>)
 800117a:	4618      	mov	r0, r3
 800117c:	f011 feec 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fedf 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f011 fd38 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f011 fabd 	bl	8012718 <_ZNSaIcED1Ev>
			println("BMI088 Frmt  - [gx, gy, gz, ax, ay, az, temp]");
 800119e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011a2:	4618      	mov	r0, r3
 80011a4:	f011 fab7 	bl	8012716 <_ZNSaIcEC1Ev>
 80011a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	49c5      	ldr	r1, [pc, #788]	; (80014c8 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x398>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f011 fed0 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fec3 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f011 fd1c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011d0:	4618      	mov	r0, r3
 80011d2:	f011 faa1 	bl	8012718 <_ZNSaIcED1Ev>
			println("BMI088 Data  - " +
					std::to_string(imu_msg_pntr->gx) + " " +
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe8f 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			println("BMI088 Data  - " +
 80011ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80011f2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80011f6:	49b5      	ldr	r1, [pc, #724]	; (80014cc <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x39c>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fdd2 	bl	8001da2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
					std::to_string(imu_msg_pntr->gx) + " " +
 80011fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001202:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001206:	4ab2      	ldr	r2, [pc, #712]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fde2 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->gy) + " " +
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	edd3 7a01 	vldr	s15, [r3, #4]
 8001218:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800121c:	eeb0 0a67 	vmov.f32	s0, s15
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe73 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gx) + " " +
 8001226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800122a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800122e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fde4 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->gy) + " " +
 8001238:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800123c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8001240:	4aa3      	ldr	r2, [pc, #652]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fdc5 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->gz) + " " +
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001252:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe56 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gy) + " " +
 8001260:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001264:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8001268:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fdc7 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->gz) + " " +
 8001272:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001276:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800127a:	4a95      	ldr	r2, [pc, #596]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fda8 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->ax) + " " +
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	edd3 7a03 	vldr	s15, [r3, #12]
 800128c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe39 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gz) + " " +
 800129a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800129e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80012a2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fdaa 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->ax) + " " +
 80012ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012b0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80012b4:	4a86      	ldr	r2, [pc, #536]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fd8b 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->ay) + " " +
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012c6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe1c 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->ax) + " " +
 80012d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012d8:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80012dc:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd8d 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->ay) + " " +
 80012e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012ea:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80012ee:	4a78      	ldr	r2, [pc, #480]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fd6e 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->az) + " " +
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001300:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fdff 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->ay) + " " +
 800130e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001312:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8001316:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fd70 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->az) + " " +
 8001320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001324:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001328:	4a69      	ldr	r2, [pc, #420]	; (80014d0 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a0>)
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fd51 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->temp));
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	8b1b      	ldrh	r3, [r3, #24]
 8001338:	461a      	mov	r2, r3
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdcd 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
					std::to_string(imu_msg_pntr->az) + " " +
 8001346:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800134a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800134e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd54 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
			println("BMI088 Data  - " +
 8001358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fdf3 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
					std::to_string(imu_msg_pntr->temp));
 8001362:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001366:	4618      	mov	r0, r3
 8001368:	f011 fc4c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800136c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001370:	4618      	mov	r0, r3
 8001372:	f011 fc47 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->az) + " " +
 8001376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137a:	4618      	mov	r0, r3
 800137c:	f011 fc42 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001380:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001384:	4618      	mov	r0, r3
 8001386:	f011 fc3d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800138a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800138e:	4618      	mov	r0, r3
 8001390:	f011 fc38 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->ay) + " " +
 8001394:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001398:	4618      	mov	r0, r3
 800139a:	f011 fc33 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800139e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f011 fc2e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013a8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013ac:	4618      	mov	r0, r3
 80013ae:	f011 fc29 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->ax) + " " +
 80013b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f011 fc24 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f011 fc1f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013c6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f011 fc1a 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gz) + " " +
 80013d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013d4:	4618      	mov	r0, r3
 80013d6:	f011 fc15 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013de:	4618      	mov	r0, r3
 80013e0:	f011 fc10 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80013e8:	4618      	mov	r0, r3
 80013ea:	f011 fc0b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gy) + " " +
 80013ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 fc06 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013fc:	4618      	mov	r0, r3
 80013fe:	f011 fc01 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001402:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001406:	4618      	mov	r0, r3
 8001408:	f011 fbfc 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gx) + " " +
 800140c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001410:	4618      	mov	r0, r3
 8001412:	f011 fbf7 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001416:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800141a:	4618      	mov	r0, r3
 800141c:	f011 fbf2 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001420:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001424:	4618      	mov	r0, r3
 8001426:	f011 fbed 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800142a:	e042      	b.n	80014b2 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x382>
		}else{
			println("Shared memory locked!");
 800142c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001430:	4618      	mov	r0, r3
 8001432:	f011 f970 	bl	8012716 <_ZNSaIcEC1Ev>
 8001436:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800143a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800143e:	4925      	ldr	r1, [pc, #148]	; (80014d4 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a4>)
 8001440:	4618      	mov	r0, r3
 8001442:	f011 fd89 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001446:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd7c 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001450:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001454:	4618      	mov	r0, r3
 8001456:	f011 fbd5 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800145a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800145e:	4618      	mov	r0, r3
 8001460:	f011 f95a 	bl	8012718 <_ZNSaIcED1Ev>
 8001464:	e025      	b.n	80014b2 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x382>
		}

	}else{
		println("Invalid parameter!");
 8001466:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800146a:	4618      	mov	r0, r3
 800146c:	f011 f953 	bl	8012716 <_ZNSaIcEC1Ev>
 8001470:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8001474:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001478:	4917      	ldr	r1, [pc, #92]	; (80014d8 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a8>)
 800147a:	4618      	mov	r0, r3
 800147c:	f011 fd6c 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001480:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fd5f 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800148a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800148e:	4618      	mov	r0, r3
 8001490:	f011 fbb8 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001494:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001498:	4618      	mov	r0, r3
 800149a:	f011 f93d 	bl	8012718 <_ZNSaIcED1Ev>
		consoleFunca();
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1d3a      	adds	r2, r7, #4
 80014aa:	6810      	ldr	r0, [r2, #0]
 80014ac:	4798      	blx	r3
		return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x384>
	}

	return true;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	08015fb0 	.word	0x08015fb0
 80014c4:	08015fb8 	.word	0x08015fb8
 80014c8:	08015fd8 	.word	0x08015fd8
 80014cc:	08016008 	.word	0x08016008
 80014d0:	08016018 	.word	0x08016018
 80014d4:	0801601c 	.word	0x0801601c
 80014d8:	08016034 	.word	0x08016034

080014dc <_ZN6BMI08812taskFunctionEv>:

bool BMI088::taskFunction()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	imu_msg_pntr->locked = true;			// Lock the shared memory while writting to it.
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	2201      	movs	r2, #1
 80014ea:	769a      	strb	r2, [r3, #26]
	getGyroscope(imu_msg_pntr->gyros, imu_msg_pntr->gyros + 1, imu_msg_pntr->gyros + 2);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4619      	mov	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	1d1a      	adds	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	3308      	adds	r3, #8
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa80 	bl	8001a04 <_ZN6BMI08812getGyroscopeEPfS0_S0_>
	getAcceleration(imu_msg_pntr->accels, imu_msg_pntr->accels + 1, imu_msg_pntr->accels + 2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	f103 010c 	add.w	r1, r3, #12
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	330c      	adds	r3, #12
 8001512:	1d1a      	adds	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	330c      	adds	r3, #12
 800151a:	3308      	adds	r3, #8
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9f3 	bl	8001908 <_ZN6BMI08815getAccelerationEPfS0_S0_>
	imu_msg_pntr->temp = getTemperature();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fafe 	bl	8001b24 <_ZN6BMI08814getTemperatureEv>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001530:	b292      	uxth	r2, r2
 8001532:	831a      	strh	r2, [r3, #24]
	imu_msg_pntr->locked = false;			// Un-lock the shared memory while writting to it.
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	2200      	movs	r2, #0
 800153a:	769a      	strb	r2, [r3, #26]
	return true;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>:

bool BMI088::initialize(FMPI2C_HandleTypeDef* i) {
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]

	i2c = i;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	649a      	str	r2, [r3, #72]	; 0x48

	// Check if is connected.
	if (!isConnection()) return false;
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f88f 	bl	800167a <_ZN6BMI08812isConnectionEv>
 800155c:	4603      	mov	r3, r0
 800155e:	f083 0301 	eor.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x26>
 8001568:	2300      	movs	r3, #0
 800156a:	e021      	b.n	80015b0 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x6a>

    setAccScaleRange(RANGE_3G);
 800156c:	2100      	movs	r1, #0
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f906 	bl	8001780 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>
    setAccOutputDataRate(ODR_1600);
 8001574:	210c      	movs	r1, #12
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f936 	bl	80017e8 <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>
    setAccLowPassFilterBandwidth(BWP_4_FOLD);   // Refer to data sheet to see how Low Pass Filter is set based on Output Data Rate and this register value.
 800157c:	2108      	movs	r1, #8
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f953 	bl	800182a <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>
    setAccPoweMode(ACC_ACTIVE);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8aa 	bl	80016e0 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>

    setGyroScaleRange(RANGE_500);
 800158c:	2102      	movs	r1, #2
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f96e 	bl	8001870 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>
    setGyroOutputDataRate(ODR_2000_BW_230);
 8001594:	2101      	movs	r1, #1
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f9a6 	bl	80018e8 <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>
    setGyroPoweMode(GYRO_NORMAL);
 800159c:	2100      	movs	r1, #0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8c7 	bl	8001732 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>

    calibrateGyro(5000);
 80015a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f805 	bl	80015b8 <_ZN6BMI08813calibrateGyroEi>

    return true;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZN6BMI08813calibrateGyroEi>:

void BMI088::calibrateGyro(int count){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    float x_tot = 0, y_tot = 0, z_tot = 0;
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	da24      	bge.n	800162a <_ZN6BMI08813calibrateGyroEi+0x72>
      float gx, gy, gz;
      getGyroscope(&gx, &gy, &gz);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	f107 0210 	add.w	r2, r7, #16
 80015e8:	f107 0114 	add.w	r1, r7, #20
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fa09 	bl	8001a04 <_ZN6BMI08812getGyroscopeEPfS0_S0_>
      x_tot += gx;
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      y_tot += gy;
 8001602:	edd7 7a04 	vldr	s15, [r7, #16]
 8001606:	ed97 7a08 	vldr	s14, [r7, #32]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	edc7 7a08 	vstr	s15, [r7, #32]
      z_tot += gz;
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	ed97 7a07 	vldr	s14, [r7, #28]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int i = 0; i < count; i++){
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	3301      	adds	r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	e7d6      	b.n	80015d8 <_ZN6BMI08813calibrateGyroEi+0x20>
    }
    gcal_x = x_tot / count;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    gcal_y = y_tot / count;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164c:	edd7 6a08 	vldr	s13, [r7, #32]
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    gcal_z = z_tot / count;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001664:	edd7 6a07 	vldr	s13, [r7, #28]
 8001668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_ZN6BMI08812isConnectionEv>:

bool BMI088::isConnection(void) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
    return ((getAccID() == 0x1E) && (getGyroID() == 0x0F));
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f810 	bl	80016a8 <_ZN6BMI0888getAccIDEv>
 8001688:	4603      	mov	r3, r0
 800168a:	2b1e      	cmp	r3, #30
 800168c:	d107      	bne.n	800169e <_ZN6BMI08812isConnectionEv+0x24>
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f818 	bl	80016c4 <_ZN6BMI0889getGyroIDEv>
 8001694:	4603      	mov	r3, r0
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d101      	bne.n	800169e <_ZN6BMI08812isConnectionEv+0x24>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <_ZN6BMI08812isConnectionEv+0x26>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZN6BMI0888getAccIDEv>:

void BMI088::resetGyro(void) {
    write8(GYRO, BMI088_GYRO_SOFT_RESET, 0xB6);
}

uint8_t BMI088::getAccID(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    return read8(ACC, BMI088_ACC_CHIP_ID);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fa89 	bl	8001bcc <_ZN6BMI0885read8E13device_type_th>
 80016ba:	4603      	mov	r3, r0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN6BMI0889getGyroIDEv>:

uint8_t BMI088::getGyroID(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    return read8(GYRO, BMI088_GYRO_CHIP_ID);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fa7b 	bl	8001bcc <_ZN6BMI0885read8E13device_type_th>
 80016d6:	4603      	mov	r3, r0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>:

void BMI088::setAccPoweMode(acc_power_type_t mode) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
    if (mode == ACC_ACTIVE) {
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x2c>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x04);
 80016f2:	2304      	movs	r3, #4
 80016f4:	227d      	movs	r2, #125	; 0x7d
 80016f6:	2100      	movs	r1, #0
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fa35 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x00);
 80016fe:	2300      	movs	r3, #0
 8001700:	227c      	movs	r2, #124	; 0x7c
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa2f 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == ACC_SUSPEND) {
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
    }
}
 800170a:	e00e      	b.n	800172a <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
    } else if (mode == ACC_SUSPEND) {
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d10b      	bne.n	800172a <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
 8001712:	2303      	movs	r3, #3
 8001714:	227c      	movs	r2, #124	; 0x7c
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 fa25 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
 800171e:	2300      	movs	r3, #0
 8001720:	227d      	movs	r2, #125	; 0x7d
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fa1f 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>:

void BMI088::setGyroPoweMode(gyro_power_type_t mode) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	70fb      	strb	r3, [r7, #3]
    if (mode == GYRO_NORMAL) {
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x20>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_NORMAL);
 8001744:	2300      	movs	r3, #0
 8001746:	2211      	movs	r2, #17
 8001748:	2101      	movs	r1, #1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fa0c 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == GYRO_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
    } else if (mode == GYRO_DEEP_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
    }
}
 8001750:	e012      	b.n	8001778 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_SUSPEND) {
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	2b80      	cmp	r3, #128	; 0x80
 8001756:	d106      	bne.n	8001766 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x34>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	2211      	movs	r2, #17
 800175c:	2101      	movs	r1, #1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa02 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 8001764:	e008      	b.n	8001778 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_DEEP_SUSPEND) {
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	2b20      	cmp	r3, #32
 800176a:	d105      	bne.n	8001778 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
 800176c:	2320      	movs	r3, #32
 800176e:	2211      	movs	r2, #17
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f9f8 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>:

void BMI088::setAccScaleRange(acc_scale_type_t range) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_3G) {
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x1a>
        accRange = 3;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x58>)
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
 8001798:	e013      	b.n	80017c2 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_6G) {
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d103      	bne.n	80017a8 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x28>
        accRange = 6;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x5c>)
 80017a4:	631a      	str	r2, [r3, #48]	; 0x30
 80017a6:	e00c      	b.n	80017c2 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_12G) {
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d103      	bne.n	80017b6 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x36>
        accRange = 12;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x60>)
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
 80017b4:	e005      	b.n	80017c2 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_24G) {
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d102      	bne.n	80017c2 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
        accRange = 24;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x64>)
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    write8(ACC, BMI088_ACC_RANGE, (uint8_t)range);
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2241      	movs	r2, #65	; 0x41
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f9cd 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40400000 	.word	0x40400000
 80017dc:	40c00000 	.word	0x40c00000
 80017e0:	41400000 	.word	0x41400000
 80017e4:	41c00000 	.word	0x41c00000

080017e8 <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>:

void BMI088::setAccOutputDataRate(acc_odr_type_t odr) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f9e5 	bl	8001bcc <_ZN6BMI0885read8E13device_type_th>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
    data = data & 0xf0;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f023 030f 	bic.w	r3, r3, #15
 800180c:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)odr;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	4313      	orrs	r3, r2
 8001814:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2240      	movs	r2, #64	; 0x40
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f9a3 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>:

void BMI088::setAccLowPassFilterBandwidth(acc_bwp_type_t bwp) {
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f9c4 	bl	8001bcc <_ZN6BMI0885read8E13device_type_th>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
    data = data & 0x0f;                   // Wipe only top 4 bits
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)(bwp << 4);    // Low pass filter is bits [7:4]
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	b2da      	uxtb	r2, r3
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	4313      	orrs	r3, r2
 800185a:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f980 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>:


void BMI088::setGyroScaleRange(gyro_scale_type_t range) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_2000) {
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x1a>
        gyroRange = 2000;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x64>)
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
 8001888:	e01a      	b.n	80018c0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_1000) {
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x28>
        gyroRange = 1000;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x68>)
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	e013      	b.n	80018c0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_500) {
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d103      	bne.n	80018a6 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x36>
        gyroRange = 500;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x6c>)
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
 80018a4:	e00c      	b.n	80018c0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_250) {
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d103      	bne.n	80018b4 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x44>
        gyroRange = 250;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x70>)
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
 80018b2:	e005      	b.n	80018c0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_125) {
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d102      	bne.n	80018c0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
        gyroRange = 125;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x74>)
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
    }

    write8(GYRO, BMI088_GYRO_RANGE, (uint8_t)range);
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	220f      	movs	r2, #15
 80018c4:	2101      	movs	r1, #1
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f94e 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	44fa0000 	.word	0x44fa0000
 80018d8:	447a0000 	.word	0x447a0000
 80018dc:	43fa0000 	.word	0x43fa0000
 80018e0:	437a0000 	.word	0x437a0000
 80018e4:	42fa0000 	.word	0x42fa0000

080018e8 <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>:

void BMI088::setGyroOutputDataRate(gyro_odr_type_t odr) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
    write8(GYRO, BMI088_GYRO_BAND_WIDTH, (uint8_t)odr);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2210      	movs	r2, #16
 80018f8:	2101      	movs	r1, #1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f934 	bl	8001b68 <_ZN6BMI0886write8E13device_type_thh>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZN6BMI08815getAccelerationEPfS0_S0_>:

void BMI088::getAcceleration(float* x, float* y, float* z) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	2300      	movs	r3, #0
 800191c:	833b      	strh	r3, [r7, #24]
    uint16_t ax = 0, ay = 0, az = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001922:	2300      	movs	r3, #0
 8001924:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001926:	2300      	movs	r3, #0
 8001928:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]

    read(ACC, BMI088_ACC_X_LSB, buf, 6);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2206      	movs	r2, #6
 8001936:	9200      	str	r2, [sp, #0]
 8001938:	2212      	movs	r2, #18
 800193a:	2100      	movs	r1, #0
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f9b8 	bl	8001cb2 <_ZN6BMI0884readE13device_type_thPht>

    ax = buf[0] | (buf[1] << 8);
 8001942:	7d3b      	ldrb	r3, [r7, #20]
 8001944:	b21a      	sxth	r2, r3
 8001946:	7d7b      	ldrb	r3, [r7, #21]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21b      	sxth	r3, r3
 8001950:	84fb      	strh	r3, [r7, #38]	; 0x26
    ay = buf[2] | (buf[3] << 8);
 8001952:	7dbb      	ldrb	r3, [r7, #22]
 8001954:	b21a      	sxth	r2, r3
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	84bb      	strh	r3, [r7, #36]	; 0x24
    az = buf[4] | (buf[5] << 8);
 8001962:	7e3b      	ldrb	r3, [r7, #24]
 8001964:	b21a      	sxth	r2, r3
 8001966:	7e7b      	ldrb	r3, [r7, #25]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21b      	sxth	r3, r3
 8001970:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)ax;
 8001972:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197e:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = accRange * value / 32768;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001988:	edd7 7a07 	vldr	s15, [r7, #28]
 800198c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001990:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a00 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)ay;
 800199e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = accRange * value / 32768;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019bc:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a00 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)az;
 80019ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = accRange * value / 32768;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001a00 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	edc3 7a00 	vstr	s15, [r3]
}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	47000000 	.word	0x47000000

08001a04 <_ZN6BMI08812getGyroscopeEPfS0_S0_>:
    value = accRange * value / 32768;

    return value;
}

void BMI088::getGyroscope(float* x, float* y, float* z) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	2300      	movs	r3, #0
 8001a18:	833b      	strh	r3, [r7, #24]
    uint16_t gx = 0, gy = 0, gz = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a1e:	2300      	movs	r3, #0
 8001a20:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001a22:	2300      	movs	r3, #0
 8001a24:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]

    read(GYRO, BMI088_GYRO_RATE_X_LSB, buf, 6);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2206      	movs	r2, #6
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	2202      	movs	r2, #2
 8001a36:	2101      	movs	r1, #1
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f93a 	bl	8001cb2 <_ZN6BMI0884readE13device_type_thPht>

    gx = buf[0] | (buf[1] << 8);
 8001a3e:	7d3b      	ldrb	r3, [r7, #20]
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	7d7b      	ldrb	r3, [r7, #21]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    gy = buf[2] | (buf[3] << 8);
 8001a4e:	7dbb      	ldrb	r3, [r7, #22]
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gz = buf[4] | (buf[5] << 8);
 8001a5e:	7e3b      	ldrb	r3, [r7, #24]
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	7e7b      	ldrb	r3, [r7, #25]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)gx;
 8001a6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = (gyroRange * value / 32768) - gcal_x;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001a84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001b20 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001a90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gy;
 8001aa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = -(gyroRange * value / 32768) - gcal_y;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001aba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001b20 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aca:	eeb1 7a67 	vneg.f32	s14, s15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gz;
 8001ade:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = -(gyroRange * value / 32768) - gcal_z;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001af4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b20 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b04:	eeb1 7a67 	vneg.f32	s14, s15
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	edc3 7a00 	vstr	s15, [r3]
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	47000000 	.word	0x47000000

08001b24 <_ZN6BMI08814getTemperatureEv>:
    value = (gyroRange * value / 32768) - gcal_z;

    return value * -1.0f;
}

int16_t BMI088::getTemperature(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    uint16_t data = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	81fb      	strh	r3, [r7, #14]

    data = read16Be(ACC, BMI088_ACC_TEMP_MSB);
 8001b30:	2222      	movs	r2, #34	; 0x22
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f887 	bl	8001c48 <_ZN6BMI0888read16BeE13device_type_th>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	81fb      	strh	r3, [r7, #14]
    data = data >> 5;
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	115b      	asrs	r3, r3, #5
 8001b42:	81fb      	strh	r3, [r7, #14]

    if (data > 1023) {
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4a:	d303      	bcc.n	8001b54 <_ZN6BMI08814getTemperatureEv+0x30>
        data = data - 2048;
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001b52:	81fb      	strh	r3, [r7, #14]
    }

    return (int16_t)(data / 8 + 23);
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3317      	adds	r3, #23
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZN6BMI0886write8E13device_type_thh>:

void BMI088::write8(device_type_t dev, uint8_t reg, uint8_t val) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af04      	add	r7, sp, #16
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	70fb      	strb	r3, [r7, #3]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70bb      	strb	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
    uint8_t addr = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]

    if (dev) {
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <_ZN6BMI0886write8E13device_type_thh+0x2e>
        addr = devAddrGyro;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e003      	b.n	8001b9e <_ZN6BMI0886write8E13device_type_thh+0x36>
    } else {
        addr = devAddrAcc;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9c:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Write(i2c, (uint16_t)(addr<<1), reg, 1, &val, 1, HAL_MAX_DELAY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	1c7b      	adds	r3, r7, #1
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f007 fbe3 	bl	8009388 <HAL_FMPI2C_Mem_Write>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <_ZN6BMI0885read8E13device_type_th>:

uint8_t BMI088::read8(device_type_t dev, uint8_t reg) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0, data = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	2300      	movs	r3, #0
 8001be2:	737b      	strb	r3, [r7, #13]

    if (dev) {
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <_ZN6BMI0885read8E13device_type_th+0x28>
        addr = devAddrGyro;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e003      	b.n	8001bfc <_ZN6BMI0885read8E13device_type_th+0x30>
    } else {
        addr = devAddrAcc;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bfa:	73fb      	strb	r3, [r7, #15]
    }

    HAL_StatusTypeDef code = HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, &data, 1, HAL_MAX_DELAY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	b299      	uxth	r1, r3
 8001c08:	78bb      	ldrb	r3, [r7, #2]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030d 	add.w	r3, r7, #13
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f007 fcc7 	bl	80095b0 <HAL_FMPI2C_Mem_Read>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73bb      	strb	r3, [r7, #14]
    if (code != HAL_OK)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <_ZN6BMI0885read8E13device_type_th+0x6c>
    {
    	printf("[BMI088] - Error %d while trying to read %d bytes from REG %d\r\n", code, 1, reg);
 8001c2c:	7bb9      	ldrb	r1, [r7, #14]
 8001c2e:	78bb      	ldrb	r3, [r7, #2]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <_ZN6BMI0885read8E13device_type_th+0x78>)
 8001c34:	f011 ff78 	bl	8013b28 <iprintf>
    }

    return data;
 8001c38:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08016048 	.word	0x08016048

08001c48 <_ZN6BMI0888read16BeE13device_type_th>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8));
}

uint16_t BMI088::read16Be(device_type_t dev, uint8_t reg) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af04      	add	r7, sp, #16
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
 8001c54:	4613      	mov	r3, r2
 8001c56:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    if (dev) {
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <_ZN6BMI0888read16BeE13device_type_th+0x24>
        addr = devAddrGyro;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e003      	b.n	8001c74 <_ZN6BMI0888read16BeE13device_type_th+0x2c>
    } else {
        addr = devAddrAcc;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c72:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	b299      	uxth	r1, r3
 8001c80:	78bb      	ldrb	r3, [r7, #2]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	f007 fc8b 	bl	80095b0 <HAL_FMPI2C_Mem_Read>

    return (data[1] | (data[0] << 8));
 8001c9a:	7b7b      	ldrb	r3, [r7, #13]
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	b29b      	uxth	r3, r3
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN6BMI0884readE13device_type_thPht>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 3, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8) | (data[2] << 16));
}

void BMI088::read(device_type_t dev, uint8_t reg, uint8_t* buf, uint16_t len) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b08a      	sub	sp, #40	; 0x28
 8001cb6:	af04      	add	r7, sp, #16
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	72fb      	strb	r3, [r7, #11]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	72bb      	strb	r3, [r7, #10]
    uint8_t addr = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]

    if (dev) {
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <_ZN6BMI0884readE13device_type_thPht+0x26>
        addr = devAddrGyro;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	e003      	b.n	8001ce0 <_ZN6BMI0884readE13device_type_thPht+0x2e>
    } else {
        addr = devAddrAcc;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cde:	75fb      	strb	r3, [r7, #23]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, buf, len, HAL_MAX_DELAY);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	b299      	uxth	r1, r3
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	8c3b      	ldrh	r3, [r7, #32]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f007 fc56 	bl	80095b0 <HAL_FMPI2C_Mem_Read>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001d0c:	b408      	push	{r3}
 8001d0e:	b590      	push	{r4, r7, lr}
 8001d10:	b088      	sub	sp, #32
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	ebad 0d03 	sub.w	sp, sp, r3
 8001d26:	466b      	mov	r3, sp
 8001d28:	3307      	adds	r3, #7
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001d30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d34:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001d36:	68bc      	ldr	r4, [r7, #8]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	69f8      	ldr	r0, [r7, #28]
 8001d40:	47a0      	blx	r4
 8001d42:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	18d4      	adds	r4, r2, r3
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f010 fce1 	bl	8012716 <_ZNSaIcEC1Ev>
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4622      	mov	r2, r4
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f890 	bl	8001e82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4618      	mov	r0, r3
 8001d68:	f010 fcd6 	bl	8012718 <_ZNSaIcED1Ev>
 8001d6c:	bf00      	nop
    }
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d78:	b001      	add	sp, #4
 8001d7a:	4770      	bx	lr

08001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f011 f89b 	bl	8012ec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	2100      	movs	r1, #0
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f011 f810 	bl	8012dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f88b 	bl	8001ed6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f010 ff03 	bl	8012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f011 f845 	bl	8012e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f874 	bl	8001ed6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f010 feec 	bl	8012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
      const auto __size = __lhs.size() + __rhs.size();
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f010 ff05 	bl	8012c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e12:	4604      	mov	r4, r0
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f010 ff01 	bl	8012c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4423      	add	r3, r4
 8001e1e:	617b      	str	r3, [r7, #20]
      const bool __cond = (__size > __lhs.capacity()
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f010 feff 	bl	8012c24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001e26:	4602      	mov	r2, r0
			   && __size <= __rhs.capacity());
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d908      	bls.n	8001e40 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f010 fef8 	bl	8012c24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d801      	bhi.n	8001e40 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x42>
 8001e40:	2300      	movs	r3, #0
      const bool __cond = (__size > __lhs.capacity()
 8001e42:	74fb      	strb	r3, [r7, #19]
	            : std::move(__lhs.append(__rhs));
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x60>
      return __cond ? std::move(__rhs.insert(0, __lhs))
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f010 ffb8 	bl	8012dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f83d 	bl	8001ed6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	e008      	b.n	8001e72 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x72>
	            : std::move(__lhs.append(__rhs));
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f010 ffea 	bl	8012e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f833 	bl	8001ed6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f010 feab 	bl	8012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}

08001e82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001e82:	b590      	push	{r4, r7, lr}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001e90:	68fc      	ldr	r4, [r7, #12]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f010 fdba 	bl	8012a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f011 f824 	bl	8012eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f805 	bl	8001eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f80f 	bl	8001eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001efa:	4623      	mov	r3, r4
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f805 	bl	8001f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
	...

08001f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f000 f83e 	bl	8001fa0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001f3c:	4817      	ldr	r0, [pc, #92]	; (8001f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001f3e:	f010 fca3 	bl	8012888 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68b8      	ldr	r0, [r7, #8]
 8001f46:	f000 f83b 	bl	8001fc0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d910      	bls.n	8001f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f010 fd5f 	bl	8012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4619      	mov	r1, r3
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f010 fd4c 	bl	8012a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f010 fd4d 	bl	8012a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f010 fd46 	bl	8012a08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f010 fdb1 	bl	8012aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f010 fd41 	bl	8012a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	08016088 	.word	0x08016088

08001fa0 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001fca:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f80a 	bl	8001fe8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001fd4:	462a      	mov	r2, r5
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 f80f 	bl	8001ffc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8001fde:	4603      	mov	r3, r0
    }
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
    }
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <_Z41__static_initialization_and_destruction_0ii>:
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d126      	bne.n	800207a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002032:	4293      	cmp	r3, r2
 8002034:	d121      	bne.n	800207a <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	4618      	mov	r0, r3
 800203c:	f010 fb6b 	bl	8012716 <_ZNSaIcEC1Ev>
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	461a      	mov	r2, r3
 8002046:	4916      	ldr	r1, [pc, #88]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002048:	4816      	ldr	r0, [pc, #88]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800204a:	f010 ff85 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4618      	mov	r0, r3
 8002054:	f010 fb60 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4618      	mov	r0, r3
 800205e:	f010 fb5a 	bl	8012716 <_ZNSaIcEC1Ev>
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	461a      	mov	r2, r3
 8002068:	490f      	ldr	r1, [pc, #60]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800206c:	f010 ff74 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4618      	mov	r0, r3
 8002076:	f010 fb4f 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002086:	4293      	cmp	r3, r2
 8002088:	d105      	bne.n	8002096 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800208c:	f010 fdba 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002092:	f010 fdb7 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	080160b4 	.word	0x080160b4
 80020a4:	2000037c 	.word	0x2000037c
 80020a8:	080160b8 	.word	0x080160b8
 80020ac:	20000394 	.word	0x20000394

080020b0 <_GLOBAL__sub_I__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff ffaf 	bl	800201c <_Z41__static_initialization_and_destruction_0ii>
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_GLOBAL__sub_D__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff ffa7 	bl	800201c <_Z41__static_initialization_and_destruction_0ii>
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f010 fee3 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80020de:	4604      	mov	r4, r0
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f010 fd9d 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	4621      	mov	r1, r4
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80020f2:	f00b fc2e 	bl	800d952 <HAL_UART_Transmit>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 80020fa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80020fe:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8002100:	f107 010c 	add.w	r1, r7, #12
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	2202      	movs	r2, #2
 800210a:	4804      	ldr	r0, [pc, #16]	; (800211c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800210c:	f00b fc21 	bl	800d952 <HAL_UART_Transmit>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	20000958 	.word	0x20000958

08002120 <_ZN4Task12taskFunctionEv>:
	// Move assignment operator.
	Task& operator=(Task&& other) noexcept;
	Task& operator=(const Task& other) = delete;	// Disabling copy constructor so you can only move objects.

	// Callback function for Task object within scheduler.
	virtual bool taskFunction()
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	{
		return true;
 8002128:	2301      	movs	r3, #1
	}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <_ZN4Task12consoleFuncaEv>:

	// Callback functions for Task object within console.
	virtual bool consoleFunca()
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	{
		println("Function not implemented by Task!");
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4618      	mov	r0, r3
 8002146:	f010 fae6 	bl	8012716 <_ZNSaIcEC1Ev>
 800214a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	490c      	ldr	r1, [pc, #48]	; (8002184 <_ZN4Task12consoleFuncaEv+0x4c>)
 8002154:	4618      	mov	r0, r3
 8002156:	f010 feff 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ffb6 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4618      	mov	r0, r3
 800216a:	f010 fd4b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	f010 fad0 	bl	8012718 <_ZNSaIcED1Ev>
		return true;
 8002178:	2301      	movs	r3, #1
	}
 800217a:	4618      	mov	r0, r3
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	08017220 	.word	0x08017220

08002188 <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

	virtual bool consoleFuncb(std::string& s)
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	{
		println("Function not implemented by Task!");
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	4618      	mov	r0, r3
 8002198:	f010 fabd 	bl	8012716 <_ZNSaIcEC1Ev>
 800219c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	490b      	ldr	r1, [pc, #44]	; (80021d4 <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f010 fed6 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff8d 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4618      	mov	r0, r3
 80021bc:	f010 fd22 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4618      	mov	r0, r3
 80021c6:	f010 faa7 	bl	8012718 <_ZNSaIcED1Ev>
		return true;
 80021ca:	2301      	movs	r3, #1
	}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08017220 	.word	0x08017220

080021d8 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BatteryMon.hpp"

BattMon::BattMon(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b08d      	sub	sp, #52	; 0x34
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6178      	str	r0, [r7, #20]
 80021e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80021e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80021e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80021ec:	460b      	mov	r3, r1
 80021ee:	603a      	str	r2, [r7, #0]
 80021f0:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 80021f2:	697c      	ldr	r4, [r7, #20]
 80021f4:	f107 0318 	add.w	r3, r7, #24
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f010 fe78 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002200:	f107 0218 	add.w	r2, r7, #24
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4619      	mov	r1, r3
 8002208:	ed97 1a02 	vldr	s2, [r7, #8]
 800220c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002210:	ed97 0a04 	vldr	s0, [r7, #16]
 8002214:	4620      	mov	r0, r4
 8002216:	f003 fcf7 	bl	8005c08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800221a:	f107 0318 	add.w	r3, r7, #24
 800221e:	4618      	mov	r0, r3
 8002220:	f010 fcf0 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>)
 800222e:	635a      	str	r2, [r3, #52]	; 0x34
{

}
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4618      	mov	r0, r3
 8002234:	3734      	adds	r7, #52	; 0x34
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop
 800223c:	08020204 	.word	0x08020204
 8002240:	20000a60 	.word	0x20000a60

08002244 <_ZN7BattMon4initEP17ADC_HandleTypeDef>:
{

}

void BattMon::init(ADC_HandleTypeDef* adc)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	hadc = adc;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_ZN7BattMon12consoleFuncaEv>:

bool BattMon::consoleFunca()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b09e      	sub	sp, #120	; 0x78
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	4618      	mov	r0, r3
 800226e:	f010 fa52 	bl	8012716 <_ZNSaIcEC1Ev>
 8002272:	f107 0220 	add.w	r2, r7, #32
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4936      	ldr	r1, [pc, #216]	; (8002354 <_ZN7BattMon12consoleFuncaEv+0xf4>)
 800227c:	4618      	mov	r0, r3
 800227e:	f010 fe6b 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff22 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	4618      	mov	r0, r3
 8002292:	f010 fcb7 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	4618      	mov	r0, r3
 800229c:	f010 fa3c 	bl	8012718 <_ZNSaIcED1Ev>
	println("Read 4s Lipo Cell Voltages @ 4Hz.");
 80022a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a4:	4618      	mov	r0, r3
 80022a6:	f010 fa36 	bl	8012716 <_ZNSaIcEC1Ev>
 80022aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4929      	ldr	r1, [pc, #164]	; (8002358 <_ZN7BattMon12consoleFuncaEv+0xf8>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f010 fe4f 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff06 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f010 fc9b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022d2:	4618      	mov	r0, r3
 80022d4:	f010 fa20 	bl	8012718 <_ZNSaIcED1Ev>
	println("\tArgs");
 80022d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022dc:	4618      	mov	r0, r3
 80022de:	f010 fa1a 	bl	8012716 <_ZNSaIcEC1Ev>
 80022e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80022e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ea:	491c      	ldr	r1, [pc, #112]	; (800235c <_ZN7BattMon12consoleFuncaEv+0xfc>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f010 fe33 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80022f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff feea 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80022fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002300:	4618      	mov	r0, r3
 8002302:	f010 fc7f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800230a:	4618      	mov	r0, r3
 800230c:	f010 fa04 	bl	8012718 <_ZNSaIcED1Ev>
	println("\t* status - Shows most recent pack voltage and individual cell voltages.");
 8002310:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002314:	4618      	mov	r0, r3
 8002316:	f010 f9fe 	bl	8012716 <_ZNSaIcEC1Ev>
 800231a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800231e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002322:	490f      	ldr	r1, [pc, #60]	; (8002360 <_ZN7BattMon12consoleFuncaEv+0x100>)
 8002324:	4618      	mov	r0, r3
 8002326:	f010 fe17 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800232a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fece 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002334:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002338:	4618      	mov	r0, r3
 800233a:	f010 fc63 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800233e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002342:	4618      	mov	r0, r3
 8002344:	f010 f9e8 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	3778      	adds	r7, #120	; 0x78
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	08017244 	.word	0x08017244
 8002358:	08017254 	.word	0x08017254
 800235c:	08017278 	.word	0x08017278
 8002360:	08017280 	.word	0x08017280

08002364 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BattMon::consoleFuncb(std::string& s)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0f2      	sub	sp, #456	; 0x1c8
 8002368:	af00      	add	r7, sp, #0
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	6018      	str	r0, [r3, #0]
 800236e:	463b      	mov	r3, r7
 8002370:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 8002372:	463b      	mov	r3, r7
 8002374:	49b3      	ldr	r1, [pc, #716]	; (8002644 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e0>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	f7ff fd00 	bl	8001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8133 	beq.w	80025ea <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x286>
	{
		if (!batt_msg_pntr->locked)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	7d1b      	ldrb	r3, [r3, #20]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 810c 	beq.w	80025b0 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>
		{
			println("Lipo Pack Units - [Volts]");
 8002398:	f107 0320 	add.w	r3, r7, #32
 800239c:	4618      	mov	r0, r3
 800239e:	f010 f9ba 	bl	8012716 <_ZNSaIcEC1Ev>
 80023a2:	f107 0220 	add.w	r2, r7, #32
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	49a7      	ldr	r1, [pc, #668]	; (8002648 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e4>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f010 fdd3 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe8a 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	4618      	mov	r0, r3
 80023c2:	f010 fc1f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	4618      	mov	r0, r3
 80023cc:	f010 f9a4 	bl	8012718 <_ZNSaIcED1Ev>
			println("Lipo Pack Frmt  - [c1, c2, c3, c4, total]");
 80023d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023d4:	4618      	mov	r0, r3
 80023d6:	f010 f99e 	bl	8012716 <_ZNSaIcEC1Ev>
 80023da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	499a      	ldr	r1, [pc, #616]	; (800264c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e8>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f010 fdb7 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe6e 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80023f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f010 fc03 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80023fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002402:	4618      	mov	r0, r3
 8002404:	f010 f988 	bl	8012718 <_ZNSaIcED1Ev>
			println("Lipo Pack Data  - " +
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fd76 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			println("Lipo Pack Data  - " +
 8002420:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002424:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002428:	4989      	ldr	r1, [pc, #548]	; (8002650 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fcb9 	bl	8001da2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002430:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002434:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002438:	4a86      	ldr	r2, [pc, #536]	; (8002654 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fcc9 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	edd3 7a01 	vldr	s15, [r3, #4]
 800244a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800244e:	eeb0 0a67 	vmov.f32	s0, s15
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fd5a 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002458:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800245c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002460:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fccb 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell2) + " " +
 800246a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800246e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002472:	4a78      	ldr	r2, [pc, #480]	; (8002654 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fcac 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell3) + " " +
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	edd3 7a02 	vldr	s15, [r3, #8]
 8002484:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fd3d 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002492:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002496:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800249a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcae 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell3) + " " +
 80024a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024a8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024ac:	4a69      	ldr	r2, [pc, #420]	; (8002654 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fc8f 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell4) + " " +
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80024be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80024c2:	eeb0 0a67 	vmov.f32	s0, s15
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd20 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell3) + " " +
 80024cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024d0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80024d4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc91 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell4) + " " +
 80024de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024e2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80024e6:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fc72 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->pack_volt));
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80024f8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fd03 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002506:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800250a:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800250e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fc74 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
			println("Lipo Pack Data  - " +
 8002518:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fdd7 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
					std::to_string(batt_msg_pntr->pack_volt));
 8002522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f010 fb6c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800252c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002530:	4618      	mov	r0, r3
 8002532:	f010 fb67 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800253a:	4618      	mov	r0, r3
 800253c:	f010 fb62 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002540:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002544:	4618      	mov	r0, r3
 8002546:	f010 fb5d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800254a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800254e:	4618      	mov	r0, r3
 8002550:	f010 fb58 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell3) + " " +
 8002554:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002558:	4618      	mov	r0, r3
 800255a:	f010 fb53 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800255e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002562:	4618      	mov	r0, r3
 8002564:	f010 fb4e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002568:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800256c:	4618      	mov	r0, r3
 800256e:	f010 fb49 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002572:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002576:	4618      	mov	r0, r3
 8002578:	f010 fb44 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800257c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002580:	4618      	mov	r0, r3
 8002582:	f010 fb3f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fb3a 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002590:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002594:	4618      	mov	r0, r3
 8002596:	f010 fb35 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800259a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800259e:	4618      	mov	r0, r3
 80025a0:	f010 fb30 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025a8:	4618      	mov	r0, r3
 80025aa:	f010 fb2b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025ae:	e042      	b.n	8002636 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d2>
		}else{
			println("Shared memory locked!");
 80025b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80025b4:	4618      	mov	r0, r3
 80025b6:	f010 f8ae 	bl	8012716 <_ZNSaIcEC1Ev>
 80025ba:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80025be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80025c2:	4925      	ldr	r1, [pc, #148]	; (8002658 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 80025c4:	4618      	mov	r0, r3
 80025c6:	f010 fcc7 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80025ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd7e 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80025d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80025d8:	4618      	mov	r0, r3
 80025da:	f010 fb13 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025de:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80025e2:	4618      	mov	r0, r3
 80025e4:	f010 f898 	bl	8012718 <_ZNSaIcED1Ev>
 80025e8:	e025      	b.n	8002636 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d2>
		}

	}else{
		println("Invalid parameter!");
 80025ea:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80025ee:	4618      	mov	r0, r3
 80025f0:	f010 f891 	bl	8012716 <_ZNSaIcEC1Ev>
 80025f4:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 80025f8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80025fc:	4917      	ldr	r1, [pc, #92]	; (800265c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f010 fcaa 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002604:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd61 	bl	80020d0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800260e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002612:	4618      	mov	r0, r3
 8002614:	f010 faf6 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002618:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800261c:	4618      	mov	r0, r3
 800261e:	f010 f87b 	bl	8012718 <_ZNSaIcED1Ev>
		consoleFunca();
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	1d3a      	adds	r2, r7, #4
 800262e:	6810      	ldr	r0, [r2, #0]
 8002630:	4798      	blx	r3
		return false;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d4>
	}

	return true;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	080172cc 	.word	0x080172cc
 8002648:	080172d4 	.word	0x080172d4
 800264c:	080172f0 	.word	0x080172f0
 8002650:	0801731c 	.word	0x0801731c
 8002654:	08017330 	.word	0x08017330
 8002658:	08017334 	.word	0x08017334
 800265c:	0801734c 	.word	0x0801734c

08002660 <_ZN7BattMon12taskFunctionEv>:

bool BattMon::taskFunction()
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	// Read all cells, lock shared memory.
	batt_msg_pntr->locked = true;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266c:	2201      	movs	r2, #1
 800266e:	751a      	strb	r2, [r3, #20]
	batt_msg_pntr->cell1 = readCell1();
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8f1 	bl	800285c <_ZN7BattMon9readCell1Ev>
 800267a:	eef0 7a40 	vmov.f32	s15, s0
 800267e:	edc4 7a00 	vstr	s15, [r4]
	batt_msg_pntr->cell2 = readCell2() - batt_msg_pntr->cell1;
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f924 	bl	80028d0 <_ZN7BattMon9readCell2Ev>
 8002688:	eeb0 7a40 	vmov.f32	s14, s0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269c:	edc3 7a01 	vstr	s15, [r3, #4]
	batt_msg_pntr->cell3 = readCell3() - batt_msg_pntr->cell2 - batt_msg_pntr->cell1;
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f94f 	bl	8002944 <_ZN7BattMon9readCell3Ev>
 80026a6:	eeb0 7a40 	vmov.f32	s14, s0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80026b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c6:	edc3 7a02 	vstr	s15, [r3, #8]
	batt_msg_pntr->pack_volt = readCell4();
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f972 	bl	80029b8 <_ZN7BattMon9readCell4Ev>
 80026d4:	eef0 7a40 	vmov.f32	s15, s0
 80026d8:	edc4 7a04 	vstr	s15, [r4, #16]
	batt_msg_pntr->cell4 = batt_msg_pntr->pack_volt - batt_msg_pntr->cell3 - batt_msg_pntr->cell2 - batt_msg_pntr->cell1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270c:	edc3 7a03 	vstr	s15, [r3, #12]
	batt_msg_pntr->locked = false;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002714:	2200      	movs	r2, #0
 8002716:	751a      	strb	r2, [r3, #20]

	return true;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}

08002722 <_ZN7BattMon10setupCell1Ev>:

void BattMon::setupCell1()
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_4;
 8002738:	2304      	movs	r3, #4
 800273a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002740:	2305      	movs	r3, #5
 8002742:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f107 0208 	add.w	r2, r7, #8
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f005 fe48 	bl	80083e4 <HAL_ADC_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <_ZN7BattMon10setupCell1Ev+0x46>
	{
		Error_Handler();
 8002764:	f004 fdee 	bl	8007344 <Error_Handler>
	}
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZN7BattMon10setupCell2Ev>:

void BattMon::setupCell2()
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_5;
 8002786:	2305      	movs	r3, #5
 8002788:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800278e:	2305      	movs	r3, #5
 8002790:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f107 0208 	add.w	r2, r7, #8
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f005 fe21 	bl	80083e4 <HAL_ADC_ConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <_ZN7BattMon10setupCell2Ev+0x46>
	{
		Error_Handler();
 80027b2:	f004 fdc7 	bl	8007344 <Error_Handler>
	}
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_ZN7BattMon10setupCell3Ev>:

void BattMon::setupCell3()
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 80027d4:	2306      	movs	r3, #6
 80027d6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80027d8:	2301      	movs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80027dc:	2305      	movs	r3, #5
 80027de:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f107 0208 	add.w	r2, r7, #8
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 fdfa 	bl	80083e4 <HAL_ADC_ConfigChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <_ZN7BattMon10setupCell3Ev+0x46>
	{
		Error_Handler();
 8002800:	f004 fda0 	bl	8007344 <Error_Handler>
	}
}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZN7BattMon10setupCell4Ev>:

void BattMon::setupCell4()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_7;
 8002822:	2307      	movs	r3, #7
 8002824:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800282a:	2305      	movs	r3, #5
 800282c:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f107 0208 	add.w	r2, r7, #8
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f005 fdd3 	bl	80083e4 <HAL_ADC_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <_ZN7BattMon10setupCell4Ev+0x46>
	{
		Error_Handler();
 800284e:	f004 fd79 	bl	8007344 <Error_Handler>
	}
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <_ZN7BattMon9readCell1Ev>:

float BattMon::readCell1()
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	setupCell1();
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff5c 	bl	8002722 <_ZN7BattMon10setupCell1Ev>
	HAL_ADC_Start(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4618      	mov	r0, r3
 8002870:	f005 fc1a 	bl	80080a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800287c:	4618      	mov	r0, r3
 800287e:	f005 fd18 	bl	80082b2 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4618      	mov	r0, r3
 8002888:	f005 fce0 	bl	800824c <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL1_R1 + CELL1_R2)) / (CELL1_R2 * 4096.0f);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4618      	mov	r0, r3
 8002892:	f005 fd99 	bl	80083c8 <HAL_ADC_GetValue>
 8002896:	ee07 0a90 	vmov	s15, r0
 800289a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028c4 <_ZN7BattMon9readCell1Ev+0x68>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028c8 <_ZN7BattMon9readCell1Ev+0x6c>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028cc <_ZN7BattMon9readCell1Ev+0x70>
 80028b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028b6:	eef0 7a66 	vmov.f32	s15, s13

}
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40533333 	.word	0x40533333
 80028c8:	43480000 	.word	0x43480000
 80028cc:	48c80000 	.word	0x48c80000

080028d0 <_ZN7BattMon9readCell2Ev>:

float BattMon::readCell2()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	setupCell2();
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff49 	bl	8002770 <_ZN7BattMon10setupCell2Ev>
	HAL_ADC_Start(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4618      	mov	r0, r3
 80028e4:	f005 fbe0 	bl	80080a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 fcde 	bl	80082b2 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4618      	mov	r0, r3
 80028fc:	f005 fca6 	bl	800824c <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL2_R1 + CELL2_R2)) / (CELL2_R2 * 4096.0f);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	4618      	mov	r0, r3
 8002906:	f005 fd5f 	bl	80083c8 <HAL_ADC_GetValue>
 800290a:	ee07 0a90 	vmov	s15, r0
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002938 <_ZN7BattMon9readCell2Ev+0x68>
 8002916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800293c <_ZN7BattMon9readCell2Ev+0x6c>
 800291e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002922:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002940 <_ZN7BattMon9readCell2Ev+0x70>
 8002926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800292a:	eef0 7a66 	vmov.f32	s15, s13
}
 800292e:	eeb0 0a67 	vmov.f32	s0, s15
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40533333 	.word	0x40533333
 800293c:	43c80000 	.word	0x43c80000
 8002940:	48c80000 	.word	0x48c80000

08002944 <_ZN7BattMon9readCell3Ev>:

float BattMon::readCell3()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	setupCell3();
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff36 	bl	80027be <_ZN7BattMon10setupCell3Ev>
	HAL_ADC_Start(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4618      	mov	r0, r3
 8002958:	f005 fba6 	bl	80080a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002964:	4618      	mov	r0, r3
 8002966:	f005 fca4 	bl	80082b2 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4618      	mov	r0, r3
 8002970:	f005 fc6c 	bl	800824c <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL3_R1 + CELL3_R2)) / (CELL3_R2 * 4096.0f);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fd25 	bl	80083c8 <HAL_ADC_GetValue>
 800297e:	ee07 0a90 	vmov	s15, r0
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80029ac <_ZN7BattMon9readCell3Ev+0x68>
 800298a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80029b0 <_ZN7BattMon9readCell3Ev+0x6c>
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029b4 <_ZN7BattMon9readCell3Ev+0x70>
 800299a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800299e:	eef0 7a66 	vmov.f32	s15, s13
}
 80029a2:	eeb0 0a67 	vmov.f32	s0, s15
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40533333 	.word	0x40533333
 80029b0:	44160000 	.word	0x44160000
 80029b4:	48c80000 	.word	0x48c80000

080029b8 <_ZN7BattMon9readCell4Ev>:

float BattMon::readCell4()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	setupCell4();
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff23 	bl	800280c <_ZN7BattMon10setupCell4Ev>
	HAL_ADC_Start(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4618      	mov	r0, r3
 80029cc:	f005 fb6c 	bl	80080a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029d8:	4618      	mov	r0, r3
 80029da:	f005 fc6a 	bl	80082b2 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 fc32 	bl	800824c <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL4_R1 + CELL4_R2)) / (CELL4_R2 * 4096.0f);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4618      	mov	r0, r3
 80029ee:	f005 fceb 	bl	80083c8 <HAL_ADC_GetValue>
 80029f2:	ee07 0a90 	vmov	s15, r0
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002a20 <_ZN7BattMon9readCell4Ev+0x68>
 80029fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a24 <_ZN7BattMon9readCell4Ev+0x6c>
 8002a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002a28 <_ZN7BattMon9readCell4Ev+0x70>
 8002a0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a12:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a16:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40533333 	.word	0x40533333
 8002a24:	44478000 	.word	0x44478000
 8002a28:	48c80000 	.word	0x48c80000

08002a2c <_Z41__static_initialization_and_destruction_0ii>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d126      	bne.n	8002a8a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d121      	bne.n	8002a8a <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00f fe63 	bl	8012716 <_ZNSaIcEC1Ev>
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	461a      	mov	r2, r3
 8002a56:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002a58:	4816      	ldr	r0, [pc, #88]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002a5a:	f010 fa7d 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	4618      	mov	r0, r3
 8002a64:	f00f fe58 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00f fe52 	bl	8012716 <_ZNSaIcEC1Ev>
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	461a      	mov	r2, r3
 8002a78:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002a7a:	4810      	ldr	r0, [pc, #64]	; (8002abc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002a7c:	f010 fa6c 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00f fe47 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d105      	bne.n	8002aa6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002a9c:	f010 f8b2 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002aa2:	f010 f8af 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	0801738c 	.word	0x0801738c
 8002ab4:	200003ac 	.word	0x200003ac
 8002ab8:	08017390 	.word	0x08017390
 8002abc:	200003c4 	.word	0x200003c4

08002ac0 <_GLOBAL__sub_I__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f7ff ffaf 	bl	8002a2c <_Z41__static_initialization_and_destruction_0ii>
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_GLOBAL__sub_D__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7ff ffa7 	bl	8002a2c <_Z41__static_initialization_and_destruction_0ii>
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BlinkLEDTask.hpp"

BlinkTask::BlinkTask(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08d      	sub	sp, #52	; 0x34
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6178      	str	r0, [r7, #20]
 8002ae8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002aec:	edc7 0a03 	vstr	s1, [r7, #12]
 8002af0:	ed87 1a02 	vstr	s2, [r7, #8]
 8002af4:	460b      	mov	r3, r1
 8002af6:	603a      	str	r2, [r7, #0]
 8002af8:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 8002afa:	697c      	ldr	r4, [r7, #20]
 8002afc:	f107 0318 	add.w	r3, r7, #24
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f010 f9f4 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002b08:	f107 0218 	add.w	r2, r7, #24
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	ed97 1a02 	vldr	s2, [r7, #8]
 8002b14:	edd7 0a03 	vldr	s1, [r7, #12]
 8002b18:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f003 f873 	bl	8005c08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002b22:	f107 0318 	add.w	r3, r7, #24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f010 f86c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b2c:	4a03      	ldr	r2, [pc, #12]	; (8002b3c <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
{

}
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	4618      	mov	r0, r3
 8002b36:	3734      	adds	r7, #52	; 0x34
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	0802022c 	.word	0x0802022c

08002b40 <_ZN9BlinkTask12taskFunctionEv>:
{

}

bool BlinkTask::taskFunction()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8002b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4c:	4803      	ldr	r0, [pc, #12]	; (8002b5c <_ZN9BlinkTask12taskFunctionEv+0x1c>)
 8002b4e:	f007 fa6e 	bl	800a02e <HAL_GPIO_TogglePin>
	return true;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40020400 	.word	0x40020400

08002b60 <_Z41__static_initialization_and_destruction_0ii>:
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d126      	bne.n	8002bbe <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d121      	bne.n	8002bbe <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002b7a:	f107 0308 	add.w	r3, r7, #8
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00f fdc9 	bl	8012716 <_ZNSaIcEC1Ev>
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4916      	ldr	r1, [pc, #88]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002b8c:	4816      	ldr	r0, [pc, #88]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b8e:	f010 f9e3 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00f fdbe 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00f fdb8 	bl	8012716 <_ZNSaIcEC1Ev>
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	461a      	mov	r2, r3
 8002bac:	490f      	ldr	r1, [pc, #60]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002bae:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bb0:	f010 f9d2 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00f fdad 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d105      	bne.n	8002bda <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002bce:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bd0:	f010 f818 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002bd6:	f010 f815 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08018518 	.word	0x08018518
 8002be8:	200003dc 	.word	0x200003dc
 8002bec:	0801851c 	.word	0x0801851c
 8002bf0:	200003f4 	.word	0x200003f4

08002bf4 <_GLOBAL__sub_I__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f7ff ffaf 	bl	8002b60 <_Z41__static_initialization_and_destruction_0ii>
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_GLOBAL__sub_D__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff ffa7 	bl	8002b60 <_Z41__static_initialization_and_destruction_0ii>
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 *      Author: heapr0ll
 */

#include "Command.hpp"

command::command(std::string name, bool (*pntra)(), bool(*pntrb)(std::string& s))
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3308      	adds	r3, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f00f ffcb 	bl	8012bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	this->name = name;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3308      	adds	r3, #8
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f00f ffec 	bl	8012c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	runa = pntra;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
	runb = pntrb;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]
}
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <_ZN7commandD1Ev>:
	this->name = name;
	runa = (bool (*)())tsk_pntr_a;
	runb = (bool (*)(std::string&))tsk_pntr_b;
}

command::~command()
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00f ffd2 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
{

}
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <_Z41__static_initialization_and_destruction_0ii>:
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d126      	bne.n	8002cca <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d121      	bne.n	8002cca <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f00f fd43 	bl	8012716 <_ZNSaIcEC1Ev>
 8002c90:	f107 0308 	add.w	r3, r7, #8
 8002c94:	461a      	mov	r2, r3
 8002c96:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002c98:	4816      	ldr	r0, [pc, #88]	; (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002c9a:	f010 f95d 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f00f fd38 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	4618      	mov	r0, r3
 8002cae:	f00f fd32 	bl	8012716 <_ZNSaIcEC1Ev>
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	490f      	ldr	r1, [pc, #60]	; (8002cf8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002cba:	4810      	ldr	r0, [pc, #64]	; (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002cbc:	f010 f94c 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00f fd27 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d105      	bne.n	8002ce6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002cda:	4808      	ldr	r0, [pc, #32]	; (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002cdc:	f00f ff92 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002ce2:	f00f ff8f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08019680 	.word	0x08019680
 8002cf4:	2000040c 	.word	0x2000040c
 8002cf8:	08019684 	.word	0x08019684
 8002cfc:	20000424 	.word	0x20000424

08002d00 <_GLOBAL__sub_I__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff ffaf 	bl	8002c6c <_Z41__static_initialization_and_destruction_0ii>
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_GLOBAL__sub_D__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7ff ffa7 	bl	8002c6c <_Z41__static_initialization_and_destruction_0ii>
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f805 	bl	8002d56 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    }
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fa90 	bl	80002b0 <strlen>
 8002d90:	4603      	mov	r3, r0
      }
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <_ZL9startUARTv>:
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 8002da0:	2201      	movs	r2, #1
 8002da2:	4903      	ldr	r1, [pc, #12]	; (8002db0 <_ZL9startUARTv+0x14>)
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <_ZL9startUARTv+0x18>)
 8002da6:	f00a fe66 	bl	800da76 <HAL_UART_Receive_DMA>
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000599 	.word	0x20000599
 8002db4:	20000958 	.word	0x20000958

08002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f010 f86f 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f00f ff29 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	480a      	ldr	r0, [pc, #40]	; (8002e04 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002dda:	f00a fdba 	bl	800d952 <HAL_UART_Transmit>
 8002dde:	4603      	mov	r3, r0
 8002de0:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8002de2:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002de6:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8002de8:	f107 010c 	add.w	r1, r7, #12
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	2202      	movs	r2, #2
 8002df2:	4804      	ldr	r0, [pc, #16]	; (8002e04 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002df4:	f00a fdad 	bl	800d952 <HAL_UART_Transmit>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	20000958 	.word	0x20000958

08002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Print string without new line.
static void print(std::string s)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f010 f847 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e16:	4604      	mov	r4, r0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f00f ff01 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	4621      	mov	r1, r4
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8002e2a:	f00a fd92 	bl	800d952 <HAL_UART_Transmit>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000958 	.word	0x20000958

08002e40 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string bfrspc(std::string s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
    // Returns the string up to the first space
    unsigned int i = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
    const char* cs = s.c_str();
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f010 f828 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002e54:	60b8      	str	r0, [r7, #8]
    while (cs[i] != ' ' && i < s.length()) {
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d008      	beq.n	8002e74 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f00f fedc 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d201      	bcs.n	8002e74 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    while (cs[i] != ' ' && i < s.length()) {
 8002e80:	e7e9      	b.n	8002e56 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    return s.substr(0,i);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	f010 f89d 	bl	8012fc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
}
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string aftspc(std::string s)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    // Returns the string after the first space
    unsigned int i = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
    const char* cs = s.c_str();
 8002ea6:	6838      	ldr	r0, [r7, #0]
 8002ea8:	f00f fffc 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002eac:	6138      	str	r0, [r7, #16]
    while (cs[i] != ' ' && i < s.length()) {
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d008      	beq.n	8002ecc <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f00f feb0 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d201      	bcs.n	8002ecc <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
    while (cs[i] != ' ' && i < s.length()) {
 8002ed8:	e7e9      	b.n	8002eae <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    if (i >= s.length()) {
 8002eda:	6838      	ldr	r0, [r7, #0]
 8002edc:	f00f fea0 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	bf2c      	ite	cs
 8002ee8:	2301      	movcs	r3, #1
 8002eea:	2300      	movcc	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
        return "";
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f00f fc0d 	bl	8012716 <_ZNSaIcEC1Ev>
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	461a      	mov	r2, r3
 8002f02:	490d      	ldr	r1, [pc, #52]	; (8002f38 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f010 f827 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f00f fc02 	bl	8012718 <_ZNSaIcED1Ev>
 8002f14:	e00c      	b.n	8002f30 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
    }
    else {
        return s.substr(i+1,s.length()-i);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	1c5c      	adds	r4, r3, #1
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	f00f fe80 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002f20:	4602      	mov	r2, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4622      	mov	r2, r4
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	f010 f84c 	bl	8012fc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    }
}
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	371c      	adds	r7, #28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	0801a7e4 	.word	0x0801a7e4

08002f3c <_ZN4Task7getNameB5cxx11Ev>:
	unsigned long getDelay(){ return delay_tk; }
	void setDelay(unsigned long d){ delay_tk = d; }

	unsigned long getPeriod(){ return period_tk; }

	std::string getName() { return name; }
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f00f ffcf 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_ZN7command7getNameB5cxx11Ev>:
	// Command functions to be called.
	bool (*runa)();
	bool (*runb)(std::string& s);

	// Getters
	std::string getName() { return name; }
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f00f ffc0 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_ZL5helpav>:
/*
 * @brief: Help command.
 *  Just a place holder so the help string can be printed as a possible command.
 */
static bool helpa()
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
	return true;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool helpb(std::string& s)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	return true;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_ZN7commandC1ERKS_>:
class command
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f103 0208 	add.w	r2, r3, #8
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f00f ff93 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_ZL5echoav>:
/*
 * @brief: Echo command.
 *  Simply echo's back anything you type in.
 */
static bool echoa()
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00f fb99 	bl	8012716 <_ZNSaIcEC1Ev>
 8002fe4:	f107 021c 	add.w	r2, r7, #28
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	490b      	ldr	r1, [pc, #44]	; (8003018 <_ZL5echoav+0x44>)
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00f ffb3 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fedf 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f00f fe01 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003002:	f107 031c 	add.w	r3, r7, #28
 8003006:	4618      	mov	r0, r3
 8003008:	f00f fb86 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	0801a7e8 	.word	0x0801a7e8

0800301c <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool echob(std::string& s)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	println(s);
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	f00f ff60 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff febf 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f00f fde0 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003044:	2301      	movs	r3, #1
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <_ZL6clearav>:
/*
 * @brief: Clear command.
 *  Clears the terminal window when it gets too messy.
 */
static bool cleara()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 8003056:	f107 031c 	add.w	r3, r7, #28
 800305a:	4618      	mov	r0, r3
 800305c:	f00f fb5b 	bl	8012716 <_ZNSaIcEC1Ev>
 8003060:	f107 021c 	add.w	r2, r7, #28
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	490b      	ldr	r1, [pc, #44]	; (8003094 <_ZL6clearav+0x44>)
 8003068:	4618      	mov	r0, r3
 800306a:	f00f ff75 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fec9 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	4618      	mov	r0, r3
 800307a:	f00f fdc3 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	4618      	mov	r0, r3
 8003084:	f00f fb48 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8003088:	2301      	movs	r3, #1
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	0801a810 	.word	0x0801a810

08003098 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool clearb(std::string& s)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 80030a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a4:	4618      	mov	r0, r3
 80030a6:	f00f fb36 	bl	8012716 <_ZNSaIcEC1Ev>
 80030aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	490c      	ldr	r1, [pc, #48]	; (80030e4 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00f ff4f 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fea2 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4618      	mov	r0, r3
 80030ca:	f00f fd9b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4618      	mov	r0, r3
 80030d4:	f00f fb20 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	0801a810 	.word	0x0801a810

080030e8 <_ZL7bannerav>:
/*
 * @brief: Banner command.
 *  Prints the banner to the screen.
 */
static bool bannera()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
	println(wlcm);
 80030ee:	463b      	mov	r3, r7
 80030f0:	4908      	ldr	r1, [pc, #32]	; (8003114 <_ZL7bannerav+0x2c>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f00f fefc 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80030f8:	463b      	mov	r3, r7
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe5c 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003100:	463b      	mov	r3, r7
 8003102:	4618      	mov	r0, r3
 8003104:	f00f fd7e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000454 	.word	0x20000454

08003118 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool bannerb(std::string& s)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	println(wlcm);
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	4909      	ldr	r1, [pc, #36]	; (800314c <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8003126:	4618      	mov	r0, r3
 8003128:	f00f fee2 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fe41 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	4618      	mov	r0, r3
 800313c:	f00f fd62 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003140:	2301      	movs	r3, #1
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000454 	.word	0x20000454

08003150 <_ZN7Console11printBannerEv>:

	bool isCommand(std::string &cmd);
	bool isTask(std::string &cmd);

	bool exec(std::string &cmd);
	void printBanner() { println(wlcm); }
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	f107 0308 	add.w	r3, r7, #8
 800315c:	4908      	ldr	r1, [pc, #32]	; (8003180 <_ZN7Console11printBannerEv+0x30>)
 800315e:	4618      	mov	r0, r3
 8003160:	f00f fec6 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003164:	f107 0308 	add.w	r3, r7, #8
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe25 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800316e:	f107 0308 	add.w	r3, r7, #8
 8003172:	4618      	mov	r0, r3
 8003174:	f00f fd46 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000454 	.word	0x20000454

08003184 <_ZN7Console11printCursorEv>:
	void printCursor() { print(cursor); }
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	f107 0308 	add.w	r3, r7, #8
 8003190:	4908      	ldr	r1, [pc, #32]	; (80031b4 <_ZN7Console11printCursorEv+0x30>)
 8003192:	4618      	mov	r0, r3
 8003194:	f00f feac 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fe33 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	4618      	mov	r0, r3
 80031a8:	f00f fd2c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80031ac:	bf00      	nop
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2000043c 	.word	0x2000043c

080031b8 <HAL_UART_RxCpltCallback>:
// Our singleton instance of the console!
Console cs;

// Callback that handles UART events.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80031c2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b0d      	cmp	r3, #13
 80031ca:	d005      	beq.n	80031d8 <HAL_UART_RxCpltCallback+0x20>
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80031ce:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b0a      	cmp	r3, #10
 80031d6:	d101      	bne.n	80031dc <HAL_UART_RxCpltCallback+0x24>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_UART_RxCpltCallback+0x26>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_UART_RxCpltCallback+0x40>
	{
		uint8_t tmp[2] = {'\r', '\n'};
 80031e2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80031e6:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, tmp, 2, 100);
 80031e8:	f107 010c 	add.w	r1, r7, #12
 80031ec:	2364      	movs	r3, #100	; 0x64
 80031ee:	2202      	movs	r2, #2
 80031f0:	4848      	ldr	r0, [pc, #288]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 80031f2:	f00a fbae 	bl	800d952 <HAL_UART_Transmit>
 80031f6:	e02f      	b.n	8003258 <HAL_UART_RxCpltCallback+0xa0>
	} else if (consoleInput.raw_byte == 0x08)												// Handle the case of a backspace being typed.
 80031f8:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80031fa:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b08      	cmp	r3, #8
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01e      	beq.n	800324c <HAL_UART_RxCpltCallback+0x94>
	{
		// Move the cursor back, print a space, then move the cursor back again.
		if (consoleInput.numReadBytes > 0)
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 8003210:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01f      	beq.n	8003258 <HAL_UART_RxCpltCallback+0xa0>
		{
			uint8_t tmp2 = 0x08;	// backspace
 8003218:	2308      	movs	r3, #8
 800321a:	72fb      	strb	r3, [r7, #11]
			uint8_t tmp1 = ' ';		// space
 800321c:	2320      	movs	r3, #32
 800321e:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 8003220:	f107 010b 	add.w	r1, r7, #11
 8003224:	2364      	movs	r3, #100	; 0x64
 8003226:	2201      	movs	r2, #1
 8003228:	483a      	ldr	r0, [pc, #232]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 800322a:	f00a fb92 	bl	800d952 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp1, 1, 100);
 800322e:	f107 010a 	add.w	r1, r7, #10
 8003232:	2364      	movs	r3, #100	; 0x64
 8003234:	2201      	movs	r2, #1
 8003236:	4837      	ldr	r0, [pc, #220]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 8003238:	f00a fb8b 	bl	800d952 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 800323c:	f107 010b 	add.w	r1, r7, #11
 8003240:	2364      	movs	r3, #100	; 0x64
 8003242:	2201      	movs	r2, #1
 8003244:	4833      	ldr	r0, [pc, #204]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 8003246:	f00a fb84 	bl	800d952 <HAL_UART_Transmit>
 800324a:	e005      	b.n	8003258 <HAL_UART_RxCpltCallback+0xa0>
		}

	}else{																			// Echo back out whatever the user types!

		HAL_UART_Transmit(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1, 100);
 800324c:	2364      	movs	r3, #100	; 0x64
 800324e:	2201      	movs	r2, #1
 8003250:	4931      	ldr	r1, [pc, #196]	; (8003318 <HAL_UART_RxCpltCallback+0x160>)
 8003252:	4830      	ldr	r0, [pc, #192]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 8003254:	f00a fb7d 	bl	800d952 <HAL_UART_Transmit>
	}

	// Copy data into raw_input until a new line character is received, or the buffer overflows.
	// It is up to the consumer of this buffer to mark the struct as NOT ready again after they have copied the buffer data.
	if ( (consoleInput.ready == false) && (consoleInput.numReadBytes < 300) )		// Leaving space for one last 0 byte so this can be interpreted as a string!
 8003258:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 800325a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800325e:	2b00      	cmp	r3, #0
 8003260:	d14d      	bne.n	80032fe <HAL_UART_RxCpltCallback+0x146>
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 8003264:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003268:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800326c:	d247      	bcs.n	80032fe <HAL_UART_RxCpltCallback+0x146>
	{
		// Got a new line character, this is the end of a valid command.
		// Mark buffer as ready.
		if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 8003270:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b0d      	cmp	r3, #13
 8003278:	d005      	beq.n	8003286 <HAL_UART_RxCpltCallback+0xce>
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 800327c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b0a      	cmp	r3, #10
 8003284:	d101      	bne.n	800328a <HAL_UART_RxCpltCallback+0xd2>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_UART_RxCpltCallback+0xd4>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <HAL_UART_RxCpltCallback+0xe2>
		{
			consoleInput.ready = true;
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8003298:	e031      	b.n	80032fe <HAL_UART_RxCpltCallback+0x146>

		} else if (consoleInput.raw_byte == 0x08)						// Handling backspaces!
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 800329c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d014      	beq.n	80032da <HAL_UART_RxCpltCallback+0x122>
		{
			// Decrease the count of written bytes, and write a null byte in that position.
			if (consoleInput.numReadBytes > 0)
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032b2:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d021      	beq.n	80032fe <HAL_UART_RxCpltCallback+0x146>
			{
				consoleInput.numReadBytes -= 1;
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032bc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032c6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
				consoleInput.raw_input[consoleInput.numReadBytes] = 0;
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032cc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]
 80032d8:	e011      	b.n	80032fe <HAL_UART_RxCpltCallback+0x146>
			}

		}else{
			consoleInput.raw_input[consoleInput.numReadBytes] = consoleInput.raw_byte;
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032dc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032e4:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80032e8:	b2d9      	uxtb	r1, r3
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032ec:	5499      	strb	r1, [r3, r2]
			consoleInput.numReadBytes++;
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032f0:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80032f4:	3301      	adds	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_UART_RxCpltCallback+0x158>)
 80032fa:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		}
	}

	// Set off another DMA transaction.
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 80032fe:	2201      	movs	r2, #1
 8003300:	4905      	ldr	r1, [pc, #20]	; (8003318 <HAL_UART_RxCpltCallback+0x160>)
 8003302:	4804      	ldr	r0, [pc, #16]	; (8003314 <HAL_UART_RxCpltCallback+0x15c>)
 8003304:	f00a fbb7 	bl	800da76 <HAL_UART_Receive_DMA>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	2000046c 	.word	0x2000046c
 8003314:	20000958 	.word	0x20000958
 8003318:	20000599 	.word	0x20000599

0800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fd04 	bl	8003d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fce2 	bl	8003d08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ffeb 	bl	8003334 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fce9 	bl	8003d4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fd07 	bl	8003d9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>:
      _Rb_tree() = default;
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fce5 	bl	8003d74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>:
      map() = default;
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffeb 	bl	800339a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>:
      ~map() = default;
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fcec 	bl	8003db6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN7ConsoleC1Ev>:

Console::Console()
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ffab 	bl	800334e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3318      	adds	r3, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ffd9 	bl	80033b4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>
{
	loadCmnds();
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9f8 	bl	80037f8 <_ZN7Console9loadCmndsEv>
}
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <_ZN7ConsoleD1Ev>:

Console::~Console()
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3318      	adds	r3, #24
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ffd5 	bl	80033ce <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff9e 	bl	8003368 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
{

}
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isCommand(std::string &cmd)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
	if(cmnds.count(cmd) < 1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6839      	ldr	r1, [r7, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fccb 	bl	8003de0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		return false;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	}else{
		return true;
 800345e:	2301      	movs	r3, #1
	}
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isTask(std::string &cmd)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
	if(task_cmnds.count(cmd) < 1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3318      	adds	r3, #24
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fcd5 	bl	8003e28 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	{
		return false;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	}else{
		return true;
 8003492:	2301      	movs	r3, #1
	}
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_ZN7Console4loopEv>:

void Console::loop()
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0a4      	sub	sp, #144	; 0x90
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	if (isNewCommandReady())
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fa41 	bl	800392c <_ZN7Console17isNewCommandReadyEv>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a5 	beq.w	80035fc <_ZN7Console4loopEv+0x160>
	{
		std::string new_cmd(consoleInput.raw_input);
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00f f92d 	bl	8012716 <_ZNSaIcEC1Ev>
 80034bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	494f      	ldr	r1, [pc, #316]	; (8003604 <_ZN7Console4loopEv+0x168>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00f fd46 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00f f921 	bl	8012718 <_ZNSaIcED1Ev>
		memset(consoleInput.raw_input, 0, sizeof(consoleInput.raw_input));		// Wipe the raw buffer, get it ready to read new data.
 80034d6:	f240 122d 	movw	r2, #301	; 0x12d
 80034da:	2100      	movs	r1, #0
 80034dc:	4849      	ldr	r0, [pc, #292]	; (8003604 <_ZN7Console4loopEv+0x168>)
 80034de:	f00f fe07 	bl	80130f0 <memset>
		consoleInput.numReadBytes = 0;
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <_ZN7Console4loopEv+0x168>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		consoleInput.ready = false;											// Green light for interrupt to start dumping data into raw_input buffer!
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <_ZN7Console4loopEv+0x168>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		if (new_cmd.length() > 0)
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4618      	mov	r0, r3
 80034f8:	f00f fb92 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d06f      	beq.n	80035ec <_ZN7Console4loopEv+0x150>
		{

			// The help command must be implemented here as I can't access console map from inside sys_cmnds.hpp
			if (new_cmd == "help")
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	493d      	ldr	r1, [pc, #244]	; (8003608 <_ZN7Console4loopEv+0x16c>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fc32 	bl	8001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <_ZN7Console4loopEv+0x8a>
			{
				// Show all possible system commands
				printAllCommands();
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa14 	bl	800394c <_ZN7Console16printAllCommandsEv>
 8003524:	e062      	b.n	80035ec <_ZN7Console4loopEv+0x150>
			}else if (!exec(new_cmd))
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f883 	bl	8003638 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003532:	4603      	mov	r3, r0
 8003534:	f083 0301 	eor.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d056      	beq.n	80035ec <_ZN7Console4loopEv+0x150>
			{
				print("\'" + new_cmd + "\'");
 800353e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003542:	f107 020c 	add.w	r2, r7, #12
 8003546:	4931      	ldr	r1, [pc, #196]	; (800360c <_ZN7Console4loopEv+0x170>)
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fc91 	bl	8003e70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800354e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003552:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003556:	4a2d      	ldr	r2, [pc, #180]	; (800360c <_ZN7Console4loopEv+0x170>)
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fc3a 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800355e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fc50 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800356c:	4618      	mov	r0, r3
 800356e:	f00f fb49 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003576:	4618      	mov	r0, r3
 8003578:	f00f fb44 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				println(" is an unrecognized command!");
 800357c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003580:	4618      	mov	r0, r3
 8003582:	f00f f8c8 	bl	8012716 <_ZNSaIcEC1Ev>
 8003586:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800358a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800358e:	4920      	ldr	r1, [pc, #128]	; (8003610 <_ZN7Console4loopEv+0x174>)
 8003590:	4618      	mov	r0, r3
 8003592:	f00f fce1 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fc0c 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035a4:	4618      	mov	r0, r3
 80035a6:	f00f fb2d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035ae:	4618      	mov	r0, r3
 80035b0:	f00f f8b2 	bl	8012718 <_ZNSaIcED1Ev>
				println("Use 'help' to show all valid terminal commands.");
 80035b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00f f8ac 	bl	8012716 <_ZNSaIcEC1Ev>
 80035be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80035c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035c6:	4913      	ldr	r1, [pc, #76]	; (8003614 <_ZN7Console4loopEv+0x178>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f00f fcc5 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80035ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fbf0 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035dc:	4618      	mov	r0, r3
 80035de:	f00f fb11 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035e6:	4618      	mov	r0, r3
 80035e8:	f00f f896 	bl	8012718 <_ZNSaIcED1Ev>
			}

		}

		printCursor();
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fdc9 	bl	8003184 <_ZN7Console11printCursorEv>
		std::string new_cmd(consoleInput.raw_input);
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	4618      	mov	r0, r3
 80035f8:	f00f fb04 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80035fc:	bf00      	nop
 80035fe:	3790      	adds	r7, #144	; 0x90
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	2000046c 	.word	0x2000046c
 8003608:	0801a818 	.word	0x0801a818
 800360c:	0801a820 	.word	0x0801a820
 8003610:	0801a824 	.word	0x0801a824
 8003614:	0801a844 	.word	0x0801a844

08003618 <_ZN7Console5startEv>:

void Console::start()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	startUART();
 8003620:	f7ff fbbc 	bl	8002d9c <_ZL9startUARTv>
	printBanner();
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fd93 	bl	8003150 <_ZN7Console11printBannerEv>
	printCursor();
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fdaa 	bl	8003184 <_ZN7Console11printCursorEv>
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::exec(std::string &cmd)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b09f      	sub	sp, #124	; 0x7c
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	std::string command = bfrspc(cmd); 		// Separate string at space
 8003642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f00f fc51 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800364e:	f107 0320 	add.w	r3, r7, #32
 8003652:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fbf1 	bl	8002e40 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800365e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003662:	4618      	mov	r0, r3
 8003664:	f00f face 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	if (isCommand(command) || isTask(command)) { 				// Check if input is even a command
 8003668:	f107 0320 	add.w	r3, r7, #32
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fee1 	bl	8003436 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
 800367a:	f107 0320 	add.w	r3, r7, #32
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fef1 	bl	8003468 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8093 	beq.w	80037be <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x186>

		std::string args = aftspc(cmd); 	// Separate arguments from command
 8003698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f00f fc26 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fbf2 	bl	8002e98 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00f faa3 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		if (isCommand(command))				// Its a system command.
 80036be:	f107 0320 	add.w	r3, r7, #32
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff feb6 	bl	8003436 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d033      	beq.n	8003738 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>
		{
			if (args.length() > 0) {
 80036d0:	f107 0308 	add.w	r3, r7, #8
 80036d4:	4618      	mov	r0, r3
 80036d6:	f00f faa3 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
				cmnds.find(command)->second.runb(args);	// Execute command with arguments.
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f107 0220 	add.w	r2, r7, #32
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fbe1 	bl	8003eba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 80036f8:	4603      	mov	r3, r0
 80036fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fbe9 	bl	8003ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003706:	4603      	mov	r3, r0
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f107 0208 	add.w	r2, r7, #8
 800370e:	4610      	mov	r0, r2
 8003710:	4798      	blx	r3
 8003712:	e04d      	b.n	80037b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				cmnds.find(command)->second.runa();		// Execute command without arguments.
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f107 0220 	add.w	r2, r7, #32
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fbcc 	bl	8003eba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8003722:	4603      	mov	r3, r0
 8003724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fbd4 	bl	8003ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003730:	4603      	mov	r3, r0
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4798      	blx	r3
 8003736:	e03b      	b.n	80037b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			}
		}else{

			// Its a task!
			if (args.length() > 0) {
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	4618      	mov	r0, r3
 800373e:	f00f fa6f 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
				task_cmnds.find(command)->second->consoleFuncb(args);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3318      	adds	r3, #24
 8003756:	f107 0220 	add.w	r2, r7, #32
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fbc9 	bl	8003ef4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003762:	4603      	mov	r3, r0
 8003764:	673b      	str	r3, [r7, #112]	; 0x70
 8003766:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fbd1 	bl	8003f12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003770:	4603      	mov	r3, r0
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	3208      	adds	r2, #8
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	f107 0108 	add.w	r1, r7, #8
 800377e:	4618      	mov	r0, r3
 8003780:	4790      	blx	r2
 8003782:	e015      	b.n	80037b0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				task_cmnds.find(command)->second->consoleFunca();
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3318      	adds	r3, #24
 8003788:	f107 0220 	add.w	r2, r7, #32
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fbb0 	bl	8003ef4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003794:	4603      	mov	r3, r0
 8003796:	677b      	str	r3, [r7, #116]	; 0x74
 8003798:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fbb8 	bl	8003f12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 80037a2:	4603      	mov	r3, r0
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	3204      	adds	r2, #4
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	4790      	blx	r2
			}

		}

		return true;
 80037b0:	2401      	movs	r4, #1
		std::string args = aftspc(cmd); 	// Separate arguments from command
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00f fa24 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037bc:	e000      	b.n	80037c0 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x188>

	} else {
		return false;
 80037be:	2400      	movs	r4, #0
	std::string command = bfrspc(cmd); 		// Separate string at space
 80037c0:	f107 0320 	add.w	r3, r7, #32
 80037c4:	4618      	mov	r0, r3
 80037c6:	f00f fa1d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037ca:	4623      	mov	r3, r4
	}
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	377c      	adds	r7, #124	; 0x7c
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3318      	adds	r3, #24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fa34 	bl	8002c4e <_ZN7commandD1Ev>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f00f fa0b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_ZN7Console9loadCmndsEv>:

void Console::loadCmnds()
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b0db      	sub	sp, #364	; 0x16c
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	6018      	str	r0, [r3, #0]
	// Loading all commands, must be done manually for now.
	cmnds.insert( {echo.getName(),  echo} );
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	681c      	ldr	r4, [r3, #0]
 8003806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800380a:	4944      	ldr	r1, [pc, #272]	; (800391c <_ZN7Console9loadCmndsEv+0x124>)
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fba4 	bl	8002f5a <_ZN7command7getNameB5cxx11Ev>
 8003812:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4a40      	ldr	r2, [pc, #256]	; (800391c <_ZN7Console9loadCmndsEv+0x124>)
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb86 	bl	8003f2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	f107 0210 	add.w	r2, r7, #16
 800382a:	4621      	mov	r1, r4
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fb9d 	bl	8003f6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff ffcc 	bl	80037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 800383c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003840:	4618      	mov	r0, r3
 8003842:	f00f f9df 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {clear.getName(), clear} );
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800384e:	4934      	ldr	r1, [pc, #208]	; (8003920 <_ZN7Console9loadCmndsEv+0x128>)
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fb82 	bl	8002f5a <_ZN7command7getNameB5cxx11Ev>
 8003856:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800385a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800385e:	4a30      	ldr	r2, [pc, #192]	; (8003920 <_ZN7Console9loadCmndsEv+0x128>)
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb64 	bl	8003f2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003866:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800386a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800386e:	4621      	mov	r1, r4
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fb7b 	bl	8003f6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003876:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffaa 	bl	80037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003880:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003884:	4618      	mov	r0, r3
 8003886:	f00f f9bd 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {banner.getName(), banner} );
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681c      	ldr	r4, [r3, #0]
 800388e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003892:	4924      	ldr	r1, [pc, #144]	; (8003924 <_ZN7Console9loadCmndsEv+0x12c>)
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fb60 	bl	8002f5a <_ZN7command7getNameB5cxx11Ev>
 800389a:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 800389e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038a2:	4a20      	ldr	r2, [pc, #128]	; (8003924 <_ZN7Console9loadCmndsEv+0x12c>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fb42 	bl	8003f2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 80038aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80038ae:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80038b2:	4621      	mov	r1, r4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fb59 	bl	8003f6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 80038ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff88 	bl	80037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 80038c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038c8:	4618      	mov	r0, r3
 80038ca:	f00f f99b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {help.getName(), help} );
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80038d6:	4914      	ldr	r1, [pc, #80]	; (8003928 <_ZN7Console9loadCmndsEv+0x130>)
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fb3e 	bl	8002f5a <_ZN7command7getNameB5cxx11Ev>
 80038de:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80038e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80038e6:	4a10      	ldr	r2, [pc, #64]	; (8003928 <_ZN7Console9loadCmndsEv+0x130>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fb20 	bl	8003f2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 80038ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80038f6:	4621      	mov	r1, r4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fb37 	bl	8003f6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 80038fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff66 	bl	80037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003908:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800390c:	4618      	mov	r0, r3
 800390e:	f00f f979 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003912:	bf00      	nop
 8003914:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}
 800391c:	200005c0 	.word	0x200005c0
 8003920:	200005e0 	.word	0x200005e0
 8003924:	20000600 	.word	0x20000600
 8003928:	200005a0 	.word	0x200005a0

0800392c <_ZN7Console17isNewCommandReadyEv>:

bool Console::isNewCommandReady()
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	return consoleInput.ready;
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <_ZN7Console17isNewCommandReadyEv+0x1c>)
 8003936:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000046c 	.word	0x2000046c

0800394c <_ZN7Console16printAllCommandsEv>:

void Console::printAllCommands()
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b0c5      	sub	sp, #276	; 0x114
 8003950:	af00      	add	r7, sp, #0
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	6018      	str	r0, [r3, #0]
	println("System Commands:\tSystem Tasks:");
 8003956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800395a:	4618      	mov	r0, r3
 800395c:	f00e fedb 	bl	8012716 <_ZNSaIcEC1Ev>
 8003960:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003964:	f107 0318 	add.w	r3, r7, #24
 8003968:	49c6      	ldr	r1, [pc, #792]	; (8003c84 <_ZN7Console16printAllCommandsEv+0x338>)
 800396a:	4618      	mov	r0, r3
 800396c:	f00f faf4 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fa1f 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	4618      	mov	r0, r3
 8003980:	f00f f940 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003988:	4618      	mov	r0, r3
 800398a:	f00e fec5 	bl	8012718 <_ZNSaIcED1Ev>

	unsigned int small_cnt = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	if (cmnds.size() >= task_cmnds.size())
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fafb 	bl	8003f94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 800399e:	4604      	mov	r4, r0
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3318      	adds	r3, #24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb01 	bl	8003fae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 80039ac:	4603      	mov	r3, r0
 80039ae:	429c      	cmp	r4, r3
 80039b0:	bf2c      	ite	cs
 80039b2:	2301      	movcs	r3, #1
 80039b4:	2300      	movcc	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80ad 	beq.w	8003b18 <_ZN7Console16printAllCommandsEv+0x1cc>
	{
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fb00 	bl	8003fc8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fb06 	bl	8003fe2 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>
 80039d6:	4603      	mov	r3, r0
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
 80039da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fb09 	bl	8003ffc <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8144 	beq.w	8003c7a <_ZN7Console16printAllCommandsEv+0x32e>
		{
			print(it->first);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb29 	bl	800404e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00f fa72 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f9f9 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00f f8f2 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			print("\t\t\t");
 8003a20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a24:	4618      	mov	r0, r3
 8003a26:	f00e fe76 	bl	8012716 <_ZNSaIcEC1Ev>
 8003a2a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a32:	4995      	ldr	r1, [pc, #596]	; (8003c88 <_ZN7Console16printAllCommandsEv+0x33c>)
 8003a34:	4618      	mov	r0, r3
 8003a36:	f00f fa8f 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f9e2 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f00f f8db 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a52:	4618      	mov	r0, r3
 8003a54:	f00e fe60 	bl	8012718 <_ZNSaIcED1Ev>

			if (small_cnt < task_cmnds.size())
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 faa5 	bl	8003fae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf34      	ite	cc
 8003a6e:	2301      	movcc	r3, #1
 8003a70:	2300      	movcs	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d027      	beq.n	8003ac8 <_ZN7Console16printAllCommandsEv+0x17c>
			{
				auto tsk_it = task_cmnds.cbegin();
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 faf3 	bl	800406a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f107 0310 	add.w	r3, r7, #16
 8003a8a:	601a      	str	r2, [r3, #0]
				std::advance(tsk_it, small_cnt);
 8003a8c:	f107 0310 	add.w	r3, r7, #16
 8003a90:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 faf5 	bl	8004084 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>
				print(tsk_it->first);
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fb03 	bl	80040aa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00f fa1e 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff f9a5 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003abe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f00f f89e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

			println("");
 8003ac8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003acc:	4618      	mov	r0, r3
 8003ace:	f00e fe22 	bl	8012716 <_ZNSaIcEC1Ev>
 8003ad2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8003ad6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ada:	496c      	ldr	r1, [pc, #432]	; (8003c8c <_ZN7Console16printAllCommandsEv+0x340>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00f fa3b 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ae2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f966 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003aec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003af0:	4618      	mov	r0, r3
 8003af2:	f00f f887 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003af6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003afa:	4618      	mov	r0, r3
 8003afc:	f00e fe0c 	bl	8012718 <_ZNSaIcED1Ev>
			small_cnt++;
 8003b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b04:	3301      	adds	r3, #1
 8003b06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa87 	bl	8004024 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>
 8003b16:	e759      	b.n	80039cc <_ZN7Console16printAllCommandsEv+0x80>
		}
	}else{							// Task list is bigger than command list.

		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3318      	adds	r3, #24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 faa3 	bl	800406a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3318      	adds	r3, #24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fac7 	bl	80040c6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b3e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fac9 	bl	80040e0 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8092 	beq.w	8003c7a <_ZN7Console16printAllCommandsEv+0x32e>
		{
			if (small_cnt < cmnds.size())
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa1a 	bl	8003f94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bf34      	ite	cc
 8003b6a:	2301      	movcc	r3, #1
 8003b6c:	2300      	movcs	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d043      	beq.n	8003bfc <_ZN7Console16printAllCommandsEv+0x2b0>
			{
				auto cmnd_it = cmnds.cbegin();
 8003b74:	1d3b      	adds	r3, r7, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa25 	bl	8003fc8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	601a      	str	r2, [r3, #0]
				std::advance(cmnd_it, small_cnt);
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 facf 	bl	8004132 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>
				print(cmnd_it->first);
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa58 	bl	800404e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f00f f9a1 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003bae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff f928 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003bb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f00f f821 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				print("\t\t\t");
 8003bc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f00e fda5 	bl	8012716 <_ZNSaIcEC1Ev>
 8003bcc:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003bd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003bd4:	492c      	ldr	r1, [pc, #176]	; (8003c88 <_ZN7Console16printAllCommandsEv+0x33c>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f00f f9be 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003bdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f911 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003be6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003bea:	4618      	mov	r0, r3
 8003bec:	f00f f80a 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bf0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00e fd8f 	bl	8012718 <_ZNSaIcED1Ev>
 8003bfa:	e01b      	b.n	8003c34 <_ZN7Console16printAllCommandsEv+0x2e8>
			}else{
				print("\t\t\t\t");
 8003bfc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f00e fd88 	bl	8012716 <_ZNSaIcEC1Ev>
 8003c06:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003c0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c0e:	4920      	ldr	r1, [pc, #128]	; (8003c90 <_ZN7Console16printAllCommandsEv+0x344>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f00f f9a1 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f8f4 	bl	8002e08 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c20:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c24:	4618      	mov	r0, r3
 8003c26:	f00e ffed 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f00e fd72 	bl	8012718 <_ZNSaIcED1Ev>
			}

			println(it->first);
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa36 	bl	80040aa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f00f f951 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003c4e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f8b0 	bl	8002db8 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f00e ffd1 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			small_cnt++;
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c66:	3301      	adds	r3, #1
 8003c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa48 	bl	8004108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>
 8003c78:	e758      	b.n	8003b2c <_ZN7Console16printAllCommandsEv+0x1e0>
		}

	}
}
 8003c7a:	bf00      	nop
 8003c7c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}
 8003c84:	0801a874 	.word	0x0801a874
 8003c88:	0801a894 	.word	0x0801a894
 8003c8c:	0801a7e4 	.word	0x0801a7e4
 8003c90:	0801a898 	.word	0x0801a898

08003c94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f00e ffb0 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_ZN7Console16addCommandByTaskEP4Task>:
{
	cmnds.insert( {name, command(name, pntra, pntrb)} );
}

void Console::addCommandByTask(Task* tsk)
{
 8003cae:	b590      	push	{r4, r7, lr}
 8003cb0:	b093      	sub	sp, #76	; 0x4c
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
	// Call the addCommand function.
	task_cmnds.insert( {tsk->getName(), tsk} );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f103 0418 	add.w	r4, r3, #24
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f938 	bl	8002f3c <_ZN4Task7getNameB5cxx11Ev>
 8003ccc:	463a      	mov	r2, r7
 8003cce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003cd2:	f107 0314 	add.w	r3, r7, #20
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fa3e 	bl	8004158 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	f107 0214 	add.w	r2, r7, #20
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fa51 	bl	800418e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ffcf 	bl	8003c94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 8003cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00e ff82 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003d00:	bf00      	nop
 8003d02:	374c      	adds	r7, #76	; 0x4c
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}

08003d08 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa50 	bl	80041b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fa58 	bl	80041ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f808 	bl	8002d38 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa52 	bl	80041e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa70 	bl	8004238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa4c 	bl	80041fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fad9 	bl	800331c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa67 	bl	8004250 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fa22 	bl	80041ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe ffd2 	bl	8002d38 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa5e 	bl	8004268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa7c 	bl	80042bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fa58 	bl	800427e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fad6 	bl	8003382 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fa70 	bl	80042d4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8003df4:	4603      	mov	r3, r0
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 faa6 	bl	800434c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8003e00:	4603      	mov	r3, r0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	f107 020c 	add.w	r2, r7, #12
 8003e08:	f107 0308 	add.w	r3, r7, #8
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 faad 	bl	800436e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x3e>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x40>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>:
      count(const key_type& __x) const
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 faad 	bl	8004396 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fae3 	bl	800440e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	f107 020c 	add.w	r2, r7, #12
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 faea 	bl	8004430 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x3e>
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x40>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f7fe ff80 	bl	8002d82 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003e82:	6178      	str	r0, [r7, #20]
      __string_type __str;
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f00e fe9c 	bl	8012bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f00e fec6 	bl	8012c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4413      	add	r3, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f00e fecb 	bl	8012c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f00e ffd4 	bl	8012e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f00e ffc6 	bl	8012e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8003eb0:	bf00      	nop
    }
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x)
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fac5 	bl	8004458 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 faf3 	bl	80044d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>:
      find(const key_type& __x)
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 faf2 	bl	80044ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb20 	bl	8004564 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8003f2e:	b590      	push	{r4, r7, lr}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003f3a:	68fc      	ldr	r4, [r7, #12]
 8003f3c:	68b8      	ldr	r0, [r7, #8]
 8003f3e:	f000 fb1f 	bl	8004580 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4619      	mov	r1, r3
 8003f46:	4620      	mov	r0, r4
 8003f48:	f00e fe42 	bl	8012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f103 0418 	add.w	r4, r3, #24
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb1f 	bl	8004596 <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff f81e 	bl	8002f9e <_ZN7commandC1ERKS_>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}

08003f6c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>:
      insert(value_type&& __x)
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 8003f78:	68bc      	ldr	r4, [r7, #8]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fb16 	bl	80045ac <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4621      	mov	r1, r4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fb1b 	bl	80045c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}

08003f94 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fb5e 	bl	8004660 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fb5d 	bl	8004678 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>:
      cbegin() const noexcept
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb5c 	bl	8004690 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>:
      cend() const noexcept
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f9ad 	bl	800434c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f00e fbaf 	bl	801279c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
	return __tmp;
 8004044:	68fb      	ldr	r3, [r7, #12]
      }
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb29 	bl	80046b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8004060:	4603      	mov	r3, r0
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>:
      cbegin() const noexcept
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fb2a 	bl	80046ce <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 800407a:	4603      	mov	r3, r0
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fb2c 	bl	80046f0 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>
 8004098:	4622      	mov	r2, r4
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fb31 	bl	8004704 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd90      	pop	{r4, r7, pc}

080040aa <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fb4d 	bl	8004756 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 80040bc:	4603      	mov	r3, r0
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>:
      cend() const noexcept
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f99c 	bl	800440e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f00e fb3d 	bl	801279c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	return __tmp;
 8004128:	68fb      	ldr	r3, [r7, #12]
      }
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fb16 	bl	8004772 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>
 8004146:	4622      	mov	r2, r4
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fb1b 	bl	8004786 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}

08004158 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004164:	68fc      	ldr	r4, [r7, #12]
 8004166:	68b8      	ldr	r0, [r7, #8]
 8004168:	f000 fa0a 	bl	8004580 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800416c:	4603      	mov	r3, r0
 800416e:	4619      	mov	r1, r3
 8004170:	4620      	mov	r0, r4
 8004172:	f00e fd2d 	bl	8012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fb2e 	bl	80047d8 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>
 800417c:	4603      	mov	r3, r0
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}

0800418e <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>:
      insert(value_type&& __x)
 800418e:	b590      	push	{r4, r7, lr}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 800419a:	68bc      	ldr	r4, [r7, #8]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb26 	bl	80047ee <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4621      	mov	r1, r4
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fb2b 	bl	8004804 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd90      	pop	{r4, r7, pc}

080041b6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb6f 	bl	80048a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
      { }
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800420a:	6838      	ldr	r0, [r7, #0]
 800420c:	f000 fb54 	bl	80048b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004210:	4603      	mov	r3, r0
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fff0 	bl	80041fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 800421a:	6838      	ldr	r0, [r7, #0]
 800421c:	f000 fb58 	bl	80048d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004220:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fb5f 	bl	80048e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800422e:	e7e9      	b.n	8004204 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
	}
    }
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fb56 	bl	800490a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0x36>
	  _M_erase(_S_right(__x));
 800428e:	6838      	ldr	r0, [r7, #0]
 8004290:	f000 fb46 	bl	8004920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004294:	4603      	mov	r3, r0
 8004296:	4619      	mov	r1, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fff0 	bl	800427e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
	  _Link_type __y = _S_left(__x);
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f000 fb4a 	bl	8004938 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 80042a4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fb51 	bl	8004950 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	  __x = __y;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80042b2:	e7e9      	b.n	8004288 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0xa>
    }
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb47 	bl	8004972 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80042e4:	4604      	mov	r4, r0
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb4f 	bl	800498a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80042ec:	4602      	mov	r2, r0
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	4621      	mov	r1, r4
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb55 	bl	80049a2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 80042f8:	4603      	mov	r3, r0
 80042fa:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f825 	bl	800434c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004302:	4603      	mov	r3, r0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	f107 020c 	add.w	r2, r7, #12
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f82c 	bl	800436e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8004316:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 800431c:	687c      	ldr	r4, [r7, #4]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fb6f 	bl	8004a04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	4620      	mov	r0, r4
 800432e:	f000 fb75 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f807 	bl	800434c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 800433e:	4603      	mov	r3, r0
 8004340:	e000      	b.n	8004344 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 8004342:	68bb      	ldr	r3, [r7, #8]
    }
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bd90      	pop	{r4, r7, pc}

0800434c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fb6b 	bl	8004a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fb59 	bl	8004a58 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 80043a6:	4604      	mov	r4, r0
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb61 	bl	8004a70 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 80043ae:	4602      	mov	r2, r0
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4621      	mov	r1, r4
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fb67 	bl	8004a88 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>
 80043ba:	4603      	mov	r3, r0
 80043bc:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f825 	bl	800440e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 80043c4:	4603      	mov	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	f107 020c 	add.w	r2, r7, #12
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f82c 	bl	8004430 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 80043d8:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80043de:	687c      	ldr	r4, [r7, #4]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb81 	bl	8004aea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	6839      	ldr	r1, [r7, #0]
 80043ee:	4620      	mov	r0, r4
 80043f0:	f000 fb14 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f807 	bl	800440e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004400:	4603      	mov	r3, r0
 8004402:	e000      	b.n	8004406 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 8004404:	68bb      	ldr	r3, [r7, #8]
    }
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bd90      	pop	{r4, r7, pc}

0800440e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1d1a      	adds	r2, r3, #4
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fb6e 	bl	8004b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fee8 	bl	8004238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004468:	4604      	mov	r4, r0
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb58 	bl	8004b20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004470:	4602      	mov	r2, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	4621      	mov	r1, r4
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fb5e 	bl	8004b38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>
 800447c:	4603      	mov	r3, r0
 800447e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb8a 	bl	8004b9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004486:	4603      	mov	r3, r0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	f107 020c 	add.w	r2, r7, #12
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fb91 	bl	8004bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 800449a:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80044a0:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 80044a2:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 faad 	bl	8004a04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	4620      	mov	r0, r4
 80044b2:	f000 fab3 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fb6c 	bl	8004b9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80044c2:	4603      	mov	r3, r0
 80044c4:	e000      	b.n	80044c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 80044c6:	68bb      	ldr	r3, [r7, #8]
    }
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd90      	pop	{r4, r7, pc}

080044d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr()
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3310      	adds	r3, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb81 	bl	8004be4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fee0 	bl	80042bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 80044fc:	4604      	mov	r4, r0
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fb7c 	bl	8004bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4621      	mov	r1, r4
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fb82 	bl	8004c14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>
 8004510:	4603      	mov	r3, r0
 8004512:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fbae 	bl	8004c76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 800451a:	4603      	mov	r3, r0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	f107 020c 	add.w	r2, r7, #12
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fbb5 	bl	8004c98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 800452e:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004534:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004536:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fad6 	bl	8004aea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	6839      	ldr	r1, [r7, #0]
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fa69 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb90 	bl	8004c76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004556:	4603      	mov	r3, r0
 8004558:	e000      	b.n	800455c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 800455a:	68bb      	ldr	r3, [r7, #8]
    }
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bd90      	pop	{r4, r7, pc}

08004564 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr()
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3310      	adds	r3, #16
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fba5 	bl	8004cc0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004576:	4603      	mov	r3, r0
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80045c2:	b5b0      	push	{r4, r5, r7, lr}
 80045c4:	b08e      	sub	sp, #56	; 0x38
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 80045ce:	f107 031c 	add.w	r3, r7, #28
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fc04 	bl	8004de2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 80045da:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fb78 	bl	8004cd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d022      	beq.n	8004634 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fc00 	bl	8004dfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  return _Res(_M_insert_(__res.first, __res.second,
 80045fa:	697c      	ldr	r4, [r7, #20]
 80045fc:	69bd      	ldr	r5, [r7, #24]
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fc0a 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8004604:	4602      	mov	r2, r0
 8004606:	f107 0310 	add.w	r3, r7, #16
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	462a      	mov	r2, r5
 8004610:	4621      	mov	r1, r4
 8004612:	68b8      	ldr	r0, [r7, #8]
 8004614:	f000 fc0b 	bl	8004e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>
 8004618:	4603      	mov	r3, r0
 800461a:	623b      	str	r3, [r7, #32]
		      true);
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004622:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004626:	f107 0320 	add.w	r3, r7, #32
 800462a:	4619      	mov	r1, r3
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fc47 	bl	8004ec0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
 8004632:	e011      	b.n	8004658 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fc58 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004642:	2300      	movs	r3, #0
 8004644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004648:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800464c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004650:	4619      	mov	r1, r3
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fc34 	bl	8004ec0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
    }
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	3730      	adds	r7, #48	; 0x30
 800465c:	46bd      	mov	sp, r7
 800465e:	bdb0      	pop	{r4, r5, r7, pc}

08004660 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	f107 030c 	add.w	r3, r7, #12
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9c9 	bl	8004a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr() const
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3310      	adds	r3, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fc26 	bl	8004f10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	4611      	mov	r1, r2
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fa0e 	bl	8004b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>:
    __iterator_category(const _Iter&)
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	dd0d      	ble.n	8004732 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	60ba      	str	r2, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fbfc 	bl	8004f28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>
        while (__n--)
 8004730:	e7f1      	b.n	8004716 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	60ba      	str	r2, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fbff 	bl	8004f4a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
        while (__n++)
 800474c:	e7f1      	b.n	8004732 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr() const
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3310      	adds	r3, #16
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc02 	bl	8004f6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004768:	4603      	mov	r3, r0
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>:
    __iterator_category(const _Iter&)
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dd0d      	ble.n	80047b4 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	60ba      	str	r2, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fbe9 	bl	8004f84 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>
        while (__n--)
 80047b2:	e7f1      	b.n	8004798 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	60ba      	str	r2, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fbec 	bl	8004fa6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
        while (__n++)
 80047ce:	e7f1      	b.n	80047b4 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004804:	b5b0      	push	{r4, r5, r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fc5b 	bl	80050d2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 800481c:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fbcf 	bl	8004fc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d022      	beq.n	8004876 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004830:	f107 0310 	add.w	r3, r7, #16
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc57 	bl	80050ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>
	  return _Res(_M_insert_(__res.first, __res.second,
 800483c:	697c      	ldr	r4, [r7, #20]
 800483e:	69bd      	ldr	r5, [r7, #24]
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fc61 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8004846:	4602      	mov	r2, r0
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	462a      	mov	r2, r5
 8004852:	4621      	mov	r1, r4
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f000 fc62 	bl	800511e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
 800485a:	4603      	mov	r3, r0
 800485c:	623b      	str	r3, [r7, #32]
		      true);
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004864:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004868:	f107 0320 	add.w	r3, r7, #32
 800486c:	4619      	mov	r1, r3
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fc9e 	bl	80051b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
 8004874:	e011      	b.n	800489a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fcaf 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004884:	2300      	movs	r3, #0
 8004886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800488a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 800488e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004892:	4619      	mov	r1, r3
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fc8b 	bl	80051b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
    }
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	3730      	adds	r7, #48	; 0x30
 800489e:	46bd      	mov	sp, r7
 80048a0:	bdb0      	pop	{r4, r5, r7, pc}

080048a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fc83 	bl	8005200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fc94 	bl	800522a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fc76 	bl	800524e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>
	_M_put_node(__p);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fc87 	bl	8005278 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>
      }
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
      }
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80049a2:	b590      	push	{r4, r7, lr}
 80049a4:	b087      	sub	sp, #28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80049b6:	68fc      	ldr	r4, [r7, #12]
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f000 fc6f 	bl	800529c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 80049be:	4603      	mov	r3, r0
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 f829 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f083 0301 	eor.w	r3, r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f000 fc71 	bl	80052c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80049e0:	60b8      	str	r0, [r7, #8]
 80049e2:	e7e5      	b.n	80049b0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 80049e4:	68b8      	ldr	r0, [r7, #8]
 80049e6:	f000 fc78 	bl	80052da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80049ea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80049ec:	e7e0      	b.n	80049b0 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 80049ee:	f107 0314 	add.w	r3, r7, #20
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f820 	bl	8004a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 80049fa:	697b      	ldr	r3, [r7, #20]
    }
 80049fc:	4618      	mov	r0, r3
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fc45 	bl	800529c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	68b8      	ldr	r0, [r7, #8]
 8004a2c:	f000 fc61 	bl	80052f2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
      }
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01b      	beq.n	8004ad4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004a9c:	68fc      	ldr	r4, [r7, #12]
 8004a9e:	68b8      	ldr	r0, [r7, #8]
 8004aa0:	f000 fc37 	bl	8005312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7ff ffb6 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f083 0301 	eor.w	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 fc39 	bl	8005338 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8004ac6:	60b8      	str	r0, [r7, #8]
 8004ac8:	e7e5      	b.n	8004a96 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004aca:	68b8      	ldr	r0, [r7, #8]
 8004acc:	f000 fc40 	bl	8005350 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8004ad0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004ad2:	e7e0      	b.n	8004a96 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 8004ad4:	f107 0314 	add.w	r3, r7, #20
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f811 	bl	8004b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 8004ae0:	697b      	ldr	r3, [r7, #20]
    }
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd90      	pop	{r4, r7, pc}

08004aea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fc0d 	bl	8005312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004b4c:	68fc      	ldr	r4, [r7, #12]
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	f000 fba4 	bl	800529c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004b54:	4603      	mov	r3, r0
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff ff5e 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f083 0301 	eor.w	r3, r3, #1
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d006      	beq.n	8004b7a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f7ff fead 	bl	80048d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004b76:	60b8      	str	r0, [r7, #8]
 8004b78:	e7e5      	b.n	8004b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004b7a:	68b8      	ldr	r0, [r7, #8]
 8004b7c:	f7ff fe9c 	bl	80048b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004b80:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004b82:	e7e0      	b.n	8004b46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f9b1 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004b90:	697b      	ldr	r3, [r7, #20]
    }
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}

08004b9a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f9a0 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fbbb 	bl	8005368 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004c28:	68fc      	ldr	r4, [r7, #12]
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f000 fb71 	bl	8005312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8004c30:	4603      	mov	r3, r0
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fef0 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f083 0301 	eor.w	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	f7ff fe73 	bl	8004938 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004c52:	60b8      	str	r0, [r7, #8]
 8004c54:	e7e5      	b.n	8004c22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f7ff fe62 	bl	8004920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004c5c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004c5e:	e7e0      	b.n	8004c22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fabb 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004c6c:	697b      	ldr	r3, [r7, #20]
    }
 8004c6e:	4618      	mov	r0, r3
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}

08004c76 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	1d1a      	adds	r2, r3, #4
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 faaa 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() noexcept
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb58 	bl	800537e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b08b      	sub	sp, #44	; 0x2c
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004ce4:	68b8      	ldr	r0, [r7, #8]
 8004ce6:	f7ff faa7 	bl	8004238 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004cea:	4603      	mov	r3, r0
 8004cec:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004cee:	68b8      	ldr	r0, [r7, #8]
 8004cf0:	f7ff ff16 	bl	8004b20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004d08:	68bc      	ldr	r4, [r7, #8]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fac5 	bl	800529c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff fe7f 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fdce 	bl	80048d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004d34:	4603      	mov	r3, r0
 8004d36:	e004      	b.n	8004d42 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fdbc 	bl	80048b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004d40:	4603      	mov	r3, r0
 8004d42:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004d44:	e7db      	b.n	8004cfe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f8cf 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01d      	beq.n	8004d98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8004d5c:	68b8      	ldr	r0, [r7, #8]
 8004d5e:	f000 fb19 	bl	8005394 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	f107 021c 	add.w	r2, r7, #28
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff23 	bl	8004bbc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8004d7c:	f107 0214 	add.w	r2, r7, #20
 8004d80:	f107 0318 	add.w	r3, r7, #24
 8004d84:	4619      	mov	r1, r3
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fb15 	bl	80053b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 8004d8c:	e025      	b.n	8004dda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8004d8e:	f107 0310 	add.w	r3, r7, #16
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fb28 	bl	80053e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004d98:	68bc      	ldr	r4, [r7, #8]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fe31 	bl	8004a04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004da2:	4603      	mov	r3, r0
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff fe37 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 8004db4:	f107 0214 	add.w	r2, r7, #20
 8004db8:	f107 0318 	add.w	r3, r7, #24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 faf9 	bl	80053b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 8004dc4:	e009      	b.n	8004dda <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	f107 0220 	add.w	r2, r7, #32
 8004dce:	f107 0310 	add.w	r3, r7, #16
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb18 	bl	800540a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	372c      	adds	r7, #44	; 0x2c
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd90      	pop	{r4, r7, pc}

08004de2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>:
  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004e2e:	b5b0      	push	{r4, r5, r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11a      	bne.n	8004e78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fe6c 	bl	8004b20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8004e50:	68fc      	ldr	r4, [r7, #12]
 8004e52:	f107 0310 	add.w	r3, r7, #16
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ffc2 	bl	8004de2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 8004e5e:	4605      	mov	r5, r0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fdcf 	bl	8004a04 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7ff fdd5 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4e>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x50>
 8004e7c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8004e7e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f7ff ffc9 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8c:	f000 fad3 	bl	8005436 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8004e90:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004e96:	7ff8      	ldrb	r0, [r7, #31]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	f00d fc95 	bl	80127ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f81e 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004eb6:	697b      	ldr	r3, [r7, #20]
      }
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}

08004ec0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004ecc:	68b8      	ldr	r0, [r7, #8]
 8004ece:	f000 fac6 	bl	800545e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 faca 	bl	8005474 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	711a      	strb	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fab6 	bl	800548a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f00d fc31 	bl	801279c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
	return *this;
 8004f40:	687b      	ldr	r3, [r7, #4]
      }
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f00d fc35 	bl	80127c6 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
	return *this;
 8004f62:	687b      	ldr	r3, [r7, #4]
      }
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fa93 	bl	80054a0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f00d fc03 	bl	801279c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004f96:	4602      	mov	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]
	return *this;
 8004f9c:	687b      	ldr	r3, [r7, #4]
      }
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f00d fc07 	bl	80127c6 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
	return *this;
 8004fbe:	687b      	ldr	r3, [r7, #4]
      }
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b08b      	sub	sp, #44	; 0x2c
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f7ff f971 	bl	80042bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8004fde:	68b8      	ldr	r0, [r7, #8]
 8004fe0:	f7ff fe0c 	bl	8004bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004ff8:	68bc      	ldr	r4, [r7, #8]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f988 	bl	8005312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4620      	mov	r0, r4
 800500a:	f7ff fd07 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x60>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fc8a 	bl	8004938 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 8005024:	4603      	mov	r3, r0
 8005026:	e004      	b.n	8005032 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6a>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fc78 	bl	8004920 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005030:	4603      	mov	r3, r0
 8005032:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8005034:	e7db      	b.n	8004fee <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8cf 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8005044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01d      	beq.n	8005088 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 800504c:	68b8      	ldr	r0, [r7, #8]
 800504e:	f000 fa32 	bl	80054b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8005052:	4603      	mov	r3, r0
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	f107 021c 	add.w	r2, r7, #28
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fe19 	bl	8004c98 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 800506c:	f107 0214 	add.w	r2, r7, #20
 8005070:	f107 0318 	add.w	r3, r7, #24
 8005074:	4619      	mov	r1, r3
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fa2e 	bl	80054d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 800507c:	e025      	b.n	80050ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 800507e:	f107 0310 	add.w	r3, r7, #16
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fa41 	bl	800550a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005088:	68bc      	ldr	r4, [r7, #8]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fd2c 	bl	8004aea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005092:	4603      	mov	r3, r0
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4619      	mov	r1, r3
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff fcbf 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d008      	beq.n	80050b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 80050a4:	f107 0214 	add.w	r2, r7, #20
 80050a8:	f107 0318 	add.w	r3, r7, #24
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa12 	bl	80054d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 80050b4:	e009      	b.n	80050ca <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 80050b6:	2300      	movs	r3, #0
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	f107 0220 	add.w	r2, r7, #32
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f9a0 	bl	800540a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	372c      	adds	r7, #44	; 0x2c
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd90      	pop	{r4, r7, pc}

080050d2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>:
      operator()(_Pair& __x) const
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>:
	_Alloc_node(_Rb_tree& __t)
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800511e:	b5b0      	push	{r4, r5, r7, lr}
 8005120:	b088      	sub	sp, #32
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11a      	bne.n	8005168 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff fd62 	bl	8004bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005140:	68fc      	ldr	r4, [r7, #12]
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ffc2 	bl	80050d2 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 800514e:	4605      	mov	r5, r0
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fcca 	bl	8004aea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8005156:	4603      	mov	r3, r0
 8005158:	461a      	mov	r2, r3
 800515a:	4629      	mov	r1, r5
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff fc5d 	bl	8004a1c <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4e>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x50>
 800516c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800516e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005170:	6838      	ldr	r0, [r7, #0]
 8005172:	f7ff ffc9 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005176:	4603      	mov	r3, r0
 8005178:	4619      	mov	r1, r3
 800517a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800517c:	f000 f9d6 	bl	800552c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>
 8005180:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8005186:	7ff8      	ldrb	r0, [r7, #31]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	69b9      	ldr	r1, [r7, #24]
 800518c:	f00d fb1d 	bl	80127ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f81e 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 80051a6:	697b      	ldr	r3, [r7, #20]
      }
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bdb0      	pop	{r4, r5, r7, pc}

080051b0 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	f000 f9c9 	bl	8005554 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>
 80051c2:	4602      	mov	r2, r0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f952 	bl	8005474 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80051d0:	4603      	mov	r3, r0
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	711a      	strb	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9ad 	bl	800556a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005210:	4604      	mov	r4, r0
 8005212:	6838      	ldr	r0, [r7, #0]
 8005214:	f7ff f95c 	bl	80044d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8005218:	4603      	mov	r3, r0
 800521a:	4619      	mov	r1, r3
 800521c:	4620      	mov	r0, r4
 800521e:	f000 f9af 	bl	8005580 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>
      }
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}

0800522a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f998 	bl	800556a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 800523a:	4603      	mov	r3, r0
 800523c:	2201      	movs	r2, #1
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f9aa 	bl	800559a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800524e:	b590      	push	{r4, r7, lr}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9ad 	bl	80055b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 800525e:	4604      	mov	r4, r0
 8005260:	6838      	ldr	r0, [r7, #0]
 8005262:	f7ff f97f 	bl	8004564 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8005266:	4603      	mov	r3, r0
 8005268:	4619      	mov	r1, r3
 800526a:	4620      	mov	r0, r4
 800526c:	f000 f9af 	bl	80055ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>
      }
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}

08005278 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f998 	bl	80055b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005288:	4603      	mov	r3, r0
 800528a:	2201      	movs	r2, #1
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f9aa 	bl	80055e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff fa04 	bl	80046b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f9a7 	bl	8005606 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>
 80052b8:	4603      	mov	r3, r0
      }
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) < 0; }
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f00d fdd2 	bl	8012ea8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8005304:	4603      	mov	r3, r0
 8005306:	0fdb      	lsrs	r3, r3, #31
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>:
      _S_key(_Const_Link_type __x)
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fa1b 	bl	8004756 <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8005320:	4602      	mov	r2, r0
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f978 	bl	800561e <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>
 800532e:	4603      	mov	r3, r0
      }
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() noexcept
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() noexcept
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	f107 030c 	add.w	r3, r7, #12
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fda3 	bl	8004ef2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f000 f937 	bl	8005636 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>
 80053c8:	4603      	mov	r3, r0
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f93b 	bl	800564c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80053d6:	4603      	mov	r3, r0
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f00d f9e4 	bl	80127c2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
	return *this;
 8005400:	687b      	ldr	r3, [r7, #4]
      }
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8005416:	68b8      	ldr	r0, [r7, #8]
 8005418:	f000 f918 	bl	800564c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800541c:	4603      	mov	r3, r0
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 8005436:	b590      	push	{r4, r7, lr}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681c      	ldr	r4, [r3, #0]
 8005444:	6838      	ldr	r0, [r7, #0]
 8005446:	f7ff fce7 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800544a:	4603      	mov	r3, r0
 800544c:	4619      	mov	r1, r3
 800544e:	4620      	mov	r0, r4
 8005450:	f000 f907 	bl	8005662 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8005454:	4603      	mov	r3, r0
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bd90      	pop	{r4, r7, pc}

0800545e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() const noexcept
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() const noexcept
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4611      	mov	r1, r2
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fe8a 	bl	80051e2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80054e4:	68b8      	ldr	r0, [r7, #8]
 80054e6:	f000 f8d3 	bl	8005690 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>
 80054ea:	4603      	mov	r3, r0
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8aa 	bl	800564c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80054f8:	4603      	mov	r3, r0
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f00d f953 	bl	80127c2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800551c:	4602      	mov	r2, r0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
	return *this;
 8005522:	687b      	ldr	r3, [r7, #4]
      }
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>:
	  operator()(_Arg&& __arg) const
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681c      	ldr	r4, [r3, #0]
 800553a:	6838      	ldr	r0, [r7, #0]
 800553c:	f7ff fde4 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005540:	4603      	mov	r3, r0
 8005542:	4619      	mov	r1, r3
 8005544:	4620      	mov	r0, r4
 8005546:	f000 f8ae 	bl	80056a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>
 800554a:	4603      	mov	r3, r0
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}

08005554 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f8a1 	bl	80056d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f89e 	bl	80056ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f893 	bl	8005706 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f890 	bl	800571e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>:

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>:
      operator()(const _Pair& __x) const
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f863 	bl	8005738 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8005672:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005674:	6838      	ldr	r0, [r7, #0]
 8005676:	f7ff fbcf 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800567a:	4603      	mov	r3, r0
 800567c:	461a      	mov	r2, r3
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f86a 	bl	800575a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8005686:	68fb      	ldr	r3, [r7, #12]
	}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f872 	bl	800579a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>
 80056b6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80056b8:	6838      	ldr	r0, [r7, #0]
 80056ba:	f7ff fd25 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f879 	bl	80057bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>
	  return __tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
	}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80056de:	6838      	ldr	r0, [r7, #0]
 80056e0:	f7fe f878 	bl	80037d4 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80056f8:	68b8      	ldr	r0, [r7, #8]
 80056fa:	f00c fff9 	bl	80126f0 <_ZdlPv>
      }
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>:
	destroy(_Up* __p)
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005710:	6838      	ldr	r0, [r7, #0]
 8005712:	f7fe fabf 	bl	8003c94 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>:
      deallocate(pointer __p, size_type)
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800572a:	68b8      	ldr	r0, [r7, #8]
 800572c:	f00c ffe0 	bl	80126f0 <_ZdlPv>
      }
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff12 	bl	800556a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005746:	4603      	mov	r3, r0
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f856 	bl	80057fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>
 8005750:	4603      	mov	r3, r0
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800575a:	b5b0      	push	{r4, r5, r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4619      	mov	r1, r3
 800576a:	2048      	movs	r0, #72	; 0x48
 800576c:	f7fd fad8 	bl	8002d20 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff fefa 	bl	800556a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005776:	4604      	mov	r4, r0
 8005778:	68b8      	ldr	r0, [r7, #8]
 800577a:	f7fe fea9 	bl	80044d0 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 800577e:	4605      	mov	r5, r0
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fb49 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4629      	mov	r1, r5
 800578c:	4620      	mov	r0, r4
 800578e:	f000 f844 	bl	800581a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>
	}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bdb0      	pop	{r4, r5, r7, pc}

0800579a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>:
      _M_get_node()
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff ff08 	bl	80055b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2101      	movs	r1, #1
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 f847 	bl	8005840 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80057bc:	b5b0      	push	{r4, r5, r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4619      	mov	r1, r3
 80057cc:	202c      	movs	r0, #44	; 0x2c
 80057ce:	f7fd faa7 	bl	8002d20 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fef0 	bl	80055b8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 80057d8:	4604      	mov	r4, r0
 80057da:	68b8      	ldr	r0, [r7, #8]
 80057dc:	f7fe fec2 	bl	8004564 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 80057e0:	4605      	mov	r5, r0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fc90 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	4629      	mov	r1, r5
 80057ee:	4620      	mov	r0, r4
 80057f0:	f000 f835 	bl	800585e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>
	}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bdb0      	pop	{r4, r5, r7, pc}

080057fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005806:	2200      	movs	r2, #0
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f83a 	bl	8005884 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>
 8005810:	4603      	mov	r3, r0
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff faf6 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f860 	bl	80058f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>:
      allocate(allocator_type& __a, size_type __n)
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800584a:	2200      	movs	r2, #0
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f86a 	bl	8005928 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>
 8005854:	4603      	mov	r3, r0
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fc4c 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f88a 	bl	8005990 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f895 	bl	80059c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>
 8005896:	4602      	mov	r2, r0
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4293      	cmp	r3, r2
 800589c:	bf8c      	ite	hi
 800589e:	2301      	movhi	r3, #1
 80058a0:	2300      	movls	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80058a8:	f00c ffeb 	bl	8012882 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4618      	mov	r0, r3
 80058b8:	f00c ff1c 	bl	80126f4 <_Znwj>
 80058bc:	4603      	mov	r3, r0
      }
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>:
      constexpr pair(pair&&) = default;
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f00d fb0a 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0218 	add.w	r2, r3, #24
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	3318      	adds	r3, #24
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f7fd fb58 	bl	8002f9e <_ZN7commandC1ERKS_>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fa87 	bl	8004e18 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800590a:	4604      	mov	r4, r0
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4619      	mov	r1, r3
 8005910:	2038      	movs	r0, #56	; 0x38
 8005912:	f7fd fa05 	bl	8002d20 <_ZnwjPv>
 8005916:	4603      	mov	r3, r0
 8005918:	4621      	mov	r1, r4
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff ffd3 	bl	80058c6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	bd90      	pop	{r4, r7, pc}

08005928 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f851 	bl	80059dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>
 800593a:	4602      	mov	r2, r0
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4293      	cmp	r3, r2
 8005940:	bf8c      	ite	hi
 8005942:	2301      	movhi	r3, #1
 8005944:	2300      	movls	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800594c:	f00c ff99 	bl	8012882 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	222c      	movs	r2, #44	; 0x2c
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	4618      	mov	r0, r3
 800595a:	f00c fecb 	bl	80126f4 <_Znwj>
 800595e:	4603      	mov	r3, r0
      }
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>:
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f00d fab9 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fbb3 	bl	8005108 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 80059a2:	4604      	mov	r4, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4619      	mov	r1, r3
 80059a8:	201c      	movs	r0, #28
 80059aa:	f7fd f9b9 	bl	8002d20 <_ZnwjPv>
 80059ae:	4603      	mov	r3, r0
 80059b0:	4621      	mov	r1, r4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff ffd8 	bl	8005968 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd90      	pop	{r4, r7, pc}

080059c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80059c8:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv+0x18>)
      }
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	01c71c71 	.word	0x01c71c71

080059dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80059e4:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv+0x18>)
      }
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	02e8ba2e 	.word	0x02e8ba2e

080059f8 <_Z41__static_initialization_and_destruction_0ii>:
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b0a0      	sub	sp, #128	; 0x80
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 80a3 	bne.w	8005b50 <_Z41__static_initialization_and_destruction_0ii+0x158>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f040 809d 	bne.w	8005b50 <_Z41__static_initialization_and_destruction_0ii+0x158>
const std::string cursor = "> ";
 8005a16:	f107 0308 	add.w	r3, r7, #8
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f00c fe7b 	bl	8012716 <_ZNSaIcEC1Ev>
 8005a20:	f107 0308 	add.w	r3, r7, #8
 8005a24:	461a      	mov	r2, r3
 8005a26:	495b      	ldr	r1, [pc, #364]	; (8005b94 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8005a28:	485b      	ldr	r0, [pc, #364]	; (8005b98 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8005a2a:	f00d fa95 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4618      	mov	r0, r3
 8005a34:	f00c fe70 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005a38:	f107 030c 	add.w	r3, r7, #12
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f00c fe6a 	bl	8012716 <_ZNSaIcEC1Ev>
 8005a42:	f107 030c 	add.w	r3, r7, #12
 8005a46:	461a      	mov	r2, r3
 8005a48:	4954      	ldr	r1, [pc, #336]	; (8005b9c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8005a4a:	4855      	ldr	r0, [pc, #340]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8005a4c:	f00d fa84 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005a50:	f107 030c 	add.w	r3, r7, #12
 8005a54:	4618      	mov	r0, r3
 8005a56:	f00c fe5f 	bl	8012718 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 8005a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f00c fe59 	bl	8012716 <_ZNSaIcEC1Ev>
 8005a64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	494d      	ldr	r1, [pc, #308]	; (8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f00d fa72 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a74:	f107 0110 	add.w	r1, r7, #16
 8005a78:	4b4b      	ldr	r3, [pc, #300]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8005a7a:	4a4c      	ldr	r2, [pc, #304]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8005a7c:	484c      	ldr	r0, [pc, #304]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005a7e:	f7fd f8c9 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005a82:	f107 0310 	add.w	r3, r7, #16
 8005a86:	4618      	mov	r0, r3
 8005a88:	f00d f8bc 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00c fe41 	bl	8012718 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 8005a96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00c fe3b 	bl	8012716 <_ZNSaIcEC1Ev>
 8005aa0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aa8:	4942      	ldr	r1, [pc, #264]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f00d fa54 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ab0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005ab4:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8005ab6:	4a41      	ldr	r2, [pc, #260]	; (8005bbc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8005ab8:	4841      	ldr	r0, [pc, #260]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8005aba:	f7fd f8ab 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f00d f89e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005ac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005acc:	4618      	mov	r0, r3
 8005ace:	f00c fe23 	bl	8012718 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 8005ad2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f00c fe1d 	bl	8012716 <_ZNSaIcEC1Ev>
 8005adc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005ae0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ae4:	4937      	ldr	r1, [pc, #220]	; (8005bc4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00d fa36 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005aec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8005af2:	4a36      	ldr	r2, [pc, #216]	; (8005bcc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8005af4:	4836      	ldr	r0, [pc, #216]	; (8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005af6:	f7fd f88d 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005afa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005afe:	4618      	mov	r0, r3
 8005b00:	f00d f880 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f00c fe05 	bl	8012718 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 8005b0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005b12:	4618      	mov	r0, r3
 8005b14:	f00c fdff 	bl	8012716 <_ZNSaIcEC1Ev>
 8005b18:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005b1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b20:	492c      	ldr	r1, [pc, #176]	; (8005bd4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005b22:	4618      	mov	r0, r3
 8005b24:	f00d fa18 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b28:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8005b2c:	4b2a      	ldr	r3, [pc, #168]	; (8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005b2e:	4a2b      	ldr	r2, [pc, #172]	; (8005bdc <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005b30:	482b      	ldr	r0, [pc, #172]	; (8005be0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005b32:	f7fd f86f 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8005b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f00d f862 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005b40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005b44:	4618      	mov	r0, r3
 8005b46:	f00c fde7 	bl	8012718 <_ZNSaIcED1Ev>
Console cs;
 8005b4a:	4826      	ldr	r0, [pc, #152]	; (8005be4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005b4c:	f7fd fc4c 	bl	80033e8 <_ZN7ConsoleC1Ev>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d119      	bne.n	8005b8a <_Z41__static_initialization_and_destruction_0ii+0x192>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d114      	bne.n	8005b8a <_Z41__static_initialization_and_destruction_0ii+0x192>
 8005b60:	4820      	ldr	r0, [pc, #128]	; (8005be4 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005b62:	f7fd fc56 	bl	8003412 <_ZN7ConsoleD1Ev>
 8005b66:	481e      	ldr	r0, [pc, #120]	; (8005be0 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005b68:	f7fd f871 	bl	8002c4e <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8005b6c:	4818      	ldr	r0, [pc, #96]	; (8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005b6e:	f7fd f86e 	bl	8002c4e <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 8005b72:	4813      	ldr	r0, [pc, #76]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8005b74:	f7fd f86b 	bl	8002c4e <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005b7a:	f7fd f868 	bl	8002c4e <_ZN7commandD1Ev>
const std::string wlcm =
 8005b7e:	4808      	ldr	r0, [pc, #32]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8005b80:	f00d f840 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005b84:	4804      	ldr	r0, [pc, #16]	; (8005b98 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8005b86:	f00d f83d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005b8a:	bf00      	nop
 8005b8c:	3780      	adds	r7, #128	; 0x80
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	0801a8a0 	.word	0x0801a8a0
 8005b98:	2000043c 	.word	0x2000043c
 8005b9c:	0801a8a4 	.word	0x0801a8a4
 8005ba0:	20000454 	.word	0x20000454
 8005ba4:	0801a818 	.word	0x0801a818
 8005ba8:	08002f89 	.word	0x08002f89
 8005bac:	08002f79 	.word	0x08002f79
 8005bb0:	200005a0 	.word	0x200005a0
 8005bb4:	0801ba04 	.word	0x0801ba04
 8005bb8:	0800301d 	.word	0x0800301d
 8005bbc:	08002fd5 	.word	0x08002fd5
 8005bc0:	200005c0 	.word	0x200005c0
 8005bc4:	0801ba0c 	.word	0x0801ba0c
 8005bc8:	08003099 	.word	0x08003099
 8005bcc:	08003051 	.word	0x08003051
 8005bd0:	200005e0 	.word	0x200005e0
 8005bd4:	0801ba14 	.word	0x0801ba14
 8005bd8:	08003119 	.word	0x08003119
 8005bdc:	080030e9 	.word	0x080030e9
 8005be0:	20000600 	.word	0x20000600
 8005be4:	20000620 	.word	0x20000620

08005be8 <_GLOBAL__sub_I_cs>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7ff ff01 	bl	80059f8 <_Z41__static_initialization_and_destruction_0ii>
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <_GLOBAL__sub_D_cs>:
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c00:	2000      	movs	r0, #0
 8005c02:	f7ff fef9 	bl	80059f8 <_Z41__static_initialization_and_destruction_0ii>
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	: state{st}, priority{pri}, delay_tk{del}, period_tk{per}
{

}

Task::Task(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6178      	str	r0, [r7, #20]
 8005c10:	ed87 0a04 	vstr	s0, [r7, #16]
 8005c14:	edc7 0a03 	vstr	s1, [r7, #12]
 8005c18:	ed87 1a02 	vstr	s2, [r7, #8]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	603a      	str	r2, [r7, #0]
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00c ffc8 	bl	8012bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	state = 0;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	605a      	str	r2, [r3, #4]
	priority = pri;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	79fa      	ldrb	r2, [r7, #7]
 8005c3c:	721a      	strb	r2, [r3, #8]
	name = nm;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	3314      	adds	r3, #20
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f00c ffe3 	bl	8012c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

	// Calculating delay and period based on master tick value.
	delay_tk = (unsigned long)(delay_s / mstr_tick_s);
 8005c4a:	edd7 6a04 	vldr	s13, [r7, #16]
 8005c4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5a:	ee17 2a90 	vmov	r2, s15
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	60da      	str	r2, [r3, #12]
	period_tk = (unsigned long)(peri_s / mstr_tick_s);
 8005c62:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c66:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c72:	ee17 2a90 	vmov	r2, s15
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	611a      	str	r2, [r3, #16]
}
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	08020218 	.word	0x08020218

08005c88 <_Z41__static_initialization_and_destruction_0ii>:
		delay_tk = other.delay_tk;
		period_tk = other.period_tk;
	}

	return *this;
}
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d126      	bne.n	8005ce6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d121      	bne.n	8005ce6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8005ca2:	f107 0308 	add.w	r3, r7, #8
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f00c fd35 	bl	8012716 <_ZNSaIcEC1Ev>
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4916      	ldr	r1, [pc, #88]	; (8005d0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005cb4:	4816      	ldr	r0, [pc, #88]	; (8005d10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005cb6:	f00d f94f 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f00c fd2a 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f00c fd24 	bl	8012716 <_ZNSaIcEC1Ev>
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	490f      	ldr	r1, [pc, #60]	; (8005d14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005cd6:	4810      	ldr	r0, [pc, #64]	; (8005d18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005cd8:	f00d f93e 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f00c fd19 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d105      	bne.n	8005d02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8005cf6:	4808      	ldr	r0, [pc, #32]	; (8005d18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005cf8:	f00c ff84 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005cfc:	4804      	ldr	r0, [pc, #16]	; (8005d10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005cfe:	f00c ff81 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	0801ba4c 	.word	0x0801ba4c
 8005d10:	20000650 	.word	0x20000650
 8005d14:	0801ba50 	.word	0x0801ba50
 8005d18:	20000668 	.word	0x20000668

08005d1c <_GLOBAL__sub_I__ZN4TaskC2Ev>:
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d24:	2001      	movs	r0, #1
 8005d26:	f7ff ffaf 	bl	8005c88 <_Z41__static_initialization_and_destruction_0ii>
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_GLOBAL__sub_D__ZN4TaskC2Ev>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d34:	2000      	movs	r0, #0
 8005d36:	f7ff ffa7 	bl	8005c88 <_Z41__static_initialization_and_destruction_0ii>
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_ZN4Task8getStateEv>:
	int getState(){ return state; }
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <_ZN4Task8setStateEi>:
	void setState(int x) { state = x; }
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <_ZN4Task8getDelayEv>:
	unsigned long getDelay(){ return delay_tk; }
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_ZN4Task8setDelayEm>:
	void setDelay(unsigned long d){ delay_tk = d; }
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	60da      	str	r2, [r3, #12]
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <_ZN4Task9getPeriodEv>:
	unsigned long getPeriod(){ return period_tk; }
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_PeriodElapsedCallback>:

// Task master object needs to be created so .cpp can have SysTick_Handler call our objects update function.
TaskMaster<10> scheduler;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	if (htim == scheduler.getTimerInst())
 8005dc4:	4809      	ldr	r0, [pc, #36]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005dc6:	f000 f821 	bl	8005e0c <_ZN10TaskMasterILi10EE12getTimerInstEv>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		// The timer our scheduler is using has elapsed!
		scheduler.update();
 8005ddc:	4803      	ldr	r0, [pc, #12]	; (8005dec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005dde:	f000 f821 	bl	8005e24 <_ZN10TaskMasterILi10EE6updateEv>
	}
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200006b0 	.word	0x200006b0

08005df0 <_ZN10TaskMasterILi10EEC1Ev>:
	// Start the interrupt routine of the timer.
	HAL_TIM_Base_Start_IT(_timer_inst);
}

template <int N>
TaskMaster<N>::TaskMaster()
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	601a      	str	r2, [r3, #0]
{

}
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <_ZN10TaskMasterILi10EE12getTimerInstEv>:
	TIM_HandleTypeDef* getTimerInst() { return _timer_inst; };
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <_ZN10TaskMasterILi10EE6updateEv>:

}

// Task Scheduling utility functions.
template <int N>
void TaskMaster<N>::update()
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
{
	for(int i = 0; i < N; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b09      	cmp	r3, #9
 8005e34:	dc59      	bgt.n	8005eea <_ZN10TaskMasterILi10EE6updateEv+0xc6>
	{
		// Update task only if its still alive.
		if (_taskList[i] == nullptr) continue;
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04d      	beq.n	8005ee0 <_ZN10TaskMasterILi10EE6updateEv+0xbc>

		if (_taskList[i]->getState() >= 0 )
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff ff74 	bl	8005d3c <_ZN4Task8getStateEv>
 8005e54:	4603      	mov	r3, r0
 8005e56:	43db      	mvns	r3, r3
 8005e58:	0fdb      	lsrs	r3, r3, #31
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d040      	beq.n	8005ee2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		{

			// This task has expired. Mark task as ready to run.
			if(_taskList[i]->getDelay() == 0)
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff80 	bl	8005d70 <_ZN4Task8getDelayEv>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01b      	beq.n	8005eb8 <_ZN10TaskMasterILi10EE6updateEv+0x94>
			{
				_taskList[i]->setState(1);						// Marked as ready to run.
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff61 	bl	8005d54 <_ZN4Task8setStateEi>
				_taskList[i]->setDelay(_taskList[i]->getPeriod());
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	685c      	ldr	r4, [r3, #4]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ff7c 	bl	8005da4 <_ZN4Task9getPeriodEv>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff ff69 	bl	8005d88 <_ZN4Task8setDelayEm>
 8005eb6:	e014      	b.n	8005ee2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
			} else {
				_taskList[i]->setDelay(_taskList[i]->getDelay() - 1);					// Counting down delay time.
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	685c      	ldr	r4, [r3, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff ff4f 	bl	8005d70 <_ZN4Task8getDelayEv>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff ff55 	bl	8005d88 <_ZN4Task8setDelayEm>
 8005ede:	e000      	b.n	8005ee2 <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		if (_taskList[i] == nullptr) continue;
 8005ee0:	bf00      	nop
	for(int i = 0; i < N; i++)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e7a2      	b.n	8005e30 <_ZN10TaskMasterILi10EE6updateEv+0xc>
			}
		}
	}
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}
	...

08005ef4 <_Z41__static_initialization_and_destruction_0ii>:
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d129      	bne.n	8005f58 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d124      	bne.n	8005f58 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00c fbff 	bl	8012716 <_ZNSaIcEC1Ev>
 8005f18:	f107 0308 	add.w	r3, r7, #8
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4919      	ldr	r1, [pc, #100]	; (8005f84 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005f20:	4819      	ldr	r0, [pc, #100]	; (8005f88 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005f22:	f00d f819 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f00c fbf4 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	4618      	mov	r0, r3
 8005f36:	f00c fbee 	bl	8012716 <_ZNSaIcEC1Ev>
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4912      	ldr	r1, [pc, #72]	; (8005f8c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005f42:	4813      	ldr	r0, [pc, #76]	; (8005f90 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005f44:	f00d f808 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8005f48:	f107 030c 	add.w	r3, r7, #12
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f00c fbe3 	bl	8012718 <_ZNSaIcED1Ev>
TaskMaster<10> scheduler;
 8005f52:	4810      	ldr	r0, [pc, #64]	; (8005f94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005f54:	f7ff ff4c 	bl	8005df0 <_ZN10TaskMasterILi10EEC1Ev>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d108      	bne.n	8005f7a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005f68:	480a      	ldr	r0, [pc, #40]	; (8005f94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005f6a:	f000 f815 	bl	8005f98 <_ZN10TaskMasterILi10EED1Ev>
const std::string wlcm =
 8005f6e:	4808      	ldr	r0, [pc, #32]	; (8005f90 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005f70:	f00c fe48 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8005f74:	4804      	ldr	r0, [pc, #16]	; (8005f88 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005f76:	f00c fe45 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	0801cbb4 	.word	0x0801cbb4
 8005f88:	20000680 	.word	0x20000680
 8005f8c:	0801cbb8 	.word	0x0801cbb8
 8005f90:	20000698 	.word	0x20000698
 8005f94:	200006b0 	.word	0x200006b0

08005f98 <_ZN10TaskMasterILi10EED1Ev>:
TaskMaster<N>::~TaskMaster()
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
}
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <_GLOBAL__sub_I_scheduler>:
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	f7ff ff9c 	bl	8005ef4 <_Z41__static_initialization_and_destruction_0ii>
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <_GLOBAL__sub_D_scheduler>:
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f7ff ff94 	bl	8005ef4 <_Z41__static_initialization_and_destruction_0ii>
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f00c ff63 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f00c fe1d 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	4621      	mov	r1, r4
 8005ff0:	480a      	ldr	r0, [pc, #40]	; (800601c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8005ff2:	f007 fcae 	bl	800d952 <HAL_UART_Transmit>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8005ffa:	f640 230d 	movw	r3, #2573	; 0xa0d
 8005ffe:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8006000:	f107 010c 	add.w	r1, r7, #12
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	2202      	movs	r2, #2
 800600a:	4804      	ldr	r0, [pc, #16]	; (800601c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800600c:	f007 fca1 	bl	800d952 <HAL_UART_Transmit>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bd90      	pop	{r4, r7, pc}
 800601c:	20000958 	.word	0x20000958

08006020 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "Telem_out.hpp"

TelemOut::TelemOut(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b08d      	sub	sp, #52	; 0x34
 8006024:	af00      	add	r7, sp, #0
 8006026:	6178      	str	r0, [r7, #20]
 8006028:	ed87 0a04 	vstr	s0, [r7, #16]
 800602c:	edc7 0a03 	vstr	s1, [r7, #12]
 8006030:	ed87 1a02 	vstr	s2, [r7, #8]
 8006034:	460b      	mov	r3, r1
 8006036:	603a      	str	r2, [r7, #0]
 8006038:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
		peri_s,
		mstr_tick_s,
		pri,
		nm)
 800603a:	697c      	ldr	r4, [r7, #20]
 800603c:	f107 0318 	add.w	r3, r7, #24
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f00c ff54 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006048:	f107 0218 	add.w	r2, r7, #24
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	4619      	mov	r1, r3
 8006050:	ed97 1a02 	vldr	s2, [r7, #8]
 8006054:	edd7 0a03 	vldr	s1, [r7, #12]
 8006058:	ed97 0a04 	vldr	s0, [r7, #16]
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fdd3 	bl	8005c08 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006062:	f107 0318 	add.w	r3, r7, #24
 8006066:	4618      	mov	r0, r3
 8006068:	f00c fdcc 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800606c:	4a08      	ldr	r2, [pc, #32]	; (8006090 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4a07      	ldr	r2, [pc, #28]	; (8006094 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>)
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
{
	enabled = true;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4618      	mov	r0, r3
 800608a:	3734      	adds	r7, #52	; 0x34
 800608c:	46bd      	mov	sp, r7
 800608e:	bd90      	pop	{r4, r7, pc}
 8006090:	08020240 	.word	0x08020240
 8006094:	20000a60 	.word	0x20000a60
 8006098:	20000a44 	.word	0x20000a44

0800609c <_ZN8TelemOut12taskFunctionEv>:

}

// Callback function to execute by master scheduler
bool TelemOut::taskFunction()
{
 800609c:	b580      	push	{r7, lr}
 800609e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	6018      	str	r0, [r3, #0]
	// Transmit all data out on usb port.
	if (enabled)
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8243 	beq.w	800653c <_ZN8TelemOut12taskFunctionEv+0x4a0>
	{
		// SOP
		std::string msg = "$";
 80060b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f00c fb2b 	bl	8012716 <_ZNSaIcEC1Ev>
 80060c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	49e7      	ldr	r1, [pc, #924]	; (8006468 <_ZN8TelemOut12taskFunctionEv+0x3cc>)
 80060ca:	4618      	mov	r0, r3
 80060cc:	f00c ff44 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f00c fb1f 	bl	8012718 <_ZNSaIcED1Ev>

		// Publish Raw IMU data.
		if (!pntr_imu_msg->locked)
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	7e9b      	ldrb	r3, [r3, #26]
 80060e2:	f083 0301 	eor.w	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 812d 	beq.w	8006348 <_ZN8TelemOut12taskFunctionEv+0x2ac>
		{
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	edd3 7a00 	vldr	s15, [r3]
 80060f8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80060fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006100:	4618      	mov	r0, r3
 8006102:	f7fa ff03 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
 8006106:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800610a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800610e:	4ad7      	ldr	r2, [pc, #860]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006110:	4618      	mov	r0, r3
 8006112:	f7fb fe5e 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006120:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8006124:	eeb0 0a67 	vmov.f32	s0, s15
 8006128:	4618      	mov	r0, r3
 800612a:	f7fa feef 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 800612e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006132:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8006136:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800613a:	4618      	mov	r0, r3
 800613c:	f7fb fe60 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006140:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006144:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8006148:	4ac8      	ldr	r2, [pc, #800]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 800614a:	4618      	mov	r0, r3
 800614c:	f7fb fe41 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->gz) + "," +
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	edd3 7a02 	vldr	s15, [r3, #8]
 800615a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	4618      	mov	r0, r3
 8006164:	f7fa fed2 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006168:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800616c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006170:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8006174:	4618      	mov	r0, r3
 8006176:	f7fb fe43 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->gz) + "," +
 800617a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800617e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8006182:	4aba      	ldr	r2, [pc, #744]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006184:	4618      	mov	r0, r3
 8006186:	f7fb fe24 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->ax) + "," +
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	edd3 7a03 	vldr	s15, [r3, #12]
 8006194:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006198:	eeb0 0a67 	vmov.f32	s0, s15
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa feb5 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->gz) + "," +
 80061a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80061a6:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80061aa:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fb fe26 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->ax) + "," +
 80061b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80061b8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80061bc:	4aab      	ldr	r2, [pc, #684]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fb fe07 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->ay) + "," +
 80061c4:	1d3b      	adds	r3, r7, #4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80061ce:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80061d2:	eeb0 0a67 	vmov.f32	s0, s15
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fa fe98 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->ax) + "," +
 80061dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80061e0:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80061e4:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fb fe09 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->ay) + "," +
 80061ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80061f2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80061f6:	4a9d      	ldr	r2, [pc, #628]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fb fdea 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->az) + "," +
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	edd3 7a05 	vldr	s15, [r3, #20]
 8006208:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800620c:	eeb0 0a67 	vmov.f32	s0, s15
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa fe7b 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->ay) + "," +
 8006216:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800621a:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800621e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8006222:	4618      	mov	r0, r3
 8006224:	f7fb fdec 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->az) + "," +
 8006228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800622c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006230:	4a8e      	ldr	r2, [pc, #568]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006232:	4618      	mov	r0, r3
 8006234:	f7fb fdcd 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->temp) + ",";
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	8b1b      	ldrh	r3, [r3, #24]
 8006240:	461a      	mov	r2, r3
 8006242:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa fe49 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
					std::to_string(pntr_imu_msg->az) + "," +
 800624e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006252:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8006256:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800625a:	4618      	mov	r0, r3
 800625c:	f7fb fdd0 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->temp) + ",";
 8006260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006264:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006268:	4a80      	ldr	r2, [pc, #512]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 800626a:	4618      	mov	r0, r3
 800626c:	f7fb fdb1 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006270:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006274:	f107 030c 	add.w	r3, r7, #12
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f00c fde4 	bl	8012e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8006280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006284:	4618      	mov	r0, r3
 8006286:	f00c fcbd 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800628a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800628e:	4618      	mov	r0, r3
 8006290:	f00c fcb8 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006294:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8006298:	4618      	mov	r0, r3
 800629a:	f00c fcb3 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->az) + "," +
 800629e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062a2:	4618      	mov	r0, r3
 80062a4:	f00c fcae 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062ac:	4618      	mov	r0, r3
 80062ae:	f00c fca9 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f00c fca4 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->ay) + "," +
 80062bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00c fc9f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f00c fc9a 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062d0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f00c fc95 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->ax) + "," +
 80062da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80062de:	4618      	mov	r0, r3
 80062e0:	f00c fc90 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f00c fc8b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80062f2:	4618      	mov	r0, r3
 80062f4:	f00c fc86 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->gz) + "," +
 80062f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f00c fc81 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006302:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006306:	4618      	mov	r0, r3
 8006308:	f00c fc7c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800630c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006310:	4618      	mov	r0, r3
 8006312:	f00c fc77 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006316:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800631a:	4618      	mov	r0, r3
 800631c:	f00c fc72 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	4618      	mov	r0, r3
 8006326:	f00c fc6d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800632a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800632e:	4618      	mov	r0, r3
 8006330:	f00c fc68 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 8006334:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006338:	4618      	mov	r0, r3
 800633a:	f00c fc63 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800633e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006342:	4618      	mov	r0, r3
 8006344:	f00c fc5e 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}

		// Publish Batt data.
		if (!pntr_batt_msg->locked)
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	7d1b      	ldrb	r3, [r3, #20]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80dc 	beq.w	8006514 <_ZN8TelemOut12taskFunctionEv+0x478>
		{
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	edd3 7a00 	vldr	s15, [r3]
 8006366:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa fdcc 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
 8006374:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8006378:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800637c:	4a3b      	ldr	r2, [pc, #236]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 800637e:	4618      	mov	r0, r3
 8006380:	f7fb fd27 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell2) + "," +
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	edd3 7a01 	vldr	s15, [r3, #4]
 800638e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8006392:	eeb0 0a67 	vmov.f32	s0, s15
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa fdb8 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 800639c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80063a0:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80063a4:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fb fd29 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell2) + "," +
 80063ae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80063b2:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 80063b6:	4a2d      	ldr	r2, [pc, #180]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fb fd0a 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell3) + "," +
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80063c8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80063cc:	eeb0 0a67 	vmov.f32	s0, s15
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa fd9b 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell2) + "," +
 80063d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80063da:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80063de:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fb fd0c 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell3) + "," +
 80063e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80063ec:	f507 7120 	add.w	r1, r7, #640	; 0x280
 80063f0:	4a1e      	ldr	r2, [pc, #120]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fb fced 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell4) + "," +
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8006402:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	4618      	mov	r0, r3
 800640c:	f7fa fd7e 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell3) + "," +
 8006410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006414:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8006418:	f507 711a 	add.w	r1, r7, #616	; 0x268
 800641c:	4618      	mov	r0, r3
 800641e:	f7fb fcef 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell4) + "," +
 8006422:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006426:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800642a:	4a10      	ldr	r2, [pc, #64]	; (800646c <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 800642c:	4618      	mov	r0, r3
 800642e:	f7fb fcd0 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->pack_volt) + "*";
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006438:	edd3 7a04 	vldr	s15, [r3, #16]
 800643c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8006440:	eeb0 0a67 	vmov.f32	s0, s15
 8006444:	4618      	mov	r0, r3
 8006446:	f7fa fd61 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell4) + "," +
 800644a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800644e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8006452:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8006456:	4618      	mov	r0, r3
 8006458:	f7fb fcd2 	bl	8001e00 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->pack_volt) + "*";
 800645c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006460:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8006464:	e004      	b.n	8006470 <_ZN8TelemOut12taskFunctionEv+0x3d4>
 8006466:	bf00      	nop
 8006468:	0801dd48 	.word	0x0801dd48
 800646c:	0801dd4c 	.word	0x0801dd4c
 8006470:	4a35      	ldr	r2, [pc, #212]	; (8006548 <_ZN8TelemOut12taskFunctionEv+0x4ac>)
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb fcad 	bl	8001dd2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006478:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f00c fce0 	bl	8012e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8006488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800648c:	4618      	mov	r0, r3
 800648e:	f00c fbb9 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006492:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006496:	4618      	mov	r0, r3
 8006498:	f00c fbb4 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800649c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80064a0:	4618      	mov	r0, r3
 80064a2:	f00c fbaf 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell4) + "," +
 80064a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80064aa:	4618      	mov	r0, r3
 80064ac:	f00c fbaa 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b4:	4618      	mov	r0, r3
 80064b6:	f00c fba5 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064ba:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80064be:	4618      	mov	r0, r3
 80064c0:	f00c fba0 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell3) + "," +
 80064c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80064c8:	4618      	mov	r0, r3
 80064ca:	f00c fb9b 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064ce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80064d2:	4618      	mov	r0, r3
 80064d4:	f00c fb96 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064d8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80064dc:	4618      	mov	r0, r3
 80064de:	f00c fb91 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell2) + "," +
 80064e2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80064e6:	4618      	mov	r0, r3
 80064e8:	f00c fb8c 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064ec:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f00c fb87 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064f6:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80064fa:	4618      	mov	r0, r3
 80064fc:	f00c fb82 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 8006500:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8006504:	4618      	mov	r0, r3
 8006506:	f00c fb7d 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800650a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800650e:	4618      	mov	r0, r3
 8006510:	f00c fb78 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}

		// EOP
		msg += "\n";
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	490c      	ldr	r1, [pc, #48]	; (800654c <_ZN8TelemOut12taskFunctionEv+0x4b0>)
 800651a:	4618      	mov	r0, r3
 800651c:	f00c fcbe 	bl	8012e9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>

		// Transmit the data.
		printf(msg.c_str());
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	4618      	mov	r0, r3
 8006526:	f00c fcbd 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800652a:	4603      	mov	r3, r0
 800652c:	4618      	mov	r0, r3
 800652e:	f00d fafb 	bl	8013b28 <iprintf>
		std::string msg = "$";
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	4618      	mov	r0, r3
 8006538:	f00c fb64 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 800653c:	bf00      	nop
 800653e:	4618      	mov	r0, r3
 8006540:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	0801dd50 	.word	0x0801dd50
 800654c:	0801dd54 	.word	0x0801dd54

08006550 <_ZN8TelemOut12consoleFuncaEv>:

// Callback functions to execute on console request.
bool TelemOut::consoleFunca()
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b0a6      	sub	sp, #152	; 0x98
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8006558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655c:	4618      	mov	r0, r3
 800655e:	f00c f8da 	bl	8012716 <_ZNSaIcEC1Ev>
 8006562:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006566:	f107 030c 	add.w	r3, r7, #12
 800656a:	4944      	ldr	r1, [pc, #272]	; (800667c <_ZN8TelemOut12consoleFuncaEv+0x12c>)
 800656c:	4618      	mov	r0, r3
 800656e:	f00c fcf3 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fd2a 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800657c:	f107 030c 	add.w	r3, r7, #12
 8006580:	4618      	mov	r0, r3
 8006582:	f00c fb3f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f00c f8c4 	bl	8012718 <_ZNSaIcED1Ev>
	println("Start or stop the telemetry output process running @ 100Hz.");
 8006590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006594:	4618      	mov	r0, r3
 8006596:	f00c f8be 	bl	8012716 <_ZNSaIcEC1Ev>
 800659a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800659e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065a2:	4937      	ldr	r1, [pc, #220]	; (8006680 <_ZN8TelemOut12consoleFuncaEv+0x130>)
 80065a4:	4618      	mov	r0, r3
 80065a6:	f00c fcd7 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fd0e 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80065b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065b8:	4618      	mov	r0, r3
 80065ba:	f00c fb23 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80065be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065c2:	4618      	mov	r0, r3
 80065c4:	f00c f8a8 	bl	8012718 <_ZNSaIcED1Ev>
	println("\tArgs");
 80065c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00c f8a2 	bl	8012716 <_ZNSaIcEC1Ev>
 80065d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80065d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065da:	492a      	ldr	r1, [pc, #168]	; (8006684 <_ZN8TelemOut12consoleFuncaEv+0x134>)
 80065dc:	4618      	mov	r0, r3
 80065de:	f00c fcbb 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fcf2 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80065ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065f0:	4618      	mov	r0, r3
 80065f2:	f00c fb07 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80065f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80065fa:	4618      	mov	r0, r3
 80065fc:	f00c f88c 	bl	8012718 <_ZNSaIcED1Ev>
	println("\t* on - Turn telemetry out on.");
 8006600:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006604:	4618      	mov	r0, r3
 8006606:	f00c f886 	bl	8012716 <_ZNSaIcEC1Ev>
 800660a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800660e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006612:	491d      	ldr	r1, [pc, #116]	; (8006688 <_ZN8TelemOut12consoleFuncaEv+0x138>)
 8006614:	4618      	mov	r0, r3
 8006616:	f00c fc9f 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800661a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fcd6 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006624:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006628:	4618      	mov	r0, r3
 800662a:	f00c faeb 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800662e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006632:	4618      	mov	r0, r3
 8006634:	f00c f870 	bl	8012718 <_ZNSaIcED1Ev>
	println("\t* off - Turn telemetry out off.");
 8006638:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800663c:	4618      	mov	r0, r3
 800663e:	f00c f86a 	bl	8012716 <_ZNSaIcEC1Ev>
 8006642:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8006646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800664a:	4910      	ldr	r1, [pc, #64]	; (800668c <_ZN8TelemOut12consoleFuncaEv+0x13c>)
 800664c:	4618      	mov	r0, r3
 800664e:	f00c fc83 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006652:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fcba 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800665c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006660:	4618      	mov	r0, r3
 8006662:	f00c facf 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006666:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800666a:	4618      	mov	r0, r3
 800666c:	f00c f854 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8006670:	2301      	movs	r3, #1
}
 8006672:	4618      	mov	r0, r3
 8006674:	3798      	adds	r7, #152	; 0x98
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	0801dd58 	.word	0x0801dd58
 8006680:	0801dd68 	.word	0x0801dd68
 8006684:	0801dda4 	.word	0x0801dda4
 8006688:	0801ddac 	.word	0x0801ddac
 800668c:	0801ddcc 	.word	0x0801ddcc

08006690 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
bool TelemOut::consoleFuncb(std::string& s)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	; 0x28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	// Check argument string.
	if (s == "on")
 800669a:	4920      	ldr	r1, [pc, #128]	; (800671c <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800669c:	6838      	ldr	r0, [r7, #0]
 800669e:	f7fb fb6d 	bl	8001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	{
		enabled = true;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80066b0:	e02f      	b.n	8006712 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>

	}else if (s == "off") {
 80066b2:	491b      	ldr	r1, [pc, #108]	; (8006720 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x90>)
 80066b4:	6838      	ldr	r0, [r7, #0]
 80066b6:	f7fb fb61 	bl	8001d7c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		enabled = false;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80066c8:	e023      	b.n	8006712 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	}else{
		println("Invalid parameter!");
 80066ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f00c f821 	bl	8012716 <_ZNSaIcEC1Ev>
 80066d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4911      	ldr	r1, [pc, #68]	; (8006724 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>)
 80066de:	4618      	mov	r0, r3
 80066e0:	f00c fc3a 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80066e4:	f107 030c 	add.w	r3, r7, #12
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fc71 	bl	8005fd0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80066ee:	f107 030c 	add.w	r3, r7, #12
 80066f2:	4618      	mov	r0, r3
 80066f4:	f00c fa86 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f00c f80b 	bl	8012718 <_ZNSaIcED1Ev>
		consoleFunca();
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3304      	adds	r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
		return false;
 800670e:	2300      	movs	r3, #0
 8006710:	e000      	b.n	8006714 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x84>
	}

	return true;
 8006712:	2301      	movs	r3, #1
}
 8006714:	4618      	mov	r0, r3
 8006716:	3728      	adds	r7, #40	; 0x28
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	0801ddf0 	.word	0x0801ddf0
 8006720:	0801ddf4 	.word	0x0801ddf4
 8006724:	0801ddf8 	.word	0x0801ddf8

08006728 <_Z41__static_initialization_and_destruction_0ii>:
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d126      	bne.n	8006786 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800673e:	4293      	cmp	r3, r2
 8006740:	d121      	bne.n	8006786 <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	4618      	mov	r0, r3
 8006748:	f00b ffe5 	bl	8012716 <_ZNSaIcEC1Ev>
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	461a      	mov	r2, r3
 8006752:	4916      	ldr	r1, [pc, #88]	; (80067ac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006754:	4816      	ldr	r0, [pc, #88]	; (80067b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006756:	f00c fbff 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4618      	mov	r0, r3
 8006760:	f00b ffda 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006764:	f107 030c 	add.w	r3, r7, #12
 8006768:	4618      	mov	r0, r3
 800676a:	f00b ffd4 	bl	8012716 <_ZNSaIcEC1Ev>
 800676e:	f107 030c 	add.w	r3, r7, #12
 8006772:	461a      	mov	r2, r3
 8006774:	490f      	ldr	r1, [pc, #60]	; (80067b4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006776:	4810      	ldr	r0, [pc, #64]	; (80067b8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006778:	f00c fbee 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	4618      	mov	r0, r3
 8006782:	f00b ffc9 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006792:	4293      	cmp	r3, r2
 8006794:	d105      	bne.n	80067a2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006796:	4808      	ldr	r0, [pc, #32]	; (80067b8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006798:	f00c fa34 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 800679c:	4804      	ldr	r0, [pc, #16]	; (80067b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800679e:	f00c fa31 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	0801de38 	.word	0x0801de38
 80067b0:	200006e0 	.word	0x200006e0
 80067b4:	0801de3c 	.word	0x0801de3c
 80067b8:	200006f8 	.word	0x200006f8

080067bc <_GLOBAL__sub_I__ZN8TelemOutC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
 80067c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067c4:	2001      	movs	r0, #1
 80067c6:	f7ff ffaf 	bl	8006728 <_Z41__static_initialization_and_destruction_0ii>
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_GLOBAL__sub_D__ZN8TelemOutC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067d4:	2000      	movs	r0, #0
 80067d6:	f7ff ffa7 	bl	8006728 <_Z41__static_initialization_and_destruction_0ii>
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f00c fb5d 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80067ea:	4604      	mov	r4, r0
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f00c fa17 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80067f2:	4603      	mov	r3, r0
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	4621      	mov	r1, r4
 80067fc:	480a      	ldr	r0, [pc, #40]	; (8006828 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80067fe:	f007 f8a8 	bl	800d952 <HAL_UART_Transmit>
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8006806:	f640 230d 	movw	r3, #2573	; 0xa0d
 800680a:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 800680c:	f107 010c 	add.w	r1, r7, #12
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
 8006814:	2202      	movs	r2, #2
 8006816:	4804      	ldr	r0, [pc, #16]	; (8006828 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8006818:	f007 f89b 	bl	800d952 <HAL_UART_Transmit>
 800681c:	4603      	mov	r3, r0
 800681e:	73fb      	strb	r3, [r7, #15]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	20000958 	.word	0x20000958

0800682c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f00c fb35 	bl	8012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800683a:	4604      	mov	r4, r0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f00c f9ef 	bl	8012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8006842:	4603      	mov	r3, r0
 8006844:	b29a      	uxth	r2, r3
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	4621      	mov	r1, r4
 800684c:	4804      	ldr	r0, [pc, #16]	; (8006860 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 800684e:	f007 f880 	bl	800d952 <HAL_UART_Transmit>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bd90      	pop	{r4, r7, pc}
 800685e:	bf00      	nop
 8006860:	20000958 	.word	0x20000958

08006864 <_ZL5helpav>:
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
	return true;
 8006868:	2301      	movs	r3, #1
}
 800686a:	4618      	mov	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	return true;
 800687c:	2301      	movs	r3, #1
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <_ZL5echoav>:
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 8006892:	f107 031c 	add.w	r3, r7, #28
 8006896:	4618      	mov	r0, r3
 8006898:	f00b ff3d 	bl	8012716 <_ZNSaIcEC1Ev>
 800689c:	f107 021c 	add.w	r2, r7, #28
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	490b      	ldr	r1, [pc, #44]	; (80068d0 <_ZL5echoav+0x44>)
 80068a4:	4618      	mov	r0, r3
 80068a6:	f00c fb57 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff95 	bl	80067dc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	4618      	mov	r0, r3
 80068b6:	f00c f9a5 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068ba:	f107 031c 	add.w	r3, r7, #28
 80068be:	4618      	mov	r0, r3
 80068c0:	f00b ff2a 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 80068c4:	2301      	movs	r3, #1
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0801efa0 	.word	0x0801efa0

080068d4 <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	println(s);
 80068dc:	f107 0308 	add.w	r3, r7, #8
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f00c fb04 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ff75 	bl	80067dc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4618      	mov	r0, r3
 80068f8:	f00c f984 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3720      	adds	r7, #32
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <_ZL6clearav>:
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 800690e:	f107 031c 	add.w	r3, r7, #28
 8006912:	4618      	mov	r0, r3
 8006914:	f00b feff 	bl	8012716 <_ZNSaIcEC1Ev>
 8006918:	f107 021c 	add.w	r2, r7, #28
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	490b      	ldr	r1, [pc, #44]	; (800694c <_ZL6clearav+0x44>)
 8006920:	4618      	mov	r0, r3
 8006922:	f00c fb19 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff ff7f 	bl	800682c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f00c f967 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006936:	f107 031c 	add.w	r3, r7, #28
 800693a:	4618      	mov	r0, r3
 800693c:	f00b feec 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8006940:	2301      	movs	r3, #1
}
 8006942:	4618      	mov	r0, r3
 8006944:	3720      	adds	r7, #32
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	0801efc8 	.word	0x0801efc8

08006950 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	; 0x28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 8006958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800695c:	4618      	mov	r0, r3
 800695e:	f00b feda 	bl	8012716 <_ZNSaIcEC1Ev>
 8006962:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	490c      	ldr	r1, [pc, #48]	; (800699c <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800696c:	4618      	mov	r0, r3
 800696e:	f00c faf3 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006972:	f107 030c 	add.w	r3, r7, #12
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff58 	bl	800682c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	4618      	mov	r0, r3
 8006982:	f00c f93f 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698a:	4618      	mov	r0, r3
 800698c:	f00b fec4 	bl	8012718 <_ZNSaIcED1Ev>
	return true;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3728      	adds	r7, #40	; 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	0801efc8 	.word	0x0801efc8

080069a0 <_ZL7bannerav>:
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
	println(wlcm);
 80069a6:	463b      	mov	r3, r7
 80069a8:	4908      	ldr	r1, [pc, #32]	; (80069cc <_ZL7bannerav+0x2c>)
 80069aa:	4618      	mov	r0, r3
 80069ac:	f00c faa0 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80069b0:	463b      	mov	r3, r7
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff ff12 	bl	80067dc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80069b8:	463b      	mov	r3, r7
 80069ba:	4618      	mov	r0, r3
 80069bc:	f00c f922 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80069c0:	2301      	movs	r3, #1
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000728 	.word	0x20000728

080069d0 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	println(wlcm);
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4909      	ldr	r1, [pc, #36]	; (8006a04 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 80069de:	4618      	mov	r0, r3
 80069e0:	f00c fa86 	bl	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fef7 	bl	80067dc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80069ee:	f107 0308 	add.w	r3, r7, #8
 80069f2:	4618      	mov	r0, r3
 80069f4:	f00c f906 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000728 	.word	0x20000728

08006a08 <_write>:
static void MX_TIM5_Init(void);
/* USER CODE BEGIN PFP */


// Printf() function calls will be serviced by USB interface.
extern "C" int _write(int file, char *ptr, int len) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)ptr, len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68b8      	ldr	r0, [r7, #8]
 8006a1c:	f00b f98a 	bl	8011d34 <CDC_Transmit_FS>
    return len;
 8006a20:	687b      	ldr	r3, [r7, #4]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b0da      	sub	sp, #360	; 0x168
 8006a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a32:	f001 fa5f 	bl	8007ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a36:	f000 f91b 	bl	8006c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8006a3a:	f000 fbf3 	bl	8007224 <_ZL11MX_DMA_Initv>
  MX_GPIO_Init();
 8006a3e:	f000 fc11 	bl	8007264 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8006a42:	f000 f99b 	bl	8006d7c <_ZL12MX_ADC1_Initv>
  MX_FMPI2C1_Init();
 8006a46:	f000 f9d7 	bl	8006df8 <_ZL15MX_FMPI2C1_Initv>
  MX_I2C3_Init();
 8006a4a:	f000 fa15 	bl	8006e78 <_ZL12MX_I2C3_Initv>
  MX_RTC_Init();
 8006a4e:	f000 fa47 	bl	8006ee0 <_ZL11MX_RTC_Initv>
  MX_TIM4_Init();
 8006a52:	f000 fa6f 	bl	8006f34 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 8006a56:	f000 fb89 	bl	800716c <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8006a5a:	f000 fbb5 	bl	80071c8 <_ZL19MX_USART3_UART_Initv>
  MX_USB_DEVICE_Init();
 8006a5e:	f00b f8ab 	bl	8011bb8 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8006a62:	f000 fb27 	bl	80070b4 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

  // Give the scheduler its timer object.
  scheduler.init(&htim5);					// Timer 5 setup to interrupt every .01ms, 100 ticks = 1ms.
 8006a66:	4974      	ldr	r1, [pc, #464]	; (8006c38 <main+0x20c>)
 8006a68:	4874      	ldr	r0, [pc, #464]	; (8006c3c <main+0x210>)
 8006a6a:	f000 fc70 	bl	800734e <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>

  // Adding LED Blink Task...
  BlinkTask blink(0.0f, 1.0f, .00001f, 0, "status_led");	// 1Hz
 8006a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a72:	4618      	mov	r0, r3
 8006a74:	f00b fe4f 	bl	8012716 <_ZNSaIcEC1Ev>
 8006a78:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006a7c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006a80:	496f      	ldr	r1, [pc, #444]	; (8006c40 <main+0x214>)
 8006a82:	4618      	mov	r0, r3
 8006a84:	f00c fa68 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006a88:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8006a8c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a90:	2100      	movs	r1, #0
 8006a92:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8006c44 <main+0x218>
 8006a96:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006a9a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8006c48 <main+0x21c>
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fc f81e 	bl	8002ae0 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006aa4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f00c f8ab 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f00b fe30 	bl	8012718 <_ZNSaIcED1Ev>
  scheduler.push_back( &blink );
 8006ab8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006abc:	4619      	mov	r1, r3
 8006abe:	485f      	ldr	r0, [pc, #380]	; (8006c3c <main+0x210>)
 8006ac0:	f000 fc53 	bl	800736a <_ZN10TaskMasterILi10EE9push_backEP4Task>

  // Adding BMI088 Driver Task...
  BMI088 bm(0.0f, 0.00125f, .00001f, 0, "imu");	// 800Hz
 8006ac4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f00b fe24 	bl	8012716 <_ZNSaIcEC1Ev>
 8006ace:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8006ad2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006ad6:	495d      	ldr	r1, [pc, #372]	; (8006c4c <main+0x220>)
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f00c fa3d 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006ade:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8006ae2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8006c44 <main+0x218>
 8006aec:	eddf 0a58 	vldr	s1, [pc, #352]	; 8006c50 <main+0x224>
 8006af0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8006c48 <main+0x21c>
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fa fa4f 	bl	8000f98 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006afa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006afe:	4618      	mov	r0, r3
 8006b00:	f00c f880 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f00b fe05 	bl	8012718 <_ZNSaIcED1Ev>
  if (!bm.initialize(&hfmpi2c1))
 8006b0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b12:	4950      	ldr	r1, [pc, #320]	; (8006c54 <main+0x228>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fa fd16 	bl	8001546 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <main+0x102>
  {
	  printf("Failed to init BMI088, verify its connected!\r\n");
 8006b26:	484c      	ldr	r0, [pc, #304]	; (8006c58 <main+0x22c>)
 8006b28:	f00d f884 	bl	8013c34 <puts>
 8006b2c:	e005      	b.n	8006b3a <main+0x10e>
  }else{
	  scheduler.push_back( &bm );
 8006b2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006b32:	4619      	mov	r1, r3
 8006b34:	4841      	ldr	r0, [pc, #260]	; (8006c3c <main+0x210>)
 8006b36:	f000 fc18 	bl	800736a <_ZN10TaskMasterILi10EE9push_backEP4Task>
  }

  // Adding Battery Monitoring Task...
  BattMon bmon(0.0f, 0.25f, .00001f, 0, "battmon");	// 4Hz
 8006b3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f00b fde9 	bl	8012716 <_ZNSaIcEC1Ev>
 8006b44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4c:	4943      	ldr	r1, [pc, #268]	; (8006c5c <main+0x230>)
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f00c fa02 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8006c44 <main+0x218>
 8006b62:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8006b66:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006c48 <main+0x21c>
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fb fb34 	bl	80021d8 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	4618      	mov	r0, r3
 8006b76:	f00c f845 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f00b fdca 	bl	8012718 <_ZNSaIcED1Ev>
  bmon.init(&hadc1);
 8006b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b88:	4935      	ldr	r1, [pc, #212]	; (8006c60 <main+0x234>)
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fb fb5a 	bl	8002244 <_ZN7BattMon4initEP17ADC_HandleTypeDef>
  scheduler.push_back( &bmon );
 8006b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b94:	4619      	mov	r1, r3
 8006b96:	4829      	ldr	r0, [pc, #164]	; (8006c3c <main+0x210>)
 8006b98:	f000 fbe7 	bl	800736a <_ZN10TaskMasterILi10EE9push_backEP4Task>

  // Adding Telemetry Out process...
  TelemOut to(0.0f, 0.01f, .00001f, 0, "telem_out");	// 100Hz
 8006b9c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f00b fdb8 	bl	8012716 <_ZNSaIcEC1Ev>
 8006ba6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8006baa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8006bae:	492d      	ldr	r1, [pc, #180]	; (8006c64 <main+0x238>)
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f00c f9d1 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006bb6:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8006bba:	1d3b      	adds	r3, r7, #4
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8006c44 <main+0x218>
 8006bc2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8006c68 <main+0x23c>
 8006bc6:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8006c48 <main+0x21c>
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fa28 	bl	8006020 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006bd0:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f00c f815 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bda:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8006bde:	4618      	mov	r0, r3
 8006be0:	f00b fd9a 	bl	8012718 <_ZNSaIcED1Ev>
  scheduler.push_back( &to );
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	4619      	mov	r1, r3
 8006be8:	4814      	ldr	r0, [pc, #80]	; (8006c3c <main+0x210>)
 8006bea:	f000 fbbe 	bl	800736a <_ZN10TaskMasterILi10EE9push_backEP4Task>

  scheduler.start();
 8006bee:	4813      	ldr	r0, [pc, #76]	; (8006c3c <main+0x210>)
 8006bf0:	f000 fbe4 	bl	80073bc <_ZN10TaskMasterILi10EE5startEv>

  // Singleton console object used in parallel with task scheduler. This allows console to restart scheduler if needed.
  // If you want to interact with scheduler apps inside the console, make sure you do cs.addCommand() before starting the console.
  cs.addCommandByTask(&blink);
 8006bf4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	481c      	ldr	r0, [pc, #112]	; (8006c6c <main+0x240>)
 8006bfc:	f7fd f857 	bl	8003cae <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bm);
 8006c00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c04:	4619      	mov	r1, r3
 8006c06:	4819      	ldr	r0, [pc, #100]	; (8006c6c <main+0x240>)
 8006c08:	f7fd f851 	bl	8003cae <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bmon);
 8006c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c10:	4619      	mov	r1, r3
 8006c12:	4816      	ldr	r0, [pc, #88]	; (8006c6c <main+0x240>)
 8006c14:	f7fd f84b 	bl	8003cae <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&to);
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4813      	ldr	r0, [pc, #76]	; (8006c6c <main+0x240>)
 8006c1e:	f7fd f846 	bl	8003cae <_ZN7Console16addCommandByTaskEP4Task>

  // This starts the console app.
  cs.start();
 8006c22:	4812      	ldr	r0, [pc, #72]	; (8006c6c <main+0x240>)
 8006c24:	f7fc fcf8 	bl	8003618 <_ZN7Console5startEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 8006c28:	4804      	ldr	r0, [pc, #16]	; (8006c3c <main+0x210>)
 8006c2a:	f000 fbd4 	bl	80073d6 <_ZN10TaskMasterILi10EE11runNextTaskEv>
	cs.loop();							// This allows the console app to check if the user has input any new commands.
 8006c2e:	480f      	ldr	r0, [pc, #60]	; (8006c6c <main+0x240>)
 8006c30:	f7fc fc34 	bl	800349c <_ZN7Console4loopEv>
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 8006c34:	e7f8      	b.n	8006c28 <main+0x1fc>
 8006c36:	bf00      	nop
 8006c38:	20000910 	.word	0x20000910
 8006c3c:	200006b0 	.word	0x200006b0
 8006c40:	0801efd0 	.word	0x0801efd0
 8006c44:	3727c5ac 	.word	0x3727c5ac
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	0801efdc 	.word	0x0801efdc
 8006c50:	3aa3d70a 	.word	0x3aa3d70a
 8006c54:	20000808 	.word	0x20000808
 8006c58:	0801efe0 	.word	0x0801efe0
 8006c5c:	0801f010 	.word	0x0801f010
 8006c60:	200007c0 	.word	0x200007c0
 8006c64:	0801f018 	.word	0x0801f018
 8006c68:	3c23d70a 	.word	0x3c23d70a
 8006c6c:	20000620 	.word	0x20000620

08006c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b094      	sub	sp, #80	; 0x50
 8006c74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c76:	f107 031c 	add.w	r3, r7, #28
 8006c7a:	2234      	movs	r2, #52	; 0x34
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00c fa36 	bl	80130f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8006c94:	2300      	movs	r3, #0
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <SystemClock_Config+0x104>)
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	4a35      	ldr	r2, [pc, #212]	; (8006d74 <SystemClock_Config+0x104>)
 8006c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ca4:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <SystemClock_Config+0x104>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	4b30      	ldr	r3, [pc, #192]	; (8006d78 <SystemClock_Config+0x108>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a2f      	ldr	r2, [pc, #188]	; (8006d78 <SystemClock_Config+0x108>)
 8006cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <SystemClock_Config+0x108>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8006ccc:	2309      	movs	r3, #9
 8006cce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cd4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ce6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8006ce8:	2308      	movs	r3, #8
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8006cec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006cf0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	4618      	mov	r0, r3
 8006d04:	f005 fb08 	bl	800c318 <HAL_RCC_OscConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <SystemClock_Config+0xac>
	{
	Error_Handler();
 8006d18:	f000 fb14 	bl	8007344 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006d1c:	f004 fcb6 	bl	800b68c <HAL_PWREx_EnableOverDrive>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bf14      	ite	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	2300      	moveq	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <SystemClock_Config+0xc4>
	{
	Error_Handler();
 8006d30:	f000 fb08 	bl	8007344 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d34:	230f      	movs	r3, #15
 8006d36:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006d44:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d4a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	2105      	movs	r1, #5
 8006d52:	4618      	mov	r0, r3
 8006d54:	f004 fcea 	bl	800b72c <HAL_RCC_ClockConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <SystemClock_Config+0xfc>
	{
	Error_Handler();
 8006d68:	f000 faec 	bl	8007344 <Error_Handler>
	}
}
 8006d6c:	bf00      	nop
 8006d6e:	3750      	adds	r7, #80	; 0x50
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40007000 	.word	0x40007000

08006d7c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 8006d80:	4b1a      	ldr	r3, [pc, #104]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <_ZL12MX_ADC1_Initv+0x74>)
 8006d84:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006d86:	4b19      	ldr	r3, [pc, #100]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006d88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d8c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006da0:	4b12      	ldr	r3, [pc, #72]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006db0:	4a10      	ldr	r2, [pc, #64]	; (8006df4 <_ZL12MX_ADC1_Initv+0x78>)
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dc8:	4b08      	ldr	r3, [pc, #32]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006dce:	4807      	ldr	r0, [pc, #28]	; (8006dec <_ZL12MX_ADC1_Initv+0x70>)
 8006dd0:	f001 f926 	bl	8008020 <HAL_ADC_Init>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf14      	ite	ne
 8006dda:	2301      	movne	r3, #1
 8006ddc:	2300      	moveq	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <_ZL12MX_ADC1_Initv+0x6c>
	{
	Error_Handler();
 8006de4:	f000 faae 	bl	8007344 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8006de8:	bf00      	nop
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	200007c0 	.word	0x200007c0
 8006df0:	40012000 	.word	0x40012000
 8006df4:	0f000001 	.word	0x0f000001

08006df8 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
	/* USER CODE END FMPI2C1_Init 0 */

	/* USER CODE BEGIN FMPI2C1_Init 1 */

	/* USER CODE END FMPI2C1_Init 1 */
	hfmpi2c1.Instance = FMPI2C1;
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <_ZL15MX_FMPI2C1_Initv+0x78>)
 8006e00:	601a      	str	r2, [r3, #0]
	hfmpi2c1.Init.Timing = 0x00401650;
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e04:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 8006e06:	605a      	str	r2, [r3, #4]
	hfmpi2c1.Init.OwnAddress1 = 0;
 8006e08:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	609a      	str	r2, [r3, #8]
	hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	60da      	str	r2, [r3, #12]
	hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8006e14:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
	hfmpi2c1.Init.OwnAddress2 = 0;
 8006e1a:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	615a      	str	r2, [r3, #20]
	hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8006e20:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]
	hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	61da      	str	r2, [r3, #28]
	hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	621a      	str	r2, [r3, #32]
	if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8006e32:	480e      	ldr	r0, [pc, #56]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e34:	f002 fa18 	bl	8009268 <HAL_FMPI2C_Init>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <_ZL15MX_FMPI2C1_Initv+0x54>
	{
	Error_Handler();
 8006e48:	f000 fa7c 	bl	8007344 <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <_ZL15MX_FMPI2C1_Initv+0x74>)
 8006e50:	f002 fef4 	bl	8009c3c <HAL_FMPI2CEx_ConfigAnalogFilter>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <_ZL15MX_FMPI2C1_Initv+0x70>
	{
	Error_Handler();
 8006e64:	f000 fa6e 	bl	8007344 <Error_Handler>
	}
	/* USER CODE BEGIN FMPI2C1_Init 2 */

	/* USER CODE END FMPI2C1_Init 2 */

}
 8006e68:	bf00      	nop
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000808 	.word	0x20000808
 8006e70:	40006000 	.word	0x40006000
 8006e74:	00401650 	.word	0x00401650

08006e78 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006e7c:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e7e:	4a16      	ldr	r2, [pc, #88]	; (8006ed8 <_ZL12MX_I2C3_Initv+0x60>)
 8006e80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <_ZL12MX_I2C3_Initv+0x64>)
 8006e86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006e88:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e94:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e9a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006eb4:	4807      	ldr	r0, [pc, #28]	; (8006ed4 <_ZL12MX_I2C3_Initv+0x5c>)
 8006eb6:	f003 f8d5 	bl	800a064 <HAL_I2C_Init>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8006eca:	f000 fa3b 	bl	8007344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000854 	.word	0x20000854
 8006ed8:	40005c00 	.word	0x40005c00
 8006edc:	000186a0 	.word	0x000186a0

08006ee0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8006ee4:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006ee6:	4a12      	ldr	r2, [pc, #72]	; (8006f30 <_ZL11MX_RTC_Initv+0x50>)
 8006ee8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006eea:	4b10      	ldr	r3, [pc, #64]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006ef2:	227f      	movs	r2, #127	; 0x7f
 8006ef4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006f0e:	4807      	ldr	r0, [pc, #28]	; (8006f2c <_ZL11MX_RTC_Initv+0x4c>)
 8006f10:	f005 fca0 	bl	800c854 <HAL_RTC_Init>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <_ZL11MX_RTC_Initv+0x48>
	{
	Error_Handler();
 8006f24:	f000 fa0e 	bl	8007344 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8006f28:	bf00      	nop
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200008a8 	.word	0x200008a8
 8006f30:	40002800 	.word	0x40002800

08006f34 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b08e      	sub	sp, #56	; 0x38
 8006f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	609a      	str	r2, [r3, #8]
 8006f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f48:	f107 0320 	add.w	r3, r7, #32
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	611a      	str	r2, [r3, #16]
 8006f60:	615a      	str	r2, [r3, #20]
 8006f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006f64:	4b51      	ldr	r3, [pc, #324]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f66:	4a52      	ldr	r2, [pc, #328]	; (80070b0 <_ZL12MX_TIM4_Initv+0x17c>)
 8006f68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 8006f6a:	4b50      	ldr	r3, [pc, #320]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f70:	4b4e      	ldr	r3, [pc, #312]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 22221;
 8006f76:	4b4d      	ldr	r3, [pc, #308]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f78:	f245 62cd 	movw	r2, #22221	; 0x56cd
 8006f7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f7e:	4b4b      	ldr	r3, [pc, #300]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f84:	4b49      	ldr	r3, [pc, #292]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006f8a:	4848      	ldr	r0, [pc, #288]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006f8c:	f005 fd47 	bl	800ca1e <HAL_TIM_Base_Init>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8006fa0:	f000 f9d0 	bl	8007344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fae:	4619      	mov	r1, r3
 8006fb0:	483e      	ldr	r0, [pc, #248]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006fb2:	f006 f817 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8006fc6:	f000 f9bd 	bl	8007344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006fca:	4838      	ldr	r0, [pc, #224]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006fcc:	f005 fde6 	bl	800cb9c <HAL_TIM_PWM_Init>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8006fe0:	f000 f9b0 	bl	8007344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006fec:	f107 0320 	add.w	r3, r7, #32
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	482e      	ldr	r0, [pc, #184]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8006ff4:	f006 fbd0 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8007008:	f000 f99c 	bl	8007344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800700c:	2360      	movs	r3, #96	; 0x60
 800700e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8007010:	f242 7310 	movw	r3, #10000	; 0x2710
 8007014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	2200      	movs	r2, #0
 8007022:	4619      	mov	r1, r3
 8007024:	4821      	ldr	r0, [pc, #132]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8007026:	f005 ff1b 	bl	800ce60 <HAL_TIM_PWM_ConfigChannel>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf14      	ite	ne
 8007030:	2301      	movne	r3, #1
 8007032:	2300      	moveq	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800703a:	f000 f983 	bl	8007344 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	2204      	movs	r2, #4
 8007042:	4619      	mov	r1, r3
 8007044:	4819      	ldr	r0, [pc, #100]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8007046:	f005 ff0b 	bl	800ce60 <HAL_TIM_PWM_ConfigChannel>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	bf14      	ite	ne
 8007050:	2301      	movne	r3, #1
 8007052:	2300      	moveq	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 800705a:	f000 f973 	bl	8007344 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	2208      	movs	r2, #8
 8007062:	4619      	mov	r1, r3
 8007064:	4811      	ldr	r0, [pc, #68]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8007066:	f005 fefb 	bl	800ce60 <HAL_TIM_PWM_ConfigChannel>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <_ZL12MX_TIM4_Initv+0x14a>
  {
    Error_Handler();
 800707a:	f000 f963 	bl	8007344 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800707e:	1d3b      	adds	r3, r7, #4
 8007080:	220c      	movs	r2, #12
 8007082:	4619      	mov	r1, r3
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 8007086:	f005 feeb 	bl	800ce60 <HAL_TIM_PWM_ConfigChannel>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	bf14      	ite	ne
 8007090:	2301      	movne	r3, #1
 8007092:	2300      	moveq	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 800709a:	f000 f953 	bl	8007344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800709e:	4803      	ldr	r0, [pc, #12]	; (80070ac <_ZL12MX_TIM4_Initv+0x178>)
 80070a0:	f000 fc9c 	bl	80079dc <HAL_TIM_MspPostInit>

}
 80070a4:	bf00      	nop
 80070a6:	3738      	adds	r7, #56	; 0x38
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200008c8 	.word	0x200008c8
 80070b0:	40000800 	.word	0x40000800

080070b4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070c8:	463b      	mov	r3, r7
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80070d0:	4b24      	ldr	r3, [pc, #144]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070d2:	4a25      	ldr	r2, [pc, #148]	; (8007168 <_ZL12MX_TIM5_Initv+0xb4>)
 80070d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8;
 80070d6:	4b23      	ldr	r3, [pc, #140]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070d8:	2208      	movs	r2, #8
 80070da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070dc:	4b21      	ldr	r3, [pc, #132]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070e4:	2263      	movs	r2, #99	; 0x63
 80070e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070e8:	4b1e      	ldr	r3, [pc, #120]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070ee:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80070f4:	481b      	ldr	r0, [pc, #108]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 80070f6:	f005 fc92 	bl	800ca1e <HAL_TIM_Base_Init>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <_ZL12MX_TIM5_Initv+0x5a>
  {
    Error_Handler();
 800710a:	f000 f91b 	bl	8007344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800710e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4619      	mov	r1, r3
 800711a:	4812      	ldr	r0, [pc, #72]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 800711c:	f005 ff62 	bl	800cfe4 <HAL_TIM_ConfigClockSource>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <_ZL12MX_TIM5_Initv+0x80>
  {
    Error_Handler();
 8007130:	f000 f908 	bl	8007344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007134:	2300      	movs	r3, #0
 8007136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007138:	2300      	movs	r3, #0
 800713a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800713c:	463b      	mov	r3, r7
 800713e:	4619      	mov	r1, r3
 8007140:	4808      	ldr	r0, [pc, #32]	; (8007164 <_ZL12MX_TIM5_Initv+0xb0>)
 8007142:	f006 fb29 	bl	800d798 <HAL_TIMEx_MasterConfigSynchronization>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <_ZL12MX_TIM5_Initv+0xa6>
  {
    Error_Handler();
 8007156:	f000 f8f5 	bl	8007344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000910 	.word	0x20000910
 8007168:	40000c00 	.word	0x40000c00

0800716c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007170:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007172:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8007174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800717c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007186:	2200      	movs	r2, #0
 8007188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800718c:	2200      	movs	r2, #0
 800718e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007192:	220c      	movs	r2, #12
 8007194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007198:	2200      	movs	r2, #0
 800719a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800719c:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800719e:	2200      	movs	r2, #0
 80071a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80071a2:	4807      	ldr	r0, [pc, #28]	; (80071c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80071a4:	f006 fb88 	bl	800d8b8 <HAL_UART_Init>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80071b8:	f000 f8c4 	bl	8007344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80071bc:	bf00      	nop
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000958 	.word	0x20000958
 80071c4:	40011000 	.word	0x40011000

080071c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071ce:	4a14      	ldr	r2, [pc, #80]	; (8007220 <_ZL19MX_USART3_UART_Initv+0x58>)
 80071d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80071d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071dc:	2200      	movs	r2, #0
 80071de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071ee:	220c      	movs	r2, #12
 80071f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80071fe:	4807      	ldr	r0, [pc, #28]	; (800721c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007200:	f006 fb5a 	bl	800d8b8 <HAL_UART_Init>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf14      	ite	ne
 800720a:	2301      	movne	r3, #1
 800720c:	2300      	moveq	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8007214:	f000 f896 	bl	8007344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007218:	bf00      	nop
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000099c 	.word	0x2000099c
 8007220:	40004800 	.word	0x40004800

08007224 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <_ZL11MX_DMA_Initv+0x3c>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	4a0b      	ldr	r2, [pc, #44]	; (8007260 <_ZL11MX_DMA_Initv+0x3c>)
 8007234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007238:	6313      	str	r3, [r2, #48]	; 0x30
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <_ZL11MX_DMA_Initv+0x3c>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	203a      	movs	r0, #58	; 0x3a
 800724c:	f001 fbd3 	bl	80089f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007250:	203a      	movs	r0, #58	; 0x3a
 8007252:	f001 fbec 	bl	8008a2e <HAL_NVIC_EnableIRQ>

}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40023800 	.word	0x40023800

08007264 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	605a      	str	r2, [r3, #4]
 8007274:	609a      	str	r2, [r3, #8]
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	4b2f      	ldr	r3, [pc, #188]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	4a2e      	ldr	r2, [pc, #184]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 8007284:	f043 0304 	orr.w	r3, r3, #4
 8007288:	6313      	str	r3, [r2, #48]	; 0x30
 800728a:	4b2c      	ldr	r3, [pc, #176]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b28      	ldr	r3, [pc, #160]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	4a27      	ldr	r2, [pc, #156]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	6313      	str	r3, [r2, #48]	; 0x30
 80072a6:	4b25      	ldr	r3, [pc, #148]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	4b21      	ldr	r3, [pc, #132]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	4a20      	ldr	r2, [pc, #128]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	6313      	str	r3, [r2, #48]	; 0x30
 80072c2:	4b1e      	ldr	r3, [pc, #120]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	4b1a      	ldr	r3, [pc, #104]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	4a19      	ldr	r2, [pc, #100]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	6313      	str	r3, [r2, #48]	; 0x30
 80072de:	4b17      	ldr	r3, [pc, #92]	; (800733c <_ZL12MX_GPIO_Initv+0xd8>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_LED_Pin|USR_LED_Pin, GPIO_PIN_RESET);
 80072ea:	2200      	movs	r2, #0
 80072ec:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80072f0:	4813      	ldr	r0, [pc, #76]	; (8007340 <_ZL12MX_GPIO_Initv+0xdc>)
 80072f2:	f002 fe83 	bl	8009ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 80072f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fc:	2301      	movs	r3, #1
 80072fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007304:	2300      	movs	r3, #0
 8007306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	4619      	mov	r1, r3
 800730e:	480c      	ldr	r0, [pc, #48]	; (8007340 <_ZL12MX_GPIO_Initv+0xdc>)
 8007310:	f002 fce0 	bl	8009cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8007314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800731a:	2301      	movs	r3, #1
 800731c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007322:	2302      	movs	r3, #2
 8007324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8007326:	f107 0314 	add.w	r3, r7, #20
 800732a:	4619      	mov	r1, r3
 800732c:	4804      	ldr	r0, [pc, #16]	; (8007340 <_ZL12MX_GPIO_Initv+0xdc>)
 800732e:	f002 fcd1 	bl	8009cd4 <HAL_GPIO_Init>

}
 8007332:	bf00      	nop
 8007334:	3728      	adds	r7, #40	; 0x28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	40020400 	.word	0x40020400

08007344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007348:	b672      	cpsid	i
}
 800734a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800734c:	e7fe      	b.n	800734c <Error_Handler+0x8>

0800734e <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>:
void TaskMaster<N>::init(TIM_HandleTypeDef* htim)
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
	_timer_inst = htim;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <_ZN10TaskMasterILi10EE9push_backEP4Task>:
	}
}

// Adding and removing tasks.
template <int N>
bool TaskMaster<N>::push_back(Task* new_task)
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
{
	for(int i = 0; i < N; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b09      	cmp	r3, #9
 800737c:	dc17      	bgt.n	80073ae <_ZN10TaskMasterILi10EE9push_backEP4Task+0x44>
	{
		// If task pointer has not been assigned, lets use that one before trying to dereference a nullptr.
		if (_taskList[i] == nullptr)
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x3c>
		{
			_taskList[i] = new_task;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	605a      	str	r2, [r3, #4]
			_openTasks--;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
			return true;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e004      	b.n	80073b0 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x46>
	for(int i = 0; i < N; i++)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e7e4      	b.n	8007378 <_ZN10TaskMasterILi10EE9push_backEP4Task+0xe>
		}

	}

	// All tasks are occupied, increase number of allowable tasks in task_constructor.
	return false;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <_ZN10TaskMasterILi10EE5startEv>:
void TaskMaster<N>::start()
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(_timer_inst);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	4618      	mov	r0, r3
 80073ca:	f005 fb77 	bl	800cabc <HAL_TIM_Base_Start_IT>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <_ZN10TaskMasterILi10EE11runNextTaskEv>:
void TaskMaster<N>::runNextTask()
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < N; i++)
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	dc5b      	bgt.n	80074a0 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xca>
		if (_taskList[i] == nullptr) continue;
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04f      	beq.n	8007496 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc0>
		if (_taskList[i]->getState() == 1 )
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe fc9b 	bl	8005d3c <_ZN4Task8getStateEv>
 8007406:	4603      	mov	r3, r0
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d040      	beq.n	8007498 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
			_taskList[i]->setState(2);							// Mark task as running.
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fc96 	bl	8005d54 <_ZN4Task8setStateEi>
			_taskList[i]->taskFunction();						// Run the overloaded task function.
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4608      	mov	r0, r1
 8007442:	4798      	blx	r3
			_taskList[i]->setState(0);							// Mark as idle.
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fc7f 	bl	8005d54 <_ZN4Task8setStateEi>
			if (_taskList[i]->getPeriod() == 0)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fc9f 	bl	8005da4 <_ZN4Task9getPeriodEv>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	bf0c      	ite	eq
 800746c:	2301      	moveq	r3, #1
 800746e:	2300      	movne	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
				_taskList[i]->setState(-1);					// Mark task as dead.
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f04f 31ff 	mov.w	r1, #4294967295
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fc65 	bl	8005d54 <_ZN4Task8setStateEi>
				_openTasks++;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e000      	b.n	8007498 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
		if (_taskList[i] == nullptr) continue;
 8007496:	bf00      	nop
	for(int i = 0; i < N; i++)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e7a0      	b.n	80073e2 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc>
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b0a0      	sub	sp, #128	; 0x80
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f040 80a0 	bne.w	80075fa <_Z41__static_initialization_and_destruction_0ii+0x152>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074c0:	4293      	cmp	r3, r2
 80074c2:	f040 809a 	bne.w	80075fa <_Z41__static_initialization_and_destruction_0ii+0x152>
const std::string cursor = "> ";
 80074c6:	f107 0308 	add.w	r3, r7, #8
 80074ca:	4618      	mov	r0, r3
 80074cc:	f00b f923 	bl	8012716 <_ZNSaIcEC1Ev>
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	461a      	mov	r2, r3
 80074d6:	4958      	ldr	r1, [pc, #352]	; (8007638 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 80074d8:	4858      	ldr	r0, [pc, #352]	; (800763c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 80074da:	f00b fd3d 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	4618      	mov	r0, r3
 80074e4:	f00b f918 	bl	8012718 <_ZNSaIcED1Ev>
const std::string wlcm =
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	4618      	mov	r0, r3
 80074ee:	f00b f912 	bl	8012716 <_ZNSaIcEC1Ev>
 80074f2:	f107 030c 	add.w	r3, r7, #12
 80074f6:	461a      	mov	r2, r3
 80074f8:	4951      	ldr	r1, [pc, #324]	; (8007640 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80074fa:	4852      	ldr	r0, [pc, #328]	; (8007644 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80074fc:	f00b fd2c 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f00b f907 	bl	8012718 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 800750a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800750e:	4618      	mov	r0, r3
 8007510:	f00b f901 	bl	8012716 <_ZNSaIcEC1Ev>
 8007514:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007518:	f107 0310 	add.w	r3, r7, #16
 800751c:	494a      	ldr	r1, [pc, #296]	; (8007648 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 800751e:	4618      	mov	r0, r3
 8007520:	f00b fd1a 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007524:	f107 0110 	add.w	r1, r7, #16
 8007528:	4b48      	ldr	r3, [pc, #288]	; (800764c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800752a:	4a49      	ldr	r2, [pc, #292]	; (8007650 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800752c:	4849      	ldr	r0, [pc, #292]	; (8007654 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800752e:	f7fb fb71 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	4618      	mov	r0, r3
 8007538:	f00b fb64 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800753c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007540:	4618      	mov	r0, r3
 8007542:	f00b f8e9 	bl	8012718 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 8007546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800754a:	4618      	mov	r0, r3
 800754c:	f00b f8e3 	bl	8012716 <_ZNSaIcEC1Ev>
 8007550:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007558:	493f      	ldr	r1, [pc, #252]	; (8007658 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800755a:	4618      	mov	r0, r3
 800755c:	f00b fcfc 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007560:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007564:	4b3d      	ldr	r3, [pc, #244]	; (800765c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8007566:	4a3e      	ldr	r2, [pc, #248]	; (8007660 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8007568:	483e      	ldr	r0, [pc, #248]	; (8007664 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800756a:	f7fb fb53 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 800756e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007572:	4618      	mov	r0, r3
 8007574:	f00b fb46 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800757c:	4618      	mov	r0, r3
 800757e:	f00b f8cb 	bl	8012718 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 8007582:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007586:	4618      	mov	r0, r3
 8007588:	f00b f8c5 	bl	8012716 <_ZNSaIcEC1Ev>
 800758c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007590:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007594:	4934      	ldr	r1, [pc, #208]	; (8007668 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8007596:	4618      	mov	r0, r3
 8007598:	f00b fcde 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800759c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80075a0:	4b32      	ldr	r3, [pc, #200]	; (800766c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80075a2:	4a33      	ldr	r2, [pc, #204]	; (8007670 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80075a4:	4833      	ldr	r0, [pc, #204]	; (8007674 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80075a6:	f7fb fb35 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80075aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80075ae:	4618      	mov	r0, r3
 80075b0:	f00b fb28 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80075b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80075b8:	4618      	mov	r0, r3
 80075ba:	f00b f8ad 	bl	8012718 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 80075be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075c2:	4618      	mov	r0, r3
 80075c4:	f00b f8a7 	bl	8012716 <_ZNSaIcEC1Ev>
 80075c8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80075cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80075d0:	4929      	ldr	r1, [pc, #164]	; (8007678 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80075d2:	4618      	mov	r0, r3
 80075d4:	f00b fcc0 	bl	8012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80075d8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80075dc:	4b27      	ldr	r3, [pc, #156]	; (800767c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80075de:	4a28      	ldr	r2, [pc, #160]	; (8007680 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80075e0:	4828      	ldr	r0, [pc, #160]	; (8007684 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80075e2:	f7fb fb17 	bl	8002c14 <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80075e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80075ea:	4618      	mov	r0, r3
 80075ec:	f00b fb0a 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80075f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075f4:	4618      	mov	r0, r3
 80075f6:	f00b f88f 	bl	8012718 <_ZNSaIcED1Ev>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d116      	bne.n	800762e <_Z41__static_initialization_and_destruction_0ii+0x186>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007606:	4293      	cmp	r3, r2
 8007608:	d111      	bne.n	800762e <_Z41__static_initialization_and_destruction_0ii+0x186>
 800760a:	481e      	ldr	r0, [pc, #120]	; (8007684 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800760c:	f7fb fb1f 	bl	8002c4e <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8007610:	4818      	ldr	r0, [pc, #96]	; (8007674 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8007612:	f7fb fb1c 	bl	8002c4e <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 8007616:	4813      	ldr	r0, [pc, #76]	; (8007664 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8007618:	f7fb fb19 	bl	8002c4e <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 800761c:	480d      	ldr	r0, [pc, #52]	; (8007654 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800761e:	f7fb fb16 	bl	8002c4e <_ZN7commandD1Ev>
const std::string wlcm =
 8007622:	4808      	ldr	r0, [pc, #32]	; (8007644 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8007624:	f00b faee 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800762a:	f00b faeb 	bl	8012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800762e:	bf00      	nop
 8007630:	3780      	adds	r7, #128	; 0x80
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	0801f024 	.word	0x0801f024
 800763c:	20000710 	.word	0x20000710
 8007640:	0801f028 	.word	0x0801f028
 8007644:	20000728 	.word	0x20000728
 8007648:	08020188 	.word	0x08020188
 800764c:	08006875 	.word	0x08006875
 8007650:	08006865 	.word	0x08006865
 8007654:	20000740 	.word	0x20000740
 8007658:	08020190 	.word	0x08020190
 800765c:	080068d5 	.word	0x080068d5
 8007660:	0800688d 	.word	0x0800688d
 8007664:	20000760 	.word	0x20000760
 8007668:	08020198 	.word	0x08020198
 800766c:	08006951 	.word	0x08006951
 8007670:	08006909 	.word	0x08006909
 8007674:	20000780 	.word	0x20000780
 8007678:	080201a0 	.word	0x080201a0
 800767c:	080069d1 	.word	0x080069d1
 8007680:	080069a1 	.word	0x080069a1
 8007684:	200007a0 	.word	0x200007a0

08007688 <_GLOBAL__sub_I_hadc1>:
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
 800768c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007690:	2001      	movs	r0, #1
 8007692:	f7ff ff09 	bl	80074a8 <_Z41__static_initialization_and_destruction_0ii>
 8007696:	bd80      	pop	{r7, pc}

08007698 <_GLOBAL__sub_D_hadc1>:
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
 800769c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076a0:	2000      	movs	r0, #0
 80076a2:	f7ff ff01 	bl	80074a8 <_Z41__static_initialization_and_destruction_0ii>
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <HAL_MspInit+0x4c>)
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <HAL_MspInit+0x4c>)
 80076b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076bc:	6453      	str	r3, [r2, #68]	; 0x44
 80076be:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <HAL_MspInit+0x4c>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076c6:	607b      	str	r3, [r7, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <HAL_MspInit+0x4c>)
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <HAL_MspInit+0x4c>)
 80076d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d8:	6413      	str	r3, [r2, #64]	; 0x40
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_MspInit+0x4c>)
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40023800 	.word	0x40023800

080076f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007700:	f107 0314 	add.w	r3, r7, #20
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a17      	ldr	r2, [pc, #92]	; (8007774 <HAL_ADC_MspInit+0x7c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d127      	bne.n	800776a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <HAL_ADC_MspInit+0x80>)
 8007720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007722:	4a15      	ldr	r2, [pc, #84]	; (8007778 <HAL_ADC_MspInit+0x80>)
 8007724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007728:	6453      	str	r3, [r2, #68]	; 0x44
 800772a:	4b13      	ldr	r3, [pc, #76]	; (8007778 <HAL_ADC_MspInit+0x80>)
 800772c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <HAL_ADC_MspInit+0x80>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a0e      	ldr	r2, [pc, #56]	; (8007778 <HAL_ADC_MspInit+0x80>)
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <HAL_ADC_MspInit+0x80>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007752:	23f0      	movs	r3, #240	; 0xf0
 8007754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007756:	2303      	movs	r3, #3
 8007758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800775e:	f107 0314 	add.w	r3, r7, #20
 8007762:	4619      	mov	r1, r3
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <HAL_ADC_MspInit+0x84>)
 8007766:	f002 fab5 	bl	8009cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800776a:	bf00      	nop
 800776c:	3728      	adds	r7, #40	; 0x28
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	40012000 	.word	0x40012000
 8007778:	40023800 	.word	0x40023800
 800777c:	40020000 	.word	0x40020000

08007780 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b0a0      	sub	sp, #128	; 0x80
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	609a      	str	r2, [r3, #8]
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007798:	f107 0310 	add.w	r3, r7, #16
 800779c:	225c      	movs	r2, #92	; 0x5c
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f00b fca5 	bl	80130f0 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a20      	ldr	r2, [pc, #128]	; (800782c <HAL_FMPI2C_MspInit+0xac>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d139      	bne.n	8007824 <HAL_FMPI2C_MspInit+0xa4>
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80077b0:	2380      	movs	r3, #128	; 0x80
 80077b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80077b4:	2300      	movs	r3, #0
 80077b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80077b8:	f107 0310 	add.w	r3, r7, #16
 80077bc:	4618      	mov	r0, r3
 80077be:	f004 f8cf 	bl	800b960 <HAL_RCCEx_PeriphCLKConfig>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 80077c8:	f7ff fdbc 	bl	8007344 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 80077d6:	f043 0304 	orr.w	r3, r3, #4
 80077da:	6313      	str	r3, [r2, #48]	; 0x30
 80077dc:	4b14      	ldr	r3, [pc, #80]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80077e8:	23c0      	movs	r3, #192	; 0xc0
 80077ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077ec:	2312      	movs	r3, #18
 80077ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f4:	2303      	movs	r3, #3
 80077f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80077f8:	2304      	movs	r3, #4
 80077fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007800:	4619      	mov	r1, r3
 8007802:	480c      	ldr	r0, [pc, #48]	; (8007834 <HAL_FMPI2C_MspInit+0xb4>)
 8007804:	f002 fa66 	bl	8009cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8007808:	2300      	movs	r3, #0
 800780a:	60bb      	str	r3, [r7, #8]
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	4a07      	ldr	r2, [pc, #28]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 8007812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007816:	6413      	str	r3, [r2, #64]	; 0x40
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <HAL_FMPI2C_MspInit+0xb0>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8007824:	bf00      	nop
 8007826:	3780      	adds	r7, #128	; 0x80
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40006000 	.word	0x40006000
 8007830:	40023800 	.word	0x40023800
 8007834:	40020800 	.word	0x40020800

08007838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	605a      	str	r2, [r3, #4]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a29      	ldr	r2, [pc, #164]	; (80078fc <HAL_I2C_MspInit+0xc4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d14b      	bne.n	80078f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	4b28      	ldr	r3, [pc, #160]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	4a27      	ldr	r2, [pc, #156]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 8007864:	f043 0304 	orr.w	r3, r3, #4
 8007868:	6313      	str	r3, [r2, #48]	; 0x30
 800786a:	4b25      	ldr	r3, [pc, #148]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	4b21      	ldr	r3, [pc, #132]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	4a20      	ldr	r2, [pc, #128]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	6313      	str	r3, [r2, #48]	; 0x30
 8007886:	4b1e      	ldr	r3, [pc, #120]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007898:	2312      	movs	r3, #18
 800789a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a0:	2303      	movs	r3, #3
 80078a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80078a4:	2304      	movs	r3, #4
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	4619      	mov	r1, r3
 80078ae:	4815      	ldr	r0, [pc, #84]	; (8007904 <HAL_I2C_MspInit+0xcc>)
 80078b0:	f002 fa10 	bl	8009cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80078b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078ba:	2312      	movs	r3, #18
 80078bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c2:	2303      	movs	r3, #3
 80078c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80078c6:	2304      	movs	r3, #4
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	4619      	mov	r1, r3
 80078d0:	480d      	ldr	r0, [pc, #52]	; (8007908 <HAL_I2C_MspInit+0xd0>)
 80078d2:	f002 f9ff 	bl	8009cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	4b09      	ldr	r3, [pc, #36]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	4a08      	ldr	r2, [pc, #32]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 80078e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078e4:	6413      	str	r3, [r2, #64]	; 0x40
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <HAL_I2C_MspInit+0xc8>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80078f2:	bf00      	nop
 80078f4:	3728      	adds	r7, #40	; 0x28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40005c00 	.word	0x40005c00
 8007900:	40023800 	.word	0x40023800
 8007904:	40020800 	.word	0x40020800
 8007908:	40020000 	.word	0x40020000

0800790c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b09a      	sub	sp, #104	; 0x68
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	225c      	movs	r2, #92	; 0x5c
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f00b fbe7 	bl	80130f0 <memset>
  if(hrtc->Instance==RTC)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <HAL_RTC_MspInit+0x4c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d111      	bne.n	8007950 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800792c:	2320      	movs	r3, #32
 800792e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007934:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	4618      	mov	r0, r3
 800793c:	f004 f810 	bl	800b960 <HAL_RCCEx_PeriphCLKConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007946:	f7ff fcfd 	bl	8007344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <HAL_RTC_MspInit+0x50>)
 800794c:	2201      	movs	r2, #1
 800794e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007950:	bf00      	nop
 8007952:	3768      	adds	r7, #104	; 0x68
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	40002800 	.word	0x40002800
 800795c:	42470e3c 	.word	0x42470e3c

08007960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <HAL_TIM_Base_MspInit+0x70>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10e      	bne.n	8007990 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	6413      	str	r3, [r2, #64]	; 0x40
 8007982:	4b14      	ldr	r3, [pc, #80]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800798e:	e01a      	b.n	80079c6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a10      	ldr	r2, [pc, #64]	; (80079d8 <HAL_TIM_Base_MspInit+0x78>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d115      	bne.n	80079c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 80079a4:	f043 0308 	orr.w	r3, r3, #8
 80079a8:	6413      	str	r3, [r2, #64]	; 0x40
 80079aa:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <HAL_TIM_Base_MspInit+0x74>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80079b6:	2200      	movs	r2, #0
 80079b8:	2100      	movs	r1, #0
 80079ba:	2032      	movs	r0, #50	; 0x32
 80079bc:	f001 f81b 	bl	80089f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80079c0:	2032      	movs	r0, #50	; 0x32
 80079c2:	f001 f834 	bl	8008a2e <HAL_NVIC_EnableIRQ>
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40000800 	.word	0x40000800
 80079d4:	40023800 	.word	0x40023800
 80079d8:	40000c00 	.word	0x40000c00

080079dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <HAL_TIM_MspPostInit+0x68>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d11e      	bne.n	8007a3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <HAL_TIM_MspPostInit+0x6c>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <HAL_TIM_MspPostInit+0x6c>)
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <HAL_TIM_MspPostInit+0x6c>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	60bb      	str	r3, [r7, #8]
 8007a18:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007a1a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a20:	2302      	movs	r3, #2
 8007a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	4619      	mov	r1, r3
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <HAL_TIM_MspPostInit+0x70>)
 8007a38:	f002 f94c 	bl	8009cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007a3c:	bf00      	nop
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020400 	.word	0x40020400

08007a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08c      	sub	sp, #48	; 0x30
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a58:	f107 031c 	add.w	r3, r7, #28
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	605a      	str	r2, [r3, #4]
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	60da      	str	r2, [r3, #12]
 8007a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a5d      	ldr	r2, [pc, #372]	; (8007be4 <HAL_UART_MspInit+0x194>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d163      	bne.n	8007b3a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	4b5c      	ldr	r3, [pc, #368]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	4a5b      	ldr	r2, [pc, #364]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007a7c:	f043 0310 	orr.w	r3, r3, #16
 8007a80:	6453      	str	r3, [r2, #68]	; 0x44
 8007a82:	4b59      	ldr	r3, [pc, #356]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	4b55      	ldr	r3, [pc, #340]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	4a54      	ldr	r2, [pc, #336]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a9e:	4b52      	ldr	r3, [pc, #328]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007aaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007abc:	2307      	movs	r3, #7
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac0:	f107 031c 	add.w	r3, r7, #28
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4849      	ldr	r0, [pc, #292]	; (8007bec <HAL_UART_MspInit+0x19c>)
 8007ac8:	f002 f904 	bl	8009cd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8007acc:	4b48      	ldr	r3, [pc, #288]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007ace:	4a49      	ldr	r2, [pc, #292]	; (8007bf4 <HAL_UART_MspInit+0x1a4>)
 8007ad0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8007ad2:	4b47      	ldr	r3, [pc, #284]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007ad4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ad8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ada:	4b45      	ldr	r3, [pc, #276]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ae0:	4b43      	ldr	r3, [pc, #268]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ae6:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007aec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007aee:	4b40      	ldr	r3, [pc, #256]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007af4:	4b3e      	ldr	r3, [pc, #248]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8007afa:	4b3d      	ldr	r3, [pc, #244]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b00:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b06:	4b3a      	ldr	r3, [pc, #232]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007b0c:	4838      	ldr	r0, [pc, #224]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007b0e:	f000 ffa9 	bl	8008a64 <HAL_DMA_Init>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007b18:	f7ff fc14 	bl	8007344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a34      	ldr	r2, [pc, #208]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
 8007b22:	4a33      	ldr	r2, [pc, #204]	; (8007bf0 <HAL_UART_MspInit+0x1a0>)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	2025      	movs	r0, #37	; 0x25
 8007b2e:	f000 ff62 	bl	80089f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007b32:	2025      	movs	r0, #37	; 0x25
 8007b34:	f000 ff7b 	bl	8008a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007b38:	e04f      	b.n	8007bda <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a2e      	ldr	r2, [pc, #184]	; (8007bf8 <HAL_UART_MspInit+0x1a8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d14a      	bne.n	8007bda <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	4a26      	ldr	r2, [pc, #152]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b52:	6413      	str	r3, [r2, #64]	; 0x40
 8007b54:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	4a1f      	ldr	r2, [pc, #124]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b6a:	f043 0304 	orr.w	r3, r3, #4
 8007b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60bb      	str	r3, [r7, #8]
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_UART_MspInit+0x198>)
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	60bb      	str	r3, [r7, #8]
 8007b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007b98:	2320      	movs	r3, #32
 8007b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007ba8:	2307      	movs	r3, #7
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bac:	f107 031c 	add.w	r3, r7, #28
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4812      	ldr	r0, [pc, #72]	; (8007bfc <HAL_UART_MspInit+0x1ac>)
 8007bb4:	f002 f88e 	bl	8009cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007bca:	2307      	movs	r3, #7
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bce:	f107 031c 	add.w	r3, r7, #28
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	480a      	ldr	r0, [pc, #40]	; (8007c00 <HAL_UART_MspInit+0x1b0>)
 8007bd6:	f002 f87d 	bl	8009cd4 <HAL_GPIO_Init>
}
 8007bda:	bf00      	nop
 8007bdc:	3730      	adds	r7, #48	; 0x30
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40011000 	.word	0x40011000
 8007be8:	40023800 	.word	0x40023800
 8007bec:	40020000 	.word	0x40020000
 8007bf0:	200009e0 	.word	0x200009e0
 8007bf4:	40026440 	.word	0x40026440
 8007bf8:	40004800 	.word	0x40004800
 8007bfc:	40020800 	.word	0x40020800
 8007c00:	40020400 	.word	0x40020400

08007c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c08:	e7fe      	b.n	8007c08 <NMI_Handler+0x4>

08007c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c0e:	e7fe      	b.n	8007c0e <HardFault_Handler+0x4>

08007c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c14:	e7fe      	b.n	8007c14 <MemManage_Handler+0x4>

08007c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c16:	b480      	push	{r7}
 8007c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c1a:	e7fe      	b.n	8007c1a <BusFault_Handler+0x4>

08007c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c20:	e7fe      	b.n	8007c20 <UsageFault_Handler+0x4>

08007c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c22:	b480      	push	{r7}
 8007c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c26:	bf00      	nop
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c42:	bf00      	nop
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c50:	f000 f9a2 	bl	8007f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c54:	bf00      	nop
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007c5c:	4802      	ldr	r0, [pc, #8]	; (8007c68 <USART1_IRQHandler+0x10>)
 8007c5e:	f005 ff3b 	bl	800dad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007c62:	bf00      	nop
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000958 	.word	0x20000958

08007c6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007c70:	4802      	ldr	r0, [pc, #8]	; (8007c7c <TIM5_IRQHandler+0x10>)
 8007c72:	f004 ffec 	bl	800cc4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000910 	.word	0x20000910

08007c80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <DMA2_Stream2_IRQHandler+0x10>)
 8007c86:	f001 f885 	bl	8008d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200009e0 	.word	0x200009e0

08007c94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <OTG_FS_IRQHandler+0x10>)
 8007c9a:	f002 fc7e 	bl	800a59a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000217c 	.word	0x2000217c

08007ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
	return 1;
 8007cac:	2301      	movs	r3, #1
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <_kill>:

int _kill(int pid, int sig)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007cc2:	f00b f9a5 	bl	8013010 <__errno>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2216      	movs	r2, #22
 8007cca:	601a      	str	r2, [r3, #0]
	return -1;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_exit>:

void _exit (int status)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ffe7 	bl	8007cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007cea:	e7fe      	b.n	8007cea <_exit+0x12>

08007cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e00a      	b.n	8007d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007cfe:	f3af 8000 	nop.w
 8007d02:	4601      	mov	r1, r0
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	60ba      	str	r2, [r7, #8]
 8007d0a:	b2ca      	uxtb	r2, r1
 8007d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	3301      	adds	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	dbf0      	blt.n	8007cfe <_read+0x12>
	}

return len;
 8007d1c:	687b      	ldr	r3, [r7, #4]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
	return -1;
 8007d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d4e:	605a      	str	r2, [r3, #4]
	return 0;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <_isatty>:

int _isatty(int file)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
	return 1;
 8007d66:	2301      	movs	r3, #1
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
	return 0;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007d98:	4a14      	ldr	r2, [pc, #80]	; (8007dec <_sbrk+0x5c>)
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <_sbrk+0x60>)
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007da4:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <_sbrk+0x64>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <_sbrk+0x64>)
 8007dae:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <_sbrk+0x68>)
 8007db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007db2:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <_sbrk+0x64>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4413      	add	r3, r2
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d207      	bcs.n	8007dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007dc0:	f00b f926 	bl	8013010 <__errno>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	220c      	movs	r2, #12
 8007dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	e009      	b.n	8007de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007dd0:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <_sbrk+0x64>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <_sbrk+0x64>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <_sbrk+0x64>)
 8007de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007de2:	68fb      	ldr	r3, [r7, #12]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20020000 	.word	0x20020000
 8007df0:	00000400 	.word	0x00000400
 8007df4:	20000a40 	.word	0x20000a40
 8007df8:	20002598 	.word	0x20002598

08007dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <SystemInit+0x20>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <SystemInit+0x20>)
 8007e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e10:	bf00      	nop
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	e000ed00 	.word	0xe000ed00

08007e20 <_ZN7imu_msgC1Ev>:

#include "main.h"

// Define IMU topic
typedef struct imu_msg imu_msg_struct;
struct imu_msg
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	769a      	strb	r2, [r3, #26]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <_ZN8batt_msgC1Ev>:
};
extern imu_msg_struct sys_imu_topic;

// Define Battery Mon topic
typedef struct batt_msg batt_msg_struct;
struct batt_msg
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	751a      	strb	r2, [r3, #20]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <_Z41__static_initialization_and_destruction_0ii>:
 */

#include "uTopics.hpp"

imu_msg_struct sys_imu_topic;
batt_msg_struct sys_batt_topic;
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10a      	bne.n	8007e7e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d105      	bne.n	8007e7e <_Z41__static_initialization_and_destruction_0ii+0x26>
imu_msg_struct sys_imu_topic;
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8007e74:	f7ff ffd4 	bl	8007e20 <_ZN7imu_msgC1Ev>
batt_msg_struct sys_batt_topic;
 8007e78:	4804      	ldr	r0, [pc, #16]	; (8007e8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8007e7a:	f7ff ffdf 	bl	8007e3c <_ZN8batt_msgC1Ev>
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000a44 	.word	0x20000a44
 8007e8c:	20000a60 	.word	0x20000a60

08007e90 <_GLOBAL__sub_I_sys_imu_topic>:
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e98:	2001      	movs	r0, #1
 8007e9a:	f7ff ffdd 	bl	8007e58 <_Z41__static_initialization_and_destruction_0ii>
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ea4:	480d      	ldr	r0, [pc, #52]	; (8007edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007ea6:	490e      	ldr	r1, [pc, #56]	; (8007ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007ea8:	4a0e      	ldr	r2, [pc, #56]	; (8007ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007eac:	e002      	b.n	8007eb4 <LoopCopyDataInit>

08007eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007eb2:	3304      	adds	r3, #4

08007eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007eb8:	d3f9      	bcc.n	8007eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007eba:	4a0b      	ldr	r2, [pc, #44]	; (8007ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007ebc:	4c0b      	ldr	r4, [pc, #44]	; (8007eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8007ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ec0:	e001      	b.n	8007ec6 <LoopFillZerobss>

08007ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ec4:	3204      	adds	r2, #4

08007ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ec8:	d3fb      	bcc.n	8007ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007eca:	f7ff ff97 	bl	8007dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ece:	f00b f8a5 	bl	801301c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ed2:	f7fe fdab 	bl	8006a2c <main>
  bx  lr    
 8007ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ee0:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8007ee4:	08020810 	.word	0x08020810
  ldr r2, =_sbss
 8007ee8:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8007eec:	20002594 	.word	0x20002594

08007ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ef0:	e7fe      	b.n	8007ef0 <ADC_IRQHandler>
	...

08007ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <HAL_Init+0x40>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <HAL_Init+0x40>)
 8007efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <HAL_Init+0x40>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <HAL_Init+0x40>)
 8007f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <HAL_Init+0x40>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a07      	ldr	r2, [pc, #28]	; (8007f34 <HAL_Init+0x40>)
 8007f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f1c:	2003      	movs	r0, #3
 8007f1e:	f000 fd5f 	bl	80089e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007f22:	200f      	movs	r0, #15
 8007f24:	f000 f808 	bl	8007f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007f28:	f7ff fbbe 	bl	80076a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40023c00 	.word	0x40023c00

08007f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007f40:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <HAL_InitTick+0x54>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b12      	ldr	r3, [pc, #72]	; (8007f90 <HAL_InitTick+0x58>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fd77 	bl	8008a4a <HAL_SYSTICK_Config>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e00e      	b.n	8007f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b0f      	cmp	r3, #15
 8007f6a:	d80a      	bhi.n	8007f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	f000 fd3f 	bl	80089f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007f78:	4a06      	ldr	r2, [pc, #24]	; (8007f94 <HAL_InitTick+0x5c>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e000      	b.n	8007f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000000 	.word	0x20000000
 8007f90:	20000008 	.word	0x20000008
 8007f94:	20000004 	.word	0x20000004

08007f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <HAL_IncTick+0x20>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <HAL_IncTick+0x24>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <HAL_IncTick+0x24>)
 8007faa:	6013      	str	r3, [r2, #0]
}
 8007fac:	bf00      	nop
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000008 	.word	0x20000008
 8007fbc:	20000ca8 	.word	0x20000ca8

08007fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8007fc4:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <HAL_GetTick+0x14>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000ca8 	.word	0x20000ca8

08007fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007fe0:	f7ff ffee 	bl	8007fc0 <HAL_GetTick>
 8007fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d005      	beq.n	8007ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <HAL_Delay+0x44>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007ffe:	bf00      	nop
 8008000:	f7ff ffde 	bl	8007fc0 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	d8f7      	bhi.n	8008000 <HAL_Delay+0x28>
  {
  }
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000008 	.word	0x20000008

08008020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e033      	b.n	800809e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fb5a 	bl	80076f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b00      	cmp	r3, #0
 800805c:	d118      	bne.n	8008090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008066:	f023 0302 	bic.w	r3, r3, #2
 800806a:	f043 0202 	orr.w	r2, r3, #2
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fae8 	bl	8008648 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	f043 0201 	orr.w	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	641a      	str	r2, [r3, #64]	; 0x40
 800808e:	e001      	b.n	8008094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_ADC_Start+0x1a>
 80080be:	2302      	movs	r3, #2
 80080c0:	e0b2      	b.n	8008228 <HAL_ADC_Start+0x180>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d018      	beq.n	800810a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80080e8:	4b52      	ldr	r3, [pc, #328]	; (8008234 <HAL_ADC_Start+0x18c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a52      	ldr	r2, [pc, #328]	; (8008238 <HAL_ADC_Start+0x190>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	0c9a      	lsrs	r2, r3, #18
 80080f4:	4613      	mov	r3, r2
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	4413      	add	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80080fc:	e002      	b.n	8008104 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	3b01      	subs	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f9      	bne.n	80080fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b01      	cmp	r3, #1
 8008116:	d17a      	bne.n	800820e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008142:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	d106      	bne.n	8008166 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815c:	f023 0206 	bic.w	r2, r3, #6
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	645a      	str	r2, [r3, #68]	; 0x44
 8008164:	e002      	b.n	800816c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008174:	4b31      	ldr	r3, [pc, #196]	; (800823c <HAL_ADC_Start+0x194>)
 8008176:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008180:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2b00      	cmp	r3, #0
 800818c:	d12a      	bne.n	80081e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <HAL_ADC_Start+0x198>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d015      	beq.n	80081c4 <HAL_ADC_Start+0x11c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a29      	ldr	r2, [pc, #164]	; (8008244 <HAL_ADC_Start+0x19c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d105      	bne.n	80081ae <HAL_ADC_Start+0x106>
 80081a2:	4b26      	ldr	r3, [pc, #152]	; (800823c <HAL_ADC_Start+0x194>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a25      	ldr	r2, [pc, #148]	; (8008248 <HAL_ADC_Start+0x1a0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d136      	bne.n	8008226 <HAL_ADC_Start+0x17e>
 80081b8:	4b20      	ldr	r3, [pc, #128]	; (800823c <HAL_ADC_Start+0x194>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d130      	bne.n	8008226 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d129      	bne.n	8008226 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	e020      	b.n	8008226 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a15      	ldr	r2, [pc, #84]	; (8008240 <HAL_ADC_Start+0x198>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d11b      	bne.n	8008226 <HAL_ADC_Start+0x17e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d114      	bne.n	8008226 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	e00b      	b.n	8008226 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	f043 0210 	orr.w	r2, r3, #16
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f043 0201 	orr.w	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	20000000 	.word	0x20000000
 8008238:	431bde83 	.word	0x431bde83
 800823c:	40012300 	.word	0x40012300
 8008240:	40012000 	.word	0x40012000
 8008244:	40012100 	.word	0x40012100
 8008248:	40012200 	.word	0x40012200

0800824c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_ADC_Stop+0x16>
 800825e:	2302      	movs	r3, #2
 8008260:	e021      	b.n	80082a6 <HAL_ADC_Stop+0x5a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d109      	bne.n	800829c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	f043 0201 	orr.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ce:	d113      	bne.n	80082f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80082da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082de:	d10b      	bne.n	80082f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e063      	b.n	80083c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80082f8:	f7ff fe62 	bl	8007fc0 <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80082fe:	e021      	b.n	8008344 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d01d      	beq.n	8008344 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <HAL_ADC_PollForConversion+0x6c>
 800830e:	f7ff fe57 	bl	8007fc0 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d212      	bcs.n	8008344 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d00b      	beq.n	8008344 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	f043 0204 	orr.w	r2, r3, #4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e03d      	b.n	80083c0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b02      	cmp	r3, #2
 8008350:	d1d6      	bne.n	8008300 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f06f 0212 	mvn.w	r2, #18
 800835a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d123      	bne.n	80083be <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800837a:	2b00      	cmp	r3, #0
 800837c:	d11f      	bne.n	80083be <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008384:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008396:	2b00      	cmp	r3, #0
 8008398:	d111      	bne.n	80083be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	f043 0201 	orr.w	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_ADC_ConfigChannel+0x1c>
 80083fc:	2302      	movs	r3, #2
 80083fe:	e113      	b.n	8008628 <HAL_ADC_ConfigChannel+0x244>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b09      	cmp	r3, #9
 800840e:	d925      	bls.n	800845c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	4613      	mov	r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	4413      	add	r3, r2
 8008424:	3b1e      	subs	r3, #30
 8008426:	2207      	movs	r2, #7
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	43da      	mvns	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	400a      	ands	r2, r1
 8008434:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68d9      	ldr	r1, [r3, #12]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	4618      	mov	r0, r3
 8008448:	4603      	mov	r3, r0
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	4403      	add	r3, r0
 800844e:	3b1e      	subs	r3, #30
 8008450:	409a      	lsls	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e022      	b.n	80084a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6919      	ldr	r1, [r3, #16]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	4613      	mov	r3, r2
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4413      	add	r3, r2
 8008470:	2207      	movs	r2, #7
 8008472:	fa02 f303 	lsl.w	r3, r2, r3
 8008476:	43da      	mvns	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	400a      	ands	r2, r1
 800847e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6919      	ldr	r1, [r3, #16]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	4618      	mov	r0, r3
 8008492:	4603      	mov	r3, r0
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4403      	add	r3, r0
 8008498:	409a      	lsls	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b06      	cmp	r3, #6
 80084a8:	d824      	bhi.n	80084f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	3b05      	subs	r3, #5
 80084bc:	221f      	movs	r2, #31
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43da      	mvns	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	400a      	ands	r2, r1
 80084ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4618      	mov	r0, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	3b05      	subs	r3, #5
 80084e6:	fa00 f203 	lsl.w	r2, r0, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	635a      	str	r2, [r3, #52]	; 0x34
 80084f2:	e04c      	b.n	800858e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	d824      	bhi.n	8008546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	3b23      	subs	r3, #35	; 0x23
 800850e:	221f      	movs	r2, #31
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	43da      	mvns	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	400a      	ands	r2, r1
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	4618      	mov	r0, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	3b23      	subs	r3, #35	; 0x23
 8008538:	fa00 f203 	lsl.w	r2, r0, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
 8008544:	e023      	b.n	800858e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	3b41      	subs	r3, #65	; 0x41
 8008558:	221f      	movs	r2, #31
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43da      	mvns	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	400a      	ands	r2, r1
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	4618      	mov	r0, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	3b41      	subs	r3, #65	; 0x41
 8008582:	fa00 f203 	lsl.w	r2, r0, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800858e:	4b29      	ldr	r3, [pc, #164]	; (8008634 <HAL_ADC_ConfigChannel+0x250>)
 8008590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a28      	ldr	r2, [pc, #160]	; (8008638 <HAL_ADC_ConfigChannel+0x254>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d10f      	bne.n	80085bc <HAL_ADC_ConfigChannel+0x1d8>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b12      	cmp	r3, #18
 80085a2:	d10b      	bne.n	80085bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1d      	ldr	r2, [pc, #116]	; (8008638 <HAL_ADC_ConfigChannel+0x254>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d12b      	bne.n	800861e <HAL_ADC_ConfigChannel+0x23a>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1c      	ldr	r2, [pc, #112]	; (800863c <HAL_ADC_ConfigChannel+0x258>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <HAL_ADC_ConfigChannel+0x1f4>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b11      	cmp	r3, #17
 80085d6:	d122      	bne.n	800861e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <HAL_ADC_ConfigChannel+0x258>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d111      	bne.n	800861e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_ADC_ConfigChannel+0x25c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a11      	ldr	r2, [pc, #68]	; (8008644 <HAL_ADC_ConfigChannel+0x260>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	0c9a      	lsrs	r2, r3, #18
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008610:	e002      	b.n	8008618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3b01      	subs	r3, #1
 8008616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f9      	bne.n	8008612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	40012300 	.word	0x40012300
 8008638:	40012000 	.word	0x40012000
 800863c:	10000012 	.word	0x10000012
 8008640:	20000000 	.word	0x20000000
 8008644:	431bde83 	.word	0x431bde83

08008648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008650:	4b79      	ldr	r3, [pc, #484]	; (8008838 <ADC_Init+0x1f0>)
 8008652:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	431a      	orrs	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800867c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	021a      	lsls	r2, r3, #8
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80086a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6859      	ldr	r1, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6899      	ldr	r1, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	4a58      	ldr	r2, [pc, #352]	; (800883c <ADC_Init+0x1f4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80086ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6899      	ldr	r1, [r3, #8]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6899      	ldr	r1, [r3, #8]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	609a      	str	r2, [r3, #8]
 8008724:	e00f      	b.n	8008746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008744:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0202 	bic.w	r2, r2, #2
 8008754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6899      	ldr	r1, [r3, #8]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7e1b      	ldrb	r3, [r3, #24]
 8008760:	005a      	lsls	r2, r3, #1
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008782:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	3b01      	subs	r3, #1
 80087a0:	035a      	lsls	r2, r3, #13
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e007      	b.n	80087bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80087ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	051a      	lsls	r2, r3, #20
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6899      	ldr	r1, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087fe:	025a      	lsls	r2, r3, #9
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6899      	ldr	r1, [r3, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	029a      	lsls	r2, r3, #10
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	609a      	str	r2, [r3, #8]
}
 800882c:	bf00      	nop
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40012300 	.word	0x40012300
 800883c:	0f000001 	.word	0x0f000001

08008840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <__NVIC_SetPriorityGrouping+0x44>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800885c:	4013      	ands	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800886c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008872:	4a04      	ldr	r2, [pc, #16]	; (8008884 <__NVIC_SetPriorityGrouping+0x44>)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	60d3      	str	r3, [r2, #12]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	e000ed00 	.word	0xe000ed00

08008888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <__NVIC_GetPriorityGrouping+0x18>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	f003 0307 	and.w	r3, r3, #7
}
 8008896:	4618      	mov	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	db0b      	blt.n	80088ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f003 021f 	and.w	r2, r3, #31
 80088bc:	4907      	ldr	r1, [pc, #28]	; (80088dc <__NVIC_EnableIRQ+0x38>)
 80088be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	2001      	movs	r0, #1
 80088c6:	fa00 f202 	lsl.w	r2, r0, r2
 80088ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	e000e100 	.word	0xe000e100

080088e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	db0a      	blt.n	800890a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	490c      	ldr	r1, [pc, #48]	; (800892c <__NVIC_SetPriority+0x4c>)
 80088fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088fe:	0112      	lsls	r2, r2, #4
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	440b      	add	r3, r1
 8008904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008908:	e00a      	b.n	8008920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4908      	ldr	r1, [pc, #32]	; (8008930 <__NVIC_SetPriority+0x50>)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	3b04      	subs	r3, #4
 8008918:	0112      	lsls	r2, r2, #4
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	440b      	add	r3, r1
 800891e:	761a      	strb	r2, [r3, #24]
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	e000e100 	.word	0xe000e100
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008934:	b480      	push	{r7}
 8008936:	b089      	sub	sp, #36	; 0x24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f1c3 0307 	rsb	r3, r3, #7
 800894e:	2b04      	cmp	r3, #4
 8008950:	bf28      	it	cs
 8008952:	2304      	movcs	r3, #4
 8008954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	3304      	adds	r3, #4
 800895a:	2b06      	cmp	r3, #6
 800895c:	d902      	bls.n	8008964 <NVIC_EncodePriority+0x30>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3b03      	subs	r3, #3
 8008962:	e000      	b.n	8008966 <NVIC_EncodePriority+0x32>
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008968:	f04f 32ff 	mov.w	r2, #4294967295
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	401a      	ands	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800897c:	f04f 31ff 	mov.w	r1, #4294967295
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	43d9      	mvns	r1, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800898c:	4313      	orrs	r3, r2
         );
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089ac:	d301      	bcc.n	80089b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089ae:	2301      	movs	r3, #1
 80089b0:	e00f      	b.n	80089d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089b2:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <SysTick_Config+0x40>)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089ba:	210f      	movs	r1, #15
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	f7ff ff8e 	bl	80088e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <SysTick_Config+0x40>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089ca:	4b04      	ldr	r3, [pc, #16]	; (80089dc <SysTick_Config+0x40>)
 80089cc:	2207      	movs	r2, #7
 80089ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	e000e010 	.word	0xe000e010

080089e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff29 	bl	8008840 <__NVIC_SetPriorityGrouping>
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	4603      	mov	r3, r0
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a08:	f7ff ff3e 	bl	8008888 <__NVIC_GetPriorityGrouping>
 8008a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	6978      	ldr	r0, [r7, #20]
 8008a14:	f7ff ff8e 	bl	8008934 <NVIC_EncodePriority>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff ff5d 	bl	80088e0 <__NVIC_SetPriority>
}
 8008a26:	bf00      	nop
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	4603      	mov	r3, r0
 8008a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff ff31 	bl	80088a4 <__NVIC_EnableIRQ>
}
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff ffa2 	bl	800899c <SysTick_Config>
 8008a58:	4603      	mov	r3, r0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008a70:	f7ff faa6 	bl	8007fc0 <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e099      	b.n	8008bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0201 	bic.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008aa0:	e00f      	b.n	8008ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008aa2:	f7ff fa8d 	bl	8007fc0 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	d908      	bls.n	8008ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2203      	movs	r2, #3
 8008aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e078      	b.n	8008bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e8      	bne.n	8008aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4b38      	ldr	r3, [pc, #224]	; (8008bbc <HAL_DMA_Init+0x158>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d107      	bne.n	8008b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b24:	4313      	orrs	r3, r2
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f023 0307 	bic.w	r3, r3, #7
 8008b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d117      	bne.n	8008b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00e      	beq.n	8008b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb01 	bl	8009170 <DMA_CheckFifoParam>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d008      	beq.n	8008b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2240      	movs	r2, #64	; 0x40
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008b82:	2301      	movs	r3, #1
 8008b84:	e016      	b.n	8008bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fab8 	bl	8009104 <DMA_CalcBaseAndBitshift>
 8008b94:	4603      	mov	r3, r0
 8008b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9c:	223f      	movs	r2, #63	; 0x3f
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	f010803f 	.word	0xf010803f

08008bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d101      	bne.n	8008be6 <HAL_DMA_Start_IT+0x26>
 8008be2:	2302      	movs	r3, #2
 8008be4:	e040      	b.n	8008c68 <HAL_DMA_Start_IT+0xa8>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d12f      	bne.n	8008c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f000 fa4a 	bl	80090a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c18:	223f      	movs	r2, #63	; 0x3f
 8008c1a:	409a      	lsls	r2, r3
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0216 	orr.w	r2, r2, #22
 8008c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0208 	orr.w	r2, r2, #8
 8008c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e005      	b.n	8008c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008c62:	2302      	movs	r3, #2
 8008c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008c7e:	f7ff f99f 	bl	8007fc0 <HAL_GetTick>
 8008c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d008      	beq.n	8008ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2280      	movs	r2, #128	; 0x80
 8008c94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e052      	b.n	8008d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0216 	bic.w	r2, r2, #22
 8008cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695a      	ldr	r2, [r3, #20]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <HAL_DMA_Abort+0x62>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0208 	bic.w	r2, r2, #8
 8008ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0201 	bic.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cf2:	e013      	b.n	8008d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008cf4:	f7ff f964 	bl	8007fc0 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d90c      	bls.n	8008d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e015      	b.n	8008d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e4      	bne.n	8008cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2e:	223f      	movs	r2, #63	; 0x3f
 8008d30:	409a      	lsls	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d004      	beq.n	8008d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2280      	movs	r2, #128	; 0x80
 8008d68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e00c      	b.n	8008d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2205      	movs	r2, #5
 8008d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008da0:	4b92      	ldr	r3, [pc, #584]	; (8008fec <HAL_DMA_IRQHandler+0x258>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a92      	ldr	r2, [pc, #584]	; (8008ff0 <HAL_DMA_IRQHandler+0x25c>)
 8008da6:	fba2 2303 	umull	r2, r3, r2, r3
 8008daa:	0a9b      	lsrs	r3, r3, #10
 8008dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	409a      	lsls	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01a      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0204 	bic.w	r2, r2, #4
 8008de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dec:	2208      	movs	r2, #8
 8008dee:	409a      	lsls	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df8:	f043 0201 	orr.w	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e04:	2201      	movs	r2, #1
 8008e06:	409a      	lsls	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d012      	beq.n	8008e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e22:	2201      	movs	r2, #1
 8008e24:	409a      	lsls	r2, r3
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	f043 0202 	orr.w	r2, r3, #2
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	409a      	lsls	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4013      	ands	r3, r2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d012      	beq.n	8008e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e58:	2204      	movs	r2, #4
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e64:	f043 0204 	orr.w	r2, r3, #4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e70:	2210      	movs	r2, #16
 8008e72:	409a      	lsls	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d043      	beq.n	8008f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d03c      	beq.n	8008f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8e:	2210      	movs	r2, #16
 8008e90:	409a      	lsls	r2, r3
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d018      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d108      	bne.n	8008ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d024      	beq.n	8008f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
 8008ec2:	e01f      	b.n	8008f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	e016      	b.n	8008f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0208 	bic.w	r2, r2, #8
 8008ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f08:	2220      	movs	r2, #32
 8008f0a:	409a      	lsls	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 808e 	beq.w	8009032 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8086 	beq.w	8009032 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	409a      	lsls	r2, r3
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d136      	bne.n	8008fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0216 	bic.w	r2, r2, #22
 8008f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d103      	bne.n	8008f6e <HAL_DMA_IRQHandler+0x1da>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d007      	beq.n	8008f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0208 	bic.w	r2, r2, #8
 8008f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f82:	223f      	movs	r2, #63	; 0x3f
 8008f84:	409a      	lsls	r2, r3
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d07d      	beq.n	800909e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
        }
        return;
 8008faa:	e078      	b.n	800909e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01c      	beq.n	8008ff4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d030      	beq.n	8009032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	e02b      	b.n	8009032 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d027      	beq.n	8009032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
 8008fea:	e022      	b.n	8009032 <HAL_DMA_IRQHandler+0x29e>
 8008fec:	20000000 	.word	0x20000000
 8008ff0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10f      	bne.n	8009022 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0210 	bic.w	r2, r2, #16
 8009010:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009036:	2b00      	cmp	r3, #0
 8009038:	d032      	beq.n	80090a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d022      	beq.n	800908c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2205      	movs	r2, #5
 800904a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0201 	bic.w	r2, r2, #1
 800905c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3301      	adds	r3, #1
 8009062:	60bb      	str	r3, [r7, #8]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	429a      	cmp	r2, r3
 8009068:	d307      	bcc.n	800907a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f2      	bne.n	800905e <HAL_DMA_IRQHandler+0x2ca>
 8009078:	e000      	b.n	800907c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800907a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3
 800909c:	e000      	b.n	80090a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800909e:	bf00      	nop
    }
  }
}
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop

080090a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d108      	bne.n	80090e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80090e6:	e007      	b.n	80090f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	60da      	str	r2, [r3, #12]
}
 80090f8:	bf00      	nop
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	3b10      	subs	r3, #16
 8009114:	4a14      	ldr	r2, [pc, #80]	; (8009168 <DMA_CalcBaseAndBitshift+0x64>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800911e:	4a13      	ldr	r2, [pc, #76]	; (800916c <DMA_CalcBaseAndBitshift+0x68>)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4413      	add	r3, r2
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b03      	cmp	r3, #3
 8009130:	d909      	bls.n	8009146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	659a      	str	r2, [r3, #88]	; 0x58
 8009144:	e007      	b.n	8009156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800914e:	f023 0303 	bic.w	r3, r3, #3
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	aaaaaaab 	.word	0xaaaaaaab
 800916c:	08020264 	.word	0x08020264

08009170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d11f      	bne.n	80091ca <DMA_CheckFifoParam+0x5a>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b03      	cmp	r3, #3
 800918e:	d856      	bhi.n	800923e <DMA_CheckFifoParam+0xce>
 8009190:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <DMA_CheckFifoParam+0x28>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091a9 	.word	0x080091a9
 800919c:	080091bb 	.word	0x080091bb
 80091a0:	080091a9 	.word	0x080091a9
 80091a4:	0800923f 	.word	0x0800923f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d046      	beq.n	8009242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091b8:	e043      	b.n	8009242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80091c2:	d140      	bne.n	8009246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091c8:	e03d      	b.n	8009246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091d2:	d121      	bne.n	8009218 <DMA_CheckFifoParam+0xa8>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d837      	bhi.n	800924a <DMA_CheckFifoParam+0xda>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <DMA_CheckFifoParam+0x70>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	080091f7 	.word	0x080091f7
 80091e8:	080091f1 	.word	0x080091f1
 80091ec:	08009209 	.word	0x08009209
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
      break;
 80091f4:	e030      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d025      	beq.n	800924e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009206:	e022      	b.n	800924e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009210:	d11f      	bne.n	8009252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009216:	e01c      	b.n	8009252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d903      	bls.n	8009226 <DMA_CheckFifoParam+0xb6>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b03      	cmp	r3, #3
 8009222:	d003      	beq.n	800922c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009224:	e018      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	73fb      	strb	r3, [r7, #15]
      break;
 800922a:	e015      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00e      	beq.n	8009256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	73fb      	strb	r3, [r7, #15]
      break;
 800923c:	e00b      	b.n	8009256 <DMA_CheckFifoParam+0xe6>
      break;
 800923e:	bf00      	nop
 8009240:	e00a      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;
 8009242:	bf00      	nop
 8009244:	e008      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;
 8009246:	bf00      	nop
 8009248:	e006      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;
 800924a:	bf00      	nop
 800924c:	e004      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;   
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <DMA_CheckFifoParam+0xe8>
      break;
 8009256:	bf00      	nop
    }
  } 
  
  return status; 
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop

08009268 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e081      	b.n	800937e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fe fa76 	bl	8007780 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2224      	movs	r2, #36	; 0x24
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0201 	bic.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80092b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092c8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d107      	bne.n	80092e2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	e006      	b.n	80092f0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689a      	ldr	r2, [r3, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80092ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d104      	bne.n	8009302 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009300:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009314:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009324:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69d9      	ldr	r1, [r3, #28]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a1a      	ldr	r2, [r3, #32]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <HAL_FMPI2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Write(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af02      	add	r7, sp, #8
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	461a      	mov	r2, r3
 8009396:	4603      	mov	r3, r0
 8009398:	817b      	strh	r3, [r7, #10]
 800939a:	460b      	mov	r3, r1
 800939c:	813b      	strh	r3, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	f040 80f9 	bne.w	80095a2 <HAL_FMPI2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_FMPI2C_Mem_Write+0x34>
 80093b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <HAL_FMPI2C_Mem_Write+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0ed      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_FMPI2C_Mem_Write+0x4e>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e0e6      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093de:	f7fe fdef 	bl	8007fc0 <HAL_GetTick>
 80093e2:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2319      	movs	r3, #25
 80093ea:	2201      	movs	r2, #1
 80093ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fac3 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_FMPI2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0d1      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2221      	movs	r2, #33	; 0x21
 8009404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2240      	movs	r2, #64	; 0x40
 800940c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a3a      	ldr	r2, [r7, #32]
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryWrite(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009428:	88f8      	ldrh	r0, [r7, #6]
 800942a:	893a      	ldrh	r2, [r7, #8]
 800942c:	8979      	ldrh	r1, [r7, #10]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	4603      	mov	r3, r0
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f9d3 	bl	80097e4 <FMPI2C_RequestMemoryWrite>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <HAL_FMPI2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e0a9      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009454:	b29b      	uxth	r3, r3
 8009456:	2bff      	cmp	r3, #255	; 0xff
 8009458:	d90e      	bls.n	8009478 <HAL_FMPI2C_Mem_Write+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE, FMPI2C_NO_STARTSTOP);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	b2da      	uxtb	r2, r3
 8009466:	8979      	ldrh	r1, [r7, #10]
 8009468:	2300      	movs	r3, #0
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fbb5 	bl	8009be0 <FMPI2C_TransferConfig>
 8009476:	e00f      	b.n	8009498 <HAL_FMPI2C_Mem_Write+0x110>
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE, FMPI2C_NO_STARTSTOP);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009486:	b2da      	uxtb	r2, r3
 8009488:	8979      	ldrh	r1, [r7, #10]
 800948a:	2300      	movs	r3, #0
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 fba4 	bl	8009be0 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 faad 	bl	80099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <HAL_FMPI2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e07b      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d034      	beq.n	8009550 <HAL_FMPI2C_Mem_Write+0x1c8>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d130      	bne.n	8009550 <HAL_FMPI2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	2200      	movs	r2, #0
 80094f6:	2180      	movs	r1, #128	; 0x80
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 fa3f 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <HAL_FMPI2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e04d      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950c:	b29b      	uxth	r3, r3
 800950e:	2bff      	cmp	r3, #255	; 0xff
 8009510:	d90e      	bls.n	8009530 <HAL_FMPI2C_Mem_Write+0x1a8>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951c:	b2da      	uxtb	r2, r3
 800951e:	8979      	ldrh	r1, [r7, #10]
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fb59 	bl	8009be0 <FMPI2C_TransferConfig>
 800952e:	e00f      	b.n	8009550 <HAL_FMPI2C_Mem_Write+0x1c8>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953e:	b2da      	uxtb	r2, r3
 8009540:	8979      	ldrh	r1, [r7, #10]
 8009542:	2300      	movs	r3, #0
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fb48 	bl	8009be0 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }

    } while (hfmpi2c->XferCount > 0U);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d19e      	bne.n	8009498 <HAL_FMPI2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 fa8c 	bl	8009a7c <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <HAL_FMPI2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e01a      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2220      	movs	r2, #32
 8009574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6859      	ldr	r1, [r3, #4]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <HAL_FMPI2C_Mem_Write+0x224>)
 8009582:	400b      	ands	r3, r1
 8009584:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2220      	movs	r2, #32
 800958a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	e000      	b.n	80095a4 <HAL_FMPI2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095a2:	2302      	movs	r3, #2
  }
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	fe00e800 	.word	0xfe00e800

080095b0 <HAL_FMPI2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Read(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	461a      	mov	r2, r3
 80095be:	4603      	mov	r3, r0
 80095c0:	817b      	strh	r3, [r7, #10]
 80095c2:	460b      	mov	r3, r1
 80095c4:	813b      	strh	r3, [r7, #8]
 80095c6:	4613      	mov	r3, r2
 80095c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	f040 80fd 	bne.w	80097d2 <HAL_FMPI2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_FMPI2C_Mem_Read+0x34>
 80095de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <HAL_FMPI2C_Mem_Read+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0f1      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_FMPI2C_Mem_Read+0x4e>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e0ea      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009606:	f7fe fcdb 	bl	8007fc0 <HAL_GetTick>
 800960a:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2319      	movs	r3, #25
 8009612:	2201      	movs	r2, #1
 8009614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f9af 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <HAL_FMPI2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e0d5      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_RX;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2222      	movs	r2, #34	; 0x22
 800962c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2240      	movs	r2, #64	; 0x40
 8009634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a3a      	ldr	r2, [r7, #32]
 8009642:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryRead(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009650:	88f8      	ldrh	r0, [r7, #6]
 8009652:	893a      	ldrh	r2, [r7, #8]
 8009654:	8979      	ldrh	r1, [r7, #10]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	4603      	mov	r3, r0
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f913 	bl	800988c <FMPI2C_RequestMemoryRead>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_FMPI2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0ad      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967c:	b29b      	uxth	r3, r3
 800967e:	2bff      	cmp	r3, #255	; 0xff
 8009680:	d90e      	bls.n	80096a0 <HAL_FMPI2C_Mem_Read+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	22ff      	movs	r2, #255	; 0xff
 8009686:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968c:	b2da      	uxtb	r2, r3
 800968e:	8979      	ldrh	r1, [r7, #10]
 8009690:	4b52      	ldr	r3, [pc, #328]	; (80097dc <HAL_FMPI2C_Mem_Read+0x22c>)
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 faa1 	bl	8009be0 <FMPI2C_TransferConfig>
 800969e:	e00f      	b.n	80096c0 <HAL_FMPI2C_Mem_Read+0x110>
                            FMPI2C_GENERATE_START_READ);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	8979      	ldrh	r1, [r7, #10]
 80096b2:	4b4a      	ldr	r3, [pc, #296]	; (80097dc <HAL_FMPI2C_Mem_Read+0x22c>)
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 fa90 	bl	8009be0 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	2200      	movs	r2, #0
 80096c8:	2104      	movs	r1, #4
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f956 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <HAL_FMPI2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e07c      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d034      	beq.n	8009780 <HAL_FMPI2C_Mem_Read+0x1d0>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d130      	bne.n	8009780 <HAL_FMPI2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	2200      	movs	r2, #0
 8009726:	2180      	movs	r1, #128	; 0x80
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f927 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <HAL_FMPI2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e04d      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973c:	b29b      	uxth	r3, r3
 800973e:	2bff      	cmp	r3, #255	; 0xff
 8009740:	d90e      	bls.n	8009760 <HAL_FMPI2C_Mem_Read+0x1b0>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	22ff      	movs	r2, #255	; 0xff
 8009746:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t) hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974c:	b2da      	uxtb	r2, r3
 800974e:	8979      	ldrh	r1, [r7, #10]
 8009750:	2300      	movs	r3, #0
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fa41 	bl	8009be0 <FMPI2C_TransferConfig>
 800975e:	e00f      	b.n	8009780 <HAL_FMPI2C_Mem_Read+0x1d0>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976e:	b2da      	uxtb	r2, r3
 8009770:	8979      	ldrh	r1, [r7, #10]
 8009772:	2300      	movs	r3, #0
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fa30 	bl	8009be0 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }
    } while (hfmpi2c->XferCount > 0U);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d19a      	bne.n	80096c0 <HAL_FMPI2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f974 	bl	8009a7c <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_FMPI2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e01a      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2220      	movs	r2, #32
 80097a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6859      	ldr	r1, [r3, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <HAL_FMPI2C_Mem_Read+0x230>)
 80097b2:	400b      	ands	r3, r1
 80097b4:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e000      	b.n	80097d4 <HAL_FMPI2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	80002400 	.word	0x80002400
 80097e0:	fe00e800 	.word	0xfe00e800

080097e4 <FMPI2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryWrite(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	817b      	strh	r3, [r7, #10]
 80097f6:	460b      	mov	r3, r1
 80097f8:	813b      	strh	r3, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_RELOAD_MODE, FMPI2C_GENERATE_START_WRITE);
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	b2da      	uxtb	r2, r3
 8009802:	8979      	ldrh	r1, [r7, #10]
 8009804:	4b20      	ldr	r3, [pc, #128]	; (8009888 <FMPI2C_RequestMemoryWrite+0xa4>)
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f9e7 	bl	8009be0 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	69b9      	ldr	r1, [r7, #24]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 f8f0 	bl	80099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <FMPI2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e02c      	b.n	8009880 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 8009826:	88fb      	ldrh	r3, [r7, #6]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d105      	bne.n	8009838 <FMPI2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 800982c:	893b      	ldrh	r3, [r7, #8]
 800982e:	b2da      	uxtb	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	629a      	str	r2, [r3, #40]	; 0x28
 8009836:	e015      	b.n	8009864 <FMPI2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 8009838:	893b      	ldrh	r3, [r7, #8]
 800983a:	0a1b      	lsrs	r3, r3, #8
 800983c:	b29b      	uxth	r3, r3
 800983e:	b2da      	uxtb	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	69b9      	ldr	r1, [r7, #24]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f8d6 	bl	80099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <FMPI2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e012      	b.n	8009880 <FMPI2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 800985a:	893b      	ldrh	r3, [r7, #8]
 800985c:	b2da      	uxtb	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	2200      	movs	r2, #0
 800986c:	2180      	movs	r1, #128	; 0x80
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f884 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <FMPI2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e000      	b.n	8009880 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	80002000 	.word	0x80002000

0800988c <FMPI2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryRead(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	4608      	mov	r0, r1
 8009896:	4611      	mov	r1, r2
 8009898:	461a      	mov	r2, r3
 800989a:	4603      	mov	r3, r0
 800989c:	817b      	strh	r3, [r7, #10]
 800989e:	460b      	mov	r3, r1
 80098a0:	813b      	strh	r3, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_SOFTEND_MODE, FMPI2C_GENERATE_START_WRITE);
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	8979      	ldrh	r1, [r7, #10]
 80098ac:	4b20      	ldr	r3, [pc, #128]	; (8009930 <FMPI2C_RequestMemoryRead+0xa4>)
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f994 	bl	8009be0 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	69b9      	ldr	r1, [r7, #24]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f89d 	bl	80099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <FMPI2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e02c      	b.n	8009926 <FMPI2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d105      	bne.n	80098de <FMPI2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 80098d2:	893b      	ldrh	r3, [r7, #8]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	629a      	str	r2, [r3, #40]	; 0x28
 80098dc:	e015      	b.n	800990a <FMPI2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	69b9      	ldr	r1, [r7, #24]
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 f883 	bl	80099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <FMPI2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e012      	b.n	8009926 <FMPI2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2200      	movs	r2, #0
 8009912:	2140      	movs	r1, #64	; 0x40
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f831 	bl	800997c <FMPI2C_WaitOnFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <FMPI2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <FMPI2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	80002000 	.word	0x80002000

08009934 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d103      	bne.n	8009952 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b01      	cmp	r3, #1
 800995e:	d007      	beq.n	8009970 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699a      	ldr	r2, [r3, #24]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0201 	orr.w	r2, r2, #1
 800996e:	619a      	str	r2, [r3, #24]
  }
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 800998c:	e022      	b.n	80099d4 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009994:	d01e      	beq.n	80099d4 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009996:	f7fe fb13 	bl	8007fc0 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d302      	bcc.n	80099ac <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d113      	bne.n	80099d4 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b0:	f043 0220 	orr.w	r2, r3, #32
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e00f      	b.n	80099f4 <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4013      	ands	r3, r2
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	bf0c      	ite	eq
 80099e4:	2301      	moveq	r3, #1
 80099e6:	2300      	movne	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d0cd      	beq.n	800998e <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8009a08:	e02c      	b.n	8009a64 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f870 	bl	8009af4 <FMPI2C_IsAcknowledgeFailed>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e02a      	b.n	8009a74 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d01e      	beq.n	8009a64 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a26:	f7fe facb 	bl	8007fc0 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d302      	bcc.n	8009a3c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d113      	bne.n	8009a64 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a40:	f043 0220 	orr.w	r2, r3, #32
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e007      	b.n	8009a74 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d1cb      	bne.n	8009a0a <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009a88:	e028      	b.n	8009adc <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f830 	bl	8009af4 <FMPI2C_IsAcknowledgeFailed>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e026      	b.n	8009aec <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9e:	f7fe fa8f 	bl	8007fc0 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d302      	bcc.n	8009ab4 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d113      	bne.n	8009adc <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab8:	f043 0220 	orr.w	r2, r3, #32
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e007      	b.n	8009aec <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d1cf      	bne.n	8009a8a <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <FMPI2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsAcknowledgeFailed(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_AF) == SET)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	f003 0310 	and.w	r3, r3, #16
 8009b0a:	2b10      	cmp	r3, #16
 8009b0c:	d161      	bne.n	8009bd2 <FMPI2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b1c:	d02b      	beq.n	8009b76 <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b2c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009b2e:	e022      	b.n	8009b76 <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d01e      	beq.n	8009b76 <FMPI2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b38:	f7fe fa42 	bl	8007fc0 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d302      	bcc.n	8009b4e <FMPI2C_IsAcknowledgeFailed+0x5a>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d113      	bne.n	8009b76 <FMPI2C_IsAcknowledgeFailed+0x82>
        {
          hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	f043 0220 	orr.w	r2, r3, #32
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
          hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e02e      	b.n	8009bd4 <FMPI2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	f003 0320 	and.w	r3, r3, #32
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	d1d5      	bne.n	8009b30 <FMPI2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2210      	movs	r2, #16
 8009b8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2220      	movs	r2, #32
 8009b92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fecd 	bl	8009934 <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6859      	ldr	r1, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <FMPI2C_IsAcknowledgeFailed+0xe8>)
 8009ba6:	400b      	ands	r3, r1
 8009ba8:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	f043 0204 	orr.w	r2, r3, #4
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <FMPI2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	fe00e800 	.word	0xfe00e800

08009be0 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	817b      	strh	r3, [r7, #10]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2,
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	0d5b      	lsrs	r3, r3, #21
 8009bfc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <FMPI2C_TransferConfig+0x58>)
 8009c02:	430b      	orrs	r3, r1
 8009c04:	43db      	mvns	r3, r3
 8009c06:	ea02 0103 	and.w	r1, r2, r3
 8009c0a:	897b      	ldrh	r3, [r7, #10]
 8009c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009c10:	7a7b      	ldrb	r3, [r7, #9]
 8009c12:	041b      	lsls	r3, r3, #16
 8009c14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	431a      	orrs	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                 FMPI2C_CR2_START | FMPI2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
                        (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	03ff63ff 	.word	0x03ff63ff

08009c3c <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d138      	bne.n	8009cc4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e032      	b.n	8009cc6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2224      	movs	r2, #36	; 0x24
 8009c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6819      	ldr	r1, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0201 	orr.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b089      	sub	sp, #36	; 0x24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
 8009cee:	e165      	b.n	8009fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4013      	ands	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	f040 8154 	bne.w	8009fb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d005      	beq.n	8009d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d130      	bne.n	8009d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	2203      	movs	r2, #3
 8009d32:	fa02 f303 	lsl.w	r3, r2, r3
 8009d36:	43db      	mvns	r3, r3
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	fa02 f303 	lsl.w	r3, r2, r3
 8009d64:	43db      	mvns	r3, r3
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	f003 0201 	and.w	r2, r3, #1
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d017      	beq.n	8009dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	2203      	movs	r2, #3
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	43db      	mvns	r3, r3
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	4013      	ands	r3, r2
 8009daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	005b      	lsls	r3, r3, #1
 8009db4:	fa02 f303 	lsl.w	r3, r2, r3
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	f003 0303 	and.w	r3, r3, #3
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d123      	bne.n	8009e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	08da      	lsrs	r2, r3, #3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3208      	adds	r2, #8
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	220f      	movs	r2, #15
 8009de8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dec:	43db      	mvns	r3, r3
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	4013      	ands	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	08da      	lsrs	r2, r3, #3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3208      	adds	r2, #8
 8009e12:	69b9      	ldr	r1, [r7, #24]
 8009e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	2203      	movs	r2, #3
 8009e24:	fa02 f303 	lsl.w	r3, r2, r3
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f003 0203 	and.w	r2, r3, #3
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80ae 	beq.w	8009fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	4b5d      	ldr	r3, [pc, #372]	; (8009fd4 <HAL_GPIO_Init+0x300>)
 8009e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e62:	4a5c      	ldr	r2, [pc, #368]	; (8009fd4 <HAL_GPIO_Init+0x300>)
 8009e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e68:	6453      	str	r3, [r2, #68]	; 0x44
 8009e6a:	4b5a      	ldr	r3, [pc, #360]	; (8009fd4 <HAL_GPIO_Init+0x300>)
 8009e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e76:	4a58      	ldr	r2, [pc, #352]	; (8009fd8 <HAL_GPIO_Init+0x304>)
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	089b      	lsrs	r3, r3, #2
 8009e7c:	3302      	adds	r3, #2
 8009e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	220f      	movs	r2, #15
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	43db      	mvns	r3, r3
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	4013      	ands	r3, r2
 8009e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a4f      	ldr	r2, [pc, #316]	; (8009fdc <HAL_GPIO_Init+0x308>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d025      	beq.n	8009eee <HAL_GPIO_Init+0x21a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a4e      	ldr	r2, [pc, #312]	; (8009fe0 <HAL_GPIO_Init+0x30c>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d01f      	beq.n	8009eea <HAL_GPIO_Init+0x216>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a4d      	ldr	r2, [pc, #308]	; (8009fe4 <HAL_GPIO_Init+0x310>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d019      	beq.n	8009ee6 <HAL_GPIO_Init+0x212>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a4c      	ldr	r2, [pc, #304]	; (8009fe8 <HAL_GPIO_Init+0x314>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d013      	beq.n	8009ee2 <HAL_GPIO_Init+0x20e>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a4b      	ldr	r2, [pc, #300]	; (8009fec <HAL_GPIO_Init+0x318>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d00d      	beq.n	8009ede <HAL_GPIO_Init+0x20a>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a4a      	ldr	r2, [pc, #296]	; (8009ff0 <HAL_GPIO_Init+0x31c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d007      	beq.n	8009eda <HAL_GPIO_Init+0x206>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a49      	ldr	r2, [pc, #292]	; (8009ff4 <HAL_GPIO_Init+0x320>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d101      	bne.n	8009ed6 <HAL_GPIO_Init+0x202>
 8009ed2:	2306      	movs	r3, #6
 8009ed4:	e00c      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009ed6:	2307      	movs	r3, #7
 8009ed8:	e00a      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009eda:	2305      	movs	r3, #5
 8009edc:	e008      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009ede:	2304      	movs	r3, #4
 8009ee0:	e006      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e004      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e002      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <HAL_GPIO_Init+0x21c>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	f002 0203 	and.w	r2, r2, #3
 8009ef6:	0092      	lsls	r2, r2, #2
 8009ef8:	4093      	lsls	r3, r2
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f00:	4935      	ldr	r1, [pc, #212]	; (8009fd8 <HAL_GPIO_Init+0x304>)
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	089b      	lsrs	r3, r3, #2
 8009f06:	3302      	adds	r3, #2
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f0e:	4b3a      	ldr	r3, [pc, #232]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	43db      	mvns	r3, r3
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f32:	4a31      	ldr	r2, [pc, #196]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009f38:	4b2f      	ldr	r3, [pc, #188]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	43db      	mvns	r3, r3
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	4013      	ands	r3, r2
 8009f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f5c:	4a26      	ldr	r2, [pc, #152]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009f62:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	43db      	mvns	r3, r3
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009f86:	4a1c      	ldr	r2, [pc, #112]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	43db      	mvns	r3, r3
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009fb0:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <HAL_GPIO_Init+0x324>)
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	61fb      	str	r3, [r7, #28]
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	f67f ae96 	bls.w	8009cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	3724      	adds	r7, #36	; 0x24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	40013800 	.word	0x40013800
 8009fdc:	40020000 	.word	0x40020000
 8009fe0:	40020400 	.word	0x40020400
 8009fe4:	40020800 	.word	0x40020800
 8009fe8:	40020c00 	.word	0x40020c00
 8009fec:	40021000 	.word	0x40021000
 8009ff0:	40021400 	.word	0x40021400
 8009ff4:	40021800 	.word	0x40021800
 8009ff8:	40013c00 	.word	0x40013c00

08009ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	807b      	strh	r3, [r7, #2]
 800a008:	4613      	mov	r3, r2
 800a00a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a00c:	787b      	ldrb	r3, [r7, #1]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a012:	887a      	ldrh	r2, [r7, #2]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a018:	e003      	b.n	800a022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a01a:	887b      	ldrh	r3, [r7, #2]
 800a01c:	041a      	lsls	r2, r3, #16
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	619a      	str	r2, [r3, #24]
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a02e:	b480      	push	{r7}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a040:	887a      	ldrh	r2, [r7, #2]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4013      	ands	r3, r2
 800a046:	041a      	lsls	r2, r3, #16
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	43d9      	mvns	r1, r3
 800a04c:	887b      	ldrh	r3, [r7, #2]
 800a04e:	400b      	ands	r3, r1
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	619a      	str	r2, [r3, #24]
}
 800a056:	bf00      	nop
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
	...

0800a064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e12b      	b.n	800a2ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fd fbd4 	bl	8007838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2224      	movs	r2, #36	; 0x24
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0201 	bic.w	r2, r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a0c8:	f001 fc22 	bl	800b910 <HAL_RCC_GetPCLK1Freq>
 800a0cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	4a81      	ldr	r2, [pc, #516]	; (800a2d8 <HAL_I2C_Init+0x274>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d807      	bhi.n	800a0e8 <HAL_I2C_Init+0x84>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4a80      	ldr	r2, [pc, #512]	; (800a2dc <HAL_I2C_Init+0x278>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	bf94      	ite	ls
 800a0e0:	2301      	movls	r3, #1
 800a0e2:	2300      	movhi	r3, #0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	e006      	b.n	800a0f6 <HAL_I2C_Init+0x92>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	4a7d      	ldr	r2, [pc, #500]	; (800a2e0 <HAL_I2C_Init+0x27c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	bf94      	ite	ls
 800a0f0:	2301      	movls	r3, #1
 800a0f2:	2300      	movhi	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e0e7      	b.n	800a2ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4a78      	ldr	r2, [pc, #480]	; (800a2e4 <HAL_I2C_Init+0x280>)
 800a102:	fba2 2303 	umull	r2, r3, r2, r3
 800a106:	0c9b      	lsrs	r3, r3, #18
 800a108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4a6a      	ldr	r2, [pc, #424]	; (800a2d8 <HAL_I2C_Init+0x274>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d802      	bhi.n	800a138 <HAL_I2C_Init+0xd4>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3301      	adds	r3, #1
 800a136:	e009      	b.n	800a14c <HAL_I2C_Init+0xe8>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a13e:	fb02 f303 	mul.w	r3, r2, r3
 800a142:	4a69      	ldr	r2, [pc, #420]	; (800a2e8 <HAL_I2C_Init+0x284>)
 800a144:	fba2 2303 	umull	r2, r3, r2, r3
 800a148:	099b      	lsrs	r3, r3, #6
 800a14a:	3301      	adds	r3, #1
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	430b      	orrs	r3, r1
 800a152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a15e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	495c      	ldr	r1, [pc, #368]	; (800a2d8 <HAL_I2C_Init+0x274>)
 800a168:	428b      	cmp	r3, r1
 800a16a:	d819      	bhi.n	800a1a0 <HAL_I2C_Init+0x13c>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1e59      	subs	r1, r3, #1
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	005b      	lsls	r3, r3, #1
 800a176:	fbb1 f3f3 	udiv	r3, r1, r3
 800a17a:	1c59      	adds	r1, r3, #1
 800a17c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a180:	400b      	ands	r3, r1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <HAL_I2C_Init+0x138>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	1e59      	subs	r1, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	fbb1 f3f3 	udiv	r3, r1, r3
 800a194:	3301      	adds	r3, #1
 800a196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a19a:	e051      	b.n	800a240 <HAL_I2C_Init+0x1dc>
 800a19c:	2304      	movs	r3, #4
 800a19e:	e04f      	b.n	800a240 <HAL_I2C_Init+0x1dc>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d111      	bne.n	800a1cc <HAL_I2C_Init+0x168>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	1e58      	subs	r0, r3, #1
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6859      	ldr	r1, [r3, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	440b      	add	r3, r1
 800a1b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bf0c      	ite	eq
 800a1c4:	2301      	moveq	r3, #1
 800a1c6:	2300      	movne	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	e012      	b.n	800a1f2 <HAL_I2C_Init+0x18e>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	1e58      	subs	r0, r3, #1
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6859      	ldr	r1, [r3, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	0099      	lsls	r1, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bf0c      	ite	eq
 800a1ec:	2301      	moveq	r3, #1
 800a1ee:	2300      	movne	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <HAL_I2C_Init+0x196>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e022      	b.n	800a240 <HAL_I2C_Init+0x1dc>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10e      	bne.n	800a220 <HAL_I2C_Init+0x1bc>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1e58      	subs	r0, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6859      	ldr	r1, [r3, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	440b      	add	r3, r1
 800a210:	fbb0 f3f3 	udiv	r3, r0, r3
 800a214:	3301      	adds	r3, #1
 800a216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a21a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a21e:	e00f      	b.n	800a240 <HAL_I2C_Init+0x1dc>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	1e58      	subs	r0, r3, #1
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6859      	ldr	r1, [r3, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	0099      	lsls	r1, r3, #2
 800a230:	440b      	add	r3, r1
 800a232:	fbb0 f3f3 	udiv	r3, r0, r3
 800a236:	3301      	adds	r3, #1
 800a238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a23c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	6809      	ldr	r1, [r1, #0]
 800a244:	4313      	orrs	r3, r2
 800a246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69da      	ldr	r2, [r3, #28]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a26e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	6911      	ldr	r1, [r2, #16]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	68d2      	ldr	r2, [r2, #12]
 800a27a:	4311      	orrs	r1, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6812      	ldr	r2, [r2, #0]
 800a280:	430b      	orrs	r3, r1
 800a282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	431a      	orrs	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0201 	orr.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	000186a0 	.word	0x000186a0
 800a2dc:	001e847f 	.word	0x001e847f
 800a2e0:	003d08ff 	.word	0x003d08ff
 800a2e4:	431bde83 	.word	0x431bde83
 800a2e8:	10624dd3 	.word	0x10624dd3

0800a2ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	b08f      	sub	sp, #60	; 0x3c
 800a2f0:	af0a      	add	r7, sp, #40	; 0x28
 800a2f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e116      	b.n	800a52c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f007 fe65 	bl	8011fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2203      	movs	r2, #3
 800a322:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f004 fd22 	bl	800ed86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	687e      	ldr	r6, [r7, #4]
 800a34a:	466d      	mov	r5, sp
 800a34c:	f106 0410 	add.w	r4, r6, #16
 800a350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a358:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a35c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a360:	1d33      	adds	r3, r6, #4
 800a362:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f004 fbf9 	bl	800eb5c <USB_CoreInit>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e0d7      	b.n	800a52c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f004 fd10 	bl	800eda8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
 800a38c:	e04a      	b.n	800a424 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a38e:	7bfa      	ldrb	r2, [r7, #15]
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	4613      	mov	r3, r2
 800a394:	00db      	lsls	r3, r3, #3
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	440b      	add	r3, r1
 800a39c:	333d      	adds	r3, #61	; 0x3d
 800a39e:	2201      	movs	r2, #1
 800a3a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a3a2:	7bfa      	ldrb	r2, [r7, #15]
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	333c      	adds	r3, #60	; 0x3c
 800a3b2:	7bfa      	ldrb	r2, [r7, #15]
 800a3b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a3b6:	7bfa      	ldrb	r2, [r7, #15]
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	b298      	uxth	r0, r3
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3342      	adds	r3, #66	; 0x42
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a3ce:	7bfa      	ldrb	r2, [r7, #15]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	333f      	adds	r3, #63	; 0x3f
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	00db      	lsls	r3, r3, #3
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	3344      	adds	r3, #68	; 0x44
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a3f6:	7bfa      	ldrb	r2, [r7, #15]
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	3348      	adds	r3, #72	; 0x48
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a40a:	7bfa      	ldrb	r2, [r7, #15]
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4613      	mov	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	440b      	add	r3, r1
 800a418:	3350      	adds	r3, #80	; 0x50
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3301      	adds	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d3af      	bcc.n	800a38e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
 800a432:	e044      	b.n	800a4be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a434:	7bfa      	ldrb	r2, [r7, #15]
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4613      	mov	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a44a:	7bfa      	ldrb	r2, [r7, #15]
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	4613      	mov	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	440b      	add	r3, r1
 800a458:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a45c:	7bfa      	ldrb	r2, [r7, #15]
 800a45e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a460:	7bfa      	ldrb	r2, [r7, #15]
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4613      	mov	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	1a9b      	subs	r3, r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a476:	7bfa      	ldrb	r2, [r7, #15]
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4613      	mov	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	4613      	mov	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a4a2:	7bfa      	ldrb	r2, [r7, #15]
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	7bfa      	ldrb	r2, [r7, #15]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d3b5      	bcc.n	800a434 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	603b      	str	r3, [r7, #0]
 800a4ce:	687e      	ldr	r6, [r7, #4]
 800a4d0:	466d      	mov	r5, sp
 800a4d2:	f106 0410 	add.w	r4, r6, #16
 800a4d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a4de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a4e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800a4e6:	1d33      	adds	r3, r6, #4
 800a4e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4ea:	6838      	ldr	r0, [r7, #0]
 800a4ec:	f004 fca8 	bl	800ee40 <USB_DevInit>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d005      	beq.n	800a502 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e014      	b.n	800a52c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b01      	cmp	r3, #1
 800a518:	d102      	bne.n	800a520 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 f892 	bl	800b644 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4618      	mov	r0, r3
 800a526:	f005 fd17 	bl	800ff58 <USB_DevDisconnect>

  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a534 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_PCD_Start+0x1c>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e020      	b.n	800a592 <HAL_PCD_Start+0x5e>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d109      	bne.n	800a574 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a564:	2b01      	cmp	r3, #1
 800a566:	d005      	beq.n	800a574 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f004 fbf3 	bl	800ed64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f005 fcc7 	bl	800ff16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a59a:	b590      	push	{r4, r7, lr}
 800a59c:	b08d      	sub	sp, #52	; 0x34
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f005 fd85 	bl	80100c0 <USB_GetMode>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 83ca 	bne.w	800ad52 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f005 fce9 	bl	800ff9a <USB_ReadInterrupts>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 83c0 	beq.w	800ad50 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f005 fce0 	bl	800ff9a <USB_ReadInterrupts>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d107      	bne.n	800a5f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f002 0202 	and.w	r2, r2, #2
 800a5f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f005 fcce 	bl	800ff9a <USB_ReadInterrupts>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b10      	cmp	r3, #16
 800a606:	d161      	bne.n	800a6cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0210 	bic.w	r2, r2, #16
 800a616:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	4613      	mov	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	3304      	adds	r3, #4
 800a636:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	0c5b      	lsrs	r3, r3, #17
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	2b02      	cmp	r3, #2
 800a642:	d124      	bne.n	800a68e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a64a:	4013      	ands	r3, r2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d035      	beq.n	800a6bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	091b      	lsrs	r3, r3, #4
 800a658:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a65a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a65e:	b29b      	uxth	r3, r3
 800a660:	461a      	mov	r2, r3
 800a662:	6a38      	ldr	r0, [r7, #32]
 800a664:	f005 fb05 	bl	800fc72 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	091b      	lsrs	r3, r3, #4
 800a670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a674:	441a      	add	r2, r3
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	091b      	lsrs	r3, r3, #4
 800a682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a686:	441a      	add	r2, r3
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	619a      	str	r2, [r3, #24]
 800a68c:	e016      	b.n	800a6bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	0c5b      	lsrs	r3, r3, #17
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	2b06      	cmp	r3, #6
 800a698:	d110      	bne.n	800a6bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6a38      	ldr	r0, [r7, #32]
 800a6a6:	f005 fae4 	bl	800fc72 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	091b      	lsrs	r3, r3, #4
 800a6b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a6b6:	441a      	add	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f042 0210 	orr.w	r2, r2, #16
 800a6ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f005 fc62 	bl	800ff9a <USB_ReadInterrupts>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6e0:	d16e      	bne.n	800a7c0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f005 fc68 	bl	800ffc0 <USB_ReadDevAllOutEpInterrupt>
 800a6f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a6f2:	e062      	b.n	800a7ba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d057      	beq.n	800a7ae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f005 fc8d 	bl	8010028 <USB_ReadDevOutEPInterrupt>
 800a70e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00c      	beq.n	800a734 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	461a      	mov	r2, r3
 800a728:	2301      	movs	r3, #1
 800a72a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a72c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fdde 	bl	800b2f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00c      	beq.n	800a758 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	461a      	mov	r2, r3
 800a74c:	2308      	movs	r3, #8
 800a74e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fed8 	bl	800b508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f003 0310 	and.w	r3, r3, #16
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d008      	beq.n	800a774 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76e:	461a      	mov	r2, r3
 800a770:	2310      	movs	r3, #16
 800a772:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d008      	beq.n	800a790 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78a:	461a      	mov	r2, r3
 800a78c:	2320      	movs	r3, #32
 800a78e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d009      	beq.n	800a7ae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d199      	bne.n	800a6f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f005 fbe8 	bl	800ff9a <USB_ReadInterrupts>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7d4:	f040 80c0 	bne.w	800a958 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f005 fc09 	bl	800fff4 <USB_ReadDevAllInEpInterrupt>
 800a7e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a7e8:	e0b2      	b.n	800a950 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80a7 	beq.w	800a944 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	4611      	mov	r1, r2
 800a800:	4618      	mov	r0, r3
 800a802:	f005 fc2f 	bl	8010064 <USB_ReadDevInEPInterrupt>
 800a806:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d057      	beq.n	800a8c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	2201      	movs	r2, #1
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	43db      	mvns	r3, r3
 800a82c:	69f9      	ldr	r1, [r7, #28]
 800a82e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a832:	4013      	ands	r3, r2
 800a834:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a842:	461a      	mov	r2, r3
 800a844:	2301      	movs	r3, #1
 800a846:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d132      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a854:	4613      	mov	r3, r2
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	3348      	adds	r3, #72	; 0x48
 800a860:	6819      	ldr	r1, [r3, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4403      	add	r3, r0
 800a870:	3344      	adds	r3, #68	; 0x44
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4419      	add	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	4613      	mov	r3, r2
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4403      	add	r3, r0
 800a884:	3348      	adds	r3, #72	; 0x48
 800a886:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d113      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x31c>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	440b      	add	r3, r1
 800a89c:	3350      	adds	r3, #80	; 0x50
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d108      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	f005 fc37 	bl	8010124 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f007 fc36 	bl	801212e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d8:	461a      	mov	r2, r3
 800a8da:	2308      	movs	r3, #8
 800a8dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	2310      	movs	r3, #16
 800a8f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d008      	beq.n	800a916 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	461a      	mov	r2, r3
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d008      	beq.n	800a932 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92c:	461a      	mov	r2, r3
 800a92e:	2302      	movs	r3, #2
 800a930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a93c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fc48 	bl	800b1d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	3301      	adds	r3, #1
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	085b      	lsrs	r3, r3, #1
 800a94e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	f47f af49 	bne.w	800a7ea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f005 fb1c 	bl	800ff9a <USB_ReadInterrupts>
 800a962:	4603      	mov	r3, r0
 800a964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a96c:	d122      	bne.n	800a9b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	69fa      	ldr	r2, [r7, #28]
 800a978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a97c:	f023 0301 	bic.w	r3, r3, #1
 800a980:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d108      	bne.n	800a99e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a994:	2100      	movs	r1, #0
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f007 fe18 	bl	80125cc <HAL_PCDEx_LPM_Callback>
 800a99c:	e002      	b.n	800a9a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f007 fc3c 	bl	801221c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	695a      	ldr	r2, [r3, #20]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a9b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f005 faee 	bl	800ff9a <USB_ReadInterrupts>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c8:	d112      	bne.n	800a9f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d102      	bne.n	800a9e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f007 fbf8 	bl	80121d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695a      	ldr	r2, [r3, #20]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a9ee:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f005 fad0 	bl	800ff9a <USB_ReadInterrupts>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa04:	d121      	bne.n	800aa4a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800aa14:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d111      	bne.n	800aa44 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2e:	089b      	lsrs	r3, r3, #2
 800aa30:	f003 020f 	and.w	r2, r3, #15
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f007 fdc5 	bl	80125cc <HAL_PCDEx_LPM_Callback>
 800aa42:	e002      	b.n	800aa4a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f007 fbc3 	bl	80121d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f005 faa3 	bl	800ff9a <USB_ReadInterrupts>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5e:	f040 80c7 	bne.w	800abf0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2110      	movs	r1, #16
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f004 fb3d 	bl	800f0fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa82:	2300      	movs	r3, #0
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa86:	e056      	b.n	800ab36 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa94:	461a      	mov	r2, r3
 800aa96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaac:	0151      	lsls	r1, r2, #5
 800aaae:	69fa      	ldr	r2, [r7, #28]
 800aab0:	440a      	add	r2, r1
 800aab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aaba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	015a      	lsls	r2, r3, #5
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aacc:	0151      	lsls	r1, r2, #5
 800aace:	69fa      	ldr	r2, [r7, #28]
 800aad0:	440a      	add	r2, r1
 800aad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aada:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab00:	0151      	lsls	r1, r2, #5
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	440a      	add	r2, r1
 800ab06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	3301      	adds	r3, #1
 800ab34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3a3      	bcc.n	800aa88 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	69fa      	ldr	r2, [r7, #28]
 800ab4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab4e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ab52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d016      	beq.n	800ab8a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab6c:	f043 030b 	orr.w	r3, r3, #11
 800ab70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	69fa      	ldr	r2, [r7, #28]
 800ab7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab82:	f043 030b 	orr.w	r3, r3, #11
 800ab86:	6453      	str	r3, [r2, #68]	; 0x44
 800ab88:	e015      	b.n	800abb6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab9c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800aba0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abb0:	f043 030b 	orr.w	r3, r3, #11
 800abb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69fa      	ldr	r2, [r7, #28]
 800abc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abda:	461a      	mov	r2, r3
 800abdc:	f005 faa2 	bl	8010124 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695a      	ldr	r2, [r3, #20]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800abee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f005 f9d0 	bl	800ff9a <USB_ReadInterrupts>
 800abfa:	4603      	mov	r3, r0
 800abfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac04:	d124      	bne.n	800ac50 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f005 fa66 	bl	80100dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f004 face 	bl	800f1b6 <USB_GetDevSpeed>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681c      	ldr	r4, [r3, #0]
 800ac26:	f000 fe67 	bl	800b8f8 <HAL_RCC_GetHCLKFreq>
 800ac2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	461a      	mov	r2, r3
 800ac34:	4620      	mov	r0, r4
 800ac36:	f003 fff3 	bl	800ec20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f007 fa9f 	bl	801217e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	695a      	ldr	r2, [r3, #20]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ac4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f005 f9a0 	bl	800ff9a <USB_ReadInterrupts>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b08      	cmp	r3, #8
 800ac62:	d10a      	bne.n	800ac7a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f007 fa7c 	bl	8012162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	695a      	ldr	r2, [r3, #20]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f002 0208 	and.w	r2, r2, #8
 800ac78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f005 f98b 	bl	800ff9a <USB_ReadInterrupts>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac8e:	d10f      	bne.n	800acb0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f007 fade 	bl	801225c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695a      	ldr	r2, [r3, #20]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800acae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f005 f970 	bl	800ff9a <USB_ReadInterrupts>
 800acba:	4603      	mov	r3, r0
 800acbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acc4:	d10f      	bne.n	800ace6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	b2db      	uxtb	r3, r3
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f007 fab1 	bl	8012238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	695a      	ldr	r2, [r3, #20]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ace4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4618      	mov	r0, r3
 800acec:	f005 f955 	bl	800ff9a <USB_ReadInterrupts>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800acf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfa:	d10a      	bne.n	800ad12 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f007 fabf 	bl	8012280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	695a      	ldr	r2, [r3, #20]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ad10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f005 f93f 	bl	800ff9a <USB_ReadInterrupts>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d115      	bne.n	800ad52 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f007 faaf 	bl	801229c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6859      	ldr	r1, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
 800ad4e:	e000      	b.n	800ad52 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800ad50:	bf00      	nop
    }
  }
}
 800ad52:	3734      	adds	r7, #52	; 0x34
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd90      	pop	{r4, r7, pc}

0800ad58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d101      	bne.n	800ad72 <HAL_PCD_SetAddress+0x1a>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e013      	b.n	800ad9a <HAL_PCD_SetAddress+0x42>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	78fa      	ldrb	r2, [r7, #3]
 800ad7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	78fa      	ldrb	r2, [r7, #3]
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f005 f89d 	bl	800feca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	4608      	mov	r0, r1
 800adac:	4611      	mov	r1, r2
 800adae:	461a      	mov	r2, r3
 800adb0:	4603      	mov	r3, r0
 800adb2:	70fb      	strb	r3, [r7, #3]
 800adb4:	460b      	mov	r3, r1
 800adb6:	803b      	strh	r3, [r7, #0]
 800adb8:	4613      	mov	r3, r2
 800adba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800adc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da0f      	bge.n	800ade8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	f003 020f 	and.w	r2, r3, #15
 800adce:	4613      	mov	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	3338      	adds	r3, #56	; 0x38
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	4413      	add	r3, r2
 800addc:	3304      	adds	r3, #4
 800adde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2201      	movs	r2, #1
 800ade4:	705a      	strb	r2, [r3, #1]
 800ade6:	e00f      	b.n	800ae08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	f003 020f 	and.w	r2, r3, #15
 800adee:	4613      	mov	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	1a9b      	subs	r3, r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	3304      	adds	r3, #4
 800ae00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ae14:	883a      	ldrh	r2, [r7, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	78ba      	ldrb	r2, [r7, #2]
 800ae1e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ae32:	78bb      	ldrb	r3, [r7, #2]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d102      	bne.n	800ae3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d101      	bne.n	800ae4c <HAL_PCD_EP_Open+0xaa>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e00e      	b.n	800ae6a <HAL_PCD_EP_Open+0xc8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68f9      	ldr	r1, [r7, #12]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f004 f9d0 	bl	800f200 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ae68:	7afb      	ldrb	r3, [r7, #11]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ae7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da0f      	bge.n	800aea6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	f003 020f 	and.w	r2, r3, #15
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	3338      	adds	r3, #56	; 0x38
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4413      	add	r3, r2
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	705a      	strb	r2, [r3, #1]
 800aea4:	e00f      	b.n	800aec6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	f003 020f 	and.w	r2, r3, #15
 800aeac:	4613      	mov	r3, r2
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	1a9b      	subs	r3, r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4413      	add	r3, r2
 800aebc:	3304      	adds	r3, #4
 800aebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d101      	bne.n	800aee0 <HAL_PCD_EP_Close+0x6e>
 800aedc:	2302      	movs	r3, #2
 800aede:	e00e      	b.n	800aefe <HAL_PCD_EP_Close+0x8c>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f004 fa0e 	bl	800f310 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b086      	sub	sp, #24
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
 800af12:	460b      	mov	r3, r1
 800af14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	f003 020f 	and.w	r2, r3, #15
 800af1c:	4613      	mov	r3, r2
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4413      	add	r3, r2
 800af2c:	3304      	adds	r3, #4
 800af2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2200      	movs	r2, #0
 800af40:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2200      	movs	r2, #0
 800af46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d102      	bne.n	800af62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d109      	bne.n	800af80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6818      	ldr	r0, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	461a      	mov	r2, r3
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	f004 fce9 	bl	800f950 <USB_EP0StartXfer>
 800af7e:	e008      	b.n	800af92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	461a      	mov	r2, r3
 800af8c:	6979      	ldr	r1, [r7, #20]
 800af8e:	f004 fa9b 	bl	800f4c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	f003 020f 	and.w	r2, r3, #15
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4613      	mov	r3, r2
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800afbe:	681b      	ldr	r3, [r3, #0]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	460b      	mov	r3, r1
 800afda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	f003 020f 	and.w	r2, r3, #15
 800afe2:	4613      	mov	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	3338      	adds	r3, #56	; 0x38
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	3304      	adds	r3, #4
 800aff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2200      	movs	r2, #0
 800b004:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2201      	movs	r2, #1
 800b00a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	b2da      	uxtb	r2, r3
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d102      	bne.n	800b026 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	f003 030f 	and.w	r3, r3, #15
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d109      	bne.n	800b044 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	f004 fc87 	bl	800f950 <USB_EP0StartXfer>
 800b042:	e008      	b.n	800b056 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	f004 fa39 	bl	800f4c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	f003 020f 	and.w	r2, r3, #15
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	429a      	cmp	r2, r3
 800b078:	d901      	bls.n	800b07e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e050      	b.n	800b120 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b07e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b082:	2b00      	cmp	r3, #0
 800b084:	da0f      	bge.n	800b0a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	4613      	mov	r3, r2
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	1a9b      	subs	r3, r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	3338      	adds	r3, #56	; 0x38
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	4413      	add	r3, r2
 800b09a:	3304      	adds	r3, #4
 800b09c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	705a      	strb	r2, [r3, #1]
 800b0a4:	e00d      	b.n	800b0c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b0a6:	78fa      	ldrb	r2, [r7, #3]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0c8:	78fb      	ldrb	r3, [r7, #3]
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d101      	bne.n	800b0e2 <HAL_PCD_EP_SetStall+0x82>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	e01e      	b.n	800b120 <HAL_PCD_EP_SetStall+0xc0>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68f9      	ldr	r1, [r7, #12]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f004 fe16 	bl	800fd22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	f003 030f 	and.w	r3, r3, #15
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	b2d9      	uxtb	r1, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b110:	461a      	mov	r2, r3
 800b112:	f005 f807 	bl	8010124 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	f003 020f 	and.w	r2, r3, #15
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d901      	bls.n	800b146 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e042      	b.n	800b1cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	da0f      	bge.n	800b16e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b14e:	78fb      	ldrb	r3, [r7, #3]
 800b150:	f003 020f 	and.w	r2, r3, #15
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	3338      	adds	r3, #56	; 0x38
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	4413      	add	r3, r2
 800b162:	3304      	adds	r3, #4
 800b164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2201      	movs	r2, #1
 800b16a:	705a      	strb	r2, [r3, #1]
 800b16c:	e00f      	b.n	800b18e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	4613      	mov	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	4413      	add	r3, r2
 800b184:	3304      	adds	r3, #4
 800b186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d101      	bne.n	800b1ae <HAL_PCD_EP_ClrStall+0x86>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	e00e      	b.n	800b1cc <HAL_PCD_EP_ClrStall+0xa4>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f004 fe1e 	bl	800fdfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	; 0x28
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	3338      	adds	r3, #56	; 0x38
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	699a      	ldr	r2, [r3, #24]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	429a      	cmp	r2, r3
 800b206:	d901      	bls.n	800b20c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e06c      	b.n	800b2e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	695a      	ldr	r2, [r3, #20]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d902      	bls.n	800b228 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	3303      	adds	r3, #3
 800b22c:	089b      	lsrs	r3, r3, #2
 800b22e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b230:	e02b      	b.n	800b28a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	695a      	ldr	r2, [r3, #20]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	429a      	cmp	r2, r3
 800b246:	d902      	bls.n	800b24e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	3303      	adds	r3, #3
 800b252:	089b      	lsrs	r3, r3, #2
 800b254:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68d9      	ldr	r1, [r3, #12]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b266:	b2db      	uxtb	r3, r3
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4603      	mov	r3, r0
 800b26c:	6978      	ldr	r0, [r7, #20]
 800b26e:	f004 fcc2 	bl	800fbf6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	68da      	ldr	r2, [r3, #12]
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	441a      	add	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	441a      	add	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d809      	bhi.n	800b2b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	699a      	ldr	r2, [r3, #24]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d203      	bcs.n	800b2b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1be      	bne.n	800b232 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	695a      	ldr	r2, [r3, #20]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d811      	bhi.n	800b2e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	43db      	mvns	r3, r3
 800b2da:	6939      	ldr	r1, [r7, #16]
 800b2dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	333c      	adds	r3, #60	; 0x3c
 800b308:	3304      	adds	r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	2b01      	cmp	r3, #1
 800b324:	f040 80a0 	bne.w	800b468 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f003 0308 	and.w	r3, r3, #8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d015      	beq.n	800b35e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	4a72      	ldr	r2, [pc, #456]	; (800b500 <PCD_EP_OutXfrComplete_int+0x210>)
 800b336:	4293      	cmp	r3, r2
 800b338:	f240 80dd 	bls.w	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 80d7 	beq.w	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b354:	461a      	mov	r2, r3
 800b356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b35a:	6093      	str	r3, [r2, #8]
 800b35c:	e0cb      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f003 0320 	and.w	r3, r3, #32
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b374:	461a      	mov	r2, r3
 800b376:	2320      	movs	r3, #32
 800b378:	6093      	str	r3, [r2, #8]
 800b37a:	e0bc      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	f040 80b7 	bne.w	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4a5d      	ldr	r2, [pc, #372]	; (800b500 <PCD_EP_OutXfrComplete_int+0x210>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d90f      	bls.n	800b3b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3ac:	6093      	str	r3, [r2, #8]
 800b3ae:	e0a2      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	1a9b      	subs	r3, r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b3c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	0159      	lsls	r1, r3, #5
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	440b      	add	r3, r1
 800b3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b3d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	1a9b      	subs	r3, r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4403      	add	r3, r0
 800b3e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b3ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	1a9b      	subs	r3, r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	440b      	add	r3, r1
 800b3fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	1a9b      	subs	r3, r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4403      	add	r3, r0
 800b40e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4419      	add	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	4613      	mov	r3, r2
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	1a9b      	subs	r3, r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4403      	add	r3, r0
 800b424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b428:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d114      	bne.n	800b45a <PCD_EP_OutXfrComplete_int+0x16a>
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4613      	mov	r3, r2
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	1a9b      	subs	r3, r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	440b      	add	r3, r1
 800b43e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d108      	bne.n	800b45a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b452:	461a      	mov	r2, r3
 800b454:	2101      	movs	r1, #1
 800b456:	f004 fe65 	bl	8010124 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f006 fe49 	bl	80120f8 <HAL_PCD_DataOutStageCallback>
 800b466:	e046      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4a26      	ldr	r2, [pc, #152]	; (800b504 <PCD_EP_OutXfrComplete_int+0x214>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d124      	bne.n	800b4ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b486:	461a      	mov	r2, r3
 800b488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b48c:	6093      	str	r3, [r2, #8]
 800b48e:	e032      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	f003 0320 	and.w	r3, r3, #32
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f006 fe20 	bl	80120f8 <HAL_PCD_DataOutStageCallback>
 800b4b8:	e01d      	b.n	800b4f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d114      	bne.n	800b4ea <PCD_EP_OutXfrComplete_int+0x1fa>
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d108      	bne.n	800b4ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	f004 fe1d 	bl	8010124 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f006 fe01 	bl	80120f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	4f54300a 	.word	0x4f54300a
 800b504:	4f54310a 	.word	0x4f54310a

0800b508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	333c      	adds	r3, #60	; 0x3c
 800b520:	3304      	adds	r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4a15      	ldr	r2, [pc, #84]	; (800b590 <PCD_EP_OutSetupPacket_int+0x88>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d90e      	bls.n	800b55c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b544:	2b00      	cmp	r3, #0
 800b546:	d009      	beq.n	800b55c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b554:	461a      	mov	r2, r3
 800b556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f006 fdb9 	bl	80120d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a0a      	ldr	r2, [pc, #40]	; (800b590 <PCD_EP_OutSetupPacket_int+0x88>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d90c      	bls.n	800b584 <PCD_EP_OutSetupPacket_int+0x7c>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d108      	bne.n	800b584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b57c:	461a      	mov	r2, r3
 800b57e:	2101      	movs	r1, #1
 800b580:	f004 fdd0 	bl	8010124 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	4f54300a 	.word	0x4f54300a

0800b594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b5ac:	78fb      	ldrb	r3, [r7, #3]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d107      	bne.n	800b5c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b5b2:	883b      	ldrh	r3, [r7, #0]
 800b5b4:	0419      	lsls	r1, r3, #16
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	629a      	str	r2, [r3, #40]	; 0x28
 800b5c0:	e028      	b.n	800b614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c8:	0c1b      	lsrs	r3, r3, #16
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
 800b5d4:	e00d      	b.n	800b5f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	3340      	adds	r3, #64	; 0x40
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
 800b5f2:	7bfa      	ldrb	r2, [r7, #15]
 800b5f4:	78fb      	ldrb	r3, [r7, #3]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3ec      	bcc.n	800b5d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b5fc:	883b      	ldrh	r3, [r7, #0]
 800b5fe:	0418      	lsls	r0, r3, #16
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6819      	ldr	r1, [r3, #0]
 800b604:	78fb      	ldrb	r3, [r7, #3]
 800b606:	3b01      	subs	r3, #1
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	4302      	orrs	r2, r0
 800b60c:	3340      	adds	r3, #64	; 0x40
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	440b      	add	r3, r1
 800b612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	460b      	mov	r3, r1
 800b62c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	887a      	ldrh	r2, [r7, #2]
 800b634:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b676:	f043 0303 	orr.w	r3, r3, #3
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b696:	2300      	movs	r3, #0
 800b698:	603b      	str	r3, [r7, #0]
 800b69a:	4b20      	ldr	r3, [pc, #128]	; (800b71c <HAL_PWREx_EnableOverDrive+0x90>)
 800b69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69e:	4a1f      	ldr	r2, [pc, #124]	; (800b71c <HAL_PWREx_EnableOverDrive+0x90>)
 800b6a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6a4:	6413      	str	r3, [r2, #64]	; 0x40
 800b6a6:	4b1d      	ldr	r3, [pc, #116]	; (800b71c <HAL_PWREx_EnableOverDrive+0x90>)
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	603b      	str	r3, [r7, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b6b2:	4b1b      	ldr	r3, [pc, #108]	; (800b720 <HAL_PWREx_EnableOverDrive+0x94>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6b8:	f7fc fc82 	bl	8007fc0 <HAL_GetTick>
 800b6bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b6be:	e009      	b.n	800b6d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b6c0:	f7fc fc7e 	bl	8007fc0 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6ce:	d901      	bls.n	800b6d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e01f      	b.n	800b714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <HAL_PWREx_EnableOverDrive+0x98>)
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6e0:	d1ee      	bne.n	800b6c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b6e2:	4b11      	ldr	r3, [pc, #68]	; (800b728 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6e8:	f7fc fc6a 	bl	8007fc0 <HAL_GetTick>
 800b6ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b6ee:	e009      	b.n	800b704 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b6f0:	f7fc fc66 	bl	8007fc0 <HAL_GetTick>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6fe:	d901      	bls.n	800b704 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e007      	b.n	800b714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <HAL_PWREx_EnableOverDrive+0x98>)
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b710:	d1ee      	bne.n	800b6f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	40023800 	.word	0x40023800
 800b720:	420e0040 	.word	0x420e0040
 800b724:	40007000 	.word	0x40007000
 800b728:	420e0044 	.word	0x420e0044

0800b72c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e0cc      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b740:	4b68      	ldr	r3, [pc, #416]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 030f 	and.w	r3, r3, #15
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d90c      	bls.n	800b768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b74e:	4b65      	ldr	r3, [pc, #404]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b756:	4b63      	ldr	r3, [pc, #396]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 030f 	and.w	r3, r3, #15
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d001      	beq.n	800b768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e0b8      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d020      	beq.n	800b7b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b780:	4b59      	ldr	r3, [pc, #356]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	4a58      	ldr	r2, [pc, #352]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b78a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0308 	and.w	r3, r3, #8
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b798:	4b53      	ldr	r3, [pc, #332]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	4a52      	ldr	r2, [pc, #328]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b79e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b7a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7a4:	4b50      	ldr	r3, [pc, #320]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	494d      	ldr	r1, [pc, #308]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d044      	beq.n	800b84c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d107      	bne.n	800b7da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7ca:	4b47      	ldr	r3, [pc, #284]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d119      	bne.n	800b80a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e07f      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d003      	beq.n	800b7ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d107      	bne.n	800b7fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7ea:	4b3f      	ldr	r3, [pc, #252]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d109      	bne.n	800b80a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e06f      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7fa:	4b3b      	ldr	r3, [pc, #236]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e067      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b80a:	4b37      	ldr	r3, [pc, #220]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f023 0203 	bic.w	r2, r3, #3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	4934      	ldr	r1, [pc, #208]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b81c:	f7fc fbd0 	bl	8007fc0 <HAL_GetTick>
 800b820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b822:	e00a      	b.n	800b83a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b824:	f7fc fbcc 	bl	8007fc0 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b832:	4293      	cmp	r3, r2
 800b834:	d901      	bls.n	800b83a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e04f      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b83a:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f003 020c 	and.w	r2, r3, #12
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	429a      	cmp	r2, r3
 800b84a:	d1eb      	bne.n	800b824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b84c:	4b25      	ldr	r3, [pc, #148]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 030f 	and.w	r3, r3, #15
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d20c      	bcs.n	800b874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b85a:	4b22      	ldr	r3, [pc, #136]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b862:	4b20      	ldr	r3, [pc, #128]	; (800b8e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d001      	beq.n	800b874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e032      	b.n	800b8da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d008      	beq.n	800b892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b880:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	4916      	ldr	r1, [pc, #88]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0308 	and.w	r3, r3, #8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d009      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	00db      	lsls	r3, r3, #3
 800b8ac:	490e      	ldr	r1, [pc, #56]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b8b2:	f000 fb7f 	bl	800bfb4 <HAL_RCC_GetSysClockFreq>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	091b      	lsrs	r3, r3, #4
 800b8be:	f003 030f 	and.w	r3, r3, #15
 800b8c2:	490a      	ldr	r1, [pc, #40]	; (800b8ec <HAL_RCC_ClockConfig+0x1c0>)
 800b8c4:	5ccb      	ldrb	r3, [r1, r3]
 800b8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ca:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b8cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b8ce:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <HAL_RCC_ClockConfig+0x1c8>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fc fb30 	bl	8007f38 <HAL_InitTick>

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	40023c00 	.word	0x40023c00
 800b8e8:	40023800 	.word	0x40023800
 800b8ec:	0802024c 	.word	0x0802024c
 800b8f0:	20000000 	.word	0x20000000
 800b8f4:	20000004 	.word	0x20000004

0800b8f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8fc:	4b03      	ldr	r3, [pc, #12]	; (800b90c <HAL_RCC_GetHCLKFreq+0x14>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
}
 800b900:	4618      	mov	r0, r3
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	20000000 	.word	0x20000000

0800b910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b914:	f7ff fff0 	bl	800b8f8 <HAL_RCC_GetHCLKFreq>
 800b918:	4602      	mov	r2, r0
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	0a9b      	lsrs	r3, r3, #10
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	4903      	ldr	r1, [pc, #12]	; (800b934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b926:	5ccb      	ldrb	r3, [r1, r3]
 800b928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40023800 	.word	0x40023800
 800b934:	0802025c 	.word	0x0802025c

0800b938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b93c:	f7ff ffdc 	bl	800b8f8 <HAL_RCC_GetHCLKFreq>
 800b940:	4602      	mov	r2, r0
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	0b5b      	lsrs	r3, r3, #13
 800b948:	f003 0307 	and.w	r3, r3, #7
 800b94c:	4903      	ldr	r1, [pc, #12]	; (800b95c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b94e:	5ccb      	ldrb	r3, [r1, r3]
 800b950:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b954:	4618      	mov	r0, r3
 800b956:	bd80      	pop	{r7, pc}
 800b958:	40023800 	.word	0x40023800
 800b95c:	0802025c 	.word	0x0802025c

0800b960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08c      	sub	sp, #48	; 0x30
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b970:	2300      	movs	r3, #0
 800b972:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b998:	4b6f      	ldr	r3, [pc, #444]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b99e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	496c      	ldr	r1, [pc, #432]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d010      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b9c6:	4b64      	ldr	r3, [pc, #400]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d4:	4960      	ldr	r1, [pc, #384]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0304 	and.w	r3, r3, #4
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d017      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9f4:	4b58      	ldr	r3, [pc, #352]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba02:	4955      	ldr	r1, [pc, #340]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba04:	4313      	orrs	r3, r2
 800ba06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba12:	d101      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800ba14:	2301      	movs	r3, #1
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800ba20:	2301      	movs	r3, #1
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0308 	and.w	r3, r3, #8
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d017      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba30:	4b49      	ldr	r3, [pc, #292]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3e:	4946      	ldr	r1, [pc, #280]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba40:	4313      	orrs	r3, r2
 800ba42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba4e:	d101      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800ba50:	2301      	movs	r3, #1
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0320 	and.w	r3, r3, #32
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 808a 	beq.w	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60bb      	str	r3, [r7, #8]
 800ba72:	4b39      	ldr	r3, [pc, #228]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	4a38      	ldr	r2, [pc, #224]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba7c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba7e:	4b36      	ldr	r3, [pc, #216]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba86:	60bb      	str	r3, [r7, #8]
 800ba88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ba8a:	4b34      	ldr	r3, [pc, #208]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a33      	ldr	r2, [pc, #204]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800ba90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba96:	f7fc fa93 	bl	8007fc0 <HAL_GetTick>
 800ba9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba9c:	e008      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ba9e:	f7fc fa8f 	bl	8007fc0 <HAL_GetTick>
 800baa2:	4602      	mov	r2, r0
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	1ad3      	subs	r3, r2, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d901      	bls.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e278      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bab0:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0f0      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800babc:	4b26      	ldr	r3, [pc, #152]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800babe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bac4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02f      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad4:	6a3a      	ldr	r2, [r7, #32]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d028      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bada:	4b1f      	ldr	r3, [pc, #124]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bae2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800bae6:	2201      	movs	r2, #1
 800bae8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800baea:	4b1d      	ldr	r3, [pc, #116]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800baf0:	4a19      	ldr	r2, [pc, #100]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800baf6:	4b18      	ldr	r3, [pc, #96]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d114      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bb02:	f7fc fa5d 	bl	8007fc0 <HAL_GetTick>
 800bb06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb08:	e00a      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb0a:	f7fc fa59 	bl	8007fc0 <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d901      	bls.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e240      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb20:	4b0d      	ldr	r3, [pc, #52]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0ee      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb38:	d114      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800bb3a:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb4e:	4902      	ldr	r1, [pc, #8]	; (800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	608b      	str	r3, [r1, #8]
 800bb54:	e00c      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800bb56:	bf00      	nop
 800bb58:	40023800 	.word	0x40023800
 800bb5c:	40007000 	.word	0x40007000
 800bb60:	42470e40 	.word	0x42470e40
 800bb64:	4b4a      	ldr	r3, [pc, #296]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	4a49      	ldr	r2, [pc, #292]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb6e:	6093      	str	r3, [r2, #8]
 800bb70:	4b47      	ldr	r3, [pc, #284]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb7c:	4944      	ldr	r1, [pc, #272]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d004      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bb94:	4b3f      	ldr	r3, [pc, #252]	; (800bc94 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800bb96:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00a      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800bba4:	4b3a      	ldr	r3, [pc, #232]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb2:	4937      	ldr	r1, [pc, #220]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bbc6:	4b32      	ldr	r3, [pc, #200]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbcc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd4:	492e      	ldr	r1, [pc, #184]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d011      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bbe8:	4b29      	ldr	r3, [pc, #164]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf6:	4926      	ldr	r1, [pc, #152]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc06:	d101      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00a      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bc18:	4b1d      	ldr	r3, [pc, #116]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc26:	491a      	ldr	r1, [pc, #104]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d011      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	4911      	ldr	r1, [pc, #68]	; (800bc90 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc58:	d101      	bne.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d005      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc6c:	f040 80ff 	bne.w	800be6e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bc70:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bc76:	f7fc f9a3 	bl	8007fc0 <HAL_GetTick>
 800bc7a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc7c:	e00e      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bc7e:	f7fc f99f 	bl	8007fc0 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d907      	bls.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e188      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bc90:	40023800 	.word	0x40023800
 800bc94:	424711e0 	.word	0x424711e0
 800bc98:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc9c:	4b7e      	ldr	r3, [pc, #504]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1ea      	bne.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d003      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d028      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d124      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bcd0:	4b71      	ldr	r3, [pc, #452]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcd6:	0c1b      	lsrs	r3, r3, #16
 800bcd8:	f003 0303 	and.w	r3, r3, #3
 800bcdc:	3301      	adds	r3, #1
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bce2:	4b6d      	ldr	r3, [pc, #436]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce8:	0e1b      	lsrs	r3, r3, #24
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	019b      	lsls	r3, r3, #6
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	085b      	lsrs	r3, r3, #1
 800bd00:	3b01      	subs	r3, #1
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	431a      	orrs	r2, r3
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	061b      	lsls	r3, r3, #24
 800bd0a:	431a      	orrs	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	071b      	lsls	r3, r3, #28
 800bd12:	4961      	ldr	r1, [pc, #388]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0304 	and.w	r3, r3, #4
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d004      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd2e:	d00a      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d035      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd44:	d130      	bne.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bd46:	4b54      	ldr	r3, [pc, #336]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4c:	0c1b      	lsrs	r3, r3, #16
 800bd4e:	f003 0303 	and.w	r3, r3, #3
 800bd52:	3301      	adds	r3, #1
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bd58:	4b4f      	ldr	r3, [pc, #316]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd5e:	0f1b      	lsrs	r3, r3, #28
 800bd60:	f003 0307 	and.w	r3, r3, #7
 800bd64:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	019b      	lsls	r3, r3, #6
 800bd70:	431a      	orrs	r2, r3
 800bd72:	69fb      	ldr	r3, [r7, #28]
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	3b01      	subs	r3, #1
 800bd78:	041b      	lsls	r3, r3, #16
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	431a      	orrs	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	071b      	lsls	r3, r3, #28
 800bd88:	4943      	ldr	r1, [pc, #268]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bd90:	4b41      	ldr	r3, [pc, #260]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd96:	f023 021f 	bic.w	r2, r3, #31
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	493d      	ldr	r1, [pc, #244]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d029      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdbc:	d124      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bdbe:	4b36      	ldr	r3, [pc, #216]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc4:	0c1b      	lsrs	r3, r3, #16
 800bdc6:	f003 0303 	and.w	r3, r3, #3
 800bdca:	3301      	adds	r3, #1
 800bdcc:	005b      	lsls	r3, r3, #1
 800bdce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bdd0:	4b31      	ldr	r3, [pc, #196]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdd6:	0f1b      	lsrs	r3, r3, #28
 800bdd8:	f003 0307 	and.w	r3, r3, #7
 800bddc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	019b      	lsls	r3, r3, #6
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	085b      	lsrs	r3, r3, #1
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	041b      	lsls	r3, r3, #16
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	061b      	lsls	r3, r3, #24
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	071b      	lsls	r3, r3, #28
 800be00:	4925      	ldr	r1, [pc, #148]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be02:	4313      	orrs	r3, r2
 800be04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be10:	2b00      	cmp	r3, #0
 800be12:	d016      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	019b      	lsls	r3, r3, #6
 800be1e:	431a      	orrs	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	3b01      	subs	r3, #1
 800be28:	041b      	lsls	r3, r3, #16
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	061b      	lsls	r3, r3, #24
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	071b      	lsls	r3, r3, #28
 800be3a:	4917      	ldr	r1, [pc, #92]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be42:	4b16      	ldr	r3, [pc, #88]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800be44:	2201      	movs	r2, #1
 800be46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be48:	f7fc f8ba 	bl	8007fc0 <HAL_GetTick>
 800be4c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be4e:	e008      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800be50:	f7fc f8b6 	bl	8007fc0 <HAL_GetTick>
 800be54:	4602      	mov	r2, r0
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d901      	bls.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e09f      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be62:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0f0      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	2b01      	cmp	r3, #1
 800be72:	f040 8095 	bne.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800be76:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be7c:	f7fc f8a0 	bl	8007fc0 <HAL_GetTick>
 800be80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800be82:	e00f      	b.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800be84:	f7fc f89c 	bl	8007fc0 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d908      	bls.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e085      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800be96:	bf00      	nop
 800be98:	40023800 	.word	0x40023800
 800be9c:	42470068 	.word	0x42470068
 800bea0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bea4:	4b41      	ldr	r3, [pc, #260]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb0:	d0e8      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0304 	and.w	r3, r3, #4
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02b      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d127      	bne.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800beda:	4b34      	ldr	r3, [pc, #208]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee0:	0c1b      	lsrs	r3, r3, #16
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	3301      	adds	r3, #1
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	699a      	ldr	r2, [r3, #24]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	019b      	lsls	r3, r3, #6
 800bef6:	431a      	orrs	r2, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	085b      	lsrs	r3, r3, #1
 800befc:	3b01      	subs	r3, #1
 800befe:	041b      	lsls	r3, r3, #16
 800bf00:	431a      	orrs	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	061b      	lsls	r3, r3, #24
 800bf08:	4928      	ldr	r1, [pc, #160]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bf10:	4b26      	ldr	r3, [pc, #152]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	4922      	ldr	r1, [pc, #136]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf24:	4313      	orrs	r3, r2
 800bf26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d01d      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf3e:	d118      	bne.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf46:	0e1b      	lsrs	r3, r3, #24
 800bf48:	f003 030f 	and.w	r3, r3, #15
 800bf4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	019b      	lsls	r3, r3, #6
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	3b01      	subs	r3, #1
 800bf62:	041b      	lsls	r3, r3, #16
 800bf64:	431a      	orrs	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	061b      	lsls	r3, r3, #24
 800bf6a:	4910      	ldr	r1, [pc, #64]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bf72:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bf74:	2201      	movs	r2, #1
 800bf76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf78:	f7fc f822 	bl	8007fc0 <HAL_GetTick>
 800bf7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf7e:	e008      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bf80:	f7fc f81e 	bl	8007fc0 <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d901      	bls.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e007      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf92:	4b06      	ldr	r3, [pc, #24]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9e:	d1ef      	bne.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3730      	adds	r7, #48	; 0x30
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	40023800 	.word	0x40023800
 800bfb0:	42470070 	.word	0x42470070

0800bfb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfb8:	b088      	sub	sp, #32
 800bfba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bfd0:	4bce      	ldr	r3, [pc, #824]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f003 030c 	and.w	r3, r3, #12
 800bfd8:	2b0c      	cmp	r3, #12
 800bfda:	f200 818d 	bhi.w	800c2f8 <HAL_RCC_GetSysClockFreq+0x344>
 800bfde:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <HAL_RCC_GetSysClockFreq+0x30>)
 800bfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe4:	0800c019 	.word	0x0800c019
 800bfe8:	0800c2f9 	.word	0x0800c2f9
 800bfec:	0800c2f9 	.word	0x0800c2f9
 800bff0:	0800c2f9 	.word	0x0800c2f9
 800bff4:	0800c01f 	.word	0x0800c01f
 800bff8:	0800c2f9 	.word	0x0800c2f9
 800bffc:	0800c2f9 	.word	0x0800c2f9
 800c000:	0800c2f9 	.word	0x0800c2f9
 800c004:	0800c025 	.word	0x0800c025
 800c008:	0800c2f9 	.word	0x0800c2f9
 800c00c:	0800c2f9 	.word	0x0800c2f9
 800c010:	0800c2f9 	.word	0x0800c2f9
 800c014:	0800c199 	.word	0x0800c199
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c018:	4bbd      	ldr	r3, [pc, #756]	; (800c310 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c01a:	61bb      	str	r3, [r7, #24]
       break;
 800c01c:	e16f      	b.n	800c2fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c01e:	4bbd      	ldr	r3, [pc, #756]	; (800c314 <HAL_RCC_GetSysClockFreq+0x360>)
 800c020:	61bb      	str	r3, [r7, #24]
      break;
 800c022:	e16c      	b.n	800c2fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c024:	4bb9      	ldr	r3, [pc, #740]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c02c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c02e:	4bb7      	ldr	r3, [pc, #732]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d053      	beq.n	800c0e2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c03a:	4bb4      	ldr	r3, [pc, #720]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	099b      	lsrs	r3, r3, #6
 800c040:	461a      	mov	r2, r3
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c04a:	f04f 0100 	mov.w	r1, #0
 800c04e:	ea02 0400 	and.w	r4, r2, r0
 800c052:	603c      	str	r4, [r7, #0]
 800c054:	400b      	ands	r3, r1
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f04f 0200 	mov.w	r2, #0
 800c064:	f04f 0300 	mov.w	r3, #0
 800c068:	014b      	lsls	r3, r1, #5
 800c06a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c06e:	0142      	lsls	r2, r0, #5
 800c070:	4610      	mov	r0, r2
 800c072:	4619      	mov	r1, r3
 800c074:	4623      	mov	r3, r4
 800c076:	1ac0      	subs	r0, r0, r3
 800c078:	462b      	mov	r3, r5
 800c07a:	eb61 0103 	sbc.w	r1, r1, r3
 800c07e:	f04f 0200 	mov.w	r2, #0
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	018b      	lsls	r3, r1, #6
 800c088:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c08c:	0182      	lsls	r2, r0, #6
 800c08e:	1a12      	subs	r2, r2, r0
 800c090:	eb63 0301 	sbc.w	r3, r3, r1
 800c094:	f04f 0000 	mov.w	r0, #0
 800c098:	f04f 0100 	mov.w	r1, #0
 800c09c:	00d9      	lsls	r1, r3, #3
 800c09e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0a2:	00d0      	lsls	r0, r2, #3
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	1852      	adds	r2, r2, r1
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	eb43 0101 	adc.w	r1, r3, r1
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	f04f 0000 	mov.w	r0, #0
 800c0b8:	f04f 0100 	mov.w	r1, #0
 800c0bc:	0259      	lsls	r1, r3, #9
 800c0be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c0c2:	0250      	lsls	r0, r2, #9
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	f7f4 fd88 	bl	8000be8 <__aeabi_uldivmod>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4613      	mov	r3, r2
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	e04c      	b.n	800c17c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0e2:	4b8a      	ldr	r3, [pc, #552]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	099b      	lsrs	r3, r3, #6
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c0f2:	f04f 0100 	mov.w	r1, #0
 800c0f6:	ea02 0a00 	and.w	sl, r2, r0
 800c0fa:	ea03 0b01 	and.w	fp, r3, r1
 800c0fe:	4650      	mov	r0, sl
 800c100:	4659      	mov	r1, fp
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	014b      	lsls	r3, r1, #5
 800c10c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c110:	0142      	lsls	r2, r0, #5
 800c112:	4610      	mov	r0, r2
 800c114:	4619      	mov	r1, r3
 800c116:	ebb0 000a 	subs.w	r0, r0, sl
 800c11a:	eb61 010b 	sbc.w	r1, r1, fp
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	f04f 0300 	mov.w	r3, #0
 800c126:	018b      	lsls	r3, r1, #6
 800c128:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c12c:	0182      	lsls	r2, r0, #6
 800c12e:	1a12      	subs	r2, r2, r0
 800c130:	eb63 0301 	sbc.w	r3, r3, r1
 800c134:	f04f 0000 	mov.w	r0, #0
 800c138:	f04f 0100 	mov.w	r1, #0
 800c13c:	00d9      	lsls	r1, r3, #3
 800c13e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c142:	00d0      	lsls	r0, r2, #3
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	eb12 020a 	adds.w	r2, r2, sl
 800c14c:	eb43 030b 	adc.w	r3, r3, fp
 800c150:	f04f 0000 	mov.w	r0, #0
 800c154:	f04f 0100 	mov.w	r1, #0
 800c158:	0299      	lsls	r1, r3, #10
 800c15a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c15e:	0290      	lsls	r0, r2, #10
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	4610      	mov	r0, r2
 800c166:	4619      	mov	r1, r3
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f04f 0300 	mov.w	r3, #0
 800c170:	f7f4 fd3a 	bl	8000be8 <__aeabi_uldivmod>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4613      	mov	r3, r2
 800c17a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c17c:	4b63      	ldr	r3, [pc, #396]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	0c1b      	lsrs	r3, r3, #16
 800c182:	f003 0303 	and.w	r3, r3, #3
 800c186:	3301      	adds	r3, #1
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	fbb2 f3f3 	udiv	r3, r2, r3
 800c194:	61bb      	str	r3, [r7, #24]
      break;
 800c196:	e0b2      	b.n	800c2fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c198:	4b5c      	ldr	r3, [pc, #368]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c1a2:	4b5a      	ldr	r3, [pc, #360]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d04d      	beq.n	800c24a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1ae:	4b57      	ldr	r3, [pc, #348]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	099b      	lsrs	r3, r3, #6
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c1be:	f04f 0100 	mov.w	r1, #0
 800c1c2:	ea02 0800 	and.w	r8, r2, r0
 800c1c6:	ea03 0901 	and.w	r9, r3, r1
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	014b      	lsls	r3, r1, #5
 800c1d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c1dc:	0142      	lsls	r2, r0, #5
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	ebb0 0008 	subs.w	r0, r0, r8
 800c1e6:	eb61 0109 	sbc.w	r1, r1, r9
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	f04f 0300 	mov.w	r3, #0
 800c1f2:	018b      	lsls	r3, r1, #6
 800c1f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c1f8:	0182      	lsls	r2, r0, #6
 800c1fa:	1a12      	subs	r2, r2, r0
 800c1fc:	eb63 0301 	sbc.w	r3, r3, r1
 800c200:	f04f 0000 	mov.w	r0, #0
 800c204:	f04f 0100 	mov.w	r1, #0
 800c208:	00d9      	lsls	r1, r3, #3
 800c20a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c20e:	00d0      	lsls	r0, r2, #3
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	eb12 0208 	adds.w	r2, r2, r8
 800c218:	eb43 0309 	adc.w	r3, r3, r9
 800c21c:	f04f 0000 	mov.w	r0, #0
 800c220:	f04f 0100 	mov.w	r1, #0
 800c224:	0259      	lsls	r1, r3, #9
 800c226:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c22a:	0250      	lsls	r0, r2, #9
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4610      	mov	r0, r2
 800c232:	4619      	mov	r1, r3
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	461a      	mov	r2, r3
 800c238:	f04f 0300 	mov.w	r3, #0
 800c23c:	f7f4 fcd4 	bl	8000be8 <__aeabi_uldivmod>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4613      	mov	r3, r2
 800c246:	61fb      	str	r3, [r7, #28]
 800c248:	e04a      	b.n	800c2e0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c24a:	4b30      	ldr	r3, [pc, #192]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	099b      	lsrs	r3, r3, #6
 800c250:	461a      	mov	r2, r3
 800c252:	f04f 0300 	mov.w	r3, #0
 800c256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c25a:	f04f 0100 	mov.w	r1, #0
 800c25e:	ea02 0400 	and.w	r4, r2, r0
 800c262:	ea03 0501 	and.w	r5, r3, r1
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	f04f 0300 	mov.w	r3, #0
 800c272:	014b      	lsls	r3, r1, #5
 800c274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c278:	0142      	lsls	r2, r0, #5
 800c27a:	4610      	mov	r0, r2
 800c27c:	4619      	mov	r1, r3
 800c27e:	1b00      	subs	r0, r0, r4
 800c280:	eb61 0105 	sbc.w	r1, r1, r5
 800c284:	f04f 0200 	mov.w	r2, #0
 800c288:	f04f 0300 	mov.w	r3, #0
 800c28c:	018b      	lsls	r3, r1, #6
 800c28e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c292:	0182      	lsls	r2, r0, #6
 800c294:	1a12      	subs	r2, r2, r0
 800c296:	eb63 0301 	sbc.w	r3, r3, r1
 800c29a:	f04f 0000 	mov.w	r0, #0
 800c29e:	f04f 0100 	mov.w	r1, #0
 800c2a2:	00d9      	lsls	r1, r3, #3
 800c2a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c2a8:	00d0      	lsls	r0, r2, #3
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	1912      	adds	r2, r2, r4
 800c2b0:	eb45 0303 	adc.w	r3, r5, r3
 800c2b4:	f04f 0000 	mov.w	r0, #0
 800c2b8:	f04f 0100 	mov.w	r1, #0
 800c2bc:	0299      	lsls	r1, r3, #10
 800c2be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c2c2:	0290      	lsls	r0, r2, #10
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f04f 0300 	mov.w	r3, #0
 800c2d4:	f7f4 fc88 	bl	8000be8 <__aeabi_uldivmod>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4613      	mov	r3, r2
 800c2de:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <HAL_RCC_GetSysClockFreq+0x358>)
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	0f1b      	lsrs	r3, r3, #28
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800c2ec:	69fa      	ldr	r2, [r7, #28]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f4:	61bb      	str	r3, [r7, #24]
      break;
 800c2f6:	e002      	b.n	800c2fe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c2fa:	61bb      	str	r3, [r7, #24]
      break;
 800c2fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c30a:	bf00      	nop
 800c30c:	40023800 	.word	0x40023800
 800c310:	00f42400 	.word	0x00f42400
 800c314:	007a1200 	.word	0x007a1200

0800c318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e28d      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 8083 	beq.w	800c43e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c338:	4b94      	ldr	r3, [pc, #592]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f003 030c 	and.w	r3, r3, #12
 800c340:	2b04      	cmp	r3, #4
 800c342:	d019      	beq.n	800c378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c344:	4b91      	ldr	r3, [pc, #580]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	d106      	bne.n	800c35e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c350:	4b8e      	ldr	r3, [pc, #568]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c35c:	d00c      	beq.n	800c378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c35e:	4b8b      	ldr	r3, [pc, #556]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c366:	2b0c      	cmp	r3, #12
 800c368:	d112      	bne.n	800c390 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c36a:	4b88      	ldr	r3, [pc, #544]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c376:	d10b      	bne.n	800c390 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c378:	4b84      	ldr	r3, [pc, #528]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d05b      	beq.n	800c43c <HAL_RCC_OscConfig+0x124>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d157      	bne.n	800c43c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e25a      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c398:	d106      	bne.n	800c3a8 <HAL_RCC_OscConfig+0x90>
 800c39a:	4b7c      	ldr	r3, [pc, #496]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a7b      	ldr	r2, [pc, #492]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	e01d      	b.n	800c3e4 <HAL_RCC_OscConfig+0xcc>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3b0:	d10c      	bne.n	800c3cc <HAL_RCC_OscConfig+0xb4>
 800c3b2:	4b76      	ldr	r3, [pc, #472]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a75      	ldr	r2, [pc, #468]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3bc:	6013      	str	r3, [r2, #0]
 800c3be:	4b73      	ldr	r3, [pc, #460]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a72      	ldr	r2, [pc, #456]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3c8:	6013      	str	r3, [r2, #0]
 800c3ca:	e00b      	b.n	800c3e4 <HAL_RCC_OscConfig+0xcc>
 800c3cc:	4b6f      	ldr	r3, [pc, #444]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a6e      	ldr	r2, [pc, #440]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	4b6c      	ldr	r3, [pc, #432]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a6b      	ldr	r2, [pc, #428]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c3de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d013      	beq.n	800c414 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ec:	f7fb fde8 	bl	8007fc0 <HAL_GetTick>
 800c3f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3f2:	e008      	b.n	800c406 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3f4:	f7fb fde4 	bl	8007fc0 <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b64      	cmp	r3, #100	; 0x64
 800c400:	d901      	bls.n	800c406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	e21f      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c406:	4b61      	ldr	r3, [pc, #388]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0f0      	beq.n	800c3f4 <HAL_RCC_OscConfig+0xdc>
 800c412:	e014      	b.n	800c43e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c414:	f7fb fdd4 	bl	8007fc0 <HAL_GetTick>
 800c418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c41a:	e008      	b.n	800c42e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c41c:	f7fb fdd0 	bl	8007fc0 <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	2b64      	cmp	r3, #100	; 0x64
 800c428:	d901      	bls.n	800c42e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c42a:	2303      	movs	r3, #3
 800c42c:	e20b      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c42e:	4b57      	ldr	r3, [pc, #348]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1f0      	bne.n	800c41c <HAL_RCC_OscConfig+0x104>
 800c43a:	e000      	b.n	800c43e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c43c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f003 0302 	and.w	r3, r3, #2
 800c446:	2b00      	cmp	r3, #0
 800c448:	d06f      	beq.n	800c52a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c44a:	4b50      	ldr	r3, [pc, #320]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	f003 030c 	and.w	r3, r3, #12
 800c452:	2b00      	cmp	r3, #0
 800c454:	d017      	beq.n	800c486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c456:	4b4d      	ldr	r3, [pc, #308]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c45e:	2b08      	cmp	r3, #8
 800c460:	d105      	bne.n	800c46e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c462:	4b4a      	ldr	r3, [pc, #296]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00b      	beq.n	800c486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c46e:	4b47      	ldr	r3, [pc, #284]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c476:	2b0c      	cmp	r3, #12
 800c478:	d11c      	bne.n	800c4b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c47a:	4b44      	ldr	r3, [pc, #272]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d116      	bne.n	800c4b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c486:	4b41      	ldr	r3, [pc, #260]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0302 	and.w	r3, r3, #2
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <HAL_RCC_OscConfig+0x186>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d001      	beq.n	800c49e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e1d3      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c49e:	4b3b      	ldr	r3, [pc, #236]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	4937      	ldr	r1, [pc, #220]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4b2:	e03a      	b.n	800c52a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d020      	beq.n	800c4fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4bc:	4b34      	ldr	r3, [pc, #208]	; (800c590 <HAL_RCC_OscConfig+0x278>)
 800c4be:	2201      	movs	r2, #1
 800c4c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4c2:	f7fb fd7d 	bl	8007fc0 <HAL_GetTick>
 800c4c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4c8:	e008      	b.n	800c4dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4ca:	f7fb fd79 	bl	8007fc0 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d901      	bls.n	800c4dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e1b4      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4dc:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0f0      	beq.n	800c4ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4e8:	4b28      	ldr	r3, [pc, #160]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	4925      	ldr	r1, [pc, #148]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	600b      	str	r3, [r1, #0]
 800c4fc:	e015      	b.n	800c52a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4fe:	4b24      	ldr	r3, [pc, #144]	; (800c590 <HAL_RCC_OscConfig+0x278>)
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c504:	f7fb fd5c 	bl	8007fc0 <HAL_GetTick>
 800c508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c50a:	e008      	b.n	800c51e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c50c:	f7fb fd58 	bl	8007fc0 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d901      	bls.n	800c51e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e193      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c51e:	4b1b      	ldr	r3, [pc, #108]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1f0      	bne.n	800c50c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 0308 	and.w	r3, r3, #8
 800c532:	2b00      	cmp	r3, #0
 800c534:	d036      	beq.n	800c5a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d016      	beq.n	800c56c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c53e:	4b15      	ldr	r3, [pc, #84]	; (800c594 <HAL_RCC_OscConfig+0x27c>)
 800c540:	2201      	movs	r2, #1
 800c542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c544:	f7fb fd3c 	bl	8007fc0 <HAL_GetTick>
 800c548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c54a:	e008      	b.n	800c55e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c54c:	f7fb fd38 	bl	8007fc0 <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b02      	cmp	r3, #2
 800c558:	d901      	bls.n	800c55e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	e173      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c55e:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <HAL_RCC_OscConfig+0x274>)
 800c560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c562:	f003 0302 	and.w	r3, r3, #2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0f0      	beq.n	800c54c <HAL_RCC_OscConfig+0x234>
 800c56a:	e01b      	b.n	800c5a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <HAL_RCC_OscConfig+0x27c>)
 800c56e:	2200      	movs	r2, #0
 800c570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c572:	f7fb fd25 	bl	8007fc0 <HAL_GetTick>
 800c576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c578:	e00e      	b.n	800c598 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c57a:	f7fb fd21 	bl	8007fc0 <HAL_GetTick>
 800c57e:	4602      	mov	r2, r0
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	2b02      	cmp	r3, #2
 800c586:	d907      	bls.n	800c598 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	e15c      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
 800c58c:	40023800 	.word	0x40023800
 800c590:	42470000 	.word	0x42470000
 800c594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c598:	4b8a      	ldr	r3, [pc, #552]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1ea      	bne.n	800c57a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0304 	and.w	r3, r3, #4
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 8097 	beq.w	800c6e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5b6:	4b83      	ldr	r3, [pc, #524]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10f      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60bb      	str	r3, [r7, #8]
 800c5c6:	4b7f      	ldr	r3, [pc, #508]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	4a7e      	ldr	r2, [pc, #504]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d0:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d2:	4b7c      	ldr	r3, [pc, #496]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5da:	60bb      	str	r3, [r7, #8]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5e2:	4b79      	ldr	r3, [pc, #484]	; (800c7c8 <HAL_RCC_OscConfig+0x4b0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d118      	bne.n	800c620 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c5ee:	4b76      	ldr	r3, [pc, #472]	; (800c7c8 <HAL_RCC_OscConfig+0x4b0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a75      	ldr	r2, [pc, #468]	; (800c7c8 <HAL_RCC_OscConfig+0x4b0>)
 800c5f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5fa:	f7fb fce1 	bl	8007fc0 <HAL_GetTick>
 800c5fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c600:	e008      	b.n	800c614 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c602:	f7fb fcdd 	bl	8007fc0 <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e118      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c614:	4b6c      	ldr	r3, [pc, #432]	; (800c7c8 <HAL_RCC_OscConfig+0x4b0>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f0      	beq.n	800c602 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d106      	bne.n	800c636 <HAL_RCC_OscConfig+0x31e>
 800c628:	4b66      	ldr	r3, [pc, #408]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62c:	4a65      	ldr	r2, [pc, #404]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c62e:	f043 0301 	orr.w	r3, r3, #1
 800c632:	6713      	str	r3, [r2, #112]	; 0x70
 800c634:	e01c      	b.n	800c670 <HAL_RCC_OscConfig+0x358>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d10c      	bne.n	800c658 <HAL_RCC_OscConfig+0x340>
 800c63e:	4b61      	ldr	r3, [pc, #388]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c642:	4a60      	ldr	r2, [pc, #384]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c644:	f043 0304 	orr.w	r3, r3, #4
 800c648:	6713      	str	r3, [r2, #112]	; 0x70
 800c64a:	4b5e      	ldr	r3, [pc, #376]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64e:	4a5d      	ldr	r2, [pc, #372]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c650:	f043 0301 	orr.w	r3, r3, #1
 800c654:	6713      	str	r3, [r2, #112]	; 0x70
 800c656:	e00b      	b.n	800c670 <HAL_RCC_OscConfig+0x358>
 800c658:	4b5a      	ldr	r3, [pc, #360]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65c:	4a59      	ldr	r2, [pc, #356]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c65e:	f023 0301 	bic.w	r3, r3, #1
 800c662:	6713      	str	r3, [r2, #112]	; 0x70
 800c664:	4b57      	ldr	r3, [pc, #348]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	4a56      	ldr	r2, [pc, #344]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c66a:	f023 0304 	bic.w	r3, r3, #4
 800c66e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d015      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c678:	f7fb fca2 	bl	8007fc0 <HAL_GetTick>
 800c67c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c67e:	e00a      	b.n	800c696 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c680:	f7fb fc9e 	bl	8007fc0 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68e:	4293      	cmp	r3, r2
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e0d7      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c696:	4b4b      	ldr	r3, [pc, #300]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c69a:	f003 0302 	and.w	r3, r3, #2
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0ee      	beq.n	800c680 <HAL_RCC_OscConfig+0x368>
 800c6a2:	e014      	b.n	800c6ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a4:	f7fb fc8c 	bl	8007fc0 <HAL_GetTick>
 800c6a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6aa:	e00a      	b.n	800c6c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6ac:	f7fb fc88 	bl	8007fc0 <HAL_GetTick>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d901      	bls.n	800c6c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e0c1      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6c2:	4b40      	ldr	r3, [pc, #256]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1ee      	bne.n	800c6ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d105      	bne.n	800c6e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6d4:	4b3b      	ldr	r3, [pc, #236]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d8:	4a3a      	ldr	r2, [pc, #232]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c6da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 80ad 	beq.w	800c844 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6ea:	4b36      	ldr	r3, [pc, #216]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f003 030c 	and.w	r3, r3, #12
 800c6f2:	2b08      	cmp	r3, #8
 800c6f4:	d060      	beq.n	800c7b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d145      	bne.n	800c78a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6fe:	4b33      	ldr	r3, [pc, #204]	; (800c7cc <HAL_RCC_OscConfig+0x4b4>)
 800c700:	2200      	movs	r2, #0
 800c702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c704:	f7fb fc5c 	bl	8007fc0 <HAL_GetTick>
 800c708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c70a:	e008      	b.n	800c71e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c70c:	f7fb fc58 	bl	8007fc0 <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	2b02      	cmp	r3, #2
 800c718:	d901      	bls.n	800c71e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e093      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c71e:	4b29      	ldr	r3, [pc, #164]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f0      	bne.n	800c70c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	69da      	ldr	r2, [r3, #28]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	431a      	orrs	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	019b      	lsls	r3, r3, #6
 800c73a:	431a      	orrs	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	085b      	lsrs	r3, r3, #1
 800c742:	3b01      	subs	r3, #1
 800c744:	041b      	lsls	r3, r3, #16
 800c746:	431a      	orrs	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	061b      	lsls	r3, r3, #24
 800c74e:	431a      	orrs	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c754:	071b      	lsls	r3, r3, #28
 800c756:	491b      	ldr	r1, [pc, #108]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c758:	4313      	orrs	r3, r2
 800c75a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c75c:	4b1b      	ldr	r3, [pc, #108]	; (800c7cc <HAL_RCC_OscConfig+0x4b4>)
 800c75e:	2201      	movs	r2, #1
 800c760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c762:	f7fb fc2d 	bl	8007fc0 <HAL_GetTick>
 800c766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c768:	e008      	b.n	800c77c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c76a:	f7fb fc29 	bl	8007fc0 <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e064      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c77c:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f0      	beq.n	800c76a <HAL_RCC_OscConfig+0x452>
 800c788:	e05c      	b.n	800c844 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c78a:	4b10      	ldr	r3, [pc, #64]	; (800c7cc <HAL_RCC_OscConfig+0x4b4>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c790:	f7fb fc16 	bl	8007fc0 <HAL_GetTick>
 800c794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c796:	e008      	b.n	800c7aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c798:	f7fb fc12 	bl	8007fc0 <HAL_GetTick>
 800c79c:	4602      	mov	r2, r0
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d901      	bls.n	800c7aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e04d      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7aa:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <HAL_RCC_OscConfig+0x4ac>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1f0      	bne.n	800c798 <HAL_RCC_OscConfig+0x480>
 800c7b6:	e045      	b.n	800c844 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	699b      	ldr	r3, [r3, #24]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d107      	bne.n	800c7d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e040      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
 800c7c4:	40023800 	.word	0x40023800
 800c7c8:	40007000 	.word	0x40007000
 800c7cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c7d0:	4b1f      	ldr	r3, [pc, #124]	; (800c850 <HAL_RCC_OscConfig+0x538>)
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d030      	beq.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d129      	bne.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d122      	bne.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c800:	4013      	ands	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c808:	4293      	cmp	r3, r2
 800c80a:	d119      	bne.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	085b      	lsrs	r3, r3, #1
 800c818:	3b01      	subs	r3, #1
 800c81a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d10f      	bne.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d107      	bne.n	800c840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d001      	beq.n	800c844 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e000      	b.n	800c846 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	40023800 	.word	0x40023800

0800c854 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e083      	b.n	800c96e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	7f5b      	ldrb	r3, [r3, #29]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d105      	bne.n	800c87c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7fb f848 	bl	800790c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2202      	movs	r2, #2
 800c880:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	22ca      	movs	r2, #202	; 0xca
 800c888:	625a      	str	r2, [r3, #36]	; 0x24
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2253      	movs	r2, #83	; 0x53
 800c890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f897 	bl	800c9c6 <RTC_EnterInitMode>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	22ff      	movs	r2, #255	; 0xff
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e05e      	b.n	800c96e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6899      	ldr	r1, [r3, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	68d2      	ldr	r2, [r2, #12]
 800c8ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6919      	ldr	r1, [r3, #16]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	041a      	lsls	r2, r3, #16
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c90e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f003 0320 	and.w	r3, r3, #32
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10e      	bne.n	800c93c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f829 	bl	800c976 <HAL_RTC_WaitForSynchro>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d008      	beq.n	800c93c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	22ff      	movs	r2, #255	; 0xff
 800c930:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2204      	movs	r2, #4
 800c936:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	e018      	b.n	800c96e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c94a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699a      	ldr	r2, [r3, #24]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	430a      	orrs	r2, r1
 800c95c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	22ff      	movs	r2, #255	; 0xff
 800c964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c96c:	2300      	movs	r3, #0
  }
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c990:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c992:	f7fb fb15 	bl	8007fc0 <HAL_GetTick>
 800c996:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c998:	e009      	b.n	800c9ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c99a:	f7fb fb11 	bl	8007fc0 <HAL_GetTick>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9a8:	d901      	bls.n	800c9ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e007      	b.n	800c9be <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	f003 0320 	and.w	r3, r3, #32
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0ee      	beq.n	800c99a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d119      	bne.n	800ca14 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9ea:	f7fb fae9 	bl	8007fc0 <HAL_GetTick>
 800c9ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c9f0:	e009      	b.n	800ca06 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c9f2:	f7fb fae5 	bl	8007fc0 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca00:	d901      	bls.n	800ca06 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800ca02:	2303      	movs	r3, #3
 800ca04:	e007      	b.n	800ca16 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d0ee      	beq.n	800c9f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b082      	sub	sp, #8
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e041      	b.n	800cab4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d106      	bne.n	800ca4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7fa ff8b 	bl	8007960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f000 fbb1 	bl	800d1c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d001      	beq.n	800cad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e04e      	b.n	800cb72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0201 	orr.w	r2, r2, #1
 800caea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a23      	ldr	r2, [pc, #140]	; (800cb80 <HAL_TIM_Base_Start_IT+0xc4>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d022      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cafe:	d01d      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a1f      	ldr	r2, [pc, #124]	; (800cb84 <HAL_TIM_Base_Start_IT+0xc8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d018      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a1e      	ldr	r2, [pc, #120]	; (800cb88 <HAL_TIM_Base_Start_IT+0xcc>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d013      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a1c      	ldr	r2, [pc, #112]	; (800cb8c <HAL_TIM_Base_Start_IT+0xd0>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d00e      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a1b      	ldr	r2, [pc, #108]	; (800cb90 <HAL_TIM_Base_Start_IT+0xd4>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d009      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a19      	ldr	r2, [pc, #100]	; (800cb94 <HAL_TIM_Base_Start_IT+0xd8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d004      	beq.n	800cb3c <HAL_TIM_Base_Start_IT+0x80>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a18      	ldr	r2, [pc, #96]	; (800cb98 <HAL_TIM_Base_Start_IT+0xdc>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d111      	bne.n	800cb60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b06      	cmp	r3, #6
 800cb4c:	d010      	beq.n	800cb70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f042 0201 	orr.w	r2, r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb5e:	e007      	b.n	800cb70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f042 0201 	orr.w	r2, r2, #1
 800cb6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	40010000 	.word	0x40010000
 800cb84:	40000400 	.word	0x40000400
 800cb88:	40000800 	.word	0x40000800
 800cb8c:	40000c00 	.word	0x40000c00
 800cb90:	40010400 	.word	0x40010400
 800cb94:	40014000 	.word	0x40014000
 800cb98:	40001800 	.word	0x40001800

0800cb9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e041      	b.n	800cc32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d106      	bne.n	800cbc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f839 	bl	800cc3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2202      	movs	r2, #2
 800cbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4610      	mov	r0, r2
 800cbdc:	f000 faf2 	bl	800d1c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cc42:	bf00      	nop
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b082      	sub	sp, #8
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	f003 0302 	and.w	r3, r3, #2
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d122      	bne.n	800ccaa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d11b      	bne.n	800ccaa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f06f 0202 	mvn.w	r2, #2
 800cc7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	f003 0303 	and.w	r3, r3, #3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fa78 	bl	800d186 <HAL_TIM_IC_CaptureCallback>
 800cc96:	e005      	b.n	800cca4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fa6a 	bl	800d172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fa7b 	bl	800d19a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	d122      	bne.n	800ccfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	d11b      	bne.n	800ccfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f06f 0204 	mvn.w	r2, #4
 800ccce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d003      	beq.n	800ccec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fa4e 	bl	800d186 <HAL_TIM_IC_CaptureCallback>
 800ccea:	e005      	b.n	800ccf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fa40 	bl	800d172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fa51 	bl	800d19a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	f003 0308 	and.w	r3, r3, #8
 800cd08:	2b08      	cmp	r3, #8
 800cd0a:	d122      	bne.n	800cd52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	f003 0308 	and.w	r3, r3, #8
 800cd16:	2b08      	cmp	r3, #8
 800cd18:	d11b      	bne.n	800cd52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f06f 0208 	mvn.w	r2, #8
 800cd22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2204      	movs	r2, #4
 800cd28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	f003 0303 	and.w	r3, r3, #3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d003      	beq.n	800cd40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fa24 	bl	800d186 <HAL_TIM_IC_CaptureCallback>
 800cd3e:	e005      	b.n	800cd4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 fa16 	bl	800d172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 fa27 	bl	800d19a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	f003 0310 	and.w	r3, r3, #16
 800cd5c:	2b10      	cmp	r3, #16
 800cd5e:	d122      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f003 0310 	and.w	r3, r3, #16
 800cd6a:	2b10      	cmp	r3, #16
 800cd6c:	d11b      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f06f 0210 	mvn.w	r2, #16
 800cd76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2208      	movs	r2, #8
 800cd7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f9fa 	bl	800d186 <HAL_TIM_IC_CaptureCallback>
 800cd92:	e005      	b.n	800cda0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f9ec 	bl	800d172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f9fd 	bl	800d19a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d10e      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d107      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f06f 0201 	mvn.w	r2, #1
 800cdca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7f8 fff5 	bl	8005dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cddc:	2b80      	cmp	r3, #128	; 0x80
 800cdde:	d10e      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d107      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fd53 	bl	800d8a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce08:	2b40      	cmp	r3, #64	; 0x40
 800ce0a:	d10e      	bne.n	800ce2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce16:	2b40      	cmp	r3, #64	; 0x40
 800ce18:	d107      	bne.n	800ce2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f9c2 	bl	800d1ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	f003 0320 	and.w	r3, r3, #32
 800ce34:	2b20      	cmp	r3, #32
 800ce36:	d10e      	bne.n	800ce56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	f003 0320 	and.w	r3, r3, #32
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	d107      	bne.n	800ce56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f06f 0220 	mvn.w	r2, #32
 800ce4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 fd1d 	bl	800d890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e0ae      	b.n	800cfdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b0c      	cmp	r3, #12
 800ce8a:	f200 809f 	bhi.w	800cfcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ce8e:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce94:	0800cec9 	.word	0x0800cec9
 800ce98:	0800cfcd 	.word	0x0800cfcd
 800ce9c:	0800cfcd 	.word	0x0800cfcd
 800cea0:	0800cfcd 	.word	0x0800cfcd
 800cea4:	0800cf09 	.word	0x0800cf09
 800cea8:	0800cfcd 	.word	0x0800cfcd
 800ceac:	0800cfcd 	.word	0x0800cfcd
 800ceb0:	0800cfcd 	.word	0x0800cfcd
 800ceb4:	0800cf4b 	.word	0x0800cf4b
 800ceb8:	0800cfcd 	.word	0x0800cfcd
 800cebc:	0800cfcd 	.word	0x0800cfcd
 800cec0:	0800cfcd 	.word	0x0800cfcd
 800cec4:	0800cf8b 	.word	0x0800cf8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fa18 	bl	800d304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	699a      	ldr	r2, [r3, #24]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f042 0208 	orr.w	r2, r2, #8
 800cee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	699a      	ldr	r2, [r3, #24]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0204 	bic.w	r2, r2, #4
 800cef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6999      	ldr	r1, [r3, #24]
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	691a      	ldr	r2, [r3, #16]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	430a      	orrs	r2, r1
 800cf04:	619a      	str	r2, [r3, #24]
      break;
 800cf06:	e064      	b.n	800cfd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68b9      	ldr	r1, [r7, #8]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 fa68 	bl	800d3e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	699a      	ldr	r2, [r3, #24]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	699a      	ldr	r2, [r3, #24]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	6999      	ldr	r1, [r3, #24]
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	021a      	lsls	r2, r3, #8
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	430a      	orrs	r2, r1
 800cf46:	619a      	str	r2, [r3, #24]
      break;
 800cf48:	e043      	b.n	800cfd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68b9      	ldr	r1, [r7, #8]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fabd 	bl	800d4d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69da      	ldr	r2, [r3, #28]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0208 	orr.w	r2, r2, #8
 800cf64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	69da      	ldr	r2, [r3, #28]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0204 	bic.w	r2, r2, #4
 800cf74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69d9      	ldr	r1, [r3, #28]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	691a      	ldr	r2, [r3, #16]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	61da      	str	r2, [r3, #28]
      break;
 800cf88:	e023      	b.n	800cfd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68b9      	ldr	r1, [r7, #8]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 fb11 	bl	800d5b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	69da      	ldr	r2, [r3, #28]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69d9      	ldr	r1, [r3, #28]
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	021a      	lsls	r2, r3, #8
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	61da      	str	r2, [r3, #28]
      break;
 800cfca:	e002      	b.n	800cfd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	75fb      	strb	r3, [r7, #23]
      break;
 800cfd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cfda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <HAL_TIM_ConfigClockSource+0x1c>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e0b4      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x186>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d01e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d038:	d03e      	beq.n	800d0b8 <HAL_TIM_ConfigClockSource+0xd4>
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d03e:	f200 8087 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d046:	f000 8086 	beq.w	800d156 <HAL_TIM_ConfigClockSource+0x172>
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04e:	d87f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d050:	2b70      	cmp	r3, #112	; 0x70
 800d052:	d01a      	beq.n	800d08a <HAL_TIM_ConfigClockSource+0xa6>
 800d054:	2b70      	cmp	r3, #112	; 0x70
 800d056:	d87b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d058:	2b60      	cmp	r3, #96	; 0x60
 800d05a:	d050      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x11a>
 800d05c:	2b60      	cmp	r3, #96	; 0x60
 800d05e:	d877      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d060:	2b50      	cmp	r3, #80	; 0x50
 800d062:	d03c      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0xfa>
 800d064:	2b50      	cmp	r3, #80	; 0x50
 800d066:	d873      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d068:	2b40      	cmp	r3, #64	; 0x40
 800d06a:	d058      	beq.n	800d11e <HAL_TIM_ConfigClockSource+0x13a>
 800d06c:	2b40      	cmp	r3, #64	; 0x40
 800d06e:	d86f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d070:	2b30      	cmp	r3, #48	; 0x30
 800d072:	d064      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d074:	2b30      	cmp	r3, #48	; 0x30
 800d076:	d86b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d060      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d867      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05c      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d084:	2b10      	cmp	r3, #16
 800d086:	d05a      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x15a>
 800d088:	e062      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6899      	ldr	r1, [r3, #8]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f000 fb5d 	bl	800d758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	609a      	str	r2, [r3, #8]
      break;
 800d0b6:	e04f      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	6899      	ldr	r1, [r3, #8]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f000 fb46 	bl	800d758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0da:	609a      	str	r2, [r3, #8]
      break;
 800d0dc:	e03c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	6859      	ldr	r1, [r3, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f000 faba 	bl	800d664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2150      	movs	r1, #80	; 0x50
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fb13 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800d0fc:	e02c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6859      	ldr	r1, [r3, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f000 fad9 	bl	800d6c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2160      	movs	r1, #96	; 0x60
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fb03 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800d11c:	e01c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6859      	ldr	r1, [r3, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f000 fa9a 	bl	800d664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2140      	movs	r1, #64	; 0x40
 800d136:	4618      	mov	r0, r3
 800d138:	f000 faf3 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800d13c:	e00c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f000 faea 	bl	800d722 <TIM_ITRx_SetConfig>
      break;
 800d14e:	e003      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]
      break;
 800d154:	e000      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d172:	b480      	push	{r7}
 800d174:	b083      	sub	sp, #12
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d186:	b480      	push	{r7}
 800d188:	b083      	sub	sp, #12
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1a2:	bf00      	nop
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b083      	sub	sp, #12
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1b6:	bf00      	nop
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a40      	ldr	r2, [pc, #256]	; (800d2d8 <TIM_Base_SetConfig+0x114>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d013      	beq.n	800d204 <TIM_Base_SetConfig+0x40>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1e2:	d00f      	beq.n	800d204 <TIM_Base_SetConfig+0x40>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a3d      	ldr	r2, [pc, #244]	; (800d2dc <TIM_Base_SetConfig+0x118>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d00b      	beq.n	800d204 <TIM_Base_SetConfig+0x40>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a3c      	ldr	r2, [pc, #240]	; (800d2e0 <TIM_Base_SetConfig+0x11c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d007      	beq.n	800d204 <TIM_Base_SetConfig+0x40>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a3b      	ldr	r2, [pc, #236]	; (800d2e4 <TIM_Base_SetConfig+0x120>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d003      	beq.n	800d204 <TIM_Base_SetConfig+0x40>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a3a      	ldr	r2, [pc, #232]	; (800d2e8 <TIM_Base_SetConfig+0x124>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d108      	bne.n	800d216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d20a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	4313      	orrs	r3, r2
 800d214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a2f      	ldr	r2, [pc, #188]	; (800d2d8 <TIM_Base_SetConfig+0x114>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d02b      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d224:	d027      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a2c      	ldr	r2, [pc, #176]	; (800d2dc <TIM_Base_SetConfig+0x118>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d023      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a2b      	ldr	r2, [pc, #172]	; (800d2e0 <TIM_Base_SetConfig+0x11c>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d01f      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a2a      	ldr	r2, [pc, #168]	; (800d2e4 <TIM_Base_SetConfig+0x120>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d01b      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a29      	ldr	r2, [pc, #164]	; (800d2e8 <TIM_Base_SetConfig+0x124>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d017      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a28      	ldr	r2, [pc, #160]	; (800d2ec <TIM_Base_SetConfig+0x128>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d013      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a27      	ldr	r2, [pc, #156]	; (800d2f0 <TIM_Base_SetConfig+0x12c>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d00f      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a26      	ldr	r2, [pc, #152]	; (800d2f4 <TIM_Base_SetConfig+0x130>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d00b      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a25      	ldr	r2, [pc, #148]	; (800d2f8 <TIM_Base_SetConfig+0x134>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d007      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a24      	ldr	r2, [pc, #144]	; (800d2fc <TIM_Base_SetConfig+0x138>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d003      	beq.n	800d276 <TIM_Base_SetConfig+0xb2>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a23      	ldr	r2, [pc, #140]	; (800d300 <TIM_Base_SetConfig+0x13c>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d108      	bne.n	800d288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d27c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	4313      	orrs	r3, r2
 800d286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	689a      	ldr	r2, [r3, #8]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a0a      	ldr	r2, [pc, #40]	; (800d2d8 <TIM_Base_SetConfig+0x114>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_Base_SetConfig+0xf8>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a0c      	ldr	r2, [pc, #48]	; (800d2e8 <TIM_Base_SetConfig+0x124>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d103      	bne.n	800d2c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	615a      	str	r2, [r3, #20]
}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	40010000 	.word	0x40010000
 800d2dc:	40000400 	.word	0x40000400
 800d2e0:	40000800 	.word	0x40000800
 800d2e4:	40000c00 	.word	0x40000c00
 800d2e8:	40010400 	.word	0x40010400
 800d2ec:	40014000 	.word	0x40014000
 800d2f0:	40014400 	.word	0x40014400
 800d2f4:	40014800 	.word	0x40014800
 800d2f8:	40001800 	.word	0x40001800
 800d2fc:	40001c00 	.word	0x40001c00
 800d300:	40002000 	.word	0x40002000

0800d304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d304:	b480      	push	{r7}
 800d306:	b087      	sub	sp, #28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	f023 0201 	bic.w	r2, r3, #1
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f023 0303 	bic.w	r3, r3, #3
 800d33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f023 0302 	bic.w	r3, r3, #2
 800d34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4313      	orrs	r3, r2
 800d356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a20      	ldr	r2, [pc, #128]	; (800d3dc <TIM_OC1_SetConfig+0xd8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d003      	beq.n	800d368 <TIM_OC1_SetConfig+0x64>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a1f      	ldr	r2, [pc, #124]	; (800d3e0 <TIM_OC1_SetConfig+0xdc>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d10c      	bne.n	800d382 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	f023 0308 	bic.w	r3, r3, #8
 800d36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	4313      	orrs	r3, r2
 800d378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	f023 0304 	bic.w	r3, r3, #4
 800d380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a15      	ldr	r2, [pc, #84]	; (800d3dc <TIM_OC1_SetConfig+0xd8>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d003      	beq.n	800d392 <TIM_OC1_SetConfig+0x8e>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4a14      	ldr	r2, [pc, #80]	; (800d3e0 <TIM_OC1_SetConfig+0xdc>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d111      	bne.n	800d3b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	693a      	ldr	r2, [r7, #16]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	621a      	str	r2, [r3, #32]
}
 800d3d0:	bf00      	nop
 800d3d2:	371c      	adds	r7, #28
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	40010000 	.word	0x40010000
 800d3e0:	40010400 	.word	0x40010400

0800d3e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b087      	sub	sp, #28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	f023 0210 	bic.w	r2, r3, #16
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	699b      	ldr	r3, [r3, #24]
 800d40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	021b      	lsls	r3, r3, #8
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	4313      	orrs	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f023 0320 	bic.w	r3, r3, #32
 800d42e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4313      	orrs	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a22      	ldr	r2, [pc, #136]	; (800d4c8 <TIM_OC2_SetConfig+0xe4>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d003      	beq.n	800d44c <TIM_OC2_SetConfig+0x68>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a21      	ldr	r2, [pc, #132]	; (800d4cc <TIM_OC2_SetConfig+0xe8>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d10d      	bne.n	800d468 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <TIM_OC2_SetConfig+0xe4>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d003      	beq.n	800d478 <TIM_OC2_SetConfig+0x94>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a16      	ldr	r2, [pc, #88]	; (800d4cc <TIM_OC2_SetConfig+0xe8>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d113      	bne.n	800d4a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d47e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	695b      	ldr	r3, [r3, #20]
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	4313      	orrs	r3, r2
 800d492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	621a      	str	r2, [r3, #32]
}
 800d4ba:	bf00      	nop
 800d4bc:	371c      	adds	r7, #28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	40010000 	.word	0x40010000
 800d4cc:	40010400 	.word	0x40010400

0800d4d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b087      	sub	sp, #28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f023 0303 	bic.w	r3, r3, #3
 800d506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	021b      	lsls	r3, r3, #8
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	4313      	orrs	r3, r2
 800d524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a21      	ldr	r2, [pc, #132]	; (800d5b0 <TIM_OC3_SetConfig+0xe0>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d003      	beq.n	800d536 <TIM_OC3_SetConfig+0x66>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a20      	ldr	r2, [pc, #128]	; (800d5b4 <TIM_OC3_SetConfig+0xe4>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d10d      	bne.n	800d552 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d53c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	4313      	orrs	r3, r2
 800d548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a16      	ldr	r2, [pc, #88]	; (800d5b0 <TIM_OC3_SetConfig+0xe0>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d003      	beq.n	800d562 <TIM_OC3_SetConfig+0x92>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a15      	ldr	r2, [pc, #84]	; (800d5b4 <TIM_OC3_SetConfig+0xe4>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d113      	bne.n	800d58a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	011b      	lsls	r3, r3, #4
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	693a      	ldr	r2, [r7, #16]
 800d586:	4313      	orrs	r3, r2
 800d588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	697a      	ldr	r2, [r7, #20]
 800d5a2:	621a      	str	r2, [r3, #32]
}
 800d5a4:	bf00      	nop
 800d5a6:	371c      	adds	r7, #28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	40010000 	.word	0x40010000
 800d5b4:	40010400 	.word	0x40010400

0800d5b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	031b      	lsls	r3, r3, #12
 800d60a:	693a      	ldr	r2, [r7, #16]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a12      	ldr	r2, [pc, #72]	; (800d65c <TIM_OC4_SetConfig+0xa4>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d003      	beq.n	800d620 <TIM_OC4_SetConfig+0x68>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a11      	ldr	r2, [pc, #68]	; (800d660 <TIM_OC4_SetConfig+0xa8>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d109      	bne.n	800d634 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	019b      	lsls	r3, r3, #6
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	4313      	orrs	r3, r2
 800d632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	693a      	ldr	r2, [r7, #16]
 800d64c:	621a      	str	r2, [r3, #32]
}
 800d64e:	bf00      	nop
 800d650:	371c      	adds	r7, #28
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	40010000 	.word	0x40010000
 800d660:	40010400 	.word	0x40010400

0800d664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6a1b      	ldr	r3, [r3, #32]
 800d674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	f023 0201 	bic.w	r2, r3, #1
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d68e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	4313      	orrs	r3, r2
 800d698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f023 030a 	bic.w	r3, r3, #10
 800d6a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	693a      	ldr	r2, [r7, #16]
 800d6ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	621a      	str	r2, [r3, #32]
}
 800d6b6:	bf00      	nop
 800d6b8:	371c      	adds	r7, #28
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6c2:	b480      	push	{r7}
 800d6c4:	b087      	sub	sp, #28
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	f023 0210 	bic.w	r2, r3, #16
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6a1b      	ldr	r3, [r3, #32]
 800d6e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d6ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	031b      	lsls	r3, r3, #12
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d6fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	4313      	orrs	r3, r2
 800d708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	621a      	str	r2, [r3, #32]
}
 800d716:	bf00      	nop
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4313      	orrs	r3, r2
 800d740:	f043 0307 	orr.w	r3, r3, #7
 800d744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	609a      	str	r2, [r3, #8]
}
 800d74c:	bf00      	nop
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	021a      	lsls	r2, r3, #8
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	4313      	orrs	r3, r2
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	609a      	str	r2, [r3, #8]
}
 800d78c:	bf00      	nop
 800d78e:	371c      	adds	r7, #28
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e05a      	b.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a21      	ldr	r2, [pc, #132]	; (800d874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d022      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7fc:	d01d      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a1d      	ldr	r2, [pc, #116]	; (800d878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d018      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a1b      	ldr	r2, [pc, #108]	; (800d87c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d013      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a1a      	ldr	r2, [pc, #104]	; (800d880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d00e      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a18      	ldr	r2, [pc, #96]	; (800d884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d009      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a17      	ldr	r2, [pc, #92]	; (800d888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d004      	beq.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a15      	ldr	r2, [pc, #84]	; (800d88c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d10c      	bne.n	800d854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	4313      	orrs	r3, r2
 800d84a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	40010000 	.word	0x40010000
 800d878:	40000400 	.word	0x40000400
 800d87c:	40000800 	.word	0x40000800
 800d880:	40000c00 	.word	0x40000c00
 800d884:	40010400 	.word	0x40010400
 800d888:	40014000 	.word	0x40014000
 800d88c:	40001800 	.word	0x40001800

0800d890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e03f      	b.n	800d94a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d106      	bne.n	800d8e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7fa f8b6 	bl	8007a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2224      	movs	r2, #36	; 0x24
 800d8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68da      	ldr	r2, [r3, #12]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 ff65 	bl	800e7cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	691a      	ldr	r2, [r3, #16]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	695a      	ldr	r2, [r3, #20]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68da      	ldr	r2, [r3, #12]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2220      	movs	r2, #32
 800d93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2220      	movs	r2, #32
 800d944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b08a      	sub	sp, #40	; 0x28
 800d956:	af02      	add	r7, sp, #8
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	603b      	str	r3, [r7, #0]
 800d95e:	4613      	mov	r3, r2
 800d960:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b20      	cmp	r3, #32
 800d970:	d17c      	bne.n	800da6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <HAL_UART_Transmit+0x2c>
 800d978:	88fb      	ldrh	r3, [r7, #6]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e075      	b.n	800da6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d101      	bne.n	800d990 <HAL_UART_Transmit+0x3e>
 800d98c:	2302      	movs	r3, #2
 800d98e:	e06e      	b.n	800da6e <HAL_UART_Transmit+0x11c>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2201      	movs	r2, #1
 800d994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2221      	movs	r2, #33	; 0x21
 800d9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9a6:	f7fa fb0b 	bl	8007fc0 <HAL_GetTick>
 800d9aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	88fa      	ldrh	r2, [r7, #6]
 800d9b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	88fa      	ldrh	r2, [r7, #6]
 800d9b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9c0:	d108      	bne.n	800d9d4 <HAL_UART_Transmit+0x82>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d104      	bne.n	800d9d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e003      	b.n	800d9dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800d9e4:	e02a      	b.n	800da3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2180      	movs	r1, #128	; 0x80
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f000 fc21 	bl	800e238 <UART_WaitOnFlagUntilTimeout>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e036      	b.n	800da6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10b      	bne.n	800da1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	3302      	adds	r3, #2
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	e007      	b.n	800da2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da32:	b29b      	uxth	r3, r3
 800da34:	3b01      	subs	r3, #1
 800da36:	b29a      	uxth	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da40:	b29b      	uxth	r3, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1cf      	bne.n	800d9e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2200      	movs	r2, #0
 800da4e:	2140      	movs	r1, #64	; 0x40
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f000 fbf1 	bl	800e238 <UART_WaitOnFlagUntilTimeout>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e006      	b.n	800da6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2220      	movs	r2, #32
 800da64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	e000      	b.n	800da6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800da6c:	2302      	movs	r3, #2
  }
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	60f8      	str	r0, [r7, #12]
 800da7e:	60b9      	str	r1, [r7, #8]
 800da80:	4613      	mov	r3, r2
 800da82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b20      	cmp	r3, #32
 800da8e:	d11d      	bne.n	800dacc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d002      	beq.n	800da9c <HAL_UART_Receive_DMA+0x26>
 800da96:	88fb      	ldrh	r3, [r7, #6]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d101      	bne.n	800daa0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	e016      	b.n	800dace <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d101      	bne.n	800daae <HAL_UART_Receive_DMA+0x38>
 800daaa:	2302      	movs	r3, #2
 800daac:	e00f      	b.n	800dace <HAL_UART_Receive_DMA+0x58>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dabc:	88fb      	ldrh	r3, [r7, #6]
 800dabe:	461a      	mov	r2, r3
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f000 fc26 	bl	800e314 <UART_Start_Receive_DMA>
 800dac8:	4603      	mov	r3, r0
 800daca:	e000      	b.n	800dace <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800dacc:	2302      	movs	r3, #2
  }
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
	...

0800dad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b0ba      	sub	sp, #232	; 0xe8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	695b      	ldr	r3, [r3, #20]
 800dafa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800dafe:	2300      	movs	r3, #0
 800db00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800db04:	2300      	movs	r3, #0
 800db06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800db0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db0e:	f003 030f 	and.w	r3, r3, #15
 800db12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800db16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10f      	bne.n	800db3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db22:	f003 0320 	and.w	r3, r3, #32
 800db26:	2b00      	cmp	r3, #0
 800db28:	d009      	beq.n	800db3e <HAL_UART_IRQHandler+0x66>
 800db2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db2e:	f003 0320 	and.w	r3, r3, #32
 800db32:	2b00      	cmp	r3, #0
 800db34:	d003      	beq.n	800db3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fd8d 	bl	800e656 <UART_Receive_IT>
      return;
 800db3c:	e256      	b.n	800dfec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800db3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 80de 	beq.w	800dd04 <HAL_UART_IRQHandler+0x22c>
 800db48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d106      	bne.n	800db62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800db54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 80d1 	beq.w	800dd04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800db62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00b      	beq.n	800db86 <HAL_UART_IRQHandler+0xae>
 800db6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db76:	2b00      	cmp	r3, #0
 800db78:	d005      	beq.n	800db86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7e:	f043 0201 	orr.w	r2, r3, #1
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800db86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db8a:	f003 0304 	and.w	r3, r3, #4
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00b      	beq.n	800dbaa <HAL_UART_IRQHandler+0xd2>
 800db92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba2:	f043 0202 	orr.w	r2, r3, #2
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbae:	f003 0302 	and.w	r3, r3, #2
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <HAL_UART_IRQHandler+0xf6>
 800dbb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d005      	beq.n	800dbce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc6:	f043 0204 	orr.w	r2, r3, #4
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dbce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d011      	beq.n	800dbfe <HAL_UART_IRQHandler+0x126>
 800dbda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbde:	f003 0320 	and.w	r3, r3, #32
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d105      	bne.n	800dbf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dbe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf6:	f043 0208 	orr.w	r2, r3, #8
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 81ed 	beq.w	800dfe2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc0c:	f003 0320 	and.w	r3, r3, #32
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d008      	beq.n	800dc26 <HAL_UART_IRQHandler+0x14e>
 800dc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc18:	f003 0320 	and.w	r3, r3, #32
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fd18 	bl	800e656 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc30:	2b40      	cmp	r3, #64	; 0x40
 800dc32:	bf0c      	ite	eq
 800dc34:	2301      	moveq	r3, #1
 800dc36:	2300      	movne	r3, #0
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc42:	f003 0308 	and.w	r3, r3, #8
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d103      	bne.n	800dc52 <HAL_UART_IRQHandler+0x17a>
 800dc4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d04f      	beq.n	800dcf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fc20 	bl	800e498 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc62:	2b40      	cmp	r3, #64	; 0x40
 800dc64:	d141      	bne.n	800dcea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3314      	adds	r3, #20
 800dc6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc74:	e853 3f00 	ldrex	r3, [r3]
 800dc78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dc7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dc80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3314      	adds	r3, #20
 800dc8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dca2:	e841 2300 	strex	r3, r2, [r1]
 800dca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dcaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1d9      	bne.n	800dc66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d013      	beq.n	800dce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	4a7d      	ldr	r2, [pc, #500]	; (800deb4 <HAL_UART_IRQHandler+0x3dc>)
 800dcc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fb f842 	bl	8008d50 <HAL_DMA_Abort_IT>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d016      	beq.n	800dd00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dcdc:	4610      	mov	r0, r2
 800dcde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dce0:	e00e      	b.n	800dd00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f99a 	bl	800e01c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dce8:	e00a      	b.n	800dd00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f996 	bl	800e01c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcf0:	e006      	b.n	800dd00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f992 	bl	800e01c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800dcfe:	e170      	b.n	800dfe2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd00:	bf00      	nop
    return;
 800dd02:	e16e      	b.n	800dfe2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	f040 814a 	bne.w	800dfa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd12:	f003 0310 	and.w	r3, r3, #16
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 8143 	beq.w	800dfa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800dd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd20:	f003 0310 	and.w	r3, r3, #16
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f000 813c 	beq.w	800dfa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60bb      	str	r3, [r7, #8]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	60bb      	str	r3, [r7, #8]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	60bb      	str	r3, [r7, #8]
 800dd3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	695b      	ldr	r3, [r3, #20]
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b40      	cmp	r3, #64	; 0x40
 800dd4c:	f040 80b4 	bne.w	800deb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f000 8140 	beq.w	800dfe6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dd6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	f080 8139 	bcs.w	800dfe6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	69db      	ldr	r3, [r3, #28]
 800dd82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd86:	f000 8088 	beq.w	800de9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	330c      	adds	r3, #12
 800dd90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd98:	e853 3f00 	ldrex	r3, [r3]
 800dd9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dda0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dda4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dda8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	330c      	adds	r3, #12
 800ddb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ddb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ddba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ddc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ddc6:	e841 2300 	strex	r3, r2, [r1]
 800ddca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ddce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1d9      	bne.n	800dd8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3314      	adds	r3, #20
 800dddc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dde0:	e853 3f00 	ldrex	r3, [r3]
 800dde4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dde6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dde8:	f023 0301 	bic.w	r3, r3, #1
 800ddec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	3314      	adds	r3, #20
 800ddf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800de02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de06:	e841 2300 	strex	r3, r2, [r1]
 800de0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800de0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1e1      	bne.n	800ddd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3314      	adds	r3, #20
 800de18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800de22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3314      	adds	r3, #20
 800de32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800de36:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de3e:	e841 2300 	strex	r3, r2, [r1]
 800de42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1e3      	bne.n	800de12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2220      	movs	r2, #32
 800de4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	330c      	adds	r3, #12
 800de5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de62:	e853 3f00 	ldrex	r3, [r3]
 800de66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de6a:	f023 0310 	bic.w	r3, r3, #16
 800de6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	330c      	adds	r3, #12
 800de78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800de7c:	65ba      	str	r2, [r7, #88]	; 0x58
 800de7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de84:	e841 2300 	strex	r3, r2, [r1]
 800de88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e3      	bne.n	800de58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de94:	4618      	mov	r0, r3
 800de96:	f7fa feeb 	bl	8008c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	4619      	mov	r1, r3
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f8c0 	bl	800e030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800deb0:	e099      	b.n	800dfe6 <HAL_UART_IRQHandler+0x50e>
 800deb2:	bf00      	nop
 800deb4:	0800e55f 	.word	0x0800e55f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f000 808b 	beq.w	800dfea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ded4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 8086 	beq.w	800dfea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	330c      	adds	r3, #12
 800dee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee8:	e853 3f00 	ldrex	r3, [r3]
 800deec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800deee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800def4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	330c      	adds	r3, #12
 800defe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800df02:	647a      	str	r2, [r7, #68]	; 0x44
 800df04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df0a:	e841 2300 	strex	r3, r2, [r1]
 800df0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e3      	bne.n	800dede <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	3314      	adds	r3, #20
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	e853 3f00 	ldrex	r3, [r3]
 800df24:	623b      	str	r3, [r7, #32]
   return(result);
 800df26:	6a3b      	ldr	r3, [r7, #32]
 800df28:	f023 0301 	bic.w	r3, r3, #1
 800df2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3314      	adds	r3, #20
 800df36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df3a:	633a      	str	r2, [r7, #48]	; 0x30
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df42:	e841 2300 	strex	r3, r2, [r1]
 800df46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1e3      	bne.n	800df16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2220      	movs	r2, #32
 800df52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	330c      	adds	r3, #12
 800df62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	e853 3f00 	ldrex	r3, [r3]
 800df6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f023 0310 	bic.w	r3, r3, #16
 800df72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	330c      	adds	r3, #12
 800df7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800df80:	61fa      	str	r2, [r7, #28]
 800df82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df84:	69b9      	ldr	r1, [r7, #24]
 800df86:	69fa      	ldr	r2, [r7, #28]
 800df88:	e841 2300 	strex	r3, r2, [r1]
 800df8c:	617b      	str	r3, [r7, #20]
   return(result);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1e3      	bne.n	800df5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f848 	bl	800e030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800dfa0:	e023      	b.n	800dfea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d009      	beq.n	800dfc2 <HAL_UART_IRQHandler+0x4ea>
 800dfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fae3 	bl	800e586 <UART_Transmit_IT>
    return;
 800dfc0:	e014      	b.n	800dfec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00e      	beq.n	800dfec <HAL_UART_IRQHandler+0x514>
 800dfce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 fb23 	bl	800e626 <UART_EndTransmit_IT>
    return;
 800dfe0:	e004      	b.n	800dfec <HAL_UART_IRQHandler+0x514>
    return;
 800dfe2:	bf00      	nop
 800dfe4:	e002      	b.n	800dfec <HAL_UART_IRQHandler+0x514>
      return;
 800dfe6:	bf00      	nop
 800dfe8:	e000      	b.n	800dfec <HAL_UART_IRQHandler+0x514>
      return;
 800dfea:	bf00      	nop
  }
}
 800dfec:	37e8      	adds	r7, #232	; 0xe8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop

0800dff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b09c      	sub	sp, #112	; 0x70
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e054:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e060:	2b00      	cmp	r3, #0
 800e062:	d172      	bne.n	800e14a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e066:	2200      	movs	r2, #0
 800e068:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	330c      	adds	r3, #12
 800e070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e074:	e853 3f00 	ldrex	r3, [r3]
 800e078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e07c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e080:	66bb      	str	r3, [r7, #104]	; 0x68
 800e082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	330c      	adds	r3, #12
 800e088:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e08a:	65ba      	str	r2, [r7, #88]	; 0x58
 800e08c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e08e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e092:	e841 2300 	strex	r3, r2, [r1]
 800e096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1e5      	bne.n	800e06a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3314      	adds	r3, #20
 800e0a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	e853 3f00 	ldrex	r3, [r3]
 800e0ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b0:	f023 0301 	bic.w	r3, r3, #1
 800e0b4:	667b      	str	r3, [r7, #100]	; 0x64
 800e0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3314      	adds	r3, #20
 800e0bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0be:	647a      	str	r2, [r7, #68]	; 0x44
 800e0c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0c6:	e841 2300 	strex	r3, r2, [r1]
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1e5      	bne.n	800e09e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3314      	adds	r3, #20
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	e853 3f00 	ldrex	r3, [r3]
 800e0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0e8:	663b      	str	r3, [r7, #96]	; 0x60
 800e0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3314      	adds	r3, #20
 800e0f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0f2:	633a      	str	r2, [r7, #48]	; 0x30
 800e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0fa:	e841 2300 	strex	r3, r2, [r1]
 800e0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1e5      	bne.n	800e0d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e108:	2220      	movs	r2, #32
 800e10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e112:	2b01      	cmp	r3, #1
 800e114:	d119      	bne.n	800e14a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	330c      	adds	r3, #12
 800e11c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	e853 3f00 	ldrex	r3, [r3]
 800e124:	60fb      	str	r3, [r7, #12]
   return(result);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f023 0310 	bic.w	r3, r3, #16
 800e12c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	330c      	adds	r3, #12
 800e134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e136:	61fa      	str	r2, [r7, #28]
 800e138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e13a:	69b9      	ldr	r1, [r7, #24]
 800e13c:	69fa      	ldr	r2, [r7, #28]
 800e13e:	e841 2300 	strex	r3, r2, [r1]
 800e142:	617b      	str	r3, [r7, #20]
   return(result);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1e5      	bne.n	800e116 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d106      	bne.n	800e160 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e156:	4619      	mov	r1, r3
 800e158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e15a:	f7ff ff69 	bl	800e030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e15e:	e002      	b.n	800e166 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e160:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e162:	f7f5 f829 	bl	80031b8 <HAL_UART_RxCpltCallback>
}
 800e166:	bf00      	nop
 800e168:	3770      	adds	r7, #112	; 0x70
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e17a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e180:	2b01      	cmp	r3, #1
 800e182:	d108      	bne.n	800e196 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e188:	085b      	lsrs	r3, r3, #1
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	4619      	mov	r1, r3
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7ff ff4e 	bl	800e030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e194:	e002      	b.n	800e19c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f7ff ff36 	bl	800e008 <HAL_UART_RxHalfCpltCallback>
}
 800e19c:	bf00      	nop
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1c0:	2b80      	cmp	r3, #128	; 0x80
 800e1c2:	bf0c      	ite	eq
 800e1c4:	2301      	moveq	r3, #1
 800e1c6:	2300      	movne	r3, #0
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b21      	cmp	r3, #33	; 0x21
 800e1d6:	d108      	bne.n	800e1ea <UART_DMAError+0x46>
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d005      	beq.n	800e1ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e1e4:	68b8      	ldr	r0, [r7, #8]
 800e1e6:	f000 f92f 	bl	800e448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	695b      	ldr	r3, [r3, #20]
 800e1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f4:	2b40      	cmp	r3, #64	; 0x40
 800e1f6:	bf0c      	ite	eq
 800e1f8:	2301      	moveq	r3, #1
 800e1fa:	2300      	movne	r3, #0
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b22      	cmp	r3, #34	; 0x22
 800e20a:	d108      	bne.n	800e21e <UART_DMAError+0x7a>
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2200      	movs	r2, #0
 800e216:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e218:	68b8      	ldr	r0, [r7, #8]
 800e21a:	f000 f93d 	bl	800e498 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	f043 0210 	orr.w	r2, r3, #16
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e22a:	68b8      	ldr	r0, [r7, #8]
 800e22c:	f7ff fef6 	bl	800e01c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e230:	bf00      	nop
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b090      	sub	sp, #64	; 0x40
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	603b      	str	r3, [r7, #0]
 800e244:	4613      	mov	r3, r2
 800e246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e248:	e050      	b.n	800e2ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e250:	d04c      	beq.n	800e2ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <UART_WaitOnFlagUntilTimeout+0x30>
 800e258:	f7f9 feb2 	bl	8007fc0 <HAL_GetTick>
 800e25c:	4602      	mov	r2, r0
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e264:	429a      	cmp	r2, r3
 800e266:	d241      	bcs.n	800e2ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	330c      	adds	r3, #12
 800e26e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	e853 3f00 	ldrex	r3, [r3]
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	330c      	adds	r3, #12
 800e286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e288:	637a      	str	r2, [r7, #52]	; 0x34
 800e28a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e290:	e841 2300 	strex	r3, r2, [r1]
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e5      	bne.n	800e268 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	3314      	adds	r3, #20
 800e2a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	e853 3f00 	ldrex	r3, [r3]
 800e2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	f023 0301 	bic.w	r3, r3, #1
 800e2b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	3314      	adds	r3, #20
 800e2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2bc:	623a      	str	r2, [r7, #32]
 800e2be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c0:	69f9      	ldr	r1, [r7, #28]
 800e2c2:	6a3a      	ldr	r2, [r7, #32]
 800e2c4:	e841 2300 	strex	r3, r2, [r1]
 800e2c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1e5      	bne.n	800e29c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2220      	movs	r2, #32
 800e2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e00f      	b.n	800e30c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	bf0c      	ite	eq
 800e2fc:	2301      	moveq	r3, #1
 800e2fe:	2300      	movne	r3, #0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	461a      	mov	r2, r3
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	429a      	cmp	r2, r3
 800e308:	d09f      	beq.n	800e24a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3740      	adds	r7, #64	; 0x40
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b098      	sub	sp, #96	; 0x60
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	4613      	mov	r3, r2
 800e320:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	88fa      	ldrh	r2, [r7, #6]
 800e32c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2222      	movs	r2, #34	; 0x22
 800e338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e340:	4a3e      	ldr	r2, [pc, #248]	; (800e43c <UART_Start_Receive_DMA+0x128>)
 800e342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e348:	4a3d      	ldr	r2, [pc, #244]	; (800e440 <UART_Start_Receive_DMA+0x12c>)
 800e34a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e350:	4a3c      	ldr	r2, [pc, #240]	; (800e444 <UART_Start_Receive_DMA+0x130>)
 800e352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e358:	2200      	movs	r2, #0
 800e35a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e35c:	f107 0308 	add.w	r3, r7, #8
 800e360:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4619      	mov	r1, r3
 800e36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	88fb      	ldrh	r3, [r7, #6]
 800e374:	f7fa fc24 	bl	8008bc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e378:	2300      	movs	r3, #0
 800e37a:	613b      	str	r3, [r7, #16]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	613b      	str	r3, [r7, #16]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	613b      	str	r3, [r7, #16]
 800e38c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	330c      	adds	r3, #12
 800e39c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3a0:	e853 3f00 	ldrex	r3, [r3]
 800e3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	330c      	adds	r3, #12
 800e3b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e3b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3be:	e841 2300 	strex	r3, r2, [r1]
 800e3c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1e5      	bne.n	800e396 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	3314      	adds	r3, #20
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	e853 3f00 	ldrex	r3, [r3]
 800e3d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3dc:	f043 0301 	orr.w	r3, r3, #1
 800e3e0:	657b      	str	r3, [r7, #84]	; 0x54
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	3314      	adds	r3, #20
 800e3e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3ea:	63ba      	str	r2, [r7, #56]	; 0x38
 800e3ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3f2:	e841 2300 	strex	r3, r2, [r1]
 800e3f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1e5      	bne.n	800e3ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3314      	adds	r3, #20
 800e404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	e853 3f00 	ldrex	r3, [r3]
 800e40c:	617b      	str	r3, [r7, #20]
   return(result);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e414:	653b      	str	r3, [r7, #80]	; 0x50
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3314      	adds	r3, #20
 800e41c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e41e:	627a      	str	r2, [r7, #36]	; 0x24
 800e420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e422:	6a39      	ldr	r1, [r7, #32]
 800e424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1e5      	bne.n	800e3fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3760      	adds	r7, #96	; 0x60
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0800e049 	.word	0x0800e049
 800e440:	0800e16f 	.word	0x0800e16f
 800e444:	0800e1a5 	.word	0x0800e1a5

0800e448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e448:	b480      	push	{r7}
 800e44a:	b089      	sub	sp, #36	; 0x24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	330c      	adds	r3, #12
 800e456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	e853 3f00 	ldrex	r3, [r3]
 800e45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e466:	61fb      	str	r3, [r7, #28]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	330c      	adds	r3, #12
 800e46e:	69fa      	ldr	r2, [r7, #28]
 800e470:	61ba      	str	r2, [r7, #24]
 800e472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e474:	6979      	ldr	r1, [r7, #20]
 800e476:	69ba      	ldr	r2, [r7, #24]
 800e478:	e841 2300 	strex	r3, r2, [r1]
 800e47c:	613b      	str	r3, [r7, #16]
   return(result);
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1e5      	bne.n	800e450 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2220      	movs	r2, #32
 800e488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e48c:	bf00      	nop
 800e48e:	3724      	adds	r7, #36	; 0x24
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e498:	b480      	push	{r7}
 800e49a:	b095      	sub	sp, #84	; 0x54
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	330c      	adds	r3, #12
 800e4a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	e853 3f00 	ldrex	r3, [r3]
 800e4ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	330c      	adds	r3, #12
 800e4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4c0:	643a      	str	r2, [r7, #64]	; 0x40
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4c8:	e841 2300 	strex	r3, r2, [r1]
 800e4cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1e5      	bne.n	800e4a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3314      	adds	r3, #20
 800e4da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	e853 3f00 	ldrex	r3, [r3]
 800e4e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	f023 0301 	bic.w	r3, r3, #1
 800e4ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	3314      	adds	r3, #20
 800e4f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4fc:	e841 2300 	strex	r3, r2, [r1]
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1e5      	bne.n	800e4d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d119      	bne.n	800e544 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	330c      	adds	r3, #12
 800e516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	e853 3f00 	ldrex	r3, [r3]
 800e51e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f023 0310 	bic.w	r3, r3, #16
 800e526:	647b      	str	r3, [r7, #68]	; 0x44
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	330c      	adds	r3, #12
 800e52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e530:	61ba      	str	r2, [r7, #24]
 800e532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e534:	6979      	ldr	r1, [r7, #20]
 800e536:	69ba      	ldr	r2, [r7, #24]
 800e538:	e841 2300 	strex	r3, r2, [r1]
 800e53c:	613b      	str	r3, [r7, #16]
   return(result);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1e5      	bne.n	800e510 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2220      	movs	r2, #32
 800e548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e552:	bf00      	nop
 800e554:	3754      	adds	r7, #84	; 0x54
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr

0800e55e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f7ff fd4f 	bl	800e01c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e57e:	bf00      	nop
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e586:	b480      	push	{r7}
 800e588:	b085      	sub	sp, #20
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b21      	cmp	r3, #33	; 0x21
 800e598:	d13e      	bne.n	800e618 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5a2:	d114      	bne.n	800e5ce <UART_Transmit_IT+0x48>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d110      	bne.n	800e5ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a1b      	ldr	r3, [r3, #32]
 800e5b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e5c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	1c9a      	adds	r2, r3, #2
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	621a      	str	r2, [r3, #32]
 800e5cc:	e008      	b.n	800e5e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	1c59      	adds	r1, r3, #1
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	6211      	str	r1, [r2, #32]
 800e5d8:	781a      	ldrb	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10f      	bne.n	800e614 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	68da      	ldr	r2, [r3, #12]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e602:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68da      	ldr	r2, [r3, #12]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e612:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	e000      	b.n	800e61a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e618:	2302      	movs	r3, #2
  }
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3714      	adds	r7, #20
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68da      	ldr	r2, [r3, #12]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e63c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2220      	movs	r2, #32
 800e642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fcd4 	bl	800dff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b08c      	sub	sp, #48	; 0x30
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b22      	cmp	r3, #34	; 0x22
 800e668:	f040 80ab 	bne.w	800e7c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e674:	d117      	bne.n	800e6a6 <UART_Receive_IT+0x50>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d113      	bne.n	800e6a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	b29b      	uxth	r3, r3
 800e690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e694:	b29a      	uxth	r2, r3
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69e:	1c9a      	adds	r2, r3, #2
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	629a      	str	r2, [r3, #40]	; 0x28
 800e6a4:	e026      	b.n	800e6f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6b8:	d007      	beq.n	800e6ca <UART_Receive_IT+0x74>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10a      	bne.n	800e6d8 <UART_Receive_IT+0x82>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d106      	bne.n	800e6d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	e008      	b.n	800e6ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ee:	1c5a      	adds	r2, r3, #1
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	4619      	mov	r1, r3
 800e702:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e704:	2b00      	cmp	r3, #0
 800e706:	d15a      	bne.n	800e7be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68da      	ldr	r2, [r3, #12]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f022 0220 	bic.w	r2, r2, #32
 800e716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	695a      	ldr	r2, [r3, #20]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0201 	bic.w	r2, r2, #1
 800e736:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e744:	2b01      	cmp	r3, #1
 800e746:	d135      	bne.n	800e7b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	330c      	adds	r3, #12
 800e754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	e853 3f00 	ldrex	r3, [r3]
 800e75c:	613b      	str	r3, [r7, #16]
   return(result);
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	f023 0310 	bic.w	r3, r3, #16
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	330c      	adds	r3, #12
 800e76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76e:	623a      	str	r2, [r7, #32]
 800e770:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e772:	69f9      	ldr	r1, [r7, #28]
 800e774:	6a3a      	ldr	r2, [r7, #32]
 800e776:	e841 2300 	strex	r3, r2, [r1]
 800e77a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1e5      	bne.n	800e74e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b10      	cmp	r3, #16
 800e78e:	d10a      	bne.n	800e7a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e790:	2300      	movs	r3, #0
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff fc3f 	bl	800e030 <HAL_UARTEx_RxEventCallback>
 800e7b2:	e002      	b.n	800e7ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7f4 fcff 	bl	80031b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e002      	b.n	800e7c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e000      	b.n	800e7c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e7c2:	2302      	movs	r3, #2
  }
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3730      	adds	r7, #48	; 0x30
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d0:	b09f      	sub	sp, #124	; 0x7c
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e2:	68d9      	ldr	r1, [r3, #12]
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	ea40 0301 	orr.w	r3, r0, r1
 800e7ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f0:	689a      	ldr	r2, [r3, #8]
 800e7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	431a      	orrs	r2, r3
 800e7fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e800:	69db      	ldr	r3, [r3, #28]
 800e802:	4313      	orrs	r3, r2
 800e804:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e810:	f021 010c 	bic.w	r1, r1, #12
 800e814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e81a:	430b      	orrs	r3, r1
 800e81c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82a:	6999      	ldr	r1, [r3, #24]
 800e82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	ea40 0301 	orr.w	r3, r0, r1
 800e834:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4bc5      	ldr	r3, [pc, #788]	; (800eb50 <UART_SetConfig+0x384>)
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d004      	beq.n	800e84a <UART_SetConfig+0x7e>
 800e840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	4bc3      	ldr	r3, [pc, #780]	; (800eb54 <UART_SetConfig+0x388>)
 800e846:	429a      	cmp	r2, r3
 800e848:	d103      	bne.n	800e852 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e84a:	f7fd f875 	bl	800b938 <HAL_RCC_GetPCLK2Freq>
 800e84e:	6778      	str	r0, [r7, #116]	; 0x74
 800e850:	e002      	b.n	800e858 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e852:	f7fd f85d 	bl	800b910 <HAL_RCC_GetPCLK1Freq>
 800e856:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e85a:	69db      	ldr	r3, [r3, #28]
 800e85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e860:	f040 80b6 	bne.w	800e9d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e866:	461c      	mov	r4, r3
 800e868:	f04f 0500 	mov.w	r5, #0
 800e86c:	4622      	mov	r2, r4
 800e86e:	462b      	mov	r3, r5
 800e870:	1891      	adds	r1, r2, r2
 800e872:	6439      	str	r1, [r7, #64]	; 0x40
 800e874:	415b      	adcs	r3, r3
 800e876:	647b      	str	r3, [r7, #68]	; 0x44
 800e878:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e87c:	1912      	adds	r2, r2, r4
 800e87e:	eb45 0303 	adc.w	r3, r5, r3
 800e882:	f04f 0000 	mov.w	r0, #0
 800e886:	f04f 0100 	mov.w	r1, #0
 800e88a:	00d9      	lsls	r1, r3, #3
 800e88c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e890:	00d0      	lsls	r0, r2, #3
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	1911      	adds	r1, r2, r4
 800e898:	6639      	str	r1, [r7, #96]	; 0x60
 800e89a:	416b      	adcs	r3, r5
 800e89c:	667b      	str	r3, [r7, #100]	; 0x64
 800e89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	f04f 0300 	mov.w	r3, #0
 800e8a8:	1891      	adds	r1, r2, r2
 800e8aa:	63b9      	str	r1, [r7, #56]	; 0x38
 800e8ac:	415b      	adcs	r3, r3
 800e8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e8b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e8b8:	f7f2 f996 	bl	8000be8 <__aeabi_uldivmod>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	4ba5      	ldr	r3, [pc, #660]	; (800eb58 <UART_SetConfig+0x38c>)
 800e8c2:	fba3 2302 	umull	r2, r3, r3, r2
 800e8c6:	095b      	lsrs	r3, r3, #5
 800e8c8:	011e      	lsls	r6, r3, #4
 800e8ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8cc:	461c      	mov	r4, r3
 800e8ce:	f04f 0500 	mov.w	r5, #0
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	1891      	adds	r1, r2, r2
 800e8d8:	6339      	str	r1, [r7, #48]	; 0x30
 800e8da:	415b      	adcs	r3, r3
 800e8dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e8de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e8e2:	1912      	adds	r2, r2, r4
 800e8e4:	eb45 0303 	adc.w	r3, r5, r3
 800e8e8:	f04f 0000 	mov.w	r0, #0
 800e8ec:	f04f 0100 	mov.w	r1, #0
 800e8f0:	00d9      	lsls	r1, r3, #3
 800e8f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e8f6:	00d0      	lsls	r0, r2, #3
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	1911      	adds	r1, r2, r4
 800e8fe:	65b9      	str	r1, [r7, #88]	; 0x58
 800e900:	416b      	adcs	r3, r5
 800e902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	461a      	mov	r2, r3
 800e90a:	f04f 0300 	mov.w	r3, #0
 800e90e:	1891      	adds	r1, r2, r2
 800e910:	62b9      	str	r1, [r7, #40]	; 0x28
 800e912:	415b      	adcs	r3, r3
 800e914:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e91a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e91e:	f7f2 f963 	bl	8000be8 <__aeabi_uldivmod>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	4b8c      	ldr	r3, [pc, #560]	; (800eb58 <UART_SetConfig+0x38c>)
 800e928:	fba3 1302 	umull	r1, r3, r3, r2
 800e92c:	095b      	lsrs	r3, r3, #5
 800e92e:	2164      	movs	r1, #100	; 0x64
 800e930:	fb01 f303 	mul.w	r3, r1, r3
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	3332      	adds	r3, #50	; 0x32
 800e93a:	4a87      	ldr	r2, [pc, #540]	; (800eb58 <UART_SetConfig+0x38c>)
 800e93c:	fba2 2303 	umull	r2, r3, r2, r3
 800e940:	095b      	lsrs	r3, r3, #5
 800e942:	005b      	lsls	r3, r3, #1
 800e944:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e948:	441e      	add	r6, r3
 800e94a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e94c:	4618      	mov	r0, r3
 800e94e:	f04f 0100 	mov.w	r1, #0
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	1894      	adds	r4, r2, r2
 800e958:	623c      	str	r4, [r7, #32]
 800e95a:	415b      	adcs	r3, r3
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
 800e95e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e962:	1812      	adds	r2, r2, r0
 800e964:	eb41 0303 	adc.w	r3, r1, r3
 800e968:	f04f 0400 	mov.w	r4, #0
 800e96c:	f04f 0500 	mov.w	r5, #0
 800e970:	00dd      	lsls	r5, r3, #3
 800e972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e976:	00d4      	lsls	r4, r2, #3
 800e978:	4622      	mov	r2, r4
 800e97a:	462b      	mov	r3, r5
 800e97c:	1814      	adds	r4, r2, r0
 800e97e:	653c      	str	r4, [r7, #80]	; 0x50
 800e980:	414b      	adcs	r3, r1
 800e982:	657b      	str	r3, [r7, #84]	; 0x54
 800e984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	461a      	mov	r2, r3
 800e98a:	f04f 0300 	mov.w	r3, #0
 800e98e:	1891      	adds	r1, r2, r2
 800e990:	61b9      	str	r1, [r7, #24]
 800e992:	415b      	adcs	r3, r3
 800e994:	61fb      	str	r3, [r7, #28]
 800e996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e99a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e99e:	f7f2 f923 	bl	8000be8 <__aeabi_uldivmod>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4b6c      	ldr	r3, [pc, #432]	; (800eb58 <UART_SetConfig+0x38c>)
 800e9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800e9ac:	095b      	lsrs	r3, r3, #5
 800e9ae:	2164      	movs	r1, #100	; 0x64
 800e9b0:	fb01 f303 	mul.w	r3, r1, r3
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	3332      	adds	r3, #50	; 0x32
 800e9ba:	4a67      	ldr	r2, [pc, #412]	; (800eb58 <UART_SetConfig+0x38c>)
 800e9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c0:	095b      	lsrs	r3, r3, #5
 800e9c2:	f003 0207 	and.w	r2, r3, #7
 800e9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4432      	add	r2, r6
 800e9cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e9ce:	e0b9      	b.n	800eb44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e9d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9d2:	461c      	mov	r4, r3
 800e9d4:	f04f 0500 	mov.w	r5, #0
 800e9d8:	4622      	mov	r2, r4
 800e9da:	462b      	mov	r3, r5
 800e9dc:	1891      	adds	r1, r2, r2
 800e9de:	6139      	str	r1, [r7, #16]
 800e9e0:	415b      	adcs	r3, r3
 800e9e2:	617b      	str	r3, [r7, #20]
 800e9e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9e8:	1912      	adds	r2, r2, r4
 800e9ea:	eb45 0303 	adc.w	r3, r5, r3
 800e9ee:	f04f 0000 	mov.w	r0, #0
 800e9f2:	f04f 0100 	mov.w	r1, #0
 800e9f6:	00d9      	lsls	r1, r3, #3
 800e9f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e9fc:	00d0      	lsls	r0, r2, #3
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	eb12 0804 	adds.w	r8, r2, r4
 800ea06:	eb43 0905 	adc.w	r9, r3, r5
 800ea0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f04f 0100 	mov.w	r1, #0
 800ea14:	f04f 0200 	mov.w	r2, #0
 800ea18:	f04f 0300 	mov.w	r3, #0
 800ea1c:	008b      	lsls	r3, r1, #2
 800ea1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea22:	0082      	lsls	r2, r0, #2
 800ea24:	4640      	mov	r0, r8
 800ea26:	4649      	mov	r1, r9
 800ea28:	f7f2 f8de 	bl	8000be8 <__aeabi_uldivmod>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4b49      	ldr	r3, [pc, #292]	; (800eb58 <UART_SetConfig+0x38c>)
 800ea32:	fba3 2302 	umull	r2, r3, r3, r2
 800ea36:	095b      	lsrs	r3, r3, #5
 800ea38:	011e      	lsls	r6, r3, #4
 800ea3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f04f 0100 	mov.w	r1, #0
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	1894      	adds	r4, r2, r2
 800ea48:	60bc      	str	r4, [r7, #8]
 800ea4a:	415b      	adcs	r3, r3
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea52:	1812      	adds	r2, r2, r0
 800ea54:	eb41 0303 	adc.w	r3, r1, r3
 800ea58:	f04f 0400 	mov.w	r4, #0
 800ea5c:	f04f 0500 	mov.w	r5, #0
 800ea60:	00dd      	lsls	r5, r3, #3
 800ea62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea66:	00d4      	lsls	r4, r2, #3
 800ea68:	4622      	mov	r2, r4
 800ea6a:	462b      	mov	r3, r5
 800ea6c:	1814      	adds	r4, r2, r0
 800ea6e:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea70:	414b      	adcs	r3, r1
 800ea72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f04f 0100 	mov.w	r1, #0
 800ea7e:	f04f 0200 	mov.w	r2, #0
 800ea82:	f04f 0300 	mov.w	r3, #0
 800ea86:	008b      	lsls	r3, r1, #2
 800ea88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea8c:	0082      	lsls	r2, r0, #2
 800ea8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ea92:	f7f2 f8a9 	bl	8000be8 <__aeabi_uldivmod>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4b2f      	ldr	r3, [pc, #188]	; (800eb58 <UART_SetConfig+0x38c>)
 800ea9c:	fba3 1302 	umull	r1, r3, r3, r2
 800eaa0:	095b      	lsrs	r3, r3, #5
 800eaa2:	2164      	movs	r1, #100	; 0x64
 800eaa4:	fb01 f303 	mul.w	r3, r1, r3
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	011b      	lsls	r3, r3, #4
 800eaac:	3332      	adds	r3, #50	; 0x32
 800eaae:	4a2a      	ldr	r2, [pc, #168]	; (800eb58 <UART_SetConfig+0x38c>)
 800eab0:	fba2 2303 	umull	r2, r3, r2, r3
 800eab4:	095b      	lsrs	r3, r3, #5
 800eab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eaba:	441e      	add	r6, r3
 800eabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eabe:	4618      	mov	r0, r3
 800eac0:	f04f 0100 	mov.w	r1, #0
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	1894      	adds	r4, r2, r2
 800eaca:	603c      	str	r4, [r7, #0]
 800eacc:	415b      	adcs	r3, r3
 800eace:	607b      	str	r3, [r7, #4]
 800ead0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ead4:	1812      	adds	r2, r2, r0
 800ead6:	eb41 0303 	adc.w	r3, r1, r3
 800eada:	f04f 0400 	mov.w	r4, #0
 800eade:	f04f 0500 	mov.w	r5, #0
 800eae2:	00dd      	lsls	r5, r3, #3
 800eae4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eae8:	00d4      	lsls	r4, r2, #3
 800eaea:	4622      	mov	r2, r4
 800eaec:	462b      	mov	r3, r5
 800eaee:	eb12 0a00 	adds.w	sl, r2, r0
 800eaf2:	eb43 0b01 	adc.w	fp, r3, r1
 800eaf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f04f 0100 	mov.w	r1, #0
 800eb00:	f04f 0200 	mov.w	r2, #0
 800eb04:	f04f 0300 	mov.w	r3, #0
 800eb08:	008b      	lsls	r3, r1, #2
 800eb0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eb0e:	0082      	lsls	r2, r0, #2
 800eb10:	4650      	mov	r0, sl
 800eb12:	4659      	mov	r1, fp
 800eb14:	f7f2 f868 	bl	8000be8 <__aeabi_uldivmod>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <UART_SetConfig+0x38c>)
 800eb1e:	fba3 1302 	umull	r1, r3, r3, r2
 800eb22:	095b      	lsrs	r3, r3, #5
 800eb24:	2164      	movs	r1, #100	; 0x64
 800eb26:	fb01 f303 	mul.w	r3, r1, r3
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	3332      	adds	r3, #50	; 0x32
 800eb30:	4a09      	ldr	r2, [pc, #36]	; (800eb58 <UART_SetConfig+0x38c>)
 800eb32:	fba2 2303 	umull	r2, r3, r2, r3
 800eb36:	095b      	lsrs	r3, r3, #5
 800eb38:	f003 020f 	and.w	r2, r3, #15
 800eb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4432      	add	r2, r6
 800eb42:	609a      	str	r2, [r3, #8]
}
 800eb44:	bf00      	nop
 800eb46:	377c      	adds	r7, #124	; 0x7c
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4e:	bf00      	nop
 800eb50:	40011000 	.word	0x40011000
 800eb54:	40011400 	.word	0x40011400
 800eb58:	51eb851f 	.word	0x51eb851f

0800eb5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	f107 001c 	add.w	r0, r7, #28
 800eb6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d122      	bne.n	800ebba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eb88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d105      	bne.n	800ebae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f001 fb16 	bl	80101e0 <USB_CoreReset>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	73fb      	strb	r3, [r7, #15]
 800ebb8:	e01a      	b.n	800ebf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f001 fb0a 	bl	80101e0 <USB_CoreReset>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ebd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	639a      	str	r2, [r3, #56]	; 0x38
 800ebe2:	e005      	b.n	800ebf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d10b      	bne.n	800ec0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f043 0206 	orr.w	r2, r3, #6
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	f043 0220 	orr.w	r2, r3, #32
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec1a:	b004      	add	sp, #16
 800ec1c:	4770      	bx	lr
	...

0800ec20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d165      	bne.n	800ed00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	4a41      	ldr	r2, [pc, #260]	; (800ed3c <USB_SetTurnaroundTime+0x11c>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d906      	bls.n	800ec4a <USB_SetTurnaroundTime+0x2a>
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	4a40      	ldr	r2, [pc, #256]	; (800ed40 <USB_SetTurnaroundTime+0x120>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d202      	bcs.n	800ec4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ec44:	230f      	movs	r3, #15
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e062      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	4a3c      	ldr	r2, [pc, #240]	; (800ed40 <USB_SetTurnaroundTime+0x120>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d306      	bcc.n	800ec60 <USB_SetTurnaroundTime+0x40>
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	4a3b      	ldr	r2, [pc, #236]	; (800ed44 <USB_SetTurnaroundTime+0x124>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d202      	bcs.n	800ec60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec5a:	230e      	movs	r3, #14
 800ec5c:	617b      	str	r3, [r7, #20]
 800ec5e:	e057      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	4a38      	ldr	r2, [pc, #224]	; (800ed44 <USB_SetTurnaroundTime+0x124>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d306      	bcc.n	800ec76 <USB_SetTurnaroundTime+0x56>
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	4a37      	ldr	r2, [pc, #220]	; (800ed48 <USB_SetTurnaroundTime+0x128>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d202      	bcs.n	800ec76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec70:	230d      	movs	r3, #13
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e04c      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4a33      	ldr	r2, [pc, #204]	; (800ed48 <USB_SetTurnaroundTime+0x128>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d306      	bcc.n	800ec8c <USB_SetTurnaroundTime+0x6c>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	4a32      	ldr	r2, [pc, #200]	; (800ed4c <USB_SetTurnaroundTime+0x12c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d802      	bhi.n	800ec8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec86:	230c      	movs	r3, #12
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e041      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	4a2f      	ldr	r2, [pc, #188]	; (800ed4c <USB_SetTurnaroundTime+0x12c>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d906      	bls.n	800eca2 <USB_SetTurnaroundTime+0x82>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4a2e      	ldr	r2, [pc, #184]	; (800ed50 <USB_SetTurnaroundTime+0x130>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d802      	bhi.n	800eca2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec9c:	230b      	movs	r3, #11
 800ec9e:	617b      	str	r3, [r7, #20]
 800eca0:	e036      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	4a2a      	ldr	r2, [pc, #168]	; (800ed50 <USB_SetTurnaroundTime+0x130>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d906      	bls.n	800ecb8 <USB_SetTurnaroundTime+0x98>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4a29      	ldr	r2, [pc, #164]	; (800ed54 <USB_SetTurnaroundTime+0x134>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d802      	bhi.n	800ecb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ecb2:	230a      	movs	r3, #10
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e02b      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	4a26      	ldr	r2, [pc, #152]	; (800ed54 <USB_SetTurnaroundTime+0x134>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d906      	bls.n	800ecce <USB_SetTurnaroundTime+0xae>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	4a25      	ldr	r2, [pc, #148]	; (800ed58 <USB_SetTurnaroundTime+0x138>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d202      	bcs.n	800ecce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ecc8:	2309      	movs	r3, #9
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e020      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	4a21      	ldr	r2, [pc, #132]	; (800ed58 <USB_SetTurnaroundTime+0x138>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d306      	bcc.n	800ece4 <USB_SetTurnaroundTime+0xc4>
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	4a20      	ldr	r2, [pc, #128]	; (800ed5c <USB_SetTurnaroundTime+0x13c>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d802      	bhi.n	800ece4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ecde:	2308      	movs	r3, #8
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	e015      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	4a1d      	ldr	r2, [pc, #116]	; (800ed5c <USB_SetTurnaroundTime+0x13c>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d906      	bls.n	800ecfa <USB_SetTurnaroundTime+0xda>
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	4a1c      	ldr	r2, [pc, #112]	; (800ed60 <USB_SetTurnaroundTime+0x140>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d202      	bcs.n	800ecfa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ecf4:	2307      	movs	r3, #7
 800ecf6:	617b      	str	r3, [r7, #20]
 800ecf8:	e00a      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ecfa:	2306      	movs	r3, #6
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	e007      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ed00:	79fb      	ldrb	r3, [r7, #7]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d102      	bne.n	800ed0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ed06:	2309      	movs	r3, #9
 800ed08:	617b      	str	r3, [r7, #20]
 800ed0a:	e001      	b.n	800ed10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ed0c:	2309      	movs	r3, #9
 800ed0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	68da      	ldr	r2, [r3, #12]
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	029b      	lsls	r3, r3, #10
 800ed24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	371c      	adds	r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	00d8acbf 	.word	0x00d8acbf
 800ed40:	00e4e1c0 	.word	0x00e4e1c0
 800ed44:	00f42400 	.word	0x00f42400
 800ed48:	01067380 	.word	0x01067380
 800ed4c:	011a499f 	.word	0x011a499f
 800ed50:	01312cff 	.word	0x01312cff
 800ed54:	014ca43f 	.word	0x014ca43f
 800ed58:	016e3600 	.word	0x016e3600
 800ed5c:	01a6ab1f 	.word	0x01a6ab1f
 800ed60:	01e84800 	.word	0x01e84800

0800ed64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	f043 0201 	orr.w	r2, r3, #1
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	370c      	adds	r7, #12
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr

0800ed86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed86:	b480      	push	{r7}
 800ed88:	b083      	sub	sp, #12
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	f023 0201 	bic.w	r2, r3, #1
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800edb4:	2300      	movs	r3, #0
 800edb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d115      	bne.n	800edf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800edd6:	2001      	movs	r0, #1
 800edd8:	f7f9 f8fe 	bl	8007fd8 <HAL_Delay>
      ms++;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3301      	adds	r3, #1
 800ede0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 f96c 	bl	80100c0 <USB_GetMode>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b01      	cmp	r3, #1
 800edec:	d01e      	beq.n	800ee2c <USB_SetCurrentMode+0x84>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b31      	cmp	r3, #49	; 0x31
 800edf2:	d9f0      	bls.n	800edd6 <USB_SetCurrentMode+0x2e>
 800edf4:	e01a      	b.n	800ee2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800edf6:	78fb      	ldrb	r3, [r7, #3]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d115      	bne.n	800ee28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ee08:	2001      	movs	r0, #1
 800ee0a:	f7f9 f8e5 	bl	8007fd8 <HAL_Delay>
      ms++;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	3301      	adds	r3, #1
 800ee12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f001 f953 	bl	80100c0 <USB_GetMode>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d005      	beq.n	800ee2c <USB_SetCurrentMode+0x84>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b31      	cmp	r3, #49	; 0x31
 800ee24:	d9f0      	bls.n	800ee08 <USB_SetCurrentMode+0x60>
 800ee26:	e001      	b.n	800ee2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e005      	b.n	800ee38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2b32      	cmp	r3, #50	; 0x32
 800ee30:	d101      	bne.n	800ee36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee40:	b084      	sub	sp, #16
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b086      	sub	sp, #24
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	613b      	str	r3, [r7, #16]
 800ee5e:	e009      	b.n	800ee74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	3340      	adds	r3, #64	; 0x40
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	4413      	add	r3, r2
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	3301      	adds	r3, #1
 800ee72:	613b      	str	r3, [r7, #16]
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	2b0e      	cmp	r3, #14
 800ee78:	d9f2      	bls.n	800ee60 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d11c      	bne.n	800eeba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee8e:	f043 0302 	orr.w	r3, r3, #2
 800ee92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	e005      	b.n	800eec6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eebe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eecc:	461a      	mov	r2, r3
 800eece:	2300      	movs	r3, #0
 800eed0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed8:	4619      	mov	r1, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eee0:	461a      	mov	r2, r3
 800eee2:	680b      	ldr	r3, [r1, #0]
 800eee4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d10c      	bne.n	800ef06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d104      	bne.n	800eefc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eef2:	2100      	movs	r1, #0
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 f945 	bl	800f184 <USB_SetDevSpeed>
 800eefa:	e008      	b.n	800ef0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eefc:	2101      	movs	r1, #1
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 f940 	bl	800f184 <USB_SetDevSpeed>
 800ef04:	e003      	b.n	800ef0e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ef06:	2103      	movs	r1, #3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 f93b 	bl	800f184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ef0e:	2110      	movs	r1, #16
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 f8f3 	bl	800f0fc <USB_FlushTxFifo>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 f90f 	bl	800f144 <USB_FlushRxFifo>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d001      	beq.n	800ef30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef36:	461a      	mov	r2, r3
 800ef38:	2300      	movs	r3, #0
 800ef3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef42:	461a      	mov	r2, r3
 800ef44:	2300      	movs	r3, #0
 800ef46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4e:	461a      	mov	r2, r3
 800ef50:	2300      	movs	r3, #0
 800ef52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef54:	2300      	movs	r3, #0
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	e043      	b.n	800efe2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	015a      	lsls	r2, r3, #5
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef70:	d118      	bne.n	800efa4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d10a      	bne.n	800ef8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef84:	461a      	mov	r2, r3
 800ef86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	e013      	b.n	800efb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	015a      	lsls	r2, r3, #5
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	4413      	add	r3, r2
 800ef96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efa0:	6013      	str	r3, [r2, #0]
 800efa2:	e008      	b.n	800efb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efb0:	461a      	mov	r2, r3
 800efb2:	2300      	movs	r3, #0
 800efb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc2:	461a      	mov	r2, r3
 800efc4:	2300      	movs	r3, #0
 800efc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd4:	461a      	mov	r2, r3
 800efd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	3301      	adds	r3, #1
 800efe0:	613b      	str	r3, [r7, #16]
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d3b7      	bcc.n	800ef5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efea:	2300      	movs	r3, #0
 800efec:	613b      	str	r3, [r7, #16]
 800efee:	e043      	b.n	800f078 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	015a      	lsls	r2, r3, #5
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4413      	add	r3, r2
 800eff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f006:	d118      	bne.n	800f03a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10a      	bne.n	800f024 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	015a      	lsls	r2, r3, #5
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	4413      	add	r3, r2
 800f016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f01a:	461a      	mov	r2, r3
 800f01c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f020:	6013      	str	r3, [r2, #0]
 800f022:	e013      	b.n	800f04c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	015a      	lsls	r2, r3, #5
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f030:	461a      	mov	r2, r3
 800f032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	e008      	b.n	800f04c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	015a      	lsls	r2, r3, #5
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	4413      	add	r3, r2
 800f042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f046:	461a      	mov	r2, r3
 800f048:	2300      	movs	r3, #0
 800f04a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	015a      	lsls	r2, r3, #5
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	4413      	add	r3, r2
 800f054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f058:	461a      	mov	r2, r3
 800f05a:	2300      	movs	r3, #0
 800f05c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	015a      	lsls	r2, r3, #5
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	4413      	add	r3, r2
 800f066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f06a:	461a      	mov	r2, r3
 800f06c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f070:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	3301      	adds	r3, #1
 800f076:	613b      	str	r3, [r7, #16]
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	693a      	ldr	r2, [r7, #16]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d3b7      	bcc.n	800eff0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f08e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f092:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f0a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d105      	bne.n	800f0b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	699b      	ldr	r3, [r3, #24]
 800f0ac:	f043 0210 	orr.w	r2, r3, #16
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	699a      	ldr	r2, [r3, #24]
 800f0b8:	4b0f      	ldr	r3, [pc, #60]	; (800f0f8 <USB_DevInit+0x2b8>)
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d005      	beq.n	800f0d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	f043 0208 	orr.w	r2, r3, #8
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d107      	bne.n	800f0e8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	699b      	ldr	r3, [r3, #24]
 800f0dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0e0:	f043 0304 	orr.w	r3, r3, #4
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0f4:	b004      	add	sp, #16
 800f0f6:	4770      	bx	lr
 800f0f8:	803c3800 	.word	0x803c3800

0800f0fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	019b      	lsls	r3, r3, #6
 800f10e:	f043 0220 	orr.w	r2, r3, #32
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3301      	adds	r3, #1
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	4a08      	ldr	r2, [pc, #32]	; (800f140 <USB_FlushTxFifo+0x44>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d901      	bls.n	800f126 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f122:	2303      	movs	r3, #3
 800f124:	e006      	b.n	800f134 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	691b      	ldr	r3, [r3, #16]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b20      	cmp	r3, #32
 800f130:	d0f1      	beq.n	800f116 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	00030d40 	.word	0x00030d40

0800f144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2210      	movs	r2, #16
 800f154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	4a08      	ldr	r2, [pc, #32]	; (800f180 <USB_FlushRxFifo+0x3c>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d901      	bls.n	800f166 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f162:	2303      	movs	r3, #3
 800f164:	e006      	b.n	800f174 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	f003 0310 	and.w	r3, r3, #16
 800f16e:	2b10      	cmp	r3, #16
 800f170:	d0f1      	beq.n	800f156 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3714      	adds	r7, #20
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr
 800f180:	00030d40 	.word	0x00030d40

0800f184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	68f9      	ldr	r1, [r7, #12]
 800f1a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b087      	sub	sp, #28
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	f003 0306 	and.w	r3, r3, #6
 800f1ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d102      	bne.n	800f1dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	75fb      	strb	r3, [r7, #23]
 800f1da:	e00a      	b.n	800f1f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d002      	beq.n	800f1e8 <USB_GetDevSpeed+0x32>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2b06      	cmp	r3, #6
 800f1e6:	d102      	bne.n	800f1ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	75fb      	strb	r3, [r7, #23]
 800f1ec:	e001      	b.n	800f1f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f1ee:	230f      	movs	r3, #15
 800f1f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	371c      	adds	r7, #28
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d13a      	bne.n	800f292 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f222:	69da      	ldr	r2, [r3, #28]
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	f003 030f 	and.w	r3, r3, #15
 800f22c:	2101      	movs	r1, #1
 800f22e:	fa01 f303 	lsl.w	r3, r1, r3
 800f232:	b29b      	uxth	r3, r3
 800f234:	68f9      	ldr	r1, [r7, #12]
 800f236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f23a:	4313      	orrs	r3, r2
 800f23c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	015a      	lsls	r2, r3, #5
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	4413      	add	r3, r2
 800f246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d155      	bne.n	800f300 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	015a      	lsls	r2, r3, #5
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	4413      	add	r3, r2
 800f25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	78db      	ldrb	r3, [r3, #3]
 800f26e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f270:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	059b      	lsls	r3, r3, #22
 800f276:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f278:	4313      	orrs	r3, r2
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	0151      	lsls	r1, r2, #5
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	440a      	add	r2, r1
 800f282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f28a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	e036      	b.n	800f300 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f298:	69da      	ldr	r2, [r3, #28]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	f003 030f 	and.w	r3, r3, #15
 800f2a2:	2101      	movs	r1, #1
 800f2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800f2a8:	041b      	lsls	r3, r3, #16
 800f2aa:	68f9      	ldr	r1, [r7, #12]
 800f2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	015a      	lsls	r2, r3, #5
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d11a      	bne.n	800f300 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	015a      	lsls	r2, r3, #5
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	78db      	ldrb	r3, [r3, #3]
 800f2e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2e6:	430b      	orrs	r3, r1
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	0151      	lsls	r1, r2, #5
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	440a      	add	r2, r1
 800f2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
	...

0800f310 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	785b      	ldrb	r3, [r3, #1]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d161      	bne.n	800f3f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	015a      	lsls	r2, r3, #5
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4413      	add	r3, r2
 800f334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f33e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f342:	d11f      	bne.n	800f384 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	015a      	lsls	r2, r3, #5
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	4413      	add	r3, r2
 800f34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68ba      	ldr	r2, [r7, #8]
 800f354:	0151      	lsls	r1, r2, #5
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	440a      	add	r2, r1
 800f35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f35e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f362:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	015a      	lsls	r2, r3, #5
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4413      	add	r3, r2
 800f36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	0151      	lsls	r1, r2, #5
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	440a      	add	r2, r1
 800f37a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f37e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f38a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	f003 030f 	and.w	r3, r3, #15
 800f394:	2101      	movs	r1, #1
 800f396:	fa01 f303 	lsl.w	r3, r1, r3
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	43db      	mvns	r3, r3
 800f39e:	68f9      	ldr	r1, [r7, #12]
 800f3a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ae:	69da      	ldr	r2, [r3, #28]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f003 030f 	and.w	r3, r3, #15
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	43db      	mvns	r3, r3
 800f3c2:	68f9      	ldr	r1, [r7, #12]
 800f3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	015a      	lsls	r2, r3, #5
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	0159      	lsls	r1, r3, #5
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	440b      	add	r3, r1
 800f3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	4b35      	ldr	r3, [pc, #212]	; (800f4c0 <USB_DeactivateEndpoint+0x1b0>)
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	600b      	str	r3, [r1, #0]
 800f3ee:	e060      	b.n	800f4b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f406:	d11f      	bne.n	800f448 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	015a      	lsls	r2, r3, #5
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4413      	add	r3, r2
 800f410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	0151      	lsls	r1, r2, #5
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	440a      	add	r2, r1
 800f41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f426:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	015a      	lsls	r2, r3, #5
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	4413      	add	r3, r2
 800f430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	0151      	lsls	r1, r2, #5
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	440a      	add	r2, r1
 800f43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f44e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	f003 030f 	and.w	r3, r3, #15
 800f458:	2101      	movs	r1, #1
 800f45a:	fa01 f303 	lsl.w	r3, r1, r3
 800f45e:	041b      	lsls	r3, r3, #16
 800f460:	43db      	mvns	r3, r3
 800f462:	68f9      	ldr	r1, [r7, #12]
 800f464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f468:	4013      	ands	r3, r2
 800f46a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f472:	69da      	ldr	r2, [r3, #28]
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	f003 030f 	and.w	r3, r3, #15
 800f47c:	2101      	movs	r1, #1
 800f47e:	fa01 f303 	lsl.w	r3, r1, r3
 800f482:	041b      	lsls	r3, r3, #16
 800f484:	43db      	mvns	r3, r3
 800f486:	68f9      	ldr	r1, [r7, #12]
 800f488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f48c:	4013      	ands	r3, r2
 800f48e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	015a      	lsls	r2, r3, #5
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	4413      	add	r3, r2
 800f498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	0159      	lsls	r1, r3, #5
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	440b      	add	r3, r1
 800f4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	4b05      	ldr	r3, [pc, #20]	; (800f4c4 <USB_DeactivateEndpoint+0x1b4>)
 800f4ae:	4013      	ands	r3, r2
 800f4b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	ec337800 	.word	0xec337800
 800f4c4:	eff37800 	.word	0xeff37800

0800f4c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b08a      	sub	sp, #40	; 0x28
 800f4cc:	af02      	add	r7, sp, #8
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	785b      	ldrb	r3, [r3, #1]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	f040 815c 	bne.w	800f7a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	695b      	ldr	r3, [r3, #20]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d132      	bne.n	800f558 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	015a      	lsls	r2, r3, #5
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	69ba      	ldr	r2, [r7, #24]
 800f502:	0151      	lsls	r1, r2, #5
 800f504:	69fa      	ldr	r2, [r7, #28]
 800f506:	440a      	add	r2, r1
 800f508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f50c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	015a      	lsls	r2, r3, #5
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	4413      	add	r3, r2
 800f51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	69ba      	ldr	r2, [r7, #24]
 800f526:	0151      	lsls	r1, r2, #5
 800f528:	69fa      	ldr	r2, [r7, #28]
 800f52a:	440a      	add	r2, r1
 800f52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	015a      	lsls	r2, r3, #5
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	4413      	add	r3, r2
 800f53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	0151      	lsls	r1, r2, #5
 800f548:	69fa      	ldr	r2, [r7, #28]
 800f54a:	440a      	add	r2, r1
 800f54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f550:	0cdb      	lsrs	r3, r3, #19
 800f552:	04db      	lsls	r3, r3, #19
 800f554:	6113      	str	r3, [r2, #16]
 800f556:	e074      	b.n	800f642 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	0151      	lsls	r1, r2, #5
 800f56a:	69fa      	ldr	r2, [r7, #28]
 800f56c:	440a      	add	r2, r1
 800f56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f572:	0cdb      	lsrs	r3, r3, #19
 800f574:	04db      	lsls	r3, r3, #19
 800f576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	69ba      	ldr	r2, [r7, #24]
 800f588:	0151      	lsls	r1, r2, #5
 800f58a:	69fa      	ldr	r2, [r7, #28]
 800f58c:	440a      	add	r2, r1
 800f58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f59a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	6959      	ldr	r1, [r3, #20]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	440b      	add	r3, r1
 800f5b4:	1e59      	subs	r1, r3, #1
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800f5be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f5c0:	4b9d      	ldr	r3, [pc, #628]	; (800f838 <USB_EPStartXfer+0x370>)
 800f5c2:	400b      	ands	r3, r1
 800f5c4:	69b9      	ldr	r1, [r7, #24]
 800f5c6:	0148      	lsls	r0, r1, #5
 800f5c8:	69f9      	ldr	r1, [r7, #28]
 800f5ca:	4401      	add	r1, r0
 800f5cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	015a      	lsls	r2, r3, #5
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	4413      	add	r3, r2
 800f5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e0:	691a      	ldr	r2, [r3, #16]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	695b      	ldr	r3, [r3, #20]
 800f5e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5ea:	69b9      	ldr	r1, [r7, #24]
 800f5ec:	0148      	lsls	r0, r1, #5
 800f5ee:	69f9      	ldr	r1, [r7, #28]
 800f5f0:	4401      	add	r1, r0
 800f5f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	78db      	ldrb	r3, [r3, #3]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d11f      	bne.n	800f642 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	015a      	lsls	r2, r3, #5
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	4413      	add	r3, r2
 800f60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	69ba      	ldr	r2, [r7, #24]
 800f612:	0151      	lsls	r1, r2, #5
 800f614:	69fa      	ldr	r2, [r7, #28]
 800f616:	440a      	add	r2, r1
 800f618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f61c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	015a      	lsls	r2, r3, #5
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	4413      	add	r3, r2
 800f62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	69ba      	ldr	r2, [r7, #24]
 800f632:	0151      	lsls	r1, r2, #5
 800f634:	69fa      	ldr	r2, [r7, #28]
 800f636:	440a      	add	r2, r1
 800f638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f642:	79fb      	ldrb	r3, [r7, #7]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d14b      	bne.n	800f6e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d009      	beq.n	800f664 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f65c:	461a      	mov	r2, r3
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	78db      	ldrb	r3, [r3, #3]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d128      	bne.n	800f6be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d110      	bne.n	800f69e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	015a      	lsls	r2, r3, #5
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	4413      	add	r3, r2
 800f684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	69ba      	ldr	r2, [r7, #24]
 800f68c:	0151      	lsls	r1, r2, #5
 800f68e:	69fa      	ldr	r2, [r7, #28]
 800f690:	440a      	add	r2, r1
 800f692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	e00f      	b.n	800f6be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	015a      	lsls	r2, r3, #5
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	69ba      	ldr	r2, [r7, #24]
 800f6ae:	0151      	lsls	r1, r2, #5
 800f6b0:	69fa      	ldr	r2, [r7, #28]
 800f6b2:	440a      	add	r2, r1
 800f6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	015a      	lsls	r2, r3, #5
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	0151      	lsls	r1, r2, #5
 800f6d0:	69fa      	ldr	r2, [r7, #28]
 800f6d2:	440a      	add	r2, r1
 800f6d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6dc:	6013      	str	r3, [r2, #0]
 800f6de:	e12f      	b.n	800f940 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	015a      	lsls	r2, r3, #5
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	69ba      	ldr	r2, [r7, #24]
 800f6f0:	0151      	lsls	r1, r2, #5
 800f6f2:	69fa      	ldr	r2, [r7, #28]
 800f6f4:	440a      	add	r2, r1
 800f6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	78db      	ldrb	r3, [r3, #3]
 800f704:	2b01      	cmp	r3, #1
 800f706:	d015      	beq.n	800f734 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 8117 	beq.w	800f940 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	f003 030f 	and.w	r3, r3, #15
 800f722:	2101      	movs	r1, #1
 800f724:	fa01 f303 	lsl.w	r3, r1, r3
 800f728:	69f9      	ldr	r1, [r7, #28]
 800f72a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f72e:	4313      	orrs	r3, r2
 800f730:	634b      	str	r3, [r1, #52]	; 0x34
 800f732:	e105      	b.n	800f940 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f740:	2b00      	cmp	r3, #0
 800f742:	d110      	bne.n	800f766 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	015a      	lsls	r2, r3, #5
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	4413      	add	r3, r2
 800f74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	69ba      	ldr	r2, [r7, #24]
 800f754:	0151      	lsls	r1, r2, #5
 800f756:	69fa      	ldr	r2, [r7, #28]
 800f758:	440a      	add	r2, r1
 800f75a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f75e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	e00f      	b.n	800f786 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	015a      	lsls	r2, r3, #5
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	4413      	add	r3, r2
 800f76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	69ba      	ldr	r2, [r7, #24]
 800f776:	0151      	lsls	r1, r2, #5
 800f778:	69fa      	ldr	r2, [r7, #28]
 800f77a:	440a      	add	r2, r1
 800f77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f784:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	68d9      	ldr	r1, [r3, #12]
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	781a      	ldrb	r2, [r3, #0]
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	b298      	uxth	r0, r3
 800f794:	79fb      	ldrb	r3, [r7, #7]
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	4603      	mov	r3, r0
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f000 fa2b 	bl	800fbf6 <USB_WritePacket>
 800f7a0:	e0ce      	b.n	800f940 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	015a      	lsls	r2, r3, #5
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	69ba      	ldr	r2, [r7, #24]
 800f7b2:	0151      	lsls	r1, r2, #5
 800f7b4:	69fa      	ldr	r2, [r7, #28]
 800f7b6:	440a      	add	r2, r1
 800f7b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7bc:	0cdb      	lsrs	r3, r3, #19
 800f7be:	04db      	lsls	r3, r3, #19
 800f7c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	015a      	lsls	r2, r3, #5
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ce:	691b      	ldr	r3, [r3, #16]
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	0151      	lsls	r1, r2, #5
 800f7d4:	69fa      	ldr	r2, [r7, #28]
 800f7d6:	440a      	add	r2, r1
 800f7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d126      	bne.n	800f83c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7fa:	691a      	ldr	r2, [r3, #16]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f804:	69b9      	ldr	r1, [r7, #24]
 800f806:	0148      	lsls	r0, r1, #5
 800f808:	69f9      	ldr	r1, [r7, #28]
 800f80a:	4401      	add	r1, r0
 800f80c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f810:	4313      	orrs	r3, r2
 800f812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	4413      	add	r3, r2
 800f81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	69ba      	ldr	r2, [r7, #24]
 800f824:	0151      	lsls	r1, r2, #5
 800f826:	69fa      	ldr	r2, [r7, #28]
 800f828:	440a      	add	r2, r1
 800f82a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f82e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f832:	6113      	str	r3, [r2, #16]
 800f834:	e036      	b.n	800f8a4 <USB_EPStartXfer+0x3dc>
 800f836:	bf00      	nop
 800f838:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	695a      	ldr	r2, [r3, #20]
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	4413      	add	r3, r2
 800f846:	1e5a      	subs	r2, r3, #1
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f850:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	015a      	lsls	r2, r3, #5
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	4413      	add	r3, r2
 800f85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f85e:	691a      	ldr	r2, [r3, #16]
 800f860:	8afb      	ldrh	r3, [r7, #22]
 800f862:	04d9      	lsls	r1, r3, #19
 800f864:	4b39      	ldr	r3, [pc, #228]	; (800f94c <USB_EPStartXfer+0x484>)
 800f866:	400b      	ands	r3, r1
 800f868:	69b9      	ldr	r1, [r7, #24]
 800f86a:	0148      	lsls	r0, r1, #5
 800f86c:	69f9      	ldr	r1, [r7, #28]
 800f86e:	4401      	add	r1, r0
 800f870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f874:	4313      	orrs	r3, r2
 800f876:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	015a      	lsls	r2, r3, #5
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	4413      	add	r3, r2
 800f880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f884:	691a      	ldr	r2, [r3, #16]
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	8af9      	ldrh	r1, [r7, #22]
 800f88c:	fb01 f303 	mul.w	r3, r1, r3
 800f890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f894:	69b9      	ldr	r1, [r7, #24]
 800f896:	0148      	lsls	r0, r1, #5
 800f898:	69f9      	ldr	r1, [r7, #28]
 800f89a:	4401      	add	r1, r0
 800f89c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f8a4:	79fb      	ldrb	r3, [r7, #7]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d10d      	bne.n	800f8c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d009      	beq.n	800f8c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	68d9      	ldr	r1, [r3, #12]
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	015a      	lsls	r2, r3, #5
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	4413      	add	r3, r2
 800f8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c2:	460a      	mov	r2, r1
 800f8c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	78db      	ldrb	r3, [r3, #3]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d128      	bne.n	800f920 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d110      	bne.n	800f900 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	0151      	lsls	r1, r2, #5
 800f8f0:	69fa      	ldr	r2, [r7, #28]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8fc:	6013      	str	r3, [r2, #0]
 800f8fe:	e00f      	b.n	800f920 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	015a      	lsls	r2, r3, #5
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	4413      	add	r3, r2
 800f908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	69ba      	ldr	r2, [r7, #24]
 800f910:	0151      	lsls	r1, r2, #5
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	440a      	add	r2, r1
 800f916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f91a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f91e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	69ba      	ldr	r2, [r7, #24]
 800f930:	0151      	lsls	r1, r2, #5
 800f932:	69fa      	ldr	r2, [r7, #28]
 800f934:	440a      	add	r2, r1
 800f936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f93a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f93e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3720      	adds	r7, #32
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	1ff80000 	.word	0x1ff80000

0800f950 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f950:	b480      	push	{r7}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	4613      	mov	r3, r2
 800f95c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	785b      	ldrb	r3, [r3, #1]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	f040 80cd 	bne.w	800fb0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d132      	bne.n	800f9e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	4413      	add	r3, r2
 800f982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f986:	691b      	ldr	r3, [r3, #16]
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	0151      	lsls	r1, r2, #5
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	440a      	add	r2, r1
 800f990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f994:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f998:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f99c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	015a      	lsls	r2, r3, #5
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	0151      	lsls	r1, r2, #5
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	440a      	add	r2, r1
 800f9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	015a      	lsls	r2, r3, #5
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	693a      	ldr	r2, [r7, #16]
 800f9ce:	0151      	lsls	r1, r2, #5
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	440a      	add	r2, r1
 800f9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9d8:	0cdb      	lsrs	r3, r3, #19
 800f9da:	04db      	lsls	r3, r3, #19
 800f9dc:	6113      	str	r3, [r2, #16]
 800f9de:	e04e      	b.n	800fa7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	015a      	lsls	r2, r3, #5
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	693a      	ldr	r2, [r7, #16]
 800f9f0:	0151      	lsls	r1, r2, #5
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	440a      	add	r2, r1
 800f9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9fa:	0cdb      	lsrs	r3, r3, #19
 800f9fc:	04db      	lsls	r3, r3, #19
 800f9fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	015a      	lsls	r2, r3, #5
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	4413      	add	r3, r2
 800fa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	0151      	lsls	r1, r2, #5
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	440a      	add	r2, r1
 800fa16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	695a      	ldr	r2, [r3, #20]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d903      	bls.n	800fa38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	015a      	lsls	r2, r3, #5
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	4413      	add	r3, r2
 800fa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	0151      	lsls	r1, r2, #5
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	440a      	add	r2, r1
 800fa4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	691a      	ldr	r2, [r3, #16]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	695b      	ldr	r3, [r3, #20]
 800fa6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa6e:	6939      	ldr	r1, [r7, #16]
 800fa70:	0148      	lsls	r0, r1, #5
 800fa72:	6979      	ldr	r1, [r7, #20]
 800fa74:	4401      	add	r1, r0
 800fa76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa7e:	79fb      	ldrb	r3, [r7, #7]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d11e      	bne.n	800fac2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d009      	beq.n	800faa0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	461a      	mov	r2, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	015a      	lsls	r2, r3, #5
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	4413      	add	r3, r2
 800faa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	0151      	lsls	r1, r2, #5
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	440a      	add	r2, r1
 800fab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fabe:	6013      	str	r3, [r2, #0]
 800fac0:	e092      	b.n	800fbe8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	015a      	lsls	r2, r3, #5
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	4413      	add	r3, r2
 800faca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	0151      	lsls	r1, r2, #5
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	440a      	add	r2, r1
 800fad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fadc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fae0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	695b      	ldr	r3, [r3, #20]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d07e      	beq.n	800fbe8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 030f 	and.w	r3, r3, #15
 800fafa:	2101      	movs	r1, #1
 800fafc:	fa01 f303 	lsl.w	r3, r1, r3
 800fb00:	6979      	ldr	r1, [r7, #20]
 800fb02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb06:	4313      	orrs	r3, r2
 800fb08:	634b      	str	r3, [r1, #52]	; 0x34
 800fb0a:	e06d      	b.n	800fbe8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	015a      	lsls	r2, r3, #5
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	4413      	add	r3, r2
 800fb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	0151      	lsls	r1, r2, #5
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	440a      	add	r2, r1
 800fb22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb26:	0cdb      	lsrs	r3, r3, #19
 800fb28:	04db      	lsls	r3, r3, #19
 800fb2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	015a      	lsls	r2, r3, #5
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	4413      	add	r3, r2
 800fb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	693a      	ldr	r2, [r7, #16]
 800fb3c:	0151      	lsls	r1, r2, #5
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	440a      	add	r2, r1
 800fb42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb4e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d003      	beq.n	800fb60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	0151      	lsls	r1, r2, #5
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	440a      	add	r2, r1
 800fb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8c:	691a      	ldr	r2, [r3, #16]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb96:	6939      	ldr	r1, [r7, #16]
 800fb98:	0148      	lsls	r0, r1, #5
 800fb9a:	6979      	ldr	r1, [r7, #20]
 800fb9c:	4401      	add	r1, r0
 800fb9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fba2:	4313      	orrs	r3, r2
 800fba4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d10d      	bne.n	800fbc8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d009      	beq.n	800fbc8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	68d9      	ldr	r1, [r3, #12]
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc4:	460a      	mov	r2, r1
 800fbc6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	015a      	lsls	r2, r3, #5
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	4413      	add	r3, r2
 800fbd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	693a      	ldr	r2, [r7, #16]
 800fbd8:	0151      	lsls	r1, r2, #5
 800fbda:	697a      	ldr	r2, [r7, #20]
 800fbdc:	440a      	add	r2, r1
 800fbde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	371c      	adds	r7, #28
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr

0800fbf6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b089      	sub	sp, #36	; 0x24
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	60f8      	str	r0, [r7, #12]
 800fbfe:	60b9      	str	r1, [r7, #8]
 800fc00:	4611      	mov	r1, r2
 800fc02:	461a      	mov	r2, r3
 800fc04:	460b      	mov	r3, r1
 800fc06:	71fb      	strb	r3, [r7, #7]
 800fc08:	4613      	mov	r3, r2
 800fc0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fc14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d123      	bne.n	800fc64 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fc1c:	88bb      	ldrh	r3, [r7, #4]
 800fc1e:	3303      	adds	r3, #3
 800fc20:	089b      	lsrs	r3, r3, #2
 800fc22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fc24:	2300      	movs	r3, #0
 800fc26:	61bb      	str	r3, [r7, #24]
 800fc28:	e018      	b.n	800fc5c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	031a      	lsls	r2, r3, #12
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	4413      	add	r3, r2
 800fc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc36:	461a      	mov	r2, r3
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	3301      	adds	r3, #1
 800fc42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	3301      	adds	r3, #1
 800fc48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	3301      	adds	r3, #1
 800fc54:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	61bb      	str	r3, [r7, #24]
 800fc5c:	69ba      	ldr	r2, [r7, #24]
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d3e2      	bcc.n	800fc2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3724      	adds	r7, #36	; 0x24
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr

0800fc72 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc72:	b480      	push	{r7}
 800fc74:	b08b      	sub	sp, #44	; 0x2c
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	60b9      	str	r1, [r7, #8]
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fc88:	88fb      	ldrh	r3, [r7, #6]
 800fc8a:	089b      	lsrs	r3, r3, #2
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fc90:	88fb      	ldrh	r3, [r7, #6]
 800fc92:	f003 0303 	and.w	r3, r3, #3
 800fc96:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fc98:	2300      	movs	r3, #0
 800fc9a:	623b      	str	r3, [r7, #32]
 800fc9c:	e014      	b.n	800fcc8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	601a      	str	r2, [r3, #0]
    pDest++;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	3301      	adds	r3, #1
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	3301      	adds	r3, #1
 800fcba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	623b      	str	r3, [r7, #32]
 800fcc8:	6a3a      	ldr	r2, [r7, #32]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d3e6      	bcc.n	800fc9e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fcd0:	8bfb      	ldrh	r3, [r7, #30]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d01e      	beq.n	800fd14 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fce0:	461a      	mov	r2, r3
 800fce2:	f107 0310 	add.w	r3, r7, #16
 800fce6:	6812      	ldr	r2, [r2, #0]
 800fce8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800fcf6:	b2da      	uxtb	r2, r3
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	701a      	strb	r2, [r3, #0]
      i++;
 800fcfc:	6a3b      	ldr	r3, [r7, #32]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	623b      	str	r3, [r7, #32]
      pDest++;
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd04:	3301      	adds	r3, #1
 800fd06:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fd08:	8bfb      	ldrh	r3, [r7, #30]
 800fd0a:	3b01      	subs	r3, #1
 800fd0c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fd0e:	8bfb      	ldrh	r3, [r7, #30]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1ea      	bne.n	800fcea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	372c      	adds	r7, #44	; 0x2c
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd22:	b480      	push	{r7}
 800fd24:	b085      	sub	sp, #20
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	785b      	ldrb	r3, [r3, #1]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d12c      	bne.n	800fd98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	015a      	lsls	r2, r3, #5
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4413      	add	r3, r2
 800fd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	db12      	blt.n	800fd76 <USB_EPSetStall+0x54>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00f      	beq.n	800fd76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	015a      	lsls	r2, r3, #5
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	0151      	lsls	r1, r2, #5
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	440a      	add	r2, r1
 800fd6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	015a      	lsls	r2, r3, #5
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	0151      	lsls	r1, r2, #5
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	440a      	add	r2, r1
 800fd8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd94:	6013      	str	r3, [r2, #0]
 800fd96:	e02b      	b.n	800fdf0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	db12      	blt.n	800fdd0 <USB_EPSetStall+0xae>
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00f      	beq.n	800fdd0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	0151      	lsls	r1, r2, #5
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	440a      	add	r2, r1
 800fdc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fdce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	015a      	lsls	r2, r3, #5
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	0151      	lsls	r1, r2, #5
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	440a      	add	r2, r1
 800fde6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fdee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3714      	adds	r7, #20
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdfe:	b480      	push	{r7}
 800fe00:	b085      	sub	sp, #20
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	785b      	ldrb	r3, [r3, #1]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d128      	bne.n	800fe6c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	015a      	lsls	r2, r3, #5
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	4413      	add	r3, r2
 800fe22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	0151      	lsls	r1, r2, #5
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	440a      	add	r2, r1
 800fe30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	78db      	ldrb	r3, [r3, #3]
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	d003      	beq.n	800fe4a <USB_EPClearStall+0x4c>
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	78db      	ldrb	r3, [r3, #3]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d138      	bne.n	800febc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	015a      	lsls	r2, r3, #5
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	4413      	add	r3, r2
 800fe52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68ba      	ldr	r2, [r7, #8]
 800fe5a:	0151      	lsls	r1, r2, #5
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	440a      	add	r2, r1
 800fe60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe68:	6013      	str	r3, [r2, #0]
 800fe6a:	e027      	b.n	800febc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	0151      	lsls	r1, r2, #5
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	440a      	add	r2, r1
 800fe82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	78db      	ldrb	r3, [r3, #3]
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d003      	beq.n	800fe9c <USB_EPClearStall+0x9e>
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	78db      	ldrb	r3, [r3, #3]
 800fe98:	2b02      	cmp	r3, #2
 800fe9a:	d10f      	bne.n	800febc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	0151      	lsls	r1, r2, #5
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	440a      	add	r2, r1
 800feb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800feb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800febc:	2300      	movs	r3, #0
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3714      	adds	r7, #20
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr

0800feca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800feca:	b480      	push	{r7}
 800fecc:	b085      	sub	sp, #20
 800fece:	af00      	add	r7, sp, #0
 800fed0:	6078      	str	r0, [r7, #4]
 800fed2:	460b      	mov	r3, r1
 800fed4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fee8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800feec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	78fb      	ldrb	r3, [r7, #3]
 800fef8:	011b      	lsls	r3, r3, #4
 800fefa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff04:	4313      	orrs	r3, r2
 800ff06:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b085      	sub	sp, #20
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff30:	f023 0303 	bic.w	r3, r3, #3
 800ff34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff44:	f023 0302 	bic.w	r3, r3, #2
 800ff48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff72:	f023 0303 	bic.w	r3, r3, #3
 800ff76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff86:	f043 0302 	orr.w	r3, r3, #2
 800ff8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff8c:	2300      	movs	r3, #0
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3714      	adds	r7, #20
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b085      	sub	sp, #20
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	699b      	ldr	r3, [r3, #24]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	4013      	ands	r3, r2
 800ffb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3714      	adds	r7, #20
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b085      	sub	sp, #20
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd2:	699b      	ldr	r3, [r3, #24]
 800ffd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffdc:	69db      	ldr	r3, [r3, #28]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	0c1b      	lsrs	r3, r3, #16
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3714      	adds	r7, #20
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	4013      	ands	r3, r2
 8010016:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	b29b      	uxth	r3, r3
}
 801001c:	4618      	mov	r0, r3
 801001e:	3714      	adds	r7, #20
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	460b      	mov	r3, r1
 8010032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010038:	78fb      	ldrb	r3, [r7, #3]
 801003a:	015a      	lsls	r2, r3, #5
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801004e:	695b      	ldr	r3, [r3, #20]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	4013      	ands	r3, r2
 8010054:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010056:	68bb      	ldr	r3, [r7, #8]
}
 8010058:	4618      	mov	r0, r3
 801005a:	3714      	adds	r7, #20
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010064:	b480      	push	{r7}
 8010066:	b087      	sub	sp, #28
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	460b      	mov	r3, r1
 801006e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801007a:	691b      	ldr	r3, [r3, #16]
 801007c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010086:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010088:	78fb      	ldrb	r3, [r7, #3]
 801008a:	f003 030f 	and.w	r3, r3, #15
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	fa22 f303 	lsr.w	r3, r2, r3
 8010094:	01db      	lsls	r3, r3, #7
 8010096:	b2db      	uxtb	r3, r3
 8010098:	693a      	ldr	r2, [r7, #16]
 801009a:	4313      	orrs	r3, r2
 801009c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801009e:	78fb      	ldrb	r3, [r7, #3]
 80100a0:	015a      	lsls	r2, r3, #5
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	4413      	add	r3, r2
 80100a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	4013      	ands	r3, r2
 80100b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80100b2:	68bb      	ldr	r3, [r7, #8]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	371c      	adds	r7, #28
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	695b      	ldr	r3, [r3, #20]
 80100cc:	f003 0301 	and.w	r3, r3, #1
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80100fa:	f023 0307 	bic.w	r3, r3, #7
 80100fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801010e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010112:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	3714      	adds	r7, #20
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr
	...

08010124 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010124:	b480      	push	{r7}
 8010126:	b087      	sub	sp, #28
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	460b      	mov	r3, r1
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	333c      	adds	r3, #60	; 0x3c
 801013a:	3304      	adds	r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	4a26      	ldr	r2, [pc, #152]	; (80101dc <USB_EP0_OutStart+0xb8>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d90a      	bls.n	801015e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010158:	d101      	bne.n	801015e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	e037      	b.n	80101ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010164:	461a      	mov	r2, r3
 8010166:	2300      	movs	r3, #0
 8010168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010178:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801017c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801018c:	f043 0318 	orr.w	r3, r3, #24
 8010190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	697a      	ldr	r2, [r7, #20]
 801019c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80101a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80101a6:	7afb      	ldrb	r3, [r7, #11]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d10f      	bne.n	80101cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b2:	461a      	mov	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	697a      	ldr	r2, [r7, #20]
 80101c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80101ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80101cc:	2300      	movs	r3, #0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	371c      	adds	r7, #28
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	4f54300a 	.word	0x4f54300a

080101e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101e8:	2300      	movs	r3, #0
 80101ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	3301      	adds	r3, #1
 80101f0:	60fb      	str	r3, [r7, #12]
 80101f2:	4a13      	ldr	r2, [pc, #76]	; (8010240 <USB_CoreReset+0x60>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d901      	bls.n	80101fc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80101f8:	2303      	movs	r3, #3
 80101fa:	e01a      	b.n	8010232 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	2b00      	cmp	r3, #0
 8010202:	daf3      	bge.n	80101ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010204:	2300      	movs	r3, #0
 8010206:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	f043 0201 	orr.w	r2, r3, #1
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3301      	adds	r3, #1
 8010218:	60fb      	str	r3, [r7, #12]
 801021a:	4a09      	ldr	r2, [pc, #36]	; (8010240 <USB_CoreReset+0x60>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d901      	bls.n	8010224 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010220:	2303      	movs	r3, #3
 8010222:	e006      	b.n	8010232 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	f003 0301 	and.w	r3, r3, #1
 801022c:	2b01      	cmp	r3, #1
 801022e:	d0f1      	beq.n	8010214 <USB_CoreReset+0x34>

  return HAL_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	00030d40 	.word	0x00030d40

08010244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	460b      	mov	r3, r1
 801024e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010250:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010254:	f002 fa08 	bl	8012668 <USBD_static_malloc>
 8010258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d105      	bne.n	801026c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010268:	2302      	movs	r3, #2
 801026a:	e066      	b.n	801033a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	7c1b      	ldrb	r3, [r3, #16]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d119      	bne.n	80102b0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801027c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010280:	2202      	movs	r2, #2
 8010282:	2181      	movs	r1, #129	; 0x81
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f002 f87e 	bl	8012386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2201      	movs	r2, #1
 801028e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010294:	2202      	movs	r2, #2
 8010296:	2101      	movs	r1, #1
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f002 f874 	bl	8012386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2210      	movs	r2, #16
 80102aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80102ae:	e016      	b.n	80102de <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80102b0:	2340      	movs	r3, #64	; 0x40
 80102b2:	2202      	movs	r2, #2
 80102b4:	2181      	movs	r1, #129	; 0x81
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f002 f865 	bl	8012386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80102c2:	2340      	movs	r3, #64	; 0x40
 80102c4:	2202      	movs	r2, #2
 80102c6:	2101      	movs	r1, #1
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f002 f85c 	bl	8012386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2210      	movs	r2, #16
 80102da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80102de:	2308      	movs	r3, #8
 80102e0:	2203      	movs	r2, #3
 80102e2:	2182      	movs	r1, #130	; 0x82
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f002 f84e 	bl	8012386 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2201      	movs	r2, #1
 80102ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7c1b      	ldrb	r3, [r3, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d109      	bne.n	8010328 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801031a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801031e:	2101      	movs	r1, #1
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f002 f91f 	bl	8012564 <USBD_LL_PrepareReceive>
 8010326:	e007      	b.n	8010338 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801032e:	2340      	movs	r3, #64	; 0x40
 8010330:	2101      	movs	r1, #1
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f002 f916 	bl	8012564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b082      	sub	sp, #8
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	460b      	mov	r3, r1
 801034c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801034e:	2181      	movs	r1, #129	; 0x81
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f002 f83e 	bl	80123d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801035c:	2101      	movs	r1, #1
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f002 f837 	bl	80123d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801036c:	2182      	movs	r1, #130	; 0x82
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f002 f82f 	bl	80123d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00e      	beq.n	80103ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801039e:	4618      	mov	r0, r3
 80103a0:	f002 f970 	bl	8012684 <USBD_static_free>
    pdev->pClassData = NULL;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80103ca:	2300      	movs	r3, #0
 80103cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80103ce:	2300      	movs	r3, #0
 80103d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80103dc:	2303      	movs	r3, #3
 80103de:	e0af      	b.n	8010540 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d03f      	beq.n	801046c <USBD_CDC_Setup+0xb4>
 80103ec:	2b20      	cmp	r3, #32
 80103ee:	f040 809f 	bne.w	8010530 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	88db      	ldrh	r3, [r3, #6]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d02e      	beq.n	8010458 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	b25b      	sxtb	r3, r3
 8010400:	2b00      	cmp	r3, #0
 8010402:	da16      	bge.n	8010432 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010410:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	88d2      	ldrh	r2, [r2, #6]
 8010416:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	88db      	ldrh	r3, [r3, #6]
 801041c:	2b07      	cmp	r3, #7
 801041e:	bf28      	it	cs
 8010420:	2307      	movcs	r3, #7
 8010422:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	89fa      	ldrh	r2, [r7, #14]
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f001 fb43 	bl	8011ab6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010430:	e085      	b.n	801053e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	785a      	ldrb	r2, [r3, #1]
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	88db      	ldrh	r3, [r3, #6]
 8010440:	b2da      	uxtb	r2, r3
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010448:	6939      	ldr	r1, [r7, #16]
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	88db      	ldrh	r3, [r3, #6]
 801044e:	461a      	mov	r2, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f001 fb5c 	bl	8011b0e <USBD_CtlPrepareRx>
      break;
 8010456:	e072      	b.n	801053e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	7850      	ldrb	r0, [r2, #1]
 8010464:	2200      	movs	r2, #0
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	4798      	blx	r3
      break;
 801046a:	e068      	b.n	801053e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	785b      	ldrb	r3, [r3, #1]
 8010470:	2b0b      	cmp	r3, #11
 8010472:	d852      	bhi.n	801051a <USBD_CDC_Setup+0x162>
 8010474:	a201      	add	r2, pc, #4	; (adr r2, 801047c <USBD_CDC_Setup+0xc4>)
 8010476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047a:	bf00      	nop
 801047c:	080104ad 	.word	0x080104ad
 8010480:	08010529 	.word	0x08010529
 8010484:	0801051b 	.word	0x0801051b
 8010488:	0801051b 	.word	0x0801051b
 801048c:	0801051b 	.word	0x0801051b
 8010490:	0801051b 	.word	0x0801051b
 8010494:	0801051b 	.word	0x0801051b
 8010498:	0801051b 	.word	0x0801051b
 801049c:	0801051b 	.word	0x0801051b
 80104a0:	0801051b 	.word	0x0801051b
 80104a4:	080104d7 	.word	0x080104d7
 80104a8:	08010501 	.word	0x08010501
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	2b03      	cmp	r3, #3
 80104b6:	d107      	bne.n	80104c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80104b8:	f107 030a 	add.w	r3, r7, #10
 80104bc:	2202      	movs	r2, #2
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f001 faf8 	bl	8011ab6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80104c6:	e032      	b.n	801052e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80104c8:	6839      	ldr	r1, [r7, #0]
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f001 fa82 	bl	80119d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80104d0:	2303      	movs	r3, #3
 80104d2:	75fb      	strb	r3, [r7, #23]
          break;
 80104d4:	e02b      	b.n	801052e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d107      	bne.n	80104f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80104e2:	f107 030d 	add.w	r3, r7, #13
 80104e6:	2201      	movs	r2, #1
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f001 fae3 	bl	8011ab6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80104f0:	e01d      	b.n	801052e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80104f2:	6839      	ldr	r1, [r7, #0]
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f001 fa6d 	bl	80119d4 <USBD_CtlError>
            ret = USBD_FAIL;
 80104fa:	2303      	movs	r3, #3
 80104fc:	75fb      	strb	r3, [r7, #23]
          break;
 80104fe:	e016      	b.n	801052e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010506:	b2db      	uxtb	r3, r3
 8010508:	2b03      	cmp	r3, #3
 801050a:	d00f      	beq.n	801052c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f001 fa60 	bl	80119d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8010514:	2303      	movs	r3, #3
 8010516:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010518:	e008      	b.n	801052c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801051a:	6839      	ldr	r1, [r7, #0]
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f001 fa59 	bl	80119d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8010522:	2303      	movs	r3, #3
 8010524:	75fb      	strb	r3, [r7, #23]
          break;
 8010526:	e002      	b.n	801052e <USBD_CDC_Setup+0x176>
          break;
 8010528:	bf00      	nop
 801052a:	e008      	b.n	801053e <USBD_CDC_Setup+0x186>
          break;
 801052c:	bf00      	nop
      }
      break;
 801052e:	e006      	b.n	801053e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010530:	6839      	ldr	r1, [r7, #0]
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f001 fa4e 	bl	80119d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8010538:	2303      	movs	r3, #3
 801053a:	75fb      	strb	r3, [r7, #23]
      break;
 801053c:	bf00      	nop
  }

  return (uint8_t)ret;
 801053e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3718      	adds	r7, #24
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	460b      	mov	r3, r1
 8010552:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801055a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010566:	2303      	movs	r3, #3
 8010568:	e04f      	b.n	801060a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010570:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010572:	78fa      	ldrb	r2, [r7, #3]
 8010574:	6879      	ldr	r1, [r7, #4]
 8010576:	4613      	mov	r3, r2
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4413      	add	r3, r2
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	440b      	add	r3, r1
 8010580:	3318      	adds	r3, #24
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d029      	beq.n	80105dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010588:	78fa      	ldrb	r2, [r7, #3]
 801058a:	6879      	ldr	r1, [r7, #4]
 801058c:	4613      	mov	r3, r2
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	4413      	add	r3, r2
 8010592:	009b      	lsls	r3, r3, #2
 8010594:	440b      	add	r3, r1
 8010596:	3318      	adds	r3, #24
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	78f9      	ldrb	r1, [r7, #3]
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	460b      	mov	r3, r1
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	1a5b      	subs	r3, r3, r1
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4403      	add	r3, r0
 80105a8:	3344      	adds	r3, #68	; 0x44
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80105b0:	fb03 f301 	mul.w	r3, r3, r1
 80105b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d110      	bne.n	80105dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80105ba:	78fa      	ldrb	r2, [r7, #3]
 80105bc:	6879      	ldr	r1, [r7, #4]
 80105be:	4613      	mov	r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4413      	add	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	440b      	add	r3, r1
 80105c8:	3318      	adds	r3, #24
 80105ca:	2200      	movs	r2, #0
 80105cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80105ce:	78f9      	ldrb	r1, [r7, #3]
 80105d0:	2300      	movs	r3, #0
 80105d2:	2200      	movs	r2, #0
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f001 ffa4 	bl	8012522 <USBD_LL_Transmit>
 80105da:	e015      	b.n	8010608 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	2200      	movs	r2, #0
 80105e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105ea:	691b      	ldr	r3, [r3, #16]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00b      	beq.n	8010608 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80105fe:	68ba      	ldr	r2, [r7, #8]
 8010600:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010604:	78fa      	ldrb	r2, [r7, #3]
 8010606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3710      	adds	r7, #16
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010612:	b580      	push	{r7, lr}
 8010614:	b084      	sub	sp, #16
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
 801061a:	460b      	mov	r3, r1
 801061c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010624:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801062c:	2b00      	cmp	r3, #0
 801062e:	d101      	bne.n	8010634 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010630:	2303      	movs	r3, #3
 8010632:	e015      	b.n	8010660 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010634:	78fb      	ldrb	r3, [r7, #3]
 8010636:	4619      	mov	r1, r3
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f001 ffb4 	bl	80125a6 <USBD_LL_GetRxDataSize>
 801063e:	4602      	mov	r2, r0
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	68fa      	ldr	r2, [r7, #12]
 8010650:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801065a:	4611      	mov	r1, r2
 801065c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801065e:	2300      	movs	r3, #0
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010676:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801067e:	2303      	movs	r3, #3
 8010680:	e01b      	b.n	80106ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d015      	beq.n	80106b8 <USBD_CDC_EP0_RxReady+0x50>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010692:	2bff      	cmp	r3, #255	; 0xff
 8010694:	d010      	beq.n	80106b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80106a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80106ac:	b292      	uxth	r2, r2
 80106ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	22ff      	movs	r2, #255	; 0xff
 80106b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
	...

080106c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2243      	movs	r2, #67	; 0x43
 80106d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80106d2:	4b03      	ldr	r3, [pc, #12]	; (80106e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	20000094 	.word	0x20000094

080106e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2243      	movs	r2, #67	; 0x43
 80106f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80106f2:	4b03      	ldr	r3, [pc, #12]	; (8010700 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	20000050 	.word	0x20000050

08010704 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2243      	movs	r2, #67	; 0x43
 8010710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010712:	4b03      	ldr	r3, [pc, #12]	; (8010720 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010714:	4618      	mov	r0, r3
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	200000d8 	.word	0x200000d8

08010724 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	220a      	movs	r2, #10
 8010730:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010732:	4b03      	ldr	r3, [pc, #12]	; (8010740 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010734:	4618      	mov	r0, r3
 8010736:	370c      	adds	r7, #12
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr
 8010740:	2000000c 	.word	0x2000000c

08010744 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d101      	bne.n	8010758 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010754:	2303      	movs	r3, #3
 8010756:	e004      	b.n	8010762 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	683a      	ldr	r2, [r7, #0]
 801075c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	370c      	adds	r7, #12
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr

0801076e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801076e:	b480      	push	{r7}
 8010770:	b087      	sub	sp, #28
 8010772:	af00      	add	r7, sp, #0
 8010774:	60f8      	str	r0, [r7, #12]
 8010776:	60b9      	str	r1, [r7, #8]
 8010778:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010780:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010788:	2303      	movs	r3, #3
 801078a:	e008      	b.n	801079e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	371c      	adds	r7, #28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80107aa:	b480      	push	{r7}
 80107ac:	b085      	sub	sp, #20
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e004      	b.n	80107d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	683a      	ldr	r2, [r7, #0]
 80107ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80107ce:	2300      	movs	r3, #0
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80107ec:	2301      	movs	r3, #1
 80107ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80107fa:	2303      	movs	r3, #3
 80107fc:	e01a      	b.n	8010834 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010804:	2b00      	cmp	r3, #0
 8010806:	d114      	bne.n	8010832 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2201      	movs	r2, #1
 801080c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010826:	2181      	movs	r1, #129	; 0x81
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 fe7a 	bl	8012522 <USBD_LL_Transmit>

    ret = USBD_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010832:	7bfb      	ldrb	r3, [r7, #15]
}
 8010834:	4618      	mov	r0, r3
 8010836:	3710      	adds	r7, #16
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801084a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010856:	2303      	movs	r3, #3
 8010858:	e016      	b.n	8010888 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7c1b      	ldrb	r3, [r3, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d109      	bne.n	8010876 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010868:	f44f 7300 	mov.w	r3, #512	; 0x200
 801086c:	2101      	movs	r1, #1
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f001 fe78 	bl	8012564 <USBD_LL_PrepareReceive>
 8010874:	e007      	b.n	8010886 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801087c:	2340      	movs	r3, #64	; 0x40
 801087e:	2101      	movs	r1, #1
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f001 fe6f 	bl	8012564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	4613      	mov	r3, r2
 801089c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80108a4:	2303      	movs	r3, #3
 80108a6:	e01f      	b.n	80108e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2200      	movs	r2, #0
 80108b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2201      	movs	r2, #1
 80108d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	79fa      	ldrb	r2, [r7, #7]
 80108da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f001 fceb 	bl	80122b8 <USBD_LL_Init>
 80108e2:	4603      	mov	r3, r0
 80108e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80108e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80108fa:	2300      	movs	r3, #0
 80108fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d101      	bne.n	8010908 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010904:	2303      	movs	r3, #3
 8010906:	e016      	b.n	8010936 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00b      	beq.n	8010934 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010924:	f107 020e 	add.w	r2, r7, #14
 8010928:	4610      	mov	r0, r2
 801092a:	4798      	blx	r3
 801092c:	4602      	mov	r2, r0
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b082      	sub	sp, #8
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f001 fd02 	bl	8012350 <USBD_LL_Start>
 801094c:	4603      	mov	r3, r0
}
 801094e:	4618      	mov	r0, r3
 8010950:	3708      	adds	r7, #8
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010956:	b480      	push	{r7}
 8010958:	b083      	sub	sp, #12
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	460b      	mov	r3, r1
 8010976:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010978:	2303      	movs	r3, #3
 801097a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010982:	2b00      	cmp	r3, #0
 8010984:	d009      	beq.n	801099a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	78fa      	ldrb	r2, [r7, #3]
 8010990:	4611      	mov	r1, r2
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	4798      	blx	r3
 8010996:	4603      	mov	r3, r0
 8010998:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801099a:	7bfb      	ldrb	r3, [r7, #15]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3710      	adds	r7, #16
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	460b      	mov	r3, r1
 80109ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d007      	beq.n	80109ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	78fa      	ldrb	r2, [r7, #3]
 80109c4:	4611      	mov	r1, r2
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	4798      	blx	r3
  }

  return USBD_OK;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80109e4:	6839      	ldr	r1, [r7, #0]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f000 ffba 	bl	8011960 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80109fa:	461a      	mov	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a08:	f003 031f 	and.w	r3, r3, #31
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d01a      	beq.n	8010a46 <USBD_LL_SetupStage+0x72>
 8010a10:	2b02      	cmp	r3, #2
 8010a12:	d822      	bhi.n	8010a5a <USBD_LL_SetupStage+0x86>
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <USBD_LL_SetupStage+0x4a>
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d00a      	beq.n	8010a32 <USBD_LL_SetupStage+0x5e>
 8010a1c:	e01d      	b.n	8010a5a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a24:	4619      	mov	r1, r3
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fa62 	bl	8010ef0 <USBD_StdDevReq>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a30:	e020      	b.n	8010a74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fac6 	bl	8010fcc <USBD_StdItfReq>
 8010a40:	4603      	mov	r3, r0
 8010a42:	73fb      	strb	r3, [r7, #15]
      break;
 8010a44:	e016      	b.n	8010a74 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 fb05 	bl	801105e <USBD_StdEPReq>
 8010a54:	4603      	mov	r3, r0
 8010a56:	73fb      	strb	r3, [r7, #15]
      break;
 8010a58:	e00c      	b.n	8010a74 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010a60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 fcd1 	bl	8012410 <USBD_LL_StallEP>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]
      break;
 8010a72:	bf00      	nop
  }

  return ret;
 8010a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b086      	sub	sp, #24
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	60f8      	str	r0, [r7, #12]
 8010a86:	460b      	mov	r3, r1
 8010a88:	607a      	str	r2, [r7, #4]
 8010a8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010a8c:	7afb      	ldrb	r3, [r7, #11]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d138      	bne.n	8010b04 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010a98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d14a      	bne.n	8010b3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	689a      	ldr	r2, [r3, #8]
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d913      	bls.n	8010ad8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	689a      	ldr	r2, [r3, #8]
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	1ad2      	subs	r2, r2, r3
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	68da      	ldr	r2, [r3, #12]
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	bf28      	it	cs
 8010aca:	4613      	movcs	r3, r2
 8010acc:	461a      	mov	r2, r3
 8010ace:	6879      	ldr	r1, [r7, #4]
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f001 f839 	bl	8011b48 <USBD_CtlContinueRx>
 8010ad6:	e030      	b.n	8010b3a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d10b      	bne.n	8010afc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aea:	691b      	ldr	r3, [r3, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d005      	beq.n	8010afc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010af6:	691b      	ldr	r3, [r3, #16]
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f001 f834 	bl	8011b6a <USBD_CtlSendStatus>
 8010b02:	e01a      	b.n	8010b3a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b0a:	b2db      	uxtb	r3, r3
 8010b0c:	2b03      	cmp	r3, #3
 8010b0e:	d114      	bne.n	8010b3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d00e      	beq.n	8010b3a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b22:	699b      	ldr	r3, [r3, #24]
 8010b24:	7afa      	ldrb	r2, [r7, #11]
 8010b26:	4611      	mov	r1, r2
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	4798      	blx	r3
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010b30:	7dfb      	ldrb	r3, [r7, #23]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d001      	beq.n	8010b3a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	e000      	b.n	8010b3c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b52:	7afb      	ldrb	r3, [r7, #11]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d16b      	bne.n	8010c30 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3314      	adds	r3, #20
 8010b5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d156      	bne.n	8010c16 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	689a      	ldr	r2, [r3, #8]
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d914      	bls.n	8010b9e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	689a      	ldr	r2, [r3, #8]
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	1ad2      	subs	r2, r2, r3
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	689b      	ldr	r3, [r3, #8]
 8010b86:	461a      	mov	r2, r3
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	68f8      	ldr	r0, [r7, #12]
 8010b8c:	f000 ffae 	bl	8011aec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b90:	2300      	movs	r3, #0
 8010b92:	2200      	movs	r2, #0
 8010b94:	2100      	movs	r1, #0
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f001 fce4 	bl	8012564 <USBD_LL_PrepareReceive>
 8010b9c:	e03b      	b.n	8010c16 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	68da      	ldr	r2, [r3, #12]
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	689b      	ldr	r3, [r3, #8]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d11c      	bne.n	8010be4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d316      	bcc.n	8010be4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	685a      	ldr	r2, [r3, #4]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d20f      	bcs.n	8010be4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f000 ff8f 	bl	8011aec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	2200      	movs	r2, #0
 8010bda:	2100      	movs	r1, #0
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f001 fcc1 	bl	8012564 <USBD_LL_PrepareReceive>
 8010be2:	e018      	b.n	8010c16 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b03      	cmp	r3, #3
 8010bee:	d10b      	bne.n	8010c08 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d005      	beq.n	8010c08 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c08:	2180      	movs	r1, #128	; 0x80
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f001 fc00 	bl	8012410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f000 ffbd 	bl	8011b90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d122      	bne.n	8010c66 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff fe98 	bl	8010956 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010c2e:	e01a      	b.n	8010c66 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	2b03      	cmp	r3, #3
 8010c3a:	d114      	bne.n	8010c66 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00e      	beq.n	8010c66 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c4e:	695b      	ldr	r3, [r3, #20]
 8010c50:	7afa      	ldrb	r2, [r7, #11]
 8010c52:	4611      	mov	r1, r2
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	4798      	blx	r3
 8010c58:	4603      	mov	r3, r0
 8010c5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c5c:	7dfb      	ldrb	r3, [r7, #23]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010c62:	7dfb      	ldrb	r3, [r7, #23]
 8010c64:	e000      	b.n	8010c68 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010c66:	2300      	movs	r3, #0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3718      	adds	r7, #24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d101      	bne.n	8010ca4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	e02f      	b.n	8010d04 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00f      	beq.n	8010cce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d009      	beq.n	8010cce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	6852      	ldr	r2, [r2, #4]
 8010cc6:	b2d2      	uxtb	r2, r2
 8010cc8:	4611      	mov	r1, r2
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cce:	2340      	movs	r3, #64	; 0x40
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f001 fb56 	bl	8012386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2201      	movs	r2, #1
 8010cde:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2240      	movs	r2, #64	; 0x40
 8010ce6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010cea:	2340      	movs	r3, #64	; 0x40
 8010cec:	2200      	movs	r2, #0
 8010cee:	2180      	movs	r1, #128	; 0x80
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f001 fb48 	bl	8012386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2240      	movs	r2, #64	; 0x40
 8010d00:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010d02:	2300      	movs	r3, #0
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	460b      	mov	r3, r1
 8010d16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	78fa      	ldrb	r2, [r7, #3]
 8010d1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010d1e:	2300      	movs	r3, #0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2204      	movs	r2, #4
 8010d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	2b04      	cmp	r3, #4
 8010d6a:	d106      	bne.n	8010d7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	370c      	adds	r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d101      	bne.n	8010d9e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010d9a:	2303      	movs	r3, #3
 8010d9c:	e012      	b.n	8010dc4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	2b03      	cmp	r3, #3
 8010da8:	d10b      	bne.n	8010dc2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010db0:	69db      	ldr	r3, [r3, #28]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d005      	beq.n	8010dc2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010de2:	2303      	movs	r3, #3
 8010de4:	e014      	b.n	8010e10 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	d10d      	bne.n	8010e0e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010df8:	6a1b      	ldr	r3, [r3, #32]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d007      	beq.n	8010e0e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e04:	6a1b      	ldr	r3, [r3, #32]
 8010e06:	78fa      	ldrb	r2, [r7, #3]
 8010e08:	4611      	mov	r1, r2
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	460b      	mov	r3, r1
 8010e22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010e2e:	2303      	movs	r3, #3
 8010e30:	e014      	b.n	8010e5c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b03      	cmp	r3, #3
 8010e3c:	d10d      	bne.n	8010e5a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d007      	beq.n	8010e5a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e52:	78fa      	ldrb	r2, [r7, #3]
 8010e54:	4611      	mov	r1, r2
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	370c      	adds	r7, #12
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b082      	sub	sp, #8
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2201      	movs	r2, #1
 8010e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	6852      	ldr	r2, [r2, #4]
 8010ea0:	b2d2      	uxtb	r2, r2
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	4798      	blx	r3
  }

  return USBD_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b087      	sub	sp, #28
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010ed0:	8a3b      	ldrh	r3, [r7, #16]
 8010ed2:	021b      	lsls	r3, r3, #8
 8010ed4:	b21a      	sxth	r2, r3
 8010ed6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010eda:	4313      	orrs	r3, r2
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010ee0:	89fb      	ldrh	r3, [r7, #14]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	371c      	adds	r7, #28
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010efa:	2300      	movs	r3, #0
 8010efc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f06:	2b40      	cmp	r3, #64	; 0x40
 8010f08:	d005      	beq.n	8010f16 <USBD_StdDevReq+0x26>
 8010f0a:	2b40      	cmp	r3, #64	; 0x40
 8010f0c:	d853      	bhi.n	8010fb6 <USBD_StdDevReq+0xc6>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00b      	beq.n	8010f2a <USBD_StdDevReq+0x3a>
 8010f12:	2b20      	cmp	r3, #32
 8010f14:	d14f      	bne.n	8010fb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	6839      	ldr	r1, [r7, #0]
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	4798      	blx	r3
 8010f24:	4603      	mov	r3, r0
 8010f26:	73fb      	strb	r3, [r7, #15]
      break;
 8010f28:	e04a      	b.n	8010fc0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	785b      	ldrb	r3, [r3, #1]
 8010f2e:	2b09      	cmp	r3, #9
 8010f30:	d83b      	bhi.n	8010faa <USBD_StdDevReq+0xba>
 8010f32:	a201      	add	r2, pc, #4	; (adr r2, 8010f38 <USBD_StdDevReq+0x48>)
 8010f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f38:	08010f8d 	.word	0x08010f8d
 8010f3c:	08010fa1 	.word	0x08010fa1
 8010f40:	08010fab 	.word	0x08010fab
 8010f44:	08010f97 	.word	0x08010f97
 8010f48:	08010fab 	.word	0x08010fab
 8010f4c:	08010f6b 	.word	0x08010f6b
 8010f50:	08010f61 	.word	0x08010f61
 8010f54:	08010fab 	.word	0x08010fab
 8010f58:	08010f83 	.word	0x08010f83
 8010f5c:	08010f75 	.word	0x08010f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010f60:	6839      	ldr	r1, [r7, #0]
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 f9de 	bl	8011324 <USBD_GetDescriptor>
          break;
 8010f68:	e024      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010f6a:	6839      	ldr	r1, [r7, #0]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fb6d 	bl	801164c <USBD_SetAddress>
          break;
 8010f72:	e01f      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 fbac 	bl	80116d4 <USBD_SetConfig>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8010f80:	e018      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010f82:	6839      	ldr	r1, [r7, #0]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fc4b 	bl	8011820 <USBD_GetConfig>
          break;
 8010f8a:	e013      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f000 fc7c 	bl	801188c <USBD_GetStatus>
          break;
 8010f94:	e00e      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010f96:	6839      	ldr	r1, [r7, #0]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 fcab 	bl	80118f4 <USBD_SetFeature>
          break;
 8010f9e:	e009      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fcba 	bl	801191c <USBD_ClrFeature>
          break;
 8010fa8:	e004      	b.n	8010fb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fd11 	bl	80119d4 <USBD_CtlError>
          break;
 8010fb2:	bf00      	nop
      }
      break;
 8010fb4:	e004      	b.n	8010fc0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fd0b 	bl	80119d4 <USBD_CtlError>
      break;
 8010fbe:	bf00      	nop
  }

  return ret;
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop

08010fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fe2:	2b40      	cmp	r3, #64	; 0x40
 8010fe4:	d005      	beq.n	8010ff2 <USBD_StdItfReq+0x26>
 8010fe6:	2b40      	cmp	r3, #64	; 0x40
 8010fe8:	d82f      	bhi.n	801104a <USBD_StdItfReq+0x7e>
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d001      	beq.n	8010ff2 <USBD_StdItfReq+0x26>
 8010fee:	2b20      	cmp	r3, #32
 8010ff0:	d12b      	bne.n	801104a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	3b01      	subs	r3, #1
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	d81d      	bhi.n	801103c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	889b      	ldrh	r3, [r3, #4]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b01      	cmp	r3, #1
 8011008:	d813      	bhi.n	8011032 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011010:	689b      	ldr	r3, [r3, #8]
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	4798      	blx	r3
 8011018:	4603      	mov	r3, r0
 801101a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	88db      	ldrh	r3, [r3, #6]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d110      	bne.n	8011046 <USBD_StdItfReq+0x7a>
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d10d      	bne.n	8011046 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f000 fd9d 	bl	8011b6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011030:	e009      	b.n	8011046 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011032:	6839      	ldr	r1, [r7, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fccd 	bl	80119d4 <USBD_CtlError>
          break;
 801103a:	e004      	b.n	8011046 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fcc8 	bl	80119d4 <USBD_CtlError>
          break;
 8011044:	e000      	b.n	8011048 <USBD_StdItfReq+0x7c>
          break;
 8011046:	bf00      	nop
      }
      break;
 8011048:	e004      	b.n	8011054 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801104a:	6839      	ldr	r1, [r7, #0]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fcc1 	bl	80119d4 <USBD_CtlError>
      break;
 8011052:	bf00      	nop
  }

  return ret;
 8011054:	7bfb      	ldrb	r3, [r7, #15]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b084      	sub	sp, #16
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	889b      	ldrh	r3, [r3, #4]
 8011070:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801107a:	2b40      	cmp	r3, #64	; 0x40
 801107c:	d007      	beq.n	801108e <USBD_StdEPReq+0x30>
 801107e:	2b40      	cmp	r3, #64	; 0x40
 8011080:	f200 8145 	bhi.w	801130e <USBD_StdEPReq+0x2b0>
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00c      	beq.n	80110a2 <USBD_StdEPReq+0x44>
 8011088:	2b20      	cmp	r3, #32
 801108a:	f040 8140 	bne.w	801130e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	4798      	blx	r3
 801109c:	4603      	mov	r3, r0
 801109e:	73fb      	strb	r3, [r7, #15]
      break;
 80110a0:	e13a      	b.n	8011318 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	785b      	ldrb	r3, [r3, #1]
 80110a6:	2b03      	cmp	r3, #3
 80110a8:	d007      	beq.n	80110ba <USBD_StdEPReq+0x5c>
 80110aa:	2b03      	cmp	r3, #3
 80110ac:	f300 8129 	bgt.w	8011302 <USBD_StdEPReq+0x2a4>
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d07f      	beq.n	80111b4 <USBD_StdEPReq+0x156>
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d03c      	beq.n	8011132 <USBD_StdEPReq+0xd4>
 80110b8:	e123      	b.n	8011302 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	d002      	beq.n	80110cc <USBD_StdEPReq+0x6e>
 80110c6:	2b03      	cmp	r3, #3
 80110c8:	d016      	beq.n	80110f8 <USBD_StdEPReq+0x9a>
 80110ca:	e02c      	b.n	8011126 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80110cc:	7bbb      	ldrb	r3, [r7, #14]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00d      	beq.n	80110ee <USBD_StdEPReq+0x90>
 80110d2:	7bbb      	ldrb	r3, [r7, #14]
 80110d4:	2b80      	cmp	r3, #128	; 0x80
 80110d6:	d00a      	beq.n	80110ee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80110d8:	7bbb      	ldrb	r3, [r7, #14]
 80110da:	4619      	mov	r1, r3
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f001 f997 	bl	8012410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80110e2:	2180      	movs	r1, #128	; 0x80
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f001 f993 	bl	8012410 <USBD_LL_StallEP>
 80110ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80110ec:	e020      	b.n	8011130 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80110ee:	6839      	ldr	r1, [r7, #0]
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 fc6f 	bl	80119d4 <USBD_CtlError>
              break;
 80110f6:	e01b      	b.n	8011130 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	885b      	ldrh	r3, [r3, #2]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d10e      	bne.n	801111e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011100:	7bbb      	ldrb	r3, [r7, #14]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00b      	beq.n	801111e <USBD_StdEPReq+0xc0>
 8011106:	7bbb      	ldrb	r3, [r7, #14]
 8011108:	2b80      	cmp	r3, #128	; 0x80
 801110a:	d008      	beq.n	801111e <USBD_StdEPReq+0xc0>
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	88db      	ldrh	r3, [r3, #6]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d104      	bne.n	801111e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011114:	7bbb      	ldrb	r3, [r7, #14]
 8011116:	4619      	mov	r1, r3
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f001 f979 	bl	8012410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 fd23 	bl	8011b6a <USBD_CtlSendStatus>

              break;
 8011124:	e004      	b.n	8011130 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 fc53 	bl	80119d4 <USBD_CtlError>
              break;
 801112e:	bf00      	nop
          }
          break;
 8011130:	e0ec      	b.n	801130c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011138:	b2db      	uxtb	r3, r3
 801113a:	2b02      	cmp	r3, #2
 801113c:	d002      	beq.n	8011144 <USBD_StdEPReq+0xe6>
 801113e:	2b03      	cmp	r3, #3
 8011140:	d016      	beq.n	8011170 <USBD_StdEPReq+0x112>
 8011142:	e030      	b.n	80111a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011144:	7bbb      	ldrb	r3, [r7, #14]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00d      	beq.n	8011166 <USBD_StdEPReq+0x108>
 801114a:	7bbb      	ldrb	r3, [r7, #14]
 801114c:	2b80      	cmp	r3, #128	; 0x80
 801114e:	d00a      	beq.n	8011166 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011150:	7bbb      	ldrb	r3, [r7, #14]
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f001 f95b 	bl	8012410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801115a:	2180      	movs	r1, #128	; 0x80
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f001 f957 	bl	8012410 <USBD_LL_StallEP>
 8011162:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011164:	e025      	b.n	80111b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 fc33 	bl	80119d4 <USBD_CtlError>
              break;
 801116e:	e020      	b.n	80111b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	885b      	ldrh	r3, [r3, #2]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d11b      	bne.n	80111b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011178:	7bbb      	ldrb	r3, [r7, #14]
 801117a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801117e:	2b00      	cmp	r3, #0
 8011180:	d004      	beq.n	801118c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011182:	7bbb      	ldrb	r3, [r7, #14]
 8011184:	4619      	mov	r1, r3
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f001 f961 	bl	801244e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 fcec 	bl	8011b6a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	6839      	ldr	r1, [r7, #0]
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	4798      	blx	r3
 80111a0:	4603      	mov	r3, r0
 80111a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80111a4:	e004      	b.n	80111b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80111a6:	6839      	ldr	r1, [r7, #0]
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f000 fc13 	bl	80119d4 <USBD_CtlError>
              break;
 80111ae:	e000      	b.n	80111b2 <USBD_StdEPReq+0x154>
              break;
 80111b0:	bf00      	nop
          }
          break;
 80111b2:	e0ab      	b.n	801130c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d002      	beq.n	80111c6 <USBD_StdEPReq+0x168>
 80111c0:	2b03      	cmp	r3, #3
 80111c2:	d032      	beq.n	801122a <USBD_StdEPReq+0x1cc>
 80111c4:	e097      	b.n	80112f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d007      	beq.n	80111dc <USBD_StdEPReq+0x17e>
 80111cc:	7bbb      	ldrb	r3, [r7, #14]
 80111ce:	2b80      	cmp	r3, #128	; 0x80
 80111d0:	d004      	beq.n	80111dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fbfd 	bl	80119d4 <USBD_CtlError>
                break;
 80111da:	e091      	b.n	8011300 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	da0b      	bge.n	80111fc <USBD_StdEPReq+0x19e>
 80111e4:	7bbb      	ldrb	r3, [r7, #14]
 80111e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111ea:	4613      	mov	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	3310      	adds	r3, #16
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	4413      	add	r3, r2
 80111f8:	3304      	adds	r3, #4
 80111fa:	e00b      	b.n	8011214 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
 80111fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011202:	4613      	mov	r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	4413      	add	r3, r2
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	4413      	add	r3, r2
 8011212:	3304      	adds	r3, #4
 8011214:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	2202      	movs	r2, #2
 8011220:	4619      	mov	r1, r3
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 fc47 	bl	8011ab6 <USBD_CtlSendData>
              break;
 8011228:	e06a      	b.n	8011300 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801122a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801122e:	2b00      	cmp	r3, #0
 8011230:	da11      	bge.n	8011256 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011232:	7bbb      	ldrb	r3, [r7, #14]
 8011234:	f003 020f 	and.w	r2, r3, #15
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	4613      	mov	r3, r2
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	440b      	add	r3, r1
 8011244:	3324      	adds	r3, #36	; 0x24
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d117      	bne.n	801127c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fbc0 	bl	80119d4 <USBD_CtlError>
                  break;
 8011254:	e054      	b.n	8011300 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011256:	7bbb      	ldrb	r3, [r7, #14]
 8011258:	f003 020f 	and.w	r2, r3, #15
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	440b      	add	r3, r1
 8011268:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801126c:	881b      	ldrh	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d104      	bne.n	801127c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011272:	6839      	ldr	r1, [r7, #0]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 fbad 	bl	80119d4 <USBD_CtlError>
                  break;
 801127a:	e041      	b.n	8011300 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801127c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011280:	2b00      	cmp	r3, #0
 8011282:	da0b      	bge.n	801129c <USBD_StdEPReq+0x23e>
 8011284:	7bbb      	ldrb	r3, [r7, #14]
 8011286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801128a:	4613      	mov	r3, r2
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	4413      	add	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	3310      	adds	r3, #16
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	4413      	add	r3, r2
 8011298:	3304      	adds	r3, #4
 801129a:	e00b      	b.n	80112b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801129c:	7bbb      	ldrb	r3, [r7, #14]
 801129e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112a2:	4613      	mov	r3, r2
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	4413      	add	r3, r2
 80112a8:	009b      	lsls	r3, r3, #2
 80112aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	4413      	add	r3, r2
 80112b2:	3304      	adds	r3, #4
 80112b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80112b6:	7bbb      	ldrb	r3, [r7, #14]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d002      	beq.n	80112c2 <USBD_StdEPReq+0x264>
 80112bc:	7bbb      	ldrb	r3, [r7, #14]
 80112be:	2b80      	cmp	r3, #128	; 0x80
 80112c0:	d103      	bne.n	80112ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	2200      	movs	r2, #0
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	e00e      	b.n	80112e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80112ca:	7bbb      	ldrb	r3, [r7, #14]
 80112cc:	4619      	mov	r1, r3
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f001 f8dc 	bl	801248c <USBD_LL_IsStallEP>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d003      	beq.n	80112e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	2201      	movs	r2, #1
 80112de:	601a      	str	r2, [r3, #0]
 80112e0:	e002      	b.n	80112e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	2202      	movs	r2, #2
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 fbe1 	bl	8011ab6 <USBD_CtlSendData>
              break;
 80112f4:	e004      	b.n	8011300 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fb6b 	bl	80119d4 <USBD_CtlError>
              break;
 80112fe:	bf00      	nop
          }
          break;
 8011300:	e004      	b.n	801130c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011302:	6839      	ldr	r1, [r7, #0]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 fb65 	bl	80119d4 <USBD_CtlError>
          break;
 801130a:	bf00      	nop
      }
      break;
 801130c:	e004      	b.n	8011318 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801130e:	6839      	ldr	r1, [r7, #0]
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 fb5f 	bl	80119d4 <USBD_CtlError>
      break;
 8011316:	bf00      	nop
  }

  return ret;
 8011318:	7bfb      	ldrb	r3, [r7, #15]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
	...

08011324 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801132e:	2300      	movs	r3, #0
 8011330:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011332:	2300      	movs	r3, #0
 8011334:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011336:	2300      	movs	r3, #0
 8011338:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	885b      	ldrh	r3, [r3, #2]
 801133e:	0a1b      	lsrs	r3, r3, #8
 8011340:	b29b      	uxth	r3, r3
 8011342:	3b01      	subs	r3, #1
 8011344:	2b0e      	cmp	r3, #14
 8011346:	f200 8152 	bhi.w	80115ee <USBD_GetDescriptor+0x2ca>
 801134a:	a201      	add	r2, pc, #4	; (adr r2, 8011350 <USBD_GetDescriptor+0x2c>)
 801134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011350:	080113c1 	.word	0x080113c1
 8011354:	080113d9 	.word	0x080113d9
 8011358:	08011419 	.word	0x08011419
 801135c:	080115ef 	.word	0x080115ef
 8011360:	080115ef 	.word	0x080115ef
 8011364:	0801158f 	.word	0x0801158f
 8011368:	080115bb 	.word	0x080115bb
 801136c:	080115ef 	.word	0x080115ef
 8011370:	080115ef 	.word	0x080115ef
 8011374:	080115ef 	.word	0x080115ef
 8011378:	080115ef 	.word	0x080115ef
 801137c:	080115ef 	.word	0x080115ef
 8011380:	080115ef 	.word	0x080115ef
 8011384:	080115ef 	.word	0x080115ef
 8011388:	0801138d 	.word	0x0801138d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011392:	69db      	ldr	r3, [r3, #28]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00b      	beq.n	80113b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801139e:	69db      	ldr	r3, [r3, #28]
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	7c12      	ldrb	r2, [r2, #16]
 80113a4:	f107 0108 	add.w	r1, r7, #8
 80113a8:	4610      	mov	r0, r2
 80113aa:	4798      	blx	r3
 80113ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80113ae:	e126      	b.n	80115fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80113b0:	6839      	ldr	r1, [r7, #0]
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f000 fb0e 	bl	80119d4 <USBD_CtlError>
        err++;
 80113b8:	7afb      	ldrb	r3, [r7, #11]
 80113ba:	3301      	adds	r3, #1
 80113bc:	72fb      	strb	r3, [r7, #11]
      break;
 80113be:	e11e      	b.n	80115fe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	7c12      	ldrb	r2, [r2, #16]
 80113cc:	f107 0108 	add.w	r1, r7, #8
 80113d0:	4610      	mov	r0, r2
 80113d2:	4798      	blx	r3
 80113d4:	60f8      	str	r0, [r7, #12]
      break;
 80113d6:	e112      	b.n	80115fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	7c1b      	ldrb	r3, [r3, #16]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10d      	bne.n	80113fc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e8:	f107 0208 	add.w	r2, r7, #8
 80113ec:	4610      	mov	r0, r2
 80113ee:	4798      	blx	r3
 80113f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3301      	adds	r3, #1
 80113f6:	2202      	movs	r2, #2
 80113f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80113fa:	e100      	b.n	80115fe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	f107 0208 	add.w	r2, r7, #8
 8011408:	4610      	mov	r0, r2
 801140a:	4798      	blx	r3
 801140c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	3301      	adds	r3, #1
 8011412:	2202      	movs	r2, #2
 8011414:	701a      	strb	r2, [r3, #0]
      break;
 8011416:	e0f2      	b.n	80115fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	885b      	ldrh	r3, [r3, #2]
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b05      	cmp	r3, #5
 8011420:	f200 80ac 	bhi.w	801157c <USBD_GetDescriptor+0x258>
 8011424:	a201      	add	r2, pc, #4	; (adr r2, 801142c <USBD_GetDescriptor+0x108>)
 8011426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801142a:	bf00      	nop
 801142c:	08011445 	.word	0x08011445
 8011430:	08011479 	.word	0x08011479
 8011434:	080114ad 	.word	0x080114ad
 8011438:	080114e1 	.word	0x080114e1
 801143c:	08011515 	.word	0x08011515
 8011440:	08011549 	.word	0x08011549
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d00b      	beq.n	8011468 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	7c12      	ldrb	r2, [r2, #16]
 801145c:	f107 0108 	add.w	r1, r7, #8
 8011460:	4610      	mov	r0, r2
 8011462:	4798      	blx	r3
 8011464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011466:	e091      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011468:	6839      	ldr	r1, [r7, #0]
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 fab2 	bl	80119d4 <USBD_CtlError>
            err++;
 8011470:	7afb      	ldrb	r3, [r7, #11]
 8011472:	3301      	adds	r3, #1
 8011474:	72fb      	strb	r3, [r7, #11]
          break;
 8011476:	e089      	b.n	801158c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00b      	beq.n	801149c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801148a:	689b      	ldr	r3, [r3, #8]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	7c12      	ldrb	r2, [r2, #16]
 8011490:	f107 0108 	add.w	r1, r7, #8
 8011494:	4610      	mov	r0, r2
 8011496:	4798      	blx	r3
 8011498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801149a:	e077      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801149c:	6839      	ldr	r1, [r7, #0]
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 fa98 	bl	80119d4 <USBD_CtlError>
            err++;
 80114a4:	7afb      	ldrb	r3, [r7, #11]
 80114a6:	3301      	adds	r3, #1
 80114a8:	72fb      	strb	r3, [r7, #11]
          break;
 80114aa:	e06f      	b.n	801158c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00b      	beq.n	80114d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	7c12      	ldrb	r2, [r2, #16]
 80114c4:	f107 0108 	add.w	r1, r7, #8
 80114c8:	4610      	mov	r0, r2
 80114ca:	4798      	blx	r3
 80114cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80114ce:	e05d      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 fa7e 	bl	80119d4 <USBD_CtlError>
            err++;
 80114d8:	7afb      	ldrb	r3, [r7, #11]
 80114da:	3301      	adds	r3, #1
 80114dc:	72fb      	strb	r3, [r7, #11]
          break;
 80114de:	e055      	b.n	801158c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00b      	beq.n	8011504 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	7c12      	ldrb	r2, [r2, #16]
 80114f8:	f107 0108 	add.w	r1, r7, #8
 80114fc:	4610      	mov	r0, r2
 80114fe:	4798      	blx	r3
 8011500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011502:	e043      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fa64 	bl	80119d4 <USBD_CtlError>
            err++;
 801150c:	7afb      	ldrb	r3, [r7, #11]
 801150e:	3301      	adds	r3, #1
 8011510:	72fb      	strb	r3, [r7, #11]
          break;
 8011512:	e03b      	b.n	801158c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00b      	beq.n	8011538 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011526:	695b      	ldr	r3, [r3, #20]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	7c12      	ldrb	r2, [r2, #16]
 801152c:	f107 0108 	add.w	r1, r7, #8
 8011530:	4610      	mov	r0, r2
 8011532:	4798      	blx	r3
 8011534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011536:	e029      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fa4a 	bl	80119d4 <USBD_CtlError>
            err++;
 8011540:	7afb      	ldrb	r3, [r7, #11]
 8011542:	3301      	adds	r3, #1
 8011544:	72fb      	strb	r3, [r7, #11]
          break;
 8011546:	e021      	b.n	801158c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801154e:	699b      	ldr	r3, [r3, #24]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d00b      	beq.n	801156c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801155a:	699b      	ldr	r3, [r3, #24]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	7c12      	ldrb	r2, [r2, #16]
 8011560:	f107 0108 	add.w	r1, r7, #8
 8011564:	4610      	mov	r0, r2
 8011566:	4798      	blx	r3
 8011568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801156a:	e00f      	b.n	801158c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fa30 	bl	80119d4 <USBD_CtlError>
            err++;
 8011574:	7afb      	ldrb	r3, [r7, #11]
 8011576:	3301      	adds	r3, #1
 8011578:	72fb      	strb	r3, [r7, #11]
          break;
 801157a:	e007      	b.n	801158c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801157c:	6839      	ldr	r1, [r7, #0]
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 fa28 	bl	80119d4 <USBD_CtlError>
          err++;
 8011584:	7afb      	ldrb	r3, [r7, #11]
 8011586:	3301      	adds	r3, #1
 8011588:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801158a:	bf00      	nop
      }
      break;
 801158c:	e037      	b.n	80115fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	7c1b      	ldrb	r3, [r3, #16]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d109      	bne.n	80115aa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159e:	f107 0208 	add.w	r2, r7, #8
 80115a2:	4610      	mov	r0, r2
 80115a4:	4798      	blx	r3
 80115a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115a8:	e029      	b.n	80115fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 fa11 	bl	80119d4 <USBD_CtlError>
        err++;
 80115b2:	7afb      	ldrb	r3, [r7, #11]
 80115b4:	3301      	adds	r3, #1
 80115b6:	72fb      	strb	r3, [r7, #11]
      break;
 80115b8:	e021      	b.n	80115fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	7c1b      	ldrb	r3, [r3, #16]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10d      	bne.n	80115de <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ca:	f107 0208 	add.w	r2, r7, #8
 80115ce:	4610      	mov	r0, r2
 80115d0:	4798      	blx	r3
 80115d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3301      	adds	r3, #1
 80115d8:	2207      	movs	r2, #7
 80115da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80115dc:	e00f      	b.n	80115fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80115de:	6839      	ldr	r1, [r7, #0]
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f000 f9f7 	bl	80119d4 <USBD_CtlError>
        err++;
 80115e6:	7afb      	ldrb	r3, [r7, #11]
 80115e8:	3301      	adds	r3, #1
 80115ea:	72fb      	strb	r3, [r7, #11]
      break;
 80115ec:	e007      	b.n	80115fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f9ef 	bl	80119d4 <USBD_CtlError>
      err++;
 80115f6:	7afb      	ldrb	r3, [r7, #11]
 80115f8:	3301      	adds	r3, #1
 80115fa:	72fb      	strb	r3, [r7, #11]
      break;
 80115fc:	bf00      	nop
  }

  if (err != 0U)
 80115fe:	7afb      	ldrb	r3, [r7, #11]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d11e      	bne.n	8011642 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	88db      	ldrh	r3, [r3, #6]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d016      	beq.n	801163a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801160c:	893b      	ldrh	r3, [r7, #8]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00e      	beq.n	8011630 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	88da      	ldrh	r2, [r3, #6]
 8011616:	893b      	ldrh	r3, [r7, #8]
 8011618:	4293      	cmp	r3, r2
 801161a:	bf28      	it	cs
 801161c:	4613      	movcs	r3, r2
 801161e:	b29b      	uxth	r3, r3
 8011620:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011622:	893b      	ldrh	r3, [r7, #8]
 8011624:	461a      	mov	r2, r3
 8011626:	68f9      	ldr	r1, [r7, #12]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f000 fa44 	bl	8011ab6 <USBD_CtlSendData>
 801162e:	e009      	b.n	8011644 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 f9ce 	bl	80119d4 <USBD_CtlError>
 8011638:	e004      	b.n	8011644 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f000 fa95 	bl	8011b6a <USBD_CtlSendStatus>
 8011640:	e000      	b.n	8011644 <USBD_GetDescriptor+0x320>
    return;
 8011642:	bf00      	nop
  }
}
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop

0801164c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	889b      	ldrh	r3, [r3, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d131      	bne.n	80116c2 <USBD_SetAddress+0x76>
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	88db      	ldrh	r3, [r3, #6]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d12d      	bne.n	80116c2 <USBD_SetAddress+0x76>
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	885b      	ldrh	r3, [r3, #2]
 801166a:	2b7f      	cmp	r3, #127	; 0x7f
 801166c:	d829      	bhi.n	80116c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	885b      	ldrh	r3, [r3, #2]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011678:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011680:	b2db      	uxtb	r3, r3
 8011682:	2b03      	cmp	r3, #3
 8011684:	d104      	bne.n	8011690 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011686:	6839      	ldr	r1, [r7, #0]
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f9a3 	bl	80119d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801168e:	e01d      	b.n	80116cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	7bfa      	ldrb	r2, [r7, #15]
 8011694:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011698:	7bfb      	ldrb	r3, [r7, #15]
 801169a:	4619      	mov	r1, r3
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f000 ff21 	bl	80124e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 fa61 	bl	8011b6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d004      	beq.n	80116b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2202      	movs	r2, #2
 80116b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116b6:	e009      	b.n	80116cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2201      	movs	r2, #1
 80116bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116c0:	e004      	b.n	80116cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f985 	bl	80119d4 <USBD_CtlError>
  }
}
 80116ca:	bf00      	nop
 80116cc:	bf00      	nop
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116de:	2300      	movs	r3, #0
 80116e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	885b      	ldrh	r3, [r3, #2]
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	4b4c      	ldr	r3, [pc, #304]	; (801181c <USBD_SetConfig+0x148>)
 80116ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80116ec:	4b4b      	ldr	r3, [pc, #300]	; (801181c <USBD_SetConfig+0x148>)
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d905      	bls.n	8011700 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80116f4:	6839      	ldr	r1, [r7, #0]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 f96c 	bl	80119d4 <USBD_CtlError>
    return USBD_FAIL;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e088      	b.n	8011812 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011706:	b2db      	uxtb	r3, r3
 8011708:	2b02      	cmp	r3, #2
 801170a:	d002      	beq.n	8011712 <USBD_SetConfig+0x3e>
 801170c:	2b03      	cmp	r3, #3
 801170e:	d025      	beq.n	801175c <USBD_SetConfig+0x88>
 8011710:	e071      	b.n	80117f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011712:	4b42      	ldr	r3, [pc, #264]	; (801181c <USBD_SetConfig+0x148>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d01c      	beq.n	8011754 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801171a:	4b40      	ldr	r3, [pc, #256]	; (801181c <USBD_SetConfig+0x148>)
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	461a      	mov	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011724:	4b3d      	ldr	r3, [pc, #244]	; (801181c <USBD_SetConfig+0x148>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7ff f91e 	bl	801096c <USBD_SetClassConfig>
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011734:	7bfb      	ldrb	r3, [r7, #15]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d004      	beq.n	8011744 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 f949 	bl	80119d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011742:	e065      	b.n	8011810 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 fa10 	bl	8011b6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2203      	movs	r2, #3
 801174e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011752:	e05d      	b.n	8011810 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fa08 	bl	8011b6a <USBD_CtlSendStatus>
      break;
 801175a:	e059      	b.n	8011810 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801175c:	4b2f      	ldr	r3, [pc, #188]	; (801181c <USBD_SetConfig+0x148>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d112      	bne.n	801178a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2202      	movs	r2, #2
 8011768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801176c:	4b2b      	ldr	r3, [pc, #172]	; (801181c <USBD_SetConfig+0x148>)
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	461a      	mov	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011776:	4b29      	ldr	r3, [pc, #164]	; (801181c <USBD_SetConfig+0x148>)
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	4619      	mov	r1, r3
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7ff f911 	bl	80109a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f000 f9f1 	bl	8011b6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011788:	e042      	b.n	8011810 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801178a:	4b24      	ldr	r3, [pc, #144]	; (801181c <USBD_SetConfig+0x148>)
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	429a      	cmp	r2, r3
 8011796:	d02a      	beq.n	80117ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	b2db      	uxtb	r3, r3
 801179e:	4619      	mov	r1, r3
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff f8ff 	bl	80109a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80117a6:	4b1d      	ldr	r3, [pc, #116]	; (801181c <USBD_SetConfig+0x148>)
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117b0:	4b1a      	ldr	r3, [pc, #104]	; (801181c <USBD_SetConfig+0x148>)
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	4619      	mov	r1, r3
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff f8d8 	bl	801096c <USBD_SetClassConfig>
 80117bc:	4603      	mov	r3, r0
 80117be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00f      	beq.n	80117e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 f903 	bl	80119d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	4619      	mov	r1, r3
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff f8e4 	bl	80109a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2202      	movs	r2, #2
 80117e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117e4:	e014      	b.n	8011810 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 f9bf 	bl	8011b6a <USBD_CtlSendStatus>
      break;
 80117ec:	e010      	b.n	8011810 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f9bb 	bl	8011b6a <USBD_CtlSendStatus>
      break;
 80117f4:	e00c      	b.n	8011810 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80117f6:	6839      	ldr	r1, [r7, #0]
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f8eb 	bl	80119d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80117fe:	4b07      	ldr	r3, [pc, #28]	; (801181c <USBD_SetConfig+0x148>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	4619      	mov	r1, r3
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff f8cd 	bl	80109a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801180a:	2303      	movs	r3, #3
 801180c:	73fb      	strb	r3, [r7, #15]
      break;
 801180e:	bf00      	nop
  }

  return ret;
 8011810:	7bfb      	ldrb	r3, [r7, #15]
}
 8011812:	4618      	mov	r0, r3
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20000a78 	.word	0x20000a78

08011820 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	88db      	ldrh	r3, [r3, #6]
 801182e:	2b01      	cmp	r3, #1
 8011830:	d004      	beq.n	801183c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 f8cd 	bl	80119d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801183a:	e023      	b.n	8011884 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b02      	cmp	r3, #2
 8011846:	dc02      	bgt.n	801184e <USBD_GetConfig+0x2e>
 8011848:	2b00      	cmp	r3, #0
 801184a:	dc03      	bgt.n	8011854 <USBD_GetConfig+0x34>
 801184c:	e015      	b.n	801187a <USBD_GetConfig+0x5a>
 801184e:	2b03      	cmp	r3, #3
 8011850:	d00b      	beq.n	801186a <USBD_GetConfig+0x4a>
 8011852:	e012      	b.n	801187a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3308      	adds	r3, #8
 801185e:	2201      	movs	r2, #1
 8011860:	4619      	mov	r1, r3
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 f927 	bl	8011ab6 <USBD_CtlSendData>
        break;
 8011868:	e00c      	b.n	8011884 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	3304      	adds	r3, #4
 801186e:	2201      	movs	r2, #1
 8011870:	4619      	mov	r1, r3
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f000 f91f 	bl	8011ab6 <USBD_CtlSendData>
        break;
 8011878:	e004      	b.n	8011884 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801187a:	6839      	ldr	r1, [r7, #0]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f8a9 	bl	80119d4 <USBD_CtlError>
        break;
 8011882:	bf00      	nop
}
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801189c:	b2db      	uxtb	r3, r3
 801189e:	3b01      	subs	r3, #1
 80118a0:	2b02      	cmp	r3, #2
 80118a2:	d81e      	bhi.n	80118e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	88db      	ldrh	r3, [r3, #6]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	d004      	beq.n	80118b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 f890 	bl	80119d4 <USBD_CtlError>
        break;
 80118b4:	e01a      	b.n	80118ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2201      	movs	r2, #1
 80118ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d005      	beq.n	80118d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	f043 0202 	orr.w	r2, r3, #2
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	330c      	adds	r3, #12
 80118d6:	2202      	movs	r2, #2
 80118d8:	4619      	mov	r1, r3
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 f8eb 	bl	8011ab6 <USBD_CtlSendData>
      break;
 80118e0:	e004      	b.n	80118ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80118e2:	6839      	ldr	r1, [r7, #0]
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 f875 	bl	80119d4 <USBD_CtlError>
      break;
 80118ea:	bf00      	nop
  }
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	885b      	ldrh	r3, [r3, #2]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d106      	bne.n	8011914 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2201      	movs	r2, #1
 801190a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f92b 	bl	8011b6a <USBD_CtlSendStatus>
  }
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801192c:	b2db      	uxtb	r3, r3
 801192e:	3b01      	subs	r3, #1
 8011930:	2b02      	cmp	r3, #2
 8011932:	d80b      	bhi.n	801194c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	885b      	ldrh	r3, [r3, #2]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d10c      	bne.n	8011956 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f910 	bl	8011b6a <USBD_CtlSendStatus>
      }
      break;
 801194a:	e004      	b.n	8011956 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801194c:	6839      	ldr	r1, [r7, #0]
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 f840 	bl	80119d4 <USBD_CtlError>
      break;
 8011954:	e000      	b.n	8011958 <USBD_ClrFeature+0x3c>
      break;
 8011956:	bf00      	nop
  }
}
 8011958:	bf00      	nop
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	781a      	ldrb	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	3301      	adds	r3, #1
 801197a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	781a      	ldrb	r2, [r3, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	3301      	adds	r3, #1
 8011988:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f7ff fa91 	bl	8010eb2 <SWAPBYTE>
 8011990:	4603      	mov	r3, r0
 8011992:	461a      	mov	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	3301      	adds	r3, #1
 801199c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	3301      	adds	r3, #1
 80119a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f7ff fa84 	bl	8010eb2 <SWAPBYTE>
 80119aa:	4603      	mov	r3, r0
 80119ac:	461a      	mov	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	3301      	adds	r3, #1
 80119b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	3301      	adds	r3, #1
 80119bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80119be:	68f8      	ldr	r0, [r7, #12]
 80119c0:	f7ff fa77 	bl	8010eb2 <SWAPBYTE>
 80119c4:	4603      	mov	r3, r0
 80119c6:	461a      	mov	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	80da      	strh	r2, [r3, #6]
}
 80119cc:	bf00      	nop
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80119de:	2180      	movs	r1, #128	; 0x80
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fd15 	bl	8012410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80119e6:	2100      	movs	r1, #0
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f000 fd11 	bl	8012410 <USBD_LL_StallEP>
}
 80119ee:	bf00      	nop
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b086      	sub	sp, #24
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	60f8      	str	r0, [r7, #12]
 80119fe:	60b9      	str	r1, [r7, #8]
 8011a00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011a02:	2300      	movs	r3, #0
 8011a04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d036      	beq.n	8011a7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011a10:	6938      	ldr	r0, [r7, #16]
 8011a12:	f000 f836 	bl	8011a82 <USBD_GetLen>
 8011a16:	4603      	mov	r3, r0
 8011a18:	3301      	adds	r3, #1
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011a24:	7dfb      	ldrb	r3, [r7, #23]
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	4413      	add	r3, r2
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	7812      	ldrb	r2, [r2, #0]
 8011a2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a30:	7dfb      	ldrb	r3, [r7, #23]
 8011a32:	3301      	adds	r3, #1
 8011a34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011a36:	7dfb      	ldrb	r3, [r7, #23]
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	2203      	movs	r2, #3
 8011a3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8011a40:	7dfb      	ldrb	r3, [r7, #23]
 8011a42:	3301      	adds	r3, #1
 8011a44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011a46:	e013      	b.n	8011a70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	693a      	ldr	r2, [r7, #16]
 8011a50:	7812      	ldrb	r2, [r2, #0]
 8011a52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	3301      	adds	r3, #1
 8011a58:	613b      	str	r3, [r7, #16]
    idx++;
 8011a5a:	7dfb      	ldrb	r3, [r7, #23]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011a60:	7dfb      	ldrb	r3, [r7, #23]
 8011a62:	68ba      	ldr	r2, [r7, #8]
 8011a64:	4413      	add	r3, r2
 8011a66:	2200      	movs	r2, #0
 8011a68:	701a      	strb	r2, [r3, #0]
    idx++;
 8011a6a:	7dfb      	ldrb	r3, [r7, #23]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e7      	bne.n	8011a48 <USBD_GetString+0x52>
 8011a78:	e000      	b.n	8011a7c <USBD_GetString+0x86>
    return;
 8011a7a:	bf00      	nop
  }
}
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011a82:	b480      	push	{r7}
 8011a84:	b085      	sub	sp, #20
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011a92:	e005      	b.n	8011aa0 <USBD_GetLen+0x1e>
  {
    len++;
 8011a94:	7bfb      	ldrb	r3, [r7, #15]
 8011a96:	3301      	adds	r3, #1
 8011a98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d1f5      	bne.n	8011a94 <USBD_GetLen+0x12>
  }

  return len;
 8011aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	b084      	sub	sp, #16
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	60f8      	str	r0, [r7, #12]
 8011abe:	60b9      	str	r1, [r7, #8]
 8011ac0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2202      	movs	r2, #2
 8011ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	68ba      	ldr	r2, [r7, #8]
 8011ada:	2100      	movs	r1, #0
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f000 fd20 	bl	8012522 <USBD_LL_Transmit>

  return USBD_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	2100      	movs	r1, #0
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f000 fd0f 	bl	8012522 <USBD_LL_Transmit>

  return USBD_OK;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b084      	sub	sp, #16
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	60f8      	str	r0, [r7, #12]
 8011b16:	60b9      	str	r1, [r7, #8]
 8011b18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2203      	movs	r2, #3
 8011b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	2100      	movs	r1, #0
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f000 fd13 	bl	8012564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	2100      	movs	r1, #0
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f000 fd02 	bl	8012564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2204      	movs	r2, #4
 8011b76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2100      	movs	r1, #0
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 fcce 	bl	8012522 <USBD_LL_Transmit>

  return USBD_OK;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2205      	movs	r2, #5
 8011b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 fcdc 	bl	8012564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bac:	2300      	movs	r3, #0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
	...

08011bb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4912      	ldr	r1, [pc, #72]	; (8011c08 <MX_USB_DEVICE_Init+0x50>)
 8011bc0:	4812      	ldr	r0, [pc, #72]	; (8011c0c <MX_USB_DEVICE_Init+0x54>)
 8011bc2:	f7fe fe65 	bl	8010890 <USBD_Init>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d001      	beq.n	8011bd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011bcc:	f7f5 fbba 	bl	8007344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011bd0:	490f      	ldr	r1, [pc, #60]	; (8011c10 <MX_USB_DEVICE_Init+0x58>)
 8011bd2:	480e      	ldr	r0, [pc, #56]	; (8011c0c <MX_USB_DEVICE_Init+0x54>)
 8011bd4:	f7fe fe8c 	bl	80108f0 <USBD_RegisterClass>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011bde:	f7f5 fbb1 	bl	8007344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011be2:	490c      	ldr	r1, [pc, #48]	; (8011c14 <MX_USB_DEVICE_Init+0x5c>)
 8011be4:	4809      	ldr	r0, [pc, #36]	; (8011c0c <MX_USB_DEVICE_Init+0x54>)
 8011be6:	f7fe fdad 	bl	8010744 <USBD_CDC_RegisterInterface>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011bf0:	f7f5 fba8 	bl	8007344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011bf4:	4805      	ldr	r0, [pc, #20]	; (8011c0c <MX_USB_DEVICE_Init+0x54>)
 8011bf6:	f7fe fea2 	bl	801093e <USBD_Start>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d001      	beq.n	8011c04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011c00:	f7f5 fba0 	bl	8007344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011c04:	bf00      	nop
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	20000130 	.word	0x20000130
 8011c0c:	20000cac 	.word	0x20000cac
 8011c10:	20000018 	.word	0x20000018
 8011c14:	2000011c 	.word	0x2000011c

08011c18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4905      	ldr	r1, [pc, #20]	; (8011c34 <CDC_Init_FS+0x1c>)
 8011c20:	4805      	ldr	r0, [pc, #20]	; (8011c38 <CDC_Init_FS+0x20>)
 8011c22:	f7fe fda4 	bl	801076e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c26:	4905      	ldr	r1, [pc, #20]	; (8011c3c <CDC_Init_FS+0x24>)
 8011c28:	4803      	ldr	r0, [pc, #12]	; (8011c38 <CDC_Init_FS+0x20>)
 8011c2a:	f7fe fdbe 	bl	80107aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	2000177c 	.word	0x2000177c
 8011c38:	20000cac 	.word	0x20000cac
 8011c3c:	20000f7c 	.word	0x20000f7c

08011c40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c40:	b480      	push	{r7}
 8011c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b083      	sub	sp, #12
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	4603      	mov	r3, r0
 8011c58:	6039      	str	r1, [r7, #0]
 8011c5a:	71fb      	strb	r3, [r7, #7]
 8011c5c:	4613      	mov	r3, r2
 8011c5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c60:	79fb      	ldrb	r3, [r7, #7]
 8011c62:	2b23      	cmp	r3, #35	; 0x23
 8011c64:	d84a      	bhi.n	8011cfc <CDC_Control_FS+0xac>
 8011c66:	a201      	add	r2, pc, #4	; (adr r2, 8011c6c <CDC_Control_FS+0x1c>)
 8011c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c6c:	08011cfd 	.word	0x08011cfd
 8011c70:	08011cfd 	.word	0x08011cfd
 8011c74:	08011cfd 	.word	0x08011cfd
 8011c78:	08011cfd 	.word	0x08011cfd
 8011c7c:	08011cfd 	.word	0x08011cfd
 8011c80:	08011cfd 	.word	0x08011cfd
 8011c84:	08011cfd 	.word	0x08011cfd
 8011c88:	08011cfd 	.word	0x08011cfd
 8011c8c:	08011cfd 	.word	0x08011cfd
 8011c90:	08011cfd 	.word	0x08011cfd
 8011c94:	08011cfd 	.word	0x08011cfd
 8011c98:	08011cfd 	.word	0x08011cfd
 8011c9c:	08011cfd 	.word	0x08011cfd
 8011ca0:	08011cfd 	.word	0x08011cfd
 8011ca4:	08011cfd 	.word	0x08011cfd
 8011ca8:	08011cfd 	.word	0x08011cfd
 8011cac:	08011cfd 	.word	0x08011cfd
 8011cb0:	08011cfd 	.word	0x08011cfd
 8011cb4:	08011cfd 	.word	0x08011cfd
 8011cb8:	08011cfd 	.word	0x08011cfd
 8011cbc:	08011cfd 	.word	0x08011cfd
 8011cc0:	08011cfd 	.word	0x08011cfd
 8011cc4:	08011cfd 	.word	0x08011cfd
 8011cc8:	08011cfd 	.word	0x08011cfd
 8011ccc:	08011cfd 	.word	0x08011cfd
 8011cd0:	08011cfd 	.word	0x08011cfd
 8011cd4:	08011cfd 	.word	0x08011cfd
 8011cd8:	08011cfd 	.word	0x08011cfd
 8011cdc:	08011cfd 	.word	0x08011cfd
 8011ce0:	08011cfd 	.word	0x08011cfd
 8011ce4:	08011cfd 	.word	0x08011cfd
 8011ce8:	08011cfd 	.word	0x08011cfd
 8011cec:	08011cfd 	.word	0x08011cfd
 8011cf0:	08011cfd 	.word	0x08011cfd
 8011cf4:	08011cfd 	.word	0x08011cfd
 8011cf8:	08011cfd 	.word	0x08011cfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011cfc:	bf00      	nop
  }

  return (USBD_OK);
 8011cfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	370c      	adds	r7, #12
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011d16:	6879      	ldr	r1, [r7, #4]
 8011d18:	4805      	ldr	r0, [pc, #20]	; (8011d30 <CDC_Receive_FS+0x24>)
 8011d1a:	f7fe fd46 	bl	80107aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011d1e:	4804      	ldr	r0, [pc, #16]	; (8011d30 <CDC_Receive_FS+0x24>)
 8011d20:	f7fe fd8c 	bl	801083c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011d24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	20000cac 	.word	0x20000cac

08011d34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011d40:	2300      	movs	r3, #0
 8011d42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011d44:	4b0d      	ldr	r3, [pc, #52]	; (8011d7c <CDC_Transmit_FS+0x48>)
 8011d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d001      	beq.n	8011d5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011d56:	2301      	movs	r3, #1
 8011d58:	e00b      	b.n	8011d72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011d5a:	887b      	ldrh	r3, [r7, #2]
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	4806      	ldr	r0, [pc, #24]	; (8011d7c <CDC_Transmit_FS+0x48>)
 8011d62:	f7fe fd04 	bl	801076e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011d66:	4805      	ldr	r0, [pc, #20]	; (8011d7c <CDC_Transmit_FS+0x48>)
 8011d68:	f7fe fd38 	bl	80107dc <USBD_CDC_TransmitPacket>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20000cac 	.word	0x20000cac

08011d80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b087      	sub	sp, #28
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	371c      	adds	r7, #28
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
	...

08011da4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	6039      	str	r1, [r7, #0]
 8011dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2212      	movs	r2, #18
 8011db4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011db6:	4b03      	ldr	r3, [pc, #12]	; (8011dc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	370c      	adds	r7, #12
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr
 8011dc4:	20000150 	.word	0x20000150

08011dc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	4603      	mov	r3, r0
 8011dd0:	6039      	str	r1, [r7, #0]
 8011dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2204      	movs	r2, #4
 8011dd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011dda:	4b03      	ldr	r3, [pc, #12]	; (8011de8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	370c      	adds	r7, #12
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr
 8011de8:	20000170 	.word	0x20000170

08011dec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	4603      	mov	r3, r0
 8011df4:	6039      	str	r1, [r7, #0]
 8011df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011df8:	79fb      	ldrb	r3, [r7, #7]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d105      	bne.n	8011e0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011dfe:	683a      	ldr	r2, [r7, #0]
 8011e00:	4907      	ldr	r1, [pc, #28]	; (8011e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e02:	4808      	ldr	r0, [pc, #32]	; (8011e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e04:	f7ff fdf7 	bl	80119f6 <USBD_GetString>
 8011e08:	e004      	b.n	8011e14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	4904      	ldr	r1, [pc, #16]	; (8011e20 <USBD_FS_ProductStrDescriptor+0x34>)
 8011e0e:	4805      	ldr	r0, [pc, #20]	; (8011e24 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e10:	f7ff fdf1 	bl	80119f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e14:	4b02      	ldr	r3, [pc, #8]	; (8011e20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3708      	adds	r7, #8
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	20001f7c 	.word	0x20001f7c
 8011e24:	080201a8 	.word	0x080201a8

08011e28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	4603      	mov	r3, r0
 8011e30:	6039      	str	r1, [r7, #0]
 8011e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	4904      	ldr	r1, [pc, #16]	; (8011e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011e38:	4804      	ldr	r0, [pc, #16]	; (8011e4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011e3a:	f7ff fddc 	bl	80119f6 <USBD_GetString>
  return USBD_StrDesc;
 8011e3e:	4b02      	ldr	r3, [pc, #8]	; (8011e48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	20001f7c 	.word	0x20001f7c
 8011e4c:	080201bc 	.word	0x080201bc

08011e50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	4603      	mov	r3, r0
 8011e58:	6039      	str	r1, [r7, #0]
 8011e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	221a      	movs	r2, #26
 8011e60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011e62:	f000 f855 	bl	8011f10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011e66:	4b02      	ldr	r3, [pc, #8]	; (8011e70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	20000174 	.word	0x20000174

08011e74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	6039      	str	r1, [r7, #0]
 8011e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e80:	79fb      	ldrb	r3, [r7, #7]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d105      	bne.n	8011e92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e86:	683a      	ldr	r2, [r7, #0]
 8011e88:	4907      	ldr	r1, [pc, #28]	; (8011ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e8a:	4808      	ldr	r0, [pc, #32]	; (8011eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e8c:	f7ff fdb3 	bl	80119f6 <USBD_GetString>
 8011e90:	e004      	b.n	8011e9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011e92:	683a      	ldr	r2, [r7, #0]
 8011e94:	4904      	ldr	r1, [pc, #16]	; (8011ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011e96:	4805      	ldr	r0, [pc, #20]	; (8011eac <USBD_FS_ConfigStrDescriptor+0x38>)
 8011e98:	f7ff fdad 	bl	80119f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e9c:	4b02      	ldr	r3, [pc, #8]	; (8011ea8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	20001f7c 	.word	0x20001f7c
 8011eac:	080201cc 	.word	0x080201cc

08011eb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	6039      	str	r1, [r7, #0]
 8011eba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011ebc:	79fb      	ldrb	r3, [r7, #7]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d105      	bne.n	8011ece <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ec2:	683a      	ldr	r2, [r7, #0]
 8011ec4:	4907      	ldr	r1, [pc, #28]	; (8011ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ec6:	4808      	ldr	r0, [pc, #32]	; (8011ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ec8:	f7ff fd95 	bl	80119f6 <USBD_GetString>
 8011ecc:	e004      	b.n	8011ed8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011ece:	683a      	ldr	r2, [r7, #0]
 8011ed0:	4904      	ldr	r1, [pc, #16]	; (8011ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011ed2:	4805      	ldr	r0, [pc, #20]	; (8011ee8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011ed4:	f7ff fd8f 	bl	80119f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ed8:	4b02      	ldr	r3, [pc, #8]	; (8011ee4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3708      	adds	r7, #8
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20001f7c 	.word	0x20001f7c
 8011ee8:	080201d8 	.word	0x080201d8

08011eec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	6039      	str	r1, [r7, #0]
 8011ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	220c      	movs	r2, #12
 8011efc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011efe:	4b03      	ldr	r3, [pc, #12]	; (8011f0c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	20000164 	.word	0x20000164

08011f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011f16:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <Get_SerialNum+0x44>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011f1c:	4b0e      	ldr	r3, [pc, #56]	; (8011f58 <Get_SerialNum+0x48>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011f22:	4b0e      	ldr	r3, [pc, #56]	; (8011f5c <Get_SerialNum+0x4c>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011f28:	68fa      	ldr	r2, [r7, #12]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d009      	beq.n	8011f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f36:	2208      	movs	r2, #8
 8011f38:	4909      	ldr	r1, [pc, #36]	; (8011f60 <Get_SerialNum+0x50>)
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f000 f814 	bl	8011f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f40:	2204      	movs	r2, #4
 8011f42:	4908      	ldr	r1, [pc, #32]	; (8011f64 <Get_SerialNum+0x54>)
 8011f44:	68b8      	ldr	r0, [r7, #8]
 8011f46:	f000 f80f 	bl	8011f68 <IntToUnicode>
  }
}
 8011f4a:	bf00      	nop
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	1fff7a10 	.word	0x1fff7a10
 8011f58:	1fff7a14 	.word	0x1fff7a14
 8011f5c:	1fff7a18 	.word	0x1fff7a18
 8011f60:	20000176 	.word	0x20000176
 8011f64:	20000186 	.word	0x20000186

08011f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b087      	sub	sp, #28
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4613      	mov	r3, r2
 8011f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f76:	2300      	movs	r3, #0
 8011f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	75fb      	strb	r3, [r7, #23]
 8011f7e:	e027      	b.n	8011fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	0f1b      	lsrs	r3, r3, #28
 8011f84:	2b09      	cmp	r3, #9
 8011f86:	d80b      	bhi.n	8011fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	0f1b      	lsrs	r3, r3, #28
 8011f8c:	b2da      	uxtb	r2, r3
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4619      	mov	r1, r3
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	440b      	add	r3, r1
 8011f98:	3230      	adds	r2, #48	; 0x30
 8011f9a:	b2d2      	uxtb	r2, r2
 8011f9c:	701a      	strb	r2, [r3, #0]
 8011f9e:	e00a      	b.n	8011fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	0f1b      	lsrs	r3, r3, #28
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	005b      	lsls	r3, r3, #1
 8011faa:	4619      	mov	r1, r3
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	440b      	add	r3, r1
 8011fb0:	3237      	adds	r2, #55	; 0x37
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	011b      	lsls	r3, r3, #4
 8011fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011fbc:	7dfb      	ldrb	r3, [r7, #23]
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	68ba      	ldr	r2, [r7, #8]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011fca:	7dfb      	ldrb	r3, [r7, #23]
 8011fcc:	3301      	adds	r3, #1
 8011fce:	75fb      	strb	r3, [r7, #23]
 8011fd0:	7dfa      	ldrb	r2, [r7, #23]
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d3d3      	bcc.n	8011f80 <IntToUnicode+0x18>
  }
}
 8011fd8:	bf00      	nop
 8011fda:	bf00      	nop
 8011fdc:	371c      	adds	r7, #28
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
	...

08011fe8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b0a0      	sub	sp, #128	; 0x80
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ff0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	605a      	str	r2, [r3, #4]
 8011ffa:	609a      	str	r2, [r3, #8]
 8011ffc:	60da      	str	r2, [r3, #12]
 8011ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012000:	f107 0310 	add.w	r3, r7, #16
 8012004:	225c      	movs	r2, #92	; 0x5c
 8012006:	2100      	movs	r1, #0
 8012008:	4618      	mov	r0, r3
 801200a:	f001 f871 	bl	80130f0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012016:	d154      	bne.n	80120c2 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8012018:	f44f 7380 	mov.w	r3, #256	; 0x100
 801201c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 5;
 801201e:	2305      	movs	r3, #5
 8012020:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 120;
 8012022:	2378      	movs	r3, #120	; 0x78
 8012024:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012026:	2302      	movs	r3, #2
 8012028:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 801202a:	2304      	movs	r3, #4
 801202c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 801202e:	2301      	movs	r3, #1
 8012030:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8012032:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012036:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012038:	f107 0310 	add.w	r3, r7, #16
 801203c:	4618      	mov	r0, r3
 801203e:	f7f9 fc8f 	bl	800b960 <HAL_RCCEx_PeriphCLKConfig>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d001      	beq.n	801204c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8012048:	f7f5 f97c 	bl	8007344 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801204c:	2300      	movs	r3, #0
 801204e:	60fb      	str	r3, [r7, #12]
 8012050:	4b1e      	ldr	r3, [pc, #120]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 8012052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012054:	4a1d      	ldr	r2, [pc, #116]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	6313      	str	r3, [r2, #48]	; 0x30
 801205c:	4b1b      	ldr	r3, [pc, #108]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 801205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012060:	f003 0301 	and.w	r3, r3, #1
 8012064:	60fb      	str	r3, [r7, #12]
 8012066:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012068:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801206c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801206e:	2302      	movs	r3, #2
 8012070:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012072:	2300      	movs	r3, #0
 8012074:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012076:	2303      	movs	r3, #3
 8012078:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801207a:	230a      	movs	r3, #10
 801207c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801207e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012082:	4619      	mov	r1, r3
 8012084:	4812      	ldr	r0, [pc, #72]	; (80120d0 <HAL_PCD_MspInit+0xe8>)
 8012086:	f7f7 fe25 	bl	8009cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801208a:	4b10      	ldr	r3, [pc, #64]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 801208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801208e:	4a0f      	ldr	r2, [pc, #60]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 8012090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012094:	6353      	str	r3, [r2, #52]	; 0x34
 8012096:	2300      	movs	r3, #0
 8012098:	60bb      	str	r3, [r7, #8]
 801209a:	4b0c      	ldr	r3, [pc, #48]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 801209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801209e:	4a0b      	ldr	r2, [pc, #44]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 80120a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80120a4:	6453      	str	r3, [r2, #68]	; 0x44
 80120a6:	4b09      	ldr	r3, [pc, #36]	; (80120cc <HAL_PCD_MspInit+0xe4>)
 80120a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120ae:	60bb      	str	r3, [r7, #8]
 80120b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80120b2:	2200      	movs	r2, #0
 80120b4:	2100      	movs	r1, #0
 80120b6:	2043      	movs	r0, #67	; 0x43
 80120b8:	f7f6 fc9d 	bl	80089f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80120bc:	2043      	movs	r0, #67	; 0x43
 80120be:	f7f6 fcb6 	bl	8008a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80120c2:	bf00      	nop
 80120c4:	3780      	adds	r7, #128	; 0x80
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	40023800 	.word	0x40023800
 80120d0:	40020000 	.word	0x40020000

080120d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80120e8:	4619      	mov	r1, r3
 80120ea:	4610      	mov	r0, r2
 80120ec:	f7fe fc72 	bl	80109d4 <USBD_LL_SetupStage>
}
 80120f0:	bf00      	nop
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801210a:	78fa      	ldrb	r2, [r7, #3]
 801210c:	6879      	ldr	r1, [r7, #4]
 801210e:	4613      	mov	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	1a9b      	subs	r3, r3, r2
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	440b      	add	r3, r1
 8012118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	4619      	mov	r1, r3
 8012122:	f7fe fcac 	bl	8010a7e <USBD_LL_DataOutStage>
}
 8012126:	bf00      	nop
 8012128:	3708      	adds	r7, #8
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801212e:	b580      	push	{r7, lr}
 8012130:	b082      	sub	sp, #8
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	460b      	mov	r3, r1
 8012138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012140:	78fa      	ldrb	r2, [r7, #3]
 8012142:	6879      	ldr	r1, [r7, #4]
 8012144:	4613      	mov	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	1a9b      	subs	r3, r3, r2
 801214a:	009b      	lsls	r3, r3, #2
 801214c:	440b      	add	r3, r1
 801214e:	3348      	adds	r3, #72	; 0x48
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	78fb      	ldrb	r3, [r7, #3]
 8012154:	4619      	mov	r1, r3
 8012156:	f7fe fcf5 	bl	8010b44 <USBD_LL_DataInStage>
}
 801215a:	bf00      	nop
 801215c:	3708      	adds	r7, #8
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b082      	sub	sp, #8
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012170:	4618      	mov	r0, r3
 8012172:	f7fe fe09 	bl	8010d88 <USBD_LL_SOF>
}
 8012176:	bf00      	nop
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b084      	sub	sp, #16
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012186:	2301      	movs	r3, #1
 8012188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d102      	bne.n	8012198 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012192:	2300      	movs	r3, #0
 8012194:	73fb      	strb	r3, [r7, #15]
 8012196:	e008      	b.n	80121aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	2b02      	cmp	r3, #2
 801219e:	d102      	bne.n	80121a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80121a0:	2301      	movs	r3, #1
 80121a2:	73fb      	strb	r3, [r7, #15]
 80121a4:	e001      	b.n	80121aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80121a6:	f7f5 f8cd 	bl	8007344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121b0:	7bfa      	ldrb	r2, [r7, #15]
 80121b2:	4611      	mov	r1, r2
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fe fda9 	bl	8010d0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fe fd55 	bl	8010c70 <USBD_LL_Reset>
}
 80121c6:	bf00      	nop
 80121c8:	3710      	adds	r7, #16
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
	...

080121d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fe fda4 	bl	8010d2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	687a      	ldr	r2, [r7, #4]
 80121f0:	6812      	ldr	r2, [r2, #0]
 80121f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80121f6:	f043 0301 	orr.w	r3, r3, #1
 80121fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6a1b      	ldr	r3, [r3, #32]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d005      	beq.n	8012210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012204:	4b04      	ldr	r3, [pc, #16]	; (8012218 <HAL_PCD_SuspendCallback+0x48>)
 8012206:	691b      	ldr	r3, [r3, #16]
 8012208:	4a03      	ldr	r2, [pc, #12]	; (8012218 <HAL_PCD_SuspendCallback+0x48>)
 801220a:	f043 0306 	orr.w	r3, r3, #6
 801220e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	e000ed00 	.word	0xe000ed00

0801221c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801222a:	4618      	mov	r0, r3
 801222c:	f7fe fd94 	bl	8010d58 <USBD_LL_Resume>
}
 8012230:	bf00      	nop
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	460b      	mov	r3, r1
 8012242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801224a:	78fa      	ldrb	r2, [r7, #3]
 801224c:	4611      	mov	r1, r2
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe fde2 	bl	8010e18 <USBD_LL_IsoOUTIncomplete>
}
 8012254:	bf00      	nop
 8012256:	3708      	adds	r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801226e:	78fa      	ldrb	r2, [r7, #3]
 8012270:	4611      	mov	r1, r2
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe fdaa 	bl	8010dcc <USBD_LL_IsoINIncomplete>
}
 8012278:	bf00      	nop
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}

08012280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801228e:	4618      	mov	r0, r3
 8012290:	f7fe fde8 	bl	8010e64 <USBD_LL_DevConnected>
}
 8012294:	bf00      	nop
 8012296:	3708      	adds	r7, #8
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fe fde5 	bl	8010e7a <USBD_LL_DevDisconnected>
}
 80122b0:	bf00      	nop
 80122b2:	3708      	adds	r7, #8
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d13c      	bne.n	8012342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80122c8:	4a20      	ldr	r2, [pc, #128]	; (801234c <USBD_LL_Init+0x94>)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	4a1e      	ldr	r2, [pc, #120]	; (801234c <USBD_LL_Init+0x94>)
 80122d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80122d8:	4b1c      	ldr	r3, [pc, #112]	; (801234c <USBD_LL_Init+0x94>)
 80122da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80122de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80122e0:	4b1a      	ldr	r3, [pc, #104]	; (801234c <USBD_LL_Init+0x94>)
 80122e2:	2206      	movs	r2, #6
 80122e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80122e6:	4b19      	ldr	r3, [pc, #100]	; (801234c <USBD_LL_Init+0x94>)
 80122e8:	2202      	movs	r2, #2
 80122ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80122ec:	4b17      	ldr	r3, [pc, #92]	; (801234c <USBD_LL_Init+0x94>)
 80122ee:	2200      	movs	r2, #0
 80122f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80122f2:	4b16      	ldr	r3, [pc, #88]	; (801234c <USBD_LL_Init+0x94>)
 80122f4:	2202      	movs	r2, #2
 80122f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80122f8:	4b14      	ldr	r3, [pc, #80]	; (801234c <USBD_LL_Init+0x94>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80122fe:	4b13      	ldr	r3, [pc, #76]	; (801234c <USBD_LL_Init+0x94>)
 8012300:	2200      	movs	r2, #0
 8012302:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012304:	4b11      	ldr	r3, [pc, #68]	; (801234c <USBD_LL_Init+0x94>)
 8012306:	2200      	movs	r2, #0
 8012308:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801230a:	4b10      	ldr	r3, [pc, #64]	; (801234c <USBD_LL_Init+0x94>)
 801230c:	2200      	movs	r2, #0
 801230e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012310:	4b0e      	ldr	r3, [pc, #56]	; (801234c <USBD_LL_Init+0x94>)
 8012312:	2200      	movs	r2, #0
 8012314:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012316:	480d      	ldr	r0, [pc, #52]	; (801234c <USBD_LL_Init+0x94>)
 8012318:	f7f7 ffe8 	bl	800a2ec <HAL_PCD_Init>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012322:	f7f5 f80f 	bl	8007344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012326:	2180      	movs	r1, #128	; 0x80
 8012328:	4808      	ldr	r0, [pc, #32]	; (801234c <USBD_LL_Init+0x94>)
 801232a:	f7f9 f97a 	bl	800b622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801232e:	2240      	movs	r2, #64	; 0x40
 8012330:	2100      	movs	r1, #0
 8012332:	4806      	ldr	r0, [pc, #24]	; (801234c <USBD_LL_Init+0x94>)
 8012334:	f7f9 f92e 	bl	800b594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012338:	2280      	movs	r2, #128	; 0x80
 801233a:	2101      	movs	r1, #1
 801233c:	4803      	ldr	r0, [pc, #12]	; (801234c <USBD_LL_Init+0x94>)
 801233e:	f7f9 f929 	bl	800b594 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012342:	2300      	movs	r3, #0
}
 8012344:	4618      	mov	r0, r3
 8012346:	3708      	adds	r7, #8
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	2000217c 	.word	0x2000217c

08012350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801235c:	2300      	movs	r3, #0
 801235e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012366:	4618      	mov	r0, r3
 8012368:	f7f8 f8e4 	bl	800a534 <HAL_PCD_Start>
 801236c:	4603      	mov	r3, r0
 801236e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012370:	7bfb      	ldrb	r3, [r7, #15]
 8012372:	4618      	mov	r0, r3
 8012374:	f000 f990 	bl	8012698 <USBD_Get_USB_Status>
 8012378:	4603      	mov	r3, r0
 801237a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801237c:	7bbb      	ldrb	r3, [r7, #14]
}
 801237e:	4618      	mov	r0, r3
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b084      	sub	sp, #16
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
 801238e:	4608      	mov	r0, r1
 8012390:	4611      	mov	r1, r2
 8012392:	461a      	mov	r2, r3
 8012394:	4603      	mov	r3, r0
 8012396:	70fb      	strb	r3, [r7, #3]
 8012398:	460b      	mov	r3, r1
 801239a:	70bb      	strb	r3, [r7, #2]
 801239c:	4613      	mov	r3, r2
 801239e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123a4:	2300      	movs	r3, #0
 80123a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123ae:	78bb      	ldrb	r3, [r7, #2]
 80123b0:	883a      	ldrh	r2, [r7, #0]
 80123b2:	78f9      	ldrb	r1, [r7, #3]
 80123b4:	f7f8 fcf5 	bl	800ada2 <HAL_PCD_EP_Open>
 80123b8:	4603      	mov	r3, r0
 80123ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
 80123be:	4618      	mov	r0, r3
 80123c0:	f000 f96a 	bl	8012698 <USBD_Get_USB_Status>
 80123c4:	4603      	mov	r3, r0
 80123c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b084      	sub	sp, #16
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	460b      	mov	r3, r1
 80123dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123ec:	78fa      	ldrb	r2, [r7, #3]
 80123ee:	4611      	mov	r1, r2
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7f8 fd3e 	bl	800ae72 <HAL_PCD_EP_Close>
 80123f6:	4603      	mov	r3, r0
 80123f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123fa:	7bfb      	ldrb	r3, [r7, #15]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f000 f94b 	bl	8012698 <USBD_Get_USB_Status>
 8012402:	4603      	mov	r3, r0
 8012404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012406:	7bbb      	ldrb	r3, [r7, #14]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	460b      	mov	r3, r1
 801241a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801241c:	2300      	movs	r3, #0
 801241e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012420:	2300      	movs	r3, #0
 8012422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801242a:	78fa      	ldrb	r2, [r7, #3]
 801242c:	4611      	mov	r1, r2
 801242e:	4618      	mov	r0, r3
 8012430:	f7f8 fe16 	bl	800b060 <HAL_PCD_EP_SetStall>
 8012434:	4603      	mov	r3, r0
 8012436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012438:	7bfb      	ldrb	r3, [r7, #15]
 801243a:	4618      	mov	r0, r3
 801243c:	f000 f92c 	bl	8012698 <USBD_Get_USB_Status>
 8012440:	4603      	mov	r3, r0
 8012442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012444:	7bbb      	ldrb	r3, [r7, #14]
}
 8012446:	4618      	mov	r0, r3
 8012448:	3710      	adds	r7, #16
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b084      	sub	sp, #16
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	460b      	mov	r3, r1
 8012458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801245a:	2300      	movs	r3, #0
 801245c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801245e:	2300      	movs	r3, #0
 8012460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012468:	78fa      	ldrb	r2, [r7, #3]
 801246a:	4611      	mov	r1, r2
 801246c:	4618      	mov	r0, r3
 801246e:	f7f8 fe5b 	bl	800b128 <HAL_PCD_EP_ClrStall>
 8012472:	4603      	mov	r3, r0
 8012474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012476:	7bfb      	ldrb	r3, [r7, #15]
 8012478:	4618      	mov	r0, r3
 801247a:	f000 f90d 	bl	8012698 <USBD_Get_USB_Status>
 801247e:	4603      	mov	r3, r0
 8012480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012482:	7bbb      	ldrb	r3, [r7, #14]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3710      	adds	r7, #16
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801248c:	b480      	push	{r7}
 801248e:	b085      	sub	sp, #20
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	460b      	mov	r3, r1
 8012496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801249e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80124a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	da0b      	bge.n	80124c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80124a8:	78fb      	ldrb	r3, [r7, #3]
 80124aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ae:	68f9      	ldr	r1, [r7, #12]
 80124b0:	4613      	mov	r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	1a9b      	subs	r3, r3, r2
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	440b      	add	r3, r1
 80124ba:	333e      	adds	r3, #62	; 0x3e
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	e00b      	b.n	80124d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80124c0:	78fb      	ldrb	r3, [r7, #3]
 80124c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124c6:	68f9      	ldr	r1, [r7, #12]
 80124c8:	4613      	mov	r3, r2
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	1a9b      	subs	r3, r3, r2
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	440b      	add	r3, r1
 80124d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80124d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3714      	adds	r7, #20
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124f4:	2300      	movs	r3, #0
 80124f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80124fe:	78fa      	ldrb	r2, [r7, #3]
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f7f8 fc28 	bl	800ad58 <HAL_PCD_SetAddress>
 8012508:	4603      	mov	r3, r0
 801250a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801250c:	7bfb      	ldrb	r3, [r7, #15]
 801250e:	4618      	mov	r0, r3
 8012510:	f000 f8c2 	bl	8012698 <USBD_Get_USB_Status>
 8012514:	4603      	mov	r3, r0
 8012516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012518:	7bbb      	ldrb	r3, [r7, #14]
}
 801251a:	4618      	mov	r0, r3
 801251c:	3710      	adds	r7, #16
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b086      	sub	sp, #24
 8012526:	af00      	add	r7, sp, #0
 8012528:	60f8      	str	r0, [r7, #12]
 801252a:	607a      	str	r2, [r7, #4]
 801252c:	603b      	str	r3, [r7, #0]
 801252e:	460b      	mov	r3, r1
 8012530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012536:	2300      	movs	r3, #0
 8012538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012540:	7af9      	ldrb	r1, [r7, #11]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	f7f8 fd41 	bl	800afcc <HAL_PCD_EP_Transmit>
 801254a:	4603      	mov	r3, r0
 801254c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801254e:	7dfb      	ldrb	r3, [r7, #23]
 8012550:	4618      	mov	r0, r3
 8012552:	f000 f8a1 	bl	8012698 <USBD_Get_USB_Status>
 8012556:	4603      	mov	r3, r0
 8012558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801255a:	7dbb      	ldrb	r3, [r7, #22]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3718      	adds	r7, #24
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	60f8      	str	r0, [r7, #12]
 801256c:	607a      	str	r2, [r7, #4]
 801256e:	603b      	str	r3, [r7, #0]
 8012570:	460b      	mov	r3, r1
 8012572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012578:	2300      	movs	r3, #0
 801257a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012582:	7af9      	ldrb	r1, [r7, #11]
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	f7f8 fcbd 	bl	800af06 <HAL_PCD_EP_Receive>
 801258c:	4603      	mov	r3, r0
 801258e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012590:	7dfb      	ldrb	r3, [r7, #23]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f880 	bl	8012698 <USBD_Get_USB_Status>
 8012598:	4603      	mov	r3, r0
 801259a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801259c:	7dbb      	ldrb	r3, [r7, #22]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3718      	adds	r7, #24
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	460b      	mov	r3, r1
 80125b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125b8:	78fa      	ldrb	r2, [r7, #3]
 80125ba:	4611      	mov	r1, r2
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f8 fced 	bl	800af9c <HAL_PCD_EP_GetRxCount>
 80125c2:	4603      	mov	r3, r0
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	460b      	mov	r3, r1
 80125d6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80125d8:	78fb      	ldrb	r3, [r7, #3]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d002      	beq.n	80125e4 <HAL_PCDEx_LPM_Callback+0x18>
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d01f      	beq.n	8012622 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80125e2:	e03b      	b.n	801265c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a1b      	ldr	r3, [r3, #32]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d007      	beq.n	80125fc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80125ec:	f7f4 fb40 	bl	8006c70 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80125f0:	4b1c      	ldr	r3, [pc, #112]	; (8012664 <HAL_PCDEx_LPM_Callback+0x98>)
 80125f2:	691b      	ldr	r3, [r3, #16]
 80125f4:	4a1b      	ldr	r2, [pc, #108]	; (8012664 <HAL_PCDEx_LPM_Callback+0x98>)
 80125f6:	f023 0306 	bic.w	r3, r3, #6
 80125fa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	687a      	ldr	r2, [r7, #4]
 8012608:	6812      	ldr	r2, [r2, #0]
 801260a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801260e:	f023 0301 	bic.w	r3, r3, #1
 8012612:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801261a:	4618      	mov	r0, r3
 801261c:	f7fe fb9c 	bl	8010d58 <USBD_LL_Resume>
    break;
 8012620:	e01c      	b.n	801265c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	6812      	ldr	r2, [r2, #0]
 8012630:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012634:	f043 0301 	orr.w	r3, r3, #1
 8012638:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012640:	4618      	mov	r0, r3
 8012642:	f7fe fb73 	bl	8010d2c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a1b      	ldr	r3, [r3, #32]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d005      	beq.n	801265a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801264e:	4b05      	ldr	r3, [pc, #20]	; (8012664 <HAL_PCDEx_LPM_Callback+0x98>)
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	4a04      	ldr	r2, [pc, #16]	; (8012664 <HAL_PCDEx_LPM_Callback+0x98>)
 8012654:	f043 0306 	orr.w	r3, r3, #6
 8012658:	6113      	str	r3, [r2, #16]
    break;
 801265a:	bf00      	nop
}
 801265c:	bf00      	nop
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	e000ed00 	.word	0xe000ed00

08012668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012670:	4b03      	ldr	r3, [pc, #12]	; (8012680 <USBD_static_malloc+0x18>)
}
 8012672:	4618      	mov	r0, r3
 8012674:	370c      	adds	r7, #12
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	20000a7c 	.word	0x20000a7c

08012684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]

}
 801268c:	bf00      	nop
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80126a6:	79fb      	ldrb	r3, [r7, #7]
 80126a8:	2b03      	cmp	r3, #3
 80126aa:	d817      	bhi.n	80126dc <USBD_Get_USB_Status+0x44>
 80126ac:	a201      	add	r2, pc, #4	; (adr r2, 80126b4 <USBD_Get_USB_Status+0x1c>)
 80126ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b2:	bf00      	nop
 80126b4:	080126c5 	.word	0x080126c5
 80126b8:	080126cb 	.word	0x080126cb
 80126bc:	080126d1 	.word	0x080126d1
 80126c0:	080126d7 	.word	0x080126d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	73fb      	strb	r3, [r7, #15]
    break;
 80126c8:	e00b      	b.n	80126e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80126ca:	2303      	movs	r3, #3
 80126cc:	73fb      	strb	r3, [r7, #15]
    break;
 80126ce:	e008      	b.n	80126e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80126d0:	2301      	movs	r3, #1
 80126d2:	73fb      	strb	r3, [r7, #15]
    break;
 80126d4:	e005      	b.n	80126e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80126d6:	2303      	movs	r3, #3
 80126d8:	73fb      	strb	r3, [r7, #15]
    break;
 80126da:	e002      	b.n	80126e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80126dc:	2303      	movs	r3, #3
 80126de:	73fb      	strb	r3, [r7, #15]
    break;
 80126e0:	bf00      	nop
  }
  return usb_status;
 80126e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3714      	adds	r7, #20
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <_ZdlPv>:
 80126f0:	f000 bcc0 	b.w	8013074 <free>

080126f4 <_Znwj>:
 80126f4:	2801      	cmp	r0, #1
 80126f6:	bf38      	it	cc
 80126f8:	2001      	movcc	r0, #1
 80126fa:	b510      	push	{r4, lr}
 80126fc:	4604      	mov	r4, r0
 80126fe:	4620      	mov	r0, r4
 8012700:	f000 fcb0 	bl	8013064 <malloc>
 8012704:	b930      	cbnz	r0, 8012714 <_Znwj+0x20>
 8012706:	f000 fc73 	bl	8012ff0 <_ZSt15get_new_handlerv>
 801270a:	b908      	cbnz	r0, 8012710 <_Znwj+0x1c>
 801270c:	f000 fc78 	bl	8013000 <abort>
 8012710:	4780      	blx	r0
 8012712:	e7f4      	b.n	80126fe <_Znwj+0xa>
 8012714:	bd10      	pop	{r4, pc}

08012716 <_ZNSaIcEC1Ev>:
 8012716:	4770      	bx	lr

08012718 <_ZNSaIcED1Ev>:
 8012718:	4770      	bx	lr

0801271a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801271a:	68c3      	ldr	r3, [r0, #12]
 801271c:	689a      	ldr	r2, [r3, #8]
 801271e:	60c2      	str	r2, [r0, #12]
 8012720:	b510      	push	{r4, lr}
 8012722:	b102      	cbz	r2, 8012726 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8012724:	6050      	str	r0, [r2, #4]
 8012726:	6842      	ldr	r2, [r0, #4]
 8012728:	605a      	str	r2, [r3, #4]
 801272a:	680c      	ldr	r4, [r1, #0]
 801272c:	4284      	cmp	r4, r0
 801272e:	d103      	bne.n	8012738 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012730:	600b      	str	r3, [r1, #0]
 8012732:	6098      	str	r0, [r3, #8]
 8012734:	6043      	str	r3, [r0, #4]
 8012736:	bd10      	pop	{r4, pc}
 8012738:	6891      	ldr	r1, [r2, #8]
 801273a:	4281      	cmp	r1, r0
 801273c:	bf0c      	ite	eq
 801273e:	6093      	streq	r3, [r2, #8]
 8012740:	60d3      	strne	r3, [r2, #12]
 8012742:	e7f6      	b.n	8012732 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08012744 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8012744:	6883      	ldr	r3, [r0, #8]
 8012746:	68da      	ldr	r2, [r3, #12]
 8012748:	6082      	str	r2, [r0, #8]
 801274a:	b510      	push	{r4, lr}
 801274c:	b102      	cbz	r2, 8012750 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801274e:	6050      	str	r0, [r2, #4]
 8012750:	6842      	ldr	r2, [r0, #4]
 8012752:	605a      	str	r2, [r3, #4]
 8012754:	680c      	ldr	r4, [r1, #0]
 8012756:	4284      	cmp	r4, r0
 8012758:	d103      	bne.n	8012762 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 801275a:	600b      	str	r3, [r1, #0]
 801275c:	60d8      	str	r0, [r3, #12]
 801275e:	6043      	str	r3, [r0, #4]
 8012760:	bd10      	pop	{r4, pc}
 8012762:	68d1      	ldr	r1, [r2, #12]
 8012764:	4281      	cmp	r1, r0
 8012766:	bf0c      	ite	eq
 8012768:	60d3      	streq	r3, [r2, #12]
 801276a:	6093      	strne	r3, [r2, #8]
 801276c:	e7f6      	b.n	801275c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801276e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801276e:	7803      	ldrb	r3, [r0, #0]
 8012770:	b933      	cbnz	r3, 8012780 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012772:	6843      	ldr	r3, [r0, #4]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	4283      	cmp	r3, r0
 8012778:	d102      	bne.n	8012780 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	4618      	mov	r0, r3
 801277e:	4770      	bx	lr
 8012780:	6882      	ldr	r2, [r0, #8]
 8012782:	b122      	cbz	r2, 801278e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8012784:	4613      	mov	r3, r2
 8012786:	68d2      	ldr	r2, [r2, #12]
 8012788:	2a00      	cmp	r2, #0
 801278a:	d1fb      	bne.n	8012784 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801278c:	e7f6      	b.n	801277c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801278e:	6843      	ldr	r3, [r0, #4]
 8012790:	689a      	ldr	r2, [r3, #8]
 8012792:	4282      	cmp	r2, r0
 8012794:	d1f2      	bne.n	801277c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012796:	4618      	mov	r0, r3
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	e7f9      	b.n	8012790 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801279c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 801279c:	68c3      	ldr	r3, [r0, #12]
 801279e:	b123      	cbz	r3, 80127aa <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
 80127a0:	4618      	mov	r0, r3
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1fb      	bne.n	80127a0 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
 80127a8:	4770      	bx	lr
 80127aa:	6843      	ldr	r3, [r0, #4]
 80127ac:	68da      	ldr	r2, [r3, #12]
 80127ae:	4282      	cmp	r2, r0
 80127b0:	d102      	bne.n	80127b8 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
 80127b2:	4618      	mov	r0, r3
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	e7f9      	b.n	80127ac <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
 80127b8:	68c2      	ldr	r2, [r0, #12]
 80127ba:	4293      	cmp	r3, r2
 80127bc:	bf18      	it	ne
 80127be:	4618      	movne	r0, r3
 80127c0:	4770      	bx	lr

080127c2 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80127c2:	f7ff bfd4 	b.w	801276e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080127c6 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>:
 80127c6:	f7ff bfd2 	b.w	801276e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080127ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80127ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127ce:	461e      	mov	r6, r3
 80127d0:	f103 0804 	add.w	r8, r3, #4
 80127d4:	2300      	movs	r3, #0
 80127d6:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80127da:	460c      	mov	r4, r1
 80127dc:	604a      	str	r2, [r1, #4]
 80127de:	700b      	strb	r3, [r1, #0]
 80127e0:	b300      	cbz	r0, 8012824 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80127e2:	4296      	cmp	r6, r2
 80127e4:	6091      	str	r1, [r2, #8]
 80127e6:	d118      	bne.n	801281a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80127e8:	6071      	str	r1, [r6, #4]
 80127ea:	60f4      	str	r4, [r6, #12]
 80127ec:	2701      	movs	r7, #1
 80127ee:	f04f 0900 	mov.w	r9, #0
 80127f2:	6873      	ldr	r3, [r6, #4]
 80127f4:	42a3      	cmp	r3, r4
 80127f6:	d03f      	beq.n	8012878 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80127f8:	6860      	ldr	r0, [r4, #4]
 80127fa:	7802      	ldrb	r2, [r0, #0]
 80127fc:	2a00      	cmp	r2, #0
 80127fe:	d13c      	bne.n	801287a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8012800:	6845      	ldr	r5, [r0, #4]
 8012802:	68ab      	ldr	r3, [r5, #8]
 8012804:	4298      	cmp	r0, r3
 8012806:	d123      	bne.n	8012850 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8012808:	68eb      	ldr	r3, [r5, #12]
 801280a:	b183      	cbz	r3, 801282e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801280c:	781a      	ldrb	r2, [r3, #0]
 801280e:	b972      	cbnz	r2, 801282e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012810:	7007      	strb	r7, [r0, #0]
 8012812:	701f      	strb	r7, [r3, #0]
 8012814:	702a      	strb	r2, [r5, #0]
 8012816:	462c      	mov	r4, r5
 8012818:	e7eb      	b.n	80127f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801281a:	68b3      	ldr	r3, [r6, #8]
 801281c:	4293      	cmp	r3, r2
 801281e:	d1e5      	bne.n	80127ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012820:	60b1      	str	r1, [r6, #8]
 8012822:	e7e3      	b.n	80127ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012824:	60d1      	str	r1, [r2, #12]
 8012826:	68f3      	ldr	r3, [r6, #12]
 8012828:	4293      	cmp	r3, r2
 801282a:	d1df      	bne.n	80127ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801282c:	e7dd      	b.n	80127ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801282e:	68c3      	ldr	r3, [r0, #12]
 8012830:	42a3      	cmp	r3, r4
 8012832:	d103      	bne.n	801283c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8012834:	4641      	mov	r1, r8
 8012836:	f7ff ff70 	bl	801271a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801283a:	4604      	mov	r4, r0
 801283c:	6863      	ldr	r3, [r4, #4]
 801283e:	4641      	mov	r1, r8
 8012840:	701f      	strb	r7, [r3, #0]
 8012842:	4628      	mov	r0, r5
 8012844:	f885 9000 	strb.w	r9, [r5]
 8012848:	f7ff ff7c 	bl	8012744 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801284c:	4625      	mov	r5, r4
 801284e:	e7e2      	b.n	8012816 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8012850:	b113      	cbz	r3, 8012858 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8012852:	781a      	ldrb	r2, [r3, #0]
 8012854:	2a00      	cmp	r2, #0
 8012856:	d0db      	beq.n	8012810 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8012858:	6883      	ldr	r3, [r0, #8]
 801285a:	42a3      	cmp	r3, r4
 801285c:	d103      	bne.n	8012866 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801285e:	4641      	mov	r1, r8
 8012860:	f7ff ff70 	bl	8012744 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012864:	4604      	mov	r4, r0
 8012866:	6863      	ldr	r3, [r4, #4]
 8012868:	4641      	mov	r1, r8
 801286a:	701f      	strb	r7, [r3, #0]
 801286c:	4628      	mov	r0, r5
 801286e:	f885 9000 	strb.w	r9, [r5]
 8012872:	f7ff ff52 	bl	801271a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8012876:	e7e9      	b.n	801284c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8012878:	4623      	mov	r3, r4
 801287a:	2201      	movs	r2, #1
 801287c:	701a      	strb	r2, [r3, #0]
 801287e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012882 <_ZSt17__throw_bad_allocv>:
 8012882:	b508      	push	{r3, lr}
 8012884:	f000 fbbc 	bl	8013000 <abort>

08012888 <_ZSt19__throw_logic_errorPKc>:
 8012888:	b508      	push	{r3, lr}
 801288a:	f000 fbb9 	bl	8013000 <abort>

0801288e <_ZSt20__throw_length_errorPKc>:
 801288e:	b508      	push	{r3, lr}
 8012890:	f000 fbb6 	bl	8013000 <abort>

08012894 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8012894:	b40f      	push	{r0, r1, r2, r3}
 8012896:	b580      	push	{r7, lr}
 8012898:	b084      	sub	sp, #16
 801289a:	af00      	add	r7, sp, #0
 801289c:	f107 0418 	add.w	r4, r7, #24
 80128a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80128a4:	607a      	str	r2, [r7, #4]
 80128a6:	4610      	mov	r0, r2
 80128a8:	f7ed fd02 	bl	80002b0 <strlen>
 80128ac:	f200 2307 	addw	r3, r0, #519	; 0x207
 80128b0:	f023 0307 	bic.w	r3, r3, #7
 80128b4:	ebad 0d03 	sub.w	sp, sp, r3
 80128b8:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	60fc      	str	r4, [r7, #12]
 80128c0:	4623      	mov	r3, r4
 80128c2:	4668      	mov	r0, sp
 80128c4:	f000 f854 	bl	8012970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80128c8:	f000 fb9a 	bl	8013000 <abort>

080128cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b09c      	sub	sp, #112	; 0x70
 80128d0:	4606      	mov	r6, r0
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	460c      	mov	r4, r1
 80128d6:	1ba4      	subs	r4, r4, r6
 80128d8:	490e      	ldr	r1, [pc, #56]	; (8012914 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80128da:	2269      	movs	r2, #105	; 0x69
 80128dc:	1d38      	adds	r0, r7, #4
 80128de:	f000 fbdf 	bl	80130a0 <memcpy>
 80128e2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80128e6:	f023 0307 	bic.w	r3, r3, #7
 80128ea:	ebad 0d03 	sub.w	sp, sp, r3
 80128ee:	466d      	mov	r5, sp
 80128f0:	2268      	movs	r2, #104	; 0x68
 80128f2:	1d39      	adds	r1, r7, #4
 80128f4:	4628      	mov	r0, r5
 80128f6:	f000 fbd3 	bl	80130a0 <memcpy>
 80128fa:	4622      	mov	r2, r4
 80128fc:	4631      	mov	r1, r6
 80128fe:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8012902:	442c      	add	r4, r5
 8012904:	f000 fbcc 	bl	80130a0 <memcpy>
 8012908:	2300      	movs	r3, #0
 801290a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801290e:	4628      	mov	r0, r5
 8012910:	f7ff ffba 	bl	8012888 <_ZSt19__throw_logic_errorPKc>
 8012914:	0802026c 	.word	0x0802026c

08012918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8012918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801291c:	af00      	add	r7, sp, #0
 801291e:	b084      	sub	sp, #16
 8012920:	466d      	mov	r5, sp
 8012922:	f105 040c 	add.w	r4, r5, #12
 8012926:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801296c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801292a:	4623      	mov	r3, r4
 801292c:	f04f 0c0a 	mov.w	ip, #10
 8012930:	fbb2 f6fc 	udiv	r6, r2, ip
 8012934:	fb0c 2e16 	mls	lr, ip, r6, r2
 8012938:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801293c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8012940:	4696      	mov	lr, r2
 8012942:	f1be 0f09 	cmp.w	lr, #9
 8012946:	4632      	mov	r2, r6
 8012948:	d8f2      	bhi.n	8012930 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801294a:	1ae4      	subs	r4, r4, r3
 801294c:	428c      	cmp	r4, r1
 801294e:	d809      	bhi.n	8012964 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8012950:	f1c4 010c 	rsb	r1, r4, #12
 8012954:	4622      	mov	r2, r4
 8012956:	4429      	add	r1, r5
 8012958:	f000 fba2 	bl	80130a0 <memcpy>
 801295c:	4620      	mov	r0, r4
 801295e:	46bd      	mov	sp, r7
 8012960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012964:	f04f 34ff 	mov.w	r4, #4294967295
 8012968:	e7f8      	b.n	801295c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801296a:	bf00      	nop
 801296c:	080202d5 	.word	0x080202d5

08012970 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8012970:	3901      	subs	r1, #1
 8012972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012976:	4607      	mov	r7, r0
 8012978:	4615      	mov	r5, r2
 801297a:	eb00 0801 	add.w	r8, r0, r1
 801297e:	4604      	mov	r4, r0
 8012980:	782a      	ldrb	r2, [r5, #0]
 8012982:	b362      	cbz	r2, 80129de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8012984:	4544      	cmp	r4, r8
 8012986:	d22e      	bcs.n	80129e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8012988:	2a25      	cmp	r2, #37	; 0x25
 801298a:	d107      	bne.n	801299c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801298c:	786a      	ldrb	r2, [r5, #1]
 801298e:	2a73      	cmp	r2, #115	; 0x73
 8012990:	d009      	beq.n	80129a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8012992:	2a7a      	cmp	r2, #122	; 0x7a
 8012994:	d012      	beq.n	80129bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8012996:	2a25      	cmp	r2, #37	; 0x25
 8012998:	d100      	bne.n	801299c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801299a:	3501      	adds	r5, #1
 801299c:	f815 2b01 	ldrb.w	r2, [r5], #1
 80129a0:	f804 2b01 	strb.w	r2, [r4], #1
 80129a4:	e7ec      	b.n	8012980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80129a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129aa:	3a01      	subs	r2, #1
 80129ac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80129b0:	b1e9      	cbz	r1, 80129ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 80129b2:	4544      	cmp	r4, r8
 80129b4:	d017      	beq.n	80129e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80129b6:	f804 1b01 	strb.w	r1, [r4], #1
 80129ba:	e7f7      	b.n	80129ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80129bc:	78aa      	ldrb	r2, [r5, #2]
 80129be:	2a75      	cmp	r2, #117	; 0x75
 80129c0:	d1ec      	bne.n	801299c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80129c2:	461e      	mov	r6, r3
 80129c4:	eba8 0104 	sub.w	r1, r8, r4
 80129c8:	f856 2b04 	ldr.w	r2, [r6], #4
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7ff ffa3 	bl	8012918 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80129d2:	2800      	cmp	r0, #0
 80129d4:	dd07      	ble.n	80129e6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80129d6:	4404      	add	r4, r0
 80129d8:	3503      	adds	r5, #3
 80129da:	4633      	mov	r3, r6
 80129dc:	e7d0      	b.n	8012980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80129de:	7022      	strb	r2, [r4, #0]
 80129e0:	1be0      	subs	r0, r4, r7
 80129e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e6:	4621      	mov	r1, r4
 80129e8:	4638      	mov	r0, r7
 80129ea:	f7ff ff6f 	bl	80128cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80129ee:	3502      	adds	r5, #2
 80129f0:	e7c6      	b.n	8012980 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

080129f2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80129f2:	b10a      	cbz	r2, 80129f8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80129f4:	f000 bb46 	b.w	8013084 <memcmp>
 80129f8:	4610      	mov	r0, r2
 80129fa:	4770      	bx	lr

080129fc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80129fc:	b10a      	cbz	r2, 8012a02 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80129fe:	f000 bb4f 	b.w	80130a0 <memcpy>
 8012a02:	4770      	bx	lr

08012a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8012a04:	6001      	str	r1, [r0, #0]
 8012a06:	4770      	bx	lr

08012a08 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8012a08:	6800      	ldr	r0, [r0, #0]
 8012a0a:	4770      	bx	lr

08012a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8012a0c:	3008      	adds	r0, #8
 8012a0e:	4770      	bx	lr

08012a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8012a10:	6081      	str	r1, [r0, #8]
 8012a12:	4770      	bx	lr

08012a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8012a14:	6803      	ldr	r3, [r0, #0]
 8012a16:	6041      	str	r1, [r0, #4]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	545a      	strb	r2, [r3, r1]
 8012a1c:	4770      	bx	lr
	...

08012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012a20:	b508      	push	{r3, lr}
 8012a22:	680b      	ldr	r3, [r1, #0]
 8012a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a28:	d302      	bcc.n	8012a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012a2a:	480d      	ldr	r0, [pc, #52]	; (8012a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012a2c:	f7ff ff2f 	bl	801288e <_ZSt20__throw_length_errorPKc>
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d90b      	bls.n	8012a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012a34:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012a38:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012a3c:	d206      	bcs.n	8012a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012a3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012a42:	bf2a      	itet	cs
 8012a44:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8012a48:	6008      	strcc	r0, [r1, #0]
 8012a4a:	600b      	strcs	r3, [r1, #0]
 8012a4c:	6808      	ldr	r0, [r1, #0]
 8012a4e:	3001      	adds	r0, #1
 8012a50:	d501      	bpl.n	8012a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012a52:	f7ff ff16 	bl	8012882 <_ZSt17__throw_bad_allocv>
 8012a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012a5a:	f7ff be4b 	b.w	80126f4 <_Znwj>
 8012a5e:	bf00      	nop
 8012a60:	080202e0 	.word	0x080202e0

08012a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012a64:	f850 3b08 	ldr.w	r3, [r0], #8
 8012a68:	4283      	cmp	r3, r0
 8012a6a:	d002      	beq.n	8012a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff be3f 	b.w	80126f0 <_ZdlPv>
 8012a72:	4770      	bx	lr

08012a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8012a74:	b508      	push	{r3, lr}
 8012a76:	4603      	mov	r3, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	4298      	cmp	r0, r3
 8012a7e:	4611      	mov	r1, r2
 8012a80:	d903      	bls.n	8012a8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8012a82:	4602      	mov	r2, r0
 8012a84:	4801      	ldr	r0, [pc, #4]	; (8012a8c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8012a86:	f7ff ff05 	bl	8012894 <_ZSt24__throw_out_of_range_fmtPKcz>
 8012a8a:	bd08      	pop	{r3, pc}
 8012a8c:	080202f8 	.word	0x080202f8

08012a90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012a90:	6840      	ldr	r0, [r0, #4]
 8012a92:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012a96:	3901      	subs	r1, #1
 8012a98:	1a09      	subs	r1, r1, r0
 8012a9a:	4291      	cmp	r1, r2
 8012a9c:	b508      	push	{r3, lr}
 8012a9e:	d202      	bcs.n	8012aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7ff fef4 	bl	801288e <_ZSt20__throw_length_errorPKc>
 8012aa6:	bd08      	pop	{r3, pc}

08012aa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8012aa8:	6803      	ldr	r3, [r0, #0]
 8012aaa:	428b      	cmp	r3, r1
 8012aac:	d806      	bhi.n	8012abc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8012aae:	6840      	ldr	r0, [r0, #4]
 8012ab0:	4418      	add	r0, r3
 8012ab2:	4281      	cmp	r1, r0
 8012ab4:	bf94      	ite	ls
 8012ab6:	2000      	movls	r0, #0
 8012ab8:	2001      	movhi	r0, #1
 8012aba:	4770      	bx	lr
 8012abc:	2001      	movs	r0, #1
 8012abe:	4770      	bx	lr

08012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8012ac0:	2a01      	cmp	r2, #1
 8012ac2:	b510      	push	{r4, lr}
 8012ac4:	d102      	bne.n	8012acc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8012ac6:	780a      	ldrb	r2, [r1, #0]
 8012ac8:	7002      	strb	r2, [r0, #0]
 8012aca:	bd10      	pop	{r4, pc}
 8012acc:	f7ff ff96 	bl	80129fc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8012ad0:	e7fb      	b.n	8012aca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012ad2:	2a01      	cmp	r2, #1
 8012ad4:	b430      	push	{r4, r5}
 8012ad6:	d103      	bne.n	8012ae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012ad8:	780b      	ldrb	r3, [r1, #0]
 8012ada:	7003      	strb	r3, [r0, #0]
 8012adc:	bc30      	pop	{r4, r5}
 8012ade:	4770      	bx	lr
 8012ae0:	2a00      	cmp	r2, #0
 8012ae2:	d0fb      	beq.n	8012adc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012ae4:	bc30      	pop	{r4, r5}
 8012ae6:	f000 bae9 	b.w	80130bc <memmove>

08012aea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8012aea:	b508      	push	{r3, lr}
 8012aec:	1a52      	subs	r2, r2, r1
 8012aee:	f7ff ffe7 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012af2:	bd08      	pop	{r3, pc}

08012af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8012af4:	b508      	push	{r3, lr}
 8012af6:	1a52      	subs	r2, r2, r1
 8012af8:	f7ff ffe2 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012afc:	bd08      	pop	{r3, pc}

08012afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8012afe:	4288      	cmp	r0, r1
 8012b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b02:	4604      	mov	r4, r0
 8012b04:	460e      	mov	r6, r1
 8012b06:	d01e      	beq.n	8012b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	684d      	ldr	r5, [r1, #4]
 8012b0c:	f853 2b08 	ldr.w	r2, [r3], #8
 8012b10:	429a      	cmp	r2, r3
 8012b12:	bf14      	ite	ne
 8012b14:	6882      	ldrne	r2, [r0, #8]
 8012b16:	220f      	moveq	r2, #15
 8012b18:	42aa      	cmp	r2, r5
 8012b1a:	d20a      	bcs.n	8012b32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8012b1c:	a901      	add	r1, sp, #4
 8012b1e:	9501      	str	r5, [sp, #4]
 8012b20:	f7ff ff7e 	bl	8012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012b24:	4607      	mov	r7, r0
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7ff ff9c 	bl	8012a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012b2c:	9b01      	ldr	r3, [sp, #4]
 8012b2e:	6027      	str	r7, [r4, #0]
 8012b30:	60a3      	str	r3, [r4, #8]
 8012b32:	b125      	cbz	r5, 8012b3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8012b34:	6831      	ldr	r1, [r6, #0]
 8012b36:	6820      	ldr	r0, [r4, #0]
 8012b38:	462a      	mov	r2, r5
 8012b3a:	f7ff ffc1 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012b3e:	6823      	ldr	r3, [r4, #0]
 8012b40:	6065      	str	r5, [r4, #4]
 8012b42:	2200      	movs	r2, #0
 8012b44:	555a      	strb	r2, [r3, r5]
 8012b46:	b003      	add	sp, #12
 8012b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8012b4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012b50:	461f      	mov	r7, r3
 8012b52:	6843      	ldr	r3, [r0, #4]
 8012b54:	eb01 0802 	add.w	r8, r1, r2
 8012b58:	1ab2      	subs	r2, r6, r2
 8012b5a:	441a      	add	r2, r3
 8012b5c:	eba3 0908 	sub.w	r9, r3, r8
 8012b60:	4603      	mov	r3, r0
 8012b62:	9201      	str	r2, [sp, #4]
 8012b64:	f853 2b08 	ldr.w	r2, [r3], #8
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	bf18      	it	ne
 8012b6c:	6882      	ldrne	r2, [r0, #8]
 8012b6e:	460d      	mov	r5, r1
 8012b70:	bf08      	it	eq
 8012b72:	220f      	moveq	r2, #15
 8012b74:	a901      	add	r1, sp, #4
 8012b76:	4604      	mov	r4, r0
 8012b78:	f7ff ff52 	bl	8012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012b7c:	4682      	mov	sl, r0
 8012b7e:	b11d      	cbz	r5, 8012b88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8012b80:	6821      	ldr	r1, [r4, #0]
 8012b82:	462a      	mov	r2, r5
 8012b84:	f7ff ff9c 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012b88:	b137      	cbz	r7, 8012b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8012b8a:	b12e      	cbz	r6, 8012b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8012b8c:	4632      	mov	r2, r6
 8012b8e:	4639      	mov	r1, r7
 8012b90:	eb0a 0005 	add.w	r0, sl, r5
 8012b94:	f7ff ff94 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012b98:	f1b9 0f00 	cmp.w	r9, #0
 8012b9c:	d007      	beq.n	8012bae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8012b9e:	6821      	ldr	r1, [r4, #0]
 8012ba0:	4435      	add	r5, r6
 8012ba2:	464a      	mov	r2, r9
 8012ba4:	4441      	add	r1, r8
 8012ba6:	eb0a 0005 	add.w	r0, sl, r5
 8012baa:	f7ff ff89 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f7ff ff58 	bl	8012a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012bb4:	9b01      	ldr	r3, [sp, #4]
 8012bb6:	f8c4 a000 	str.w	sl, [r4]
 8012bba:	60a3      	str	r3, [r4, #8]
 8012bbc:	b002      	add	sp, #8
 8012bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8012bc2:	f100 0208 	add.w	r2, r0, #8
 8012bc6:	6002      	str	r2, [r0, #0]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	6042      	str	r2, [r0, #4]
 8012bcc:	7202      	strb	r2, [r0, #8]
 8012bce:	4770      	bx	lr

08012bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	460e      	mov	r6, r1
 8012bd6:	3008      	adds	r0, #8
 8012bd8:	6020      	str	r0, [r4, #0]
 8012bda:	f856 3b08 	ldr.w	r3, [r6], #8
 8012bde:	429e      	cmp	r6, r3
 8012be0:	460d      	mov	r5, r1
 8012be2:	d10b      	bne.n	8012bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8012be4:	2210      	movs	r2, #16
 8012be6:	4631      	mov	r1, r6
 8012be8:	f7ff ff08 	bl	80129fc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8012bec:	686b      	ldr	r3, [r5, #4]
 8012bee:	6063      	str	r3, [r4, #4]
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	602e      	str	r6, [r5, #0]
 8012bf4:	606b      	str	r3, [r5, #4]
 8012bf6:	722b      	strb	r3, [r5, #8]
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	688b      	ldr	r3, [r1, #8]
 8012c00:	60a3      	str	r3, [r4, #8]
 8012c02:	e7f3      	b.n	8012bec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08012c04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012c04:	b510      	push	{r4, lr}
 8012c06:	4604      	mov	r4, r0
 8012c08:	f7ff ff2c 	bl	8012a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	bd10      	pop	{r4, pc}

08012c10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	f7ff ff73 	bl	8012afe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8012c18:	4620      	mov	r0, r4
 8012c1a:	bd10      	pop	{r4, pc}

08012c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8012c1c:	6840      	ldr	r0, [r0, #4]
 8012c1e:	4770      	bx	lr

08012c20 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8012c20:	6840      	ldr	r0, [r0, #4]
 8012c22:	4770      	bx	lr

08012c24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8012c24:	4603      	mov	r3, r0
 8012c26:	f853 2b08 	ldr.w	r2, [r3], #8
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	bf14      	ite	ne
 8012c2e:	6880      	ldrne	r0, [r0, #8]
 8012c30:	200f      	moveq	r0, #15
 8012c32:	4770      	bx	lr

08012c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8012c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c36:	4605      	mov	r5, r0
 8012c38:	6843      	ldr	r3, [r0, #4]
 8012c3a:	4299      	cmp	r1, r3
 8012c3c:	bf2c      	ite	cs
 8012c3e:	9101      	strcs	r1, [sp, #4]
 8012c40:	9301      	strcc	r3, [sp, #4]
 8012c42:	f855 1b08 	ldr.w	r1, [r5], #8
 8012c46:	428d      	cmp	r5, r1
 8012c48:	bf18      	it	ne
 8012c4a:	6882      	ldrne	r2, [r0, #8]
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	9801      	ldr	r0, [sp, #4]
 8012c50:	bf08      	it	eq
 8012c52:	220f      	moveq	r2, #15
 8012c54:	4290      	cmp	r0, r2
 8012c56:	d012      	beq.n	8012c7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8012c58:	d801      	bhi.n	8012c5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 8012c5a:	280f      	cmp	r0, #15
 8012c5c:	d911      	bls.n	8012c82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 8012c5e:	a901      	add	r1, sp, #4
 8012c60:	4620      	mov	r0, r4
 8012c62:	f7ff fedd 	bl	8012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012c66:	6862      	ldr	r2, [r4, #4]
 8012c68:	6821      	ldr	r1, [r4, #0]
 8012c6a:	3201      	adds	r2, #1
 8012c6c:	4605      	mov	r5, r0
 8012c6e:	f7ff ff27 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012c72:	4620      	mov	r0, r4
 8012c74:	f7ff fef6 	bl	8012a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012c78:	9b01      	ldr	r3, [sp, #4]
 8012c7a:	6025      	str	r5, [r4, #0]
 8012c7c:	60a3      	str	r3, [r4, #8]
 8012c7e:	b003      	add	sp, #12
 8012c80:	bd30      	pop	{r4, r5, pc}
 8012c82:	428d      	cmp	r5, r1
 8012c84:	d0fb      	beq.n	8012c7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f7ff ff19 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012c8e:	6820      	ldr	r0, [r4, #0]
 8012c90:	f7ff fd2e 	bl	80126f0 <_ZdlPv>
 8012c94:	6025      	str	r5, [r4, #0]
 8012c96:	e7f2      	b.n	8012c7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

08012c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8012c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c9e:	4614      	mov	r4, r2
 8012ca0:	4680      	mov	r8, r0
 8012ca2:	462a      	mov	r2, r5
 8012ca4:	4689      	mov	r9, r1
 8012ca6:	461f      	mov	r7, r3
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4b39      	ldr	r3, [pc, #228]	; (8012d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8012cac:	f7ff fef0 	bl	8012a90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012cb0:	4642      	mov	r2, r8
 8012cb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012cb6:	f852 6b08 	ldr.w	r6, [r2], #8
 8012cba:	4296      	cmp	r6, r2
 8012cbc:	bf18      	it	ne
 8012cbe:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8012cc2:	eba5 0b04 	sub.w	fp, r5, r4
 8012cc6:	eb03 0a0b 	add.w	sl, r3, fp
 8012cca:	bf08      	it	eq
 8012ccc:	220f      	moveq	r2, #15
 8012cce:	4552      	cmp	r2, sl
 8012cd0:	d351      	bcc.n	8012d76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8012cd2:	444e      	add	r6, r9
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	44a1      	add	r9, r4
 8012cd8:	4640      	mov	r0, r8
 8012cda:	eba3 0909 	sub.w	r9, r3, r9
 8012cde:	f7ff fee3 	bl	8012aa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8012ce2:	b180      	cbz	r0, 8012d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8012ce4:	f1b9 0f00 	cmp.w	r9, #0
 8012ce8:	d006      	beq.n	8012cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8012cea:	42ac      	cmp	r4, r5
 8012cec:	d004      	beq.n	8012cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8012cee:	464a      	mov	r2, r9
 8012cf0:	1931      	adds	r1, r6, r4
 8012cf2:	1970      	adds	r0, r6, r5
 8012cf4:	f7ff feed 	bl	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012cf8:	b315      	cbz	r5, 8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012cfa:	462a      	mov	r2, r5
 8012cfc:	4639      	mov	r1, r7
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f7ff fede 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012d04:	e01c      	b.n	8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012d06:	b135      	cbz	r5, 8012d16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8012d08:	42ac      	cmp	r4, r5
 8012d0a:	d33c      	bcc.n	8012d86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8012d0c:	462a      	mov	r2, r5
 8012d0e:	4639      	mov	r1, r7
 8012d10:	4630      	mov	r0, r6
 8012d12:	f7ff fede 	bl	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012d16:	f1b9 0f00 	cmp.w	r9, #0
 8012d1a:	d011      	beq.n	8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012d1c:	42ac      	cmp	r4, r5
 8012d1e:	d00f      	beq.n	8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012d20:	464a      	mov	r2, r9
 8012d22:	1931      	adds	r1, r6, r4
 8012d24:	1970      	adds	r0, r6, r5
 8012d26:	f7ff fed4 	bl	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012d2a:	42ac      	cmp	r4, r5
 8012d2c:	d208      	bcs.n	8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012d2e:	4434      	add	r4, r6
 8012d30:	197b      	adds	r3, r7, r5
 8012d32:	429c      	cmp	r4, r3
 8012d34:	d30f      	bcc.n	8012d56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8012d36:	462a      	mov	r2, r5
 8012d38:	4639      	mov	r1, r7
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	f7ff fec9 	bl	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012d40:	f8d8 3000 	ldr.w	r3, [r8]
 8012d44:	f8c8 a004 	str.w	sl, [r8, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	f803 200a 	strb.w	r2, [r3, sl]
 8012d50:	b003      	add	sp, #12
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	42bc      	cmp	r4, r7
 8012d58:	d803      	bhi.n	8012d62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	eb07 010b 	add.w	r1, r7, fp
 8012d60:	e7cd      	b.n	8012cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8012d62:	1be4      	subs	r4, r4, r7
 8012d64:	4622      	mov	r2, r4
 8012d66:	4639      	mov	r1, r7
 8012d68:	4630      	mov	r0, r6
 8012d6a:	f7ff feb2 	bl	8012ad2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8012d6e:	1b2a      	subs	r2, r5, r4
 8012d70:	1971      	adds	r1, r6, r5
 8012d72:	1930      	adds	r0, r6, r4
 8012d74:	e7c4      	b.n	8012d00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8012d76:	9500      	str	r5, [sp, #0]
 8012d78:	463b      	mov	r3, r7
 8012d7a:	4622      	mov	r2, r4
 8012d7c:	4649      	mov	r1, r9
 8012d7e:	4640      	mov	r0, r8
 8012d80:	f7ff fee3 	bl	8012b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8012d84:	e7dc      	b.n	8012d40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8012d86:	f1b9 0f00 	cmp.w	r9, #0
 8012d8a:	d0d0      	beq.n	8012d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8012d8c:	e7c8      	b.n	8012d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8012d8e:	bf00      	nop
 8012d90:	08020345 	.word	0x08020345

08012d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8012d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012d96:	4604      	mov	r4, r0
 8012d98:	4615      	mov	r5, r2
 8012d9a:	4a09      	ldr	r2, [pc, #36]	; (8012dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 8012d9c:	9303      	str	r3, [sp, #12]
 8012d9e:	460e      	mov	r6, r1
 8012da0:	f7ff fe68 	bl	8012a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8012da4:	6862      	ldr	r2, [r4, #4]
 8012da6:	9b03      	ldr	r3, [sp, #12]
 8012da8:	1b92      	subs	r2, r2, r6
 8012daa:	4601      	mov	r1, r0
 8012dac:	42aa      	cmp	r2, r5
 8012dae:	9808      	ldr	r0, [sp, #32]
 8012db0:	9000      	str	r0, [sp, #0]
 8012db2:	bf28      	it	cs
 8012db4:	462a      	movcs	r2, r5
 8012db6:	4620      	mov	r0, r4
 8012db8:	f7ff ff6e 	bl	8012c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8012dbc:	b004      	add	sp, #16
 8012dbe:	bd70      	pop	{r4, r5, r6, pc}
 8012dc0:	0802032f 	.word	0x0802032f

08012dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8012dc4:	b507      	push	{r0, r1, r2, lr}
 8012dc6:	6853      	ldr	r3, [r2, #4]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	6813      	ldr	r3, [r2, #0]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f7ff ffe1 	bl	8012d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8012dd2:	b003      	add	sp, #12
 8012dd4:	f85d fb04 	ldr.w	pc, [sp], #4

08012dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8012dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4610      	mov	r0, r2
 8012dde:	9103      	str	r1, [sp, #12]
 8012de0:	9202      	str	r2, [sp, #8]
 8012de2:	f7ed fa65 	bl	80002b0 <strlen>
 8012de6:	9b02      	ldr	r3, [sp, #8]
 8012de8:	9000      	str	r0, [sp, #0]
 8012dea:	9903      	ldr	r1, [sp, #12]
 8012dec:	2200      	movs	r2, #0
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7ff ffd0 	bl	8012d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8012df4:	b004      	add	sp, #16
 8012df6:	bd10      	pop	{r4, pc}

08012df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8012df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4623      	mov	r3, r4
 8012dfe:	6840      	ldr	r0, [r0, #4]
 8012e00:	f853 6b08 	ldr.w	r6, [r3], #8
 8012e04:	429e      	cmp	r6, r3
 8012e06:	bf18      	it	ne
 8012e08:	68a3      	ldrne	r3, [r4, #8]
 8012e0a:	eb00 0502 	add.w	r5, r0, r2
 8012e0e:	bf08      	it	eq
 8012e10:	230f      	moveq	r3, #15
 8012e12:	429d      	cmp	r5, r3
 8012e14:	d80a      	bhi.n	8012e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8012e16:	b112      	cbz	r2, 8012e1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8012e18:	4430      	add	r0, r6
 8012e1a:	f7ff fe51 	bl	8012ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	6065      	str	r5, [r4, #4]
 8012e22:	2200      	movs	r2, #0
 8012e24:	4620      	mov	r0, r4
 8012e26:	555a      	strb	r2, [r3, r5]
 8012e28:	b002      	add	sp, #8
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	9200      	str	r2, [sp, #0]
 8012e2e:	460b      	mov	r3, r1
 8012e30:	2200      	movs	r2, #0
 8012e32:	4601      	mov	r1, r0
 8012e34:	4620      	mov	r0, r4
 8012e36:	f7ff fe88 	bl	8012b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8012e3a:	e7f0      	b.n	8012e1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08012e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8012e3c:	b508      	push	{r3, lr}
 8012e3e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8012e42:	f7ff ffd9 	bl	8012df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8012e46:	bd08      	pop	{r3, pc}

08012e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8012e48:	b508      	push	{r3, lr}
 8012e4a:	f7ff fff7 	bl	8012e3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8012e4e:	bd08      	pop	{r3, pc}

08012e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	4b06      	ldr	r3, [pc, #24]	; (8012e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8012e54:	4604      	mov	r4, r0
 8012e56:	460d      	mov	r5, r1
 8012e58:	4616      	mov	r6, r2
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	f7ff fe18 	bl	8012a90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012e60:	4632      	mov	r2, r6
 8012e62:	4629      	mov	r1, r5
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7ff ffc7 	bl	8012df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8012e6a:	bd70      	pop	{r4, r5, r6, pc}
 8012e6c:	0802035e 	.word	0x0802035e

08012e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8012e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e72:	4604      	mov	r4, r0
 8012e74:	4608      	mov	r0, r1
 8012e76:	460d      	mov	r5, r1
 8012e78:	f7ed fa1a 	bl	80002b0 <strlen>
 8012e7c:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8012e7e:	9001      	str	r0, [sp, #4]
 8012e80:	4602      	mov	r2, r0
 8012e82:	2100      	movs	r1, #0
 8012e84:	4620      	mov	r0, r4
 8012e86:	f7ff fe03 	bl	8012a90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8012e8a:	9a01      	ldr	r2, [sp, #4]
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7ff ffb2 	bl	8012df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8012e94:	b003      	add	sp, #12
 8012e96:	bd30      	pop	{r4, r5, pc}
 8012e98:	0802035e 	.word	0x0802035e

08012e9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8012e9c:	b508      	push	{r3, lr}
 8012e9e:	f7ff ffe7 	bl	8012e70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8012ea2:	bd08      	pop	{r3, pc}

08012ea4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8012ea4:	6800      	ldr	r0, [r0, #0]
 8012ea6:	4770      	bx	lr

08012ea8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8012ea8:	b538      	push	{r3, r4, r5, lr}
 8012eaa:	6845      	ldr	r5, [r0, #4]
 8012eac:	684c      	ldr	r4, [r1, #4]
 8012eae:	6800      	ldr	r0, [r0, #0]
 8012eb0:	6809      	ldr	r1, [r1, #0]
 8012eb2:	42a5      	cmp	r5, r4
 8012eb4:	462a      	mov	r2, r5
 8012eb6:	bf28      	it	cs
 8012eb8:	4622      	movcs	r2, r4
 8012eba:	f7ff fd9a 	bl	80129f2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8012ebe:	b900      	cbnz	r0, 8012ec2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8012ec0:	1b28      	subs	r0, r5, r4
 8012ec2:	bd38      	pop	{r3, r4, r5, pc}

08012ec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8012ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ec6:	6846      	ldr	r6, [r0, #4]
 8012ec8:	9101      	str	r1, [sp, #4]
 8012eca:	4605      	mov	r5, r0
 8012ecc:	4608      	mov	r0, r1
 8012ece:	f7ed f9ef 	bl	80002b0 <strlen>
 8012ed2:	4286      	cmp	r6, r0
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	4632      	mov	r2, r6
 8012ed8:	9901      	ldr	r1, [sp, #4]
 8012eda:	bf28      	it	cs
 8012edc:	4602      	movcs	r2, r0
 8012ede:	6828      	ldr	r0, [r5, #0]
 8012ee0:	f7ff fd87 	bl	80129f2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8012ee4:	b900      	cbnz	r0, 8012ee8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8012ee6:	1b30      	subs	r0, r6, r4
 8012ee8:	b002      	add	sp, #8
 8012eea:	bd70      	pop	{r4, r5, r6, pc}

08012eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8012eec:	6001      	str	r1, [r0, #0]
 8012eee:	4770      	bx	lr

08012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8012ef0:	b538      	push	{r3, r4, r5, lr}
 8012ef2:	f100 0308 	add.w	r3, r0, #8
 8012ef6:	6003      	str	r3, [r0, #0]
 8012ef8:	e9d1 5200 	ldrd	r5, r2, [r1]
 8012efc:	4604      	mov	r4, r0
 8012efe:	f04f 0300 	mov.w	r3, #0
 8012f02:	442a      	add	r2, r5
 8012f04:	4629      	mov	r1, r5
 8012f06:	f7ef f803 	bl	8001f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8012f10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f12:	4604      	mov	r4, r0
 8012f14:	4616      	mov	r6, r2
 8012f16:	460d      	mov	r5, r1
 8012f18:	b919      	cbnz	r1, 8012f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8012f1a:	b112      	cbz	r2, 8012f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8012f1c:	480d      	ldr	r0, [pc, #52]	; (8012f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8012f1e:	f7ff fcb3 	bl	8012888 <_ZSt19__throw_logic_errorPKc>
 8012f22:	1b73      	subs	r3, r6, r5
 8012f24:	2b0f      	cmp	r3, #15
 8012f26:	9301      	str	r3, [sp, #4]
 8012f28:	d907      	bls.n	8012f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	a901      	add	r1, sp, #4
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f7ff fd76 	bl	8012a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012f34:	9b01      	ldr	r3, [sp, #4]
 8012f36:	6020      	str	r0, [r4, #0]
 8012f38:	60a3      	str	r3, [r4, #8]
 8012f3a:	4632      	mov	r2, r6
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	6820      	ldr	r0, [r4, #0]
 8012f40:	f7ff fdd8 	bl	8012af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8012f44:	9b01      	ldr	r3, [sp, #4]
 8012f46:	6822      	ldr	r2, [r4, #0]
 8012f48:	6063      	str	r3, [r4, #4]
 8012f4a:	2100      	movs	r1, #0
 8012f4c:	54d1      	strb	r1, [r2, r3]
 8012f4e:	b002      	add	sp, #8
 8012f50:	bd70      	pop	{r4, r5, r6, pc}
 8012f52:	bf00      	nop
 8012f54:	08020373 	.word	0x08020373

08012f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	f100 0308 	add.w	r3, r0, #8
 8012f5e:	4604      	mov	r4, r0
 8012f60:	6003      	str	r3, [r0, #0]
 8012f62:	460d      	mov	r5, r1
 8012f64:	b159      	cbz	r1, 8012f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8012f66:	4608      	mov	r0, r1
 8012f68:	f7ed f9a2 	bl	80002b0 <strlen>
 8012f6c:	182a      	adds	r2, r5, r0
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f04f 0300 	mov.w	r3, #0
 8012f74:	4629      	mov	r1, r5
 8012f76:	f7ff ffcb 	bl	8012f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	bd38      	pop	{r3, r4, r5, pc}
 8012f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f82:	e7f4      	b.n	8012f6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08012f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f88:	460d      	mov	r5, r1
 8012f8a:	4617      	mov	r7, r2
 8012f8c:	4698      	mov	r8, r3
 8012f8e:	f100 0308 	add.w	r3, r0, #8
 8012f92:	4604      	mov	r4, r0
 8012f94:	6003      	str	r3, [r0, #0]
 8012f96:	4639      	mov	r1, r7
 8012f98:	4a0a      	ldr	r2, [pc, #40]	; (8012fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f7ff fd6a 	bl	8012a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8012fa0:	682e      	ldr	r6, [r5, #0]
 8012fa2:	686a      	ldr	r2, [r5, #4]
 8012fa4:	1831      	adds	r1, r6, r0
 8012fa6:	1bd2      	subs	r2, r2, r7
 8012fa8:	4620      	mov	r0, r4
 8012faa:	f04f 0300 	mov.w	r3, #0
 8012fae:	4542      	cmp	r2, r8
 8012fb0:	bf94      	ite	ls
 8012fb2:	188a      	addls	r2, r1, r2
 8012fb4:	eb01 0208 	addhi.w	r2, r1, r8
 8012fb8:	f7ff ffaa 	bl	8012f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc2:	bf00      	nop
 8012fc4:	0802039d 	.word	0x0802039d

08012fc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8012fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fca:	460d      	mov	r5, r1
 8012fcc:	4604      	mov	r4, r0
 8012fce:	4611      	mov	r1, r2
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	4a06      	ldr	r2, [pc, #24]	; (8012fec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8012fd4:	9301      	str	r3, [sp, #4]
 8012fd6:	f7ff fd4d 	bl	8012a74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	4602      	mov	r2, r0
 8012fde:	4629      	mov	r1, r5
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff ffcf 	bl	8012f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	b003      	add	sp, #12
 8012fea:	bd30      	pop	{r4, r5, pc}
 8012fec:	080203b8 	.word	0x080203b8

08012ff0 <_ZSt15get_new_handlerv>:
 8012ff0:	4b02      	ldr	r3, [pc, #8]	; (8012ffc <_ZSt15get_new_handlerv+0xc>)
 8012ff2:	6818      	ldr	r0, [r3, #0]
 8012ff4:	f3bf 8f5b 	dmb	ish
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	20000c9c 	.word	0x20000c9c

08013000 <abort>:
 8013000:	b508      	push	{r3, lr}
 8013002:	2006      	movs	r0, #6
 8013004:	f000 fe56 	bl	8013cb4 <raise>
 8013008:	2001      	movs	r0, #1
 801300a:	f7f4 fe65 	bl	8007cd8 <_exit>
	...

08013010 <__errno>:
 8013010:	4b01      	ldr	r3, [pc, #4]	; (8013018 <__errno+0x8>)
 8013012:	6818      	ldr	r0, [r3, #0]
 8013014:	4770      	bx	lr
 8013016:	bf00      	nop
 8013018:	20000190 	.word	0x20000190

0801301c <__libc_init_array>:
 801301c:	b570      	push	{r4, r5, r6, lr}
 801301e:	4d0d      	ldr	r5, [pc, #52]	; (8013054 <__libc_init_array+0x38>)
 8013020:	4c0d      	ldr	r4, [pc, #52]	; (8013058 <__libc_init_array+0x3c>)
 8013022:	1b64      	subs	r4, r4, r5
 8013024:	10a4      	asrs	r4, r4, #2
 8013026:	2600      	movs	r6, #0
 8013028:	42a6      	cmp	r6, r4
 801302a:	d109      	bne.n	8013040 <__libc_init_array+0x24>
 801302c:	4d0b      	ldr	r5, [pc, #44]	; (801305c <__libc_init_array+0x40>)
 801302e:	4c0c      	ldr	r4, [pc, #48]	; (8013060 <__libc_init_array+0x44>)
 8013030:	f002 ff6a 	bl	8015f08 <_init>
 8013034:	1b64      	subs	r4, r4, r5
 8013036:	10a4      	asrs	r4, r4, #2
 8013038:	2600      	movs	r6, #0
 801303a:	42a6      	cmp	r6, r4
 801303c:	d105      	bne.n	801304a <__libc_init_array+0x2e>
 801303e:	bd70      	pop	{r4, r5, r6, pc}
 8013040:	f855 3b04 	ldr.w	r3, [r5], #4
 8013044:	4798      	blx	r3
 8013046:	3601      	adds	r6, #1
 8013048:	e7ee      	b.n	8013028 <__libc_init_array+0xc>
 801304a:	f855 3b04 	ldr.w	r3, [r5], #4
 801304e:	4798      	blx	r3
 8013050:	3601      	adds	r6, #1
 8013052:	e7f2      	b.n	801303a <__libc_init_array+0x1e>
 8013054:	080207bc 	.word	0x080207bc
 8013058:	080207bc 	.word	0x080207bc
 801305c:	080207bc 	.word	0x080207bc
 8013060:	080207e8 	.word	0x080207e8

08013064 <malloc>:
 8013064:	4b02      	ldr	r3, [pc, #8]	; (8013070 <malloc+0xc>)
 8013066:	4601      	mov	r1, r0
 8013068:	6818      	ldr	r0, [r3, #0]
 801306a:	f000 b899 	b.w	80131a0 <_malloc_r>
 801306e:	bf00      	nop
 8013070:	20000190 	.word	0x20000190

08013074 <free>:
 8013074:	4b02      	ldr	r3, [pc, #8]	; (8013080 <free+0xc>)
 8013076:	4601      	mov	r1, r0
 8013078:	6818      	ldr	r0, [r3, #0]
 801307a:	f000 b841 	b.w	8013100 <_free_r>
 801307e:	bf00      	nop
 8013080:	20000190 	.word	0x20000190

08013084 <memcmp>:
 8013084:	b530      	push	{r4, r5, lr}
 8013086:	3901      	subs	r1, #1
 8013088:	2400      	movs	r4, #0
 801308a:	42a2      	cmp	r2, r4
 801308c:	d101      	bne.n	8013092 <memcmp+0xe>
 801308e:	2000      	movs	r0, #0
 8013090:	e005      	b.n	801309e <memcmp+0x1a>
 8013092:	5d03      	ldrb	r3, [r0, r4]
 8013094:	3401      	adds	r4, #1
 8013096:	5d0d      	ldrb	r5, [r1, r4]
 8013098:	42ab      	cmp	r3, r5
 801309a:	d0f6      	beq.n	801308a <memcmp+0x6>
 801309c:	1b58      	subs	r0, r3, r5
 801309e:	bd30      	pop	{r4, r5, pc}

080130a0 <memcpy>:
 80130a0:	440a      	add	r2, r1
 80130a2:	4291      	cmp	r1, r2
 80130a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80130a8:	d100      	bne.n	80130ac <memcpy+0xc>
 80130aa:	4770      	bx	lr
 80130ac:	b510      	push	{r4, lr}
 80130ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130b6:	4291      	cmp	r1, r2
 80130b8:	d1f9      	bne.n	80130ae <memcpy+0xe>
 80130ba:	bd10      	pop	{r4, pc}

080130bc <memmove>:
 80130bc:	4288      	cmp	r0, r1
 80130be:	b510      	push	{r4, lr}
 80130c0:	eb01 0402 	add.w	r4, r1, r2
 80130c4:	d902      	bls.n	80130cc <memmove+0x10>
 80130c6:	4284      	cmp	r4, r0
 80130c8:	4623      	mov	r3, r4
 80130ca:	d807      	bhi.n	80130dc <memmove+0x20>
 80130cc:	1e43      	subs	r3, r0, #1
 80130ce:	42a1      	cmp	r1, r4
 80130d0:	d008      	beq.n	80130e4 <memmove+0x28>
 80130d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130da:	e7f8      	b.n	80130ce <memmove+0x12>
 80130dc:	4402      	add	r2, r0
 80130de:	4601      	mov	r1, r0
 80130e0:	428a      	cmp	r2, r1
 80130e2:	d100      	bne.n	80130e6 <memmove+0x2a>
 80130e4:	bd10      	pop	{r4, pc}
 80130e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130ee:	e7f7      	b.n	80130e0 <memmove+0x24>

080130f0 <memset>:
 80130f0:	4402      	add	r2, r0
 80130f2:	4603      	mov	r3, r0
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d100      	bne.n	80130fa <memset+0xa>
 80130f8:	4770      	bx	lr
 80130fa:	f803 1b01 	strb.w	r1, [r3], #1
 80130fe:	e7f9      	b.n	80130f4 <memset+0x4>

08013100 <_free_r>:
 8013100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013102:	2900      	cmp	r1, #0
 8013104:	d048      	beq.n	8013198 <_free_r+0x98>
 8013106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801310a:	9001      	str	r0, [sp, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	f1a1 0404 	sub.w	r4, r1, #4
 8013112:	bfb8      	it	lt
 8013114:	18e4      	addlt	r4, r4, r3
 8013116:	f001 ff7f 	bl	8015018 <__malloc_lock>
 801311a:	4a20      	ldr	r2, [pc, #128]	; (801319c <_free_r+0x9c>)
 801311c:	9801      	ldr	r0, [sp, #4]
 801311e:	6813      	ldr	r3, [r2, #0]
 8013120:	4615      	mov	r5, r2
 8013122:	b933      	cbnz	r3, 8013132 <_free_r+0x32>
 8013124:	6063      	str	r3, [r4, #4]
 8013126:	6014      	str	r4, [r2, #0]
 8013128:	b003      	add	sp, #12
 801312a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801312e:	f001 bf79 	b.w	8015024 <__malloc_unlock>
 8013132:	42a3      	cmp	r3, r4
 8013134:	d90b      	bls.n	801314e <_free_r+0x4e>
 8013136:	6821      	ldr	r1, [r4, #0]
 8013138:	1862      	adds	r2, r4, r1
 801313a:	4293      	cmp	r3, r2
 801313c:	bf04      	itt	eq
 801313e:	681a      	ldreq	r2, [r3, #0]
 8013140:	685b      	ldreq	r3, [r3, #4]
 8013142:	6063      	str	r3, [r4, #4]
 8013144:	bf04      	itt	eq
 8013146:	1852      	addeq	r2, r2, r1
 8013148:	6022      	streq	r2, [r4, #0]
 801314a:	602c      	str	r4, [r5, #0]
 801314c:	e7ec      	b.n	8013128 <_free_r+0x28>
 801314e:	461a      	mov	r2, r3
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	b10b      	cbz	r3, 8013158 <_free_r+0x58>
 8013154:	42a3      	cmp	r3, r4
 8013156:	d9fa      	bls.n	801314e <_free_r+0x4e>
 8013158:	6811      	ldr	r1, [r2, #0]
 801315a:	1855      	adds	r5, r2, r1
 801315c:	42a5      	cmp	r5, r4
 801315e:	d10b      	bne.n	8013178 <_free_r+0x78>
 8013160:	6824      	ldr	r4, [r4, #0]
 8013162:	4421      	add	r1, r4
 8013164:	1854      	adds	r4, r2, r1
 8013166:	42a3      	cmp	r3, r4
 8013168:	6011      	str	r1, [r2, #0]
 801316a:	d1dd      	bne.n	8013128 <_free_r+0x28>
 801316c:	681c      	ldr	r4, [r3, #0]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	6053      	str	r3, [r2, #4]
 8013172:	4421      	add	r1, r4
 8013174:	6011      	str	r1, [r2, #0]
 8013176:	e7d7      	b.n	8013128 <_free_r+0x28>
 8013178:	d902      	bls.n	8013180 <_free_r+0x80>
 801317a:	230c      	movs	r3, #12
 801317c:	6003      	str	r3, [r0, #0]
 801317e:	e7d3      	b.n	8013128 <_free_r+0x28>
 8013180:	6825      	ldr	r5, [r4, #0]
 8013182:	1961      	adds	r1, r4, r5
 8013184:	428b      	cmp	r3, r1
 8013186:	bf04      	itt	eq
 8013188:	6819      	ldreq	r1, [r3, #0]
 801318a:	685b      	ldreq	r3, [r3, #4]
 801318c:	6063      	str	r3, [r4, #4]
 801318e:	bf04      	itt	eq
 8013190:	1949      	addeq	r1, r1, r5
 8013192:	6021      	streq	r1, [r4, #0]
 8013194:	6054      	str	r4, [r2, #4]
 8013196:	e7c7      	b.n	8013128 <_free_r+0x28>
 8013198:	b003      	add	sp, #12
 801319a:	bd30      	pop	{r4, r5, pc}
 801319c:	20000ca0 	.word	0x20000ca0

080131a0 <_malloc_r>:
 80131a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a2:	1ccd      	adds	r5, r1, #3
 80131a4:	f025 0503 	bic.w	r5, r5, #3
 80131a8:	3508      	adds	r5, #8
 80131aa:	2d0c      	cmp	r5, #12
 80131ac:	bf38      	it	cc
 80131ae:	250c      	movcc	r5, #12
 80131b0:	2d00      	cmp	r5, #0
 80131b2:	4606      	mov	r6, r0
 80131b4:	db01      	blt.n	80131ba <_malloc_r+0x1a>
 80131b6:	42a9      	cmp	r1, r5
 80131b8:	d903      	bls.n	80131c2 <_malloc_r+0x22>
 80131ba:	230c      	movs	r3, #12
 80131bc:	6033      	str	r3, [r6, #0]
 80131be:	2000      	movs	r0, #0
 80131c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c2:	f001 ff29 	bl	8015018 <__malloc_lock>
 80131c6:	4921      	ldr	r1, [pc, #132]	; (801324c <_malloc_r+0xac>)
 80131c8:	680a      	ldr	r2, [r1, #0]
 80131ca:	4614      	mov	r4, r2
 80131cc:	b99c      	cbnz	r4, 80131f6 <_malloc_r+0x56>
 80131ce:	4f20      	ldr	r7, [pc, #128]	; (8013250 <_malloc_r+0xb0>)
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	b923      	cbnz	r3, 80131de <_malloc_r+0x3e>
 80131d4:	4621      	mov	r1, r4
 80131d6:	4630      	mov	r0, r6
 80131d8:	f000 fd34 	bl	8013c44 <_sbrk_r>
 80131dc:	6038      	str	r0, [r7, #0]
 80131de:	4629      	mov	r1, r5
 80131e0:	4630      	mov	r0, r6
 80131e2:	f000 fd2f 	bl	8013c44 <_sbrk_r>
 80131e6:	1c43      	adds	r3, r0, #1
 80131e8:	d123      	bne.n	8013232 <_malloc_r+0x92>
 80131ea:	230c      	movs	r3, #12
 80131ec:	6033      	str	r3, [r6, #0]
 80131ee:	4630      	mov	r0, r6
 80131f0:	f001 ff18 	bl	8015024 <__malloc_unlock>
 80131f4:	e7e3      	b.n	80131be <_malloc_r+0x1e>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	1b5b      	subs	r3, r3, r5
 80131fa:	d417      	bmi.n	801322c <_malloc_r+0x8c>
 80131fc:	2b0b      	cmp	r3, #11
 80131fe:	d903      	bls.n	8013208 <_malloc_r+0x68>
 8013200:	6023      	str	r3, [r4, #0]
 8013202:	441c      	add	r4, r3
 8013204:	6025      	str	r5, [r4, #0]
 8013206:	e004      	b.n	8013212 <_malloc_r+0x72>
 8013208:	6863      	ldr	r3, [r4, #4]
 801320a:	42a2      	cmp	r2, r4
 801320c:	bf0c      	ite	eq
 801320e:	600b      	streq	r3, [r1, #0]
 8013210:	6053      	strne	r3, [r2, #4]
 8013212:	4630      	mov	r0, r6
 8013214:	f001 ff06 	bl	8015024 <__malloc_unlock>
 8013218:	f104 000b 	add.w	r0, r4, #11
 801321c:	1d23      	adds	r3, r4, #4
 801321e:	f020 0007 	bic.w	r0, r0, #7
 8013222:	1ac2      	subs	r2, r0, r3
 8013224:	d0cc      	beq.n	80131c0 <_malloc_r+0x20>
 8013226:	1a1b      	subs	r3, r3, r0
 8013228:	50a3      	str	r3, [r4, r2]
 801322a:	e7c9      	b.n	80131c0 <_malloc_r+0x20>
 801322c:	4622      	mov	r2, r4
 801322e:	6864      	ldr	r4, [r4, #4]
 8013230:	e7cc      	b.n	80131cc <_malloc_r+0x2c>
 8013232:	1cc4      	adds	r4, r0, #3
 8013234:	f024 0403 	bic.w	r4, r4, #3
 8013238:	42a0      	cmp	r0, r4
 801323a:	d0e3      	beq.n	8013204 <_malloc_r+0x64>
 801323c:	1a21      	subs	r1, r4, r0
 801323e:	4630      	mov	r0, r6
 8013240:	f000 fd00 	bl	8013c44 <_sbrk_r>
 8013244:	3001      	adds	r0, #1
 8013246:	d1dd      	bne.n	8013204 <_malloc_r+0x64>
 8013248:	e7cf      	b.n	80131ea <_malloc_r+0x4a>
 801324a:	bf00      	nop
 801324c:	20000ca0 	.word	0x20000ca0
 8013250:	20000ca4 	.word	0x20000ca4

08013254 <__cvt>:
 8013254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013258:	ec55 4b10 	vmov	r4, r5, d0
 801325c:	2d00      	cmp	r5, #0
 801325e:	460e      	mov	r6, r1
 8013260:	4619      	mov	r1, r3
 8013262:	462b      	mov	r3, r5
 8013264:	bfbb      	ittet	lt
 8013266:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801326a:	461d      	movlt	r5, r3
 801326c:	2300      	movge	r3, #0
 801326e:	232d      	movlt	r3, #45	; 0x2d
 8013270:	700b      	strb	r3, [r1, #0]
 8013272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013278:	4691      	mov	r9, r2
 801327a:	f023 0820 	bic.w	r8, r3, #32
 801327e:	bfbc      	itt	lt
 8013280:	4622      	movlt	r2, r4
 8013282:	4614      	movlt	r4, r2
 8013284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013288:	d005      	beq.n	8013296 <__cvt+0x42>
 801328a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801328e:	d100      	bne.n	8013292 <__cvt+0x3e>
 8013290:	3601      	adds	r6, #1
 8013292:	2102      	movs	r1, #2
 8013294:	e000      	b.n	8013298 <__cvt+0x44>
 8013296:	2103      	movs	r1, #3
 8013298:	ab03      	add	r3, sp, #12
 801329a:	9301      	str	r3, [sp, #4]
 801329c:	ab02      	add	r3, sp, #8
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	ec45 4b10 	vmov	d0, r4, r5
 80132a4:	4653      	mov	r3, sl
 80132a6:	4632      	mov	r2, r6
 80132a8:	f000 fea6 	bl	8013ff8 <_dtoa_r>
 80132ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80132b0:	4607      	mov	r7, r0
 80132b2:	d102      	bne.n	80132ba <__cvt+0x66>
 80132b4:	f019 0f01 	tst.w	r9, #1
 80132b8:	d022      	beq.n	8013300 <__cvt+0xac>
 80132ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132be:	eb07 0906 	add.w	r9, r7, r6
 80132c2:	d110      	bne.n	80132e6 <__cvt+0x92>
 80132c4:	783b      	ldrb	r3, [r7, #0]
 80132c6:	2b30      	cmp	r3, #48	; 0x30
 80132c8:	d10a      	bne.n	80132e0 <__cvt+0x8c>
 80132ca:	2200      	movs	r2, #0
 80132cc:	2300      	movs	r3, #0
 80132ce:	4620      	mov	r0, r4
 80132d0:	4629      	mov	r1, r5
 80132d2:	f7ed fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80132d6:	b918      	cbnz	r0, 80132e0 <__cvt+0x8c>
 80132d8:	f1c6 0601 	rsb	r6, r6, #1
 80132dc:	f8ca 6000 	str.w	r6, [sl]
 80132e0:	f8da 3000 	ldr.w	r3, [sl]
 80132e4:	4499      	add	r9, r3
 80132e6:	2200      	movs	r2, #0
 80132e8:	2300      	movs	r3, #0
 80132ea:	4620      	mov	r0, r4
 80132ec:	4629      	mov	r1, r5
 80132ee:	f7ed fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 80132f2:	b108      	cbz	r0, 80132f8 <__cvt+0xa4>
 80132f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80132f8:	2230      	movs	r2, #48	; 0x30
 80132fa:	9b03      	ldr	r3, [sp, #12]
 80132fc:	454b      	cmp	r3, r9
 80132fe:	d307      	bcc.n	8013310 <__cvt+0xbc>
 8013300:	9b03      	ldr	r3, [sp, #12]
 8013302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013304:	1bdb      	subs	r3, r3, r7
 8013306:	4638      	mov	r0, r7
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	b004      	add	sp, #16
 801330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013310:	1c59      	adds	r1, r3, #1
 8013312:	9103      	str	r1, [sp, #12]
 8013314:	701a      	strb	r2, [r3, #0]
 8013316:	e7f0      	b.n	80132fa <__cvt+0xa6>

08013318 <__exponent>:
 8013318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801331a:	4603      	mov	r3, r0
 801331c:	2900      	cmp	r1, #0
 801331e:	bfb8      	it	lt
 8013320:	4249      	neglt	r1, r1
 8013322:	f803 2b02 	strb.w	r2, [r3], #2
 8013326:	bfb4      	ite	lt
 8013328:	222d      	movlt	r2, #45	; 0x2d
 801332a:	222b      	movge	r2, #43	; 0x2b
 801332c:	2909      	cmp	r1, #9
 801332e:	7042      	strb	r2, [r0, #1]
 8013330:	dd2a      	ble.n	8013388 <__exponent+0x70>
 8013332:	f10d 0407 	add.w	r4, sp, #7
 8013336:	46a4      	mov	ip, r4
 8013338:	270a      	movs	r7, #10
 801333a:	46a6      	mov	lr, r4
 801333c:	460a      	mov	r2, r1
 801333e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013342:	fb07 1516 	mls	r5, r7, r6, r1
 8013346:	3530      	adds	r5, #48	; 0x30
 8013348:	2a63      	cmp	r2, #99	; 0x63
 801334a:	f104 34ff 	add.w	r4, r4, #4294967295
 801334e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013352:	4631      	mov	r1, r6
 8013354:	dcf1      	bgt.n	801333a <__exponent+0x22>
 8013356:	3130      	adds	r1, #48	; 0x30
 8013358:	f1ae 0502 	sub.w	r5, lr, #2
 801335c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013360:	1c44      	adds	r4, r0, #1
 8013362:	4629      	mov	r1, r5
 8013364:	4561      	cmp	r1, ip
 8013366:	d30a      	bcc.n	801337e <__exponent+0x66>
 8013368:	f10d 0209 	add.w	r2, sp, #9
 801336c:	eba2 020e 	sub.w	r2, r2, lr
 8013370:	4565      	cmp	r5, ip
 8013372:	bf88      	it	hi
 8013374:	2200      	movhi	r2, #0
 8013376:	4413      	add	r3, r2
 8013378:	1a18      	subs	r0, r3, r0
 801337a:	b003      	add	sp, #12
 801337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801337e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013382:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013386:	e7ed      	b.n	8013364 <__exponent+0x4c>
 8013388:	2330      	movs	r3, #48	; 0x30
 801338a:	3130      	adds	r1, #48	; 0x30
 801338c:	7083      	strb	r3, [r0, #2]
 801338e:	70c1      	strb	r1, [r0, #3]
 8013390:	1d03      	adds	r3, r0, #4
 8013392:	e7f1      	b.n	8013378 <__exponent+0x60>

08013394 <_printf_float>:
 8013394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013398:	ed2d 8b02 	vpush	{d8}
 801339c:	b08d      	sub	sp, #52	; 0x34
 801339e:	460c      	mov	r4, r1
 80133a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80133a4:	4616      	mov	r6, r2
 80133a6:	461f      	mov	r7, r3
 80133a8:	4605      	mov	r5, r0
 80133aa:	f001 fdc9 	bl	8014f40 <_localeconv_r>
 80133ae:	f8d0 a000 	ldr.w	sl, [r0]
 80133b2:	4650      	mov	r0, sl
 80133b4:	f7ec ff7c 	bl	80002b0 <strlen>
 80133b8:	2300      	movs	r3, #0
 80133ba:	930a      	str	r3, [sp, #40]	; 0x28
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	f8d8 3000 	ldr.w	r3, [r8]
 80133c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80133c8:	3307      	adds	r3, #7
 80133ca:	f023 0307 	bic.w	r3, r3, #7
 80133ce:	f103 0208 	add.w	r2, r3, #8
 80133d2:	f8c8 2000 	str.w	r2, [r8]
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80133de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80133e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133e6:	9307      	str	r3, [sp, #28]
 80133e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80133ec:	ee08 0a10 	vmov	s16, r0
 80133f0:	4b9f      	ldr	r3, [pc, #636]	; (8013670 <_printf_float+0x2dc>)
 80133f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80133f6:	f04f 32ff 	mov.w	r2, #4294967295
 80133fa:	f7ed fbb7 	bl	8000b6c <__aeabi_dcmpun>
 80133fe:	bb88      	cbnz	r0, 8013464 <_printf_float+0xd0>
 8013400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013404:	4b9a      	ldr	r3, [pc, #616]	; (8013670 <_printf_float+0x2dc>)
 8013406:	f04f 32ff 	mov.w	r2, #4294967295
 801340a:	f7ed fb91 	bl	8000b30 <__aeabi_dcmple>
 801340e:	bb48      	cbnz	r0, 8013464 <_printf_float+0xd0>
 8013410:	2200      	movs	r2, #0
 8013412:	2300      	movs	r3, #0
 8013414:	4640      	mov	r0, r8
 8013416:	4649      	mov	r1, r9
 8013418:	f7ed fb80 	bl	8000b1c <__aeabi_dcmplt>
 801341c:	b110      	cbz	r0, 8013424 <_printf_float+0x90>
 801341e:	232d      	movs	r3, #45	; 0x2d
 8013420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013424:	4b93      	ldr	r3, [pc, #588]	; (8013674 <_printf_float+0x2e0>)
 8013426:	4894      	ldr	r0, [pc, #592]	; (8013678 <_printf_float+0x2e4>)
 8013428:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801342c:	bf94      	ite	ls
 801342e:	4698      	movls	r8, r3
 8013430:	4680      	movhi	r8, r0
 8013432:	2303      	movs	r3, #3
 8013434:	6123      	str	r3, [r4, #16]
 8013436:	9b05      	ldr	r3, [sp, #20]
 8013438:	f023 0204 	bic.w	r2, r3, #4
 801343c:	6022      	str	r2, [r4, #0]
 801343e:	f04f 0900 	mov.w	r9, #0
 8013442:	9700      	str	r7, [sp, #0]
 8013444:	4633      	mov	r3, r6
 8013446:	aa0b      	add	r2, sp, #44	; 0x2c
 8013448:	4621      	mov	r1, r4
 801344a:	4628      	mov	r0, r5
 801344c:	f000 f9d8 	bl	8013800 <_printf_common>
 8013450:	3001      	adds	r0, #1
 8013452:	f040 8090 	bne.w	8013576 <_printf_float+0x1e2>
 8013456:	f04f 30ff 	mov.w	r0, #4294967295
 801345a:	b00d      	add	sp, #52	; 0x34
 801345c:	ecbd 8b02 	vpop	{d8}
 8013460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013464:	4642      	mov	r2, r8
 8013466:	464b      	mov	r3, r9
 8013468:	4640      	mov	r0, r8
 801346a:	4649      	mov	r1, r9
 801346c:	f7ed fb7e 	bl	8000b6c <__aeabi_dcmpun>
 8013470:	b140      	cbz	r0, 8013484 <_printf_float+0xf0>
 8013472:	464b      	mov	r3, r9
 8013474:	2b00      	cmp	r3, #0
 8013476:	bfbc      	itt	lt
 8013478:	232d      	movlt	r3, #45	; 0x2d
 801347a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801347e:	487f      	ldr	r0, [pc, #508]	; (801367c <_printf_float+0x2e8>)
 8013480:	4b7f      	ldr	r3, [pc, #508]	; (8013680 <_printf_float+0x2ec>)
 8013482:	e7d1      	b.n	8013428 <_printf_float+0x94>
 8013484:	6863      	ldr	r3, [r4, #4]
 8013486:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801348a:	9206      	str	r2, [sp, #24]
 801348c:	1c5a      	adds	r2, r3, #1
 801348e:	d13f      	bne.n	8013510 <_printf_float+0x17c>
 8013490:	2306      	movs	r3, #6
 8013492:	6063      	str	r3, [r4, #4]
 8013494:	9b05      	ldr	r3, [sp, #20]
 8013496:	6861      	ldr	r1, [r4, #4]
 8013498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801349c:	2300      	movs	r3, #0
 801349e:	9303      	str	r3, [sp, #12]
 80134a0:	ab0a      	add	r3, sp, #40	; 0x28
 80134a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80134a6:	ab09      	add	r3, sp, #36	; 0x24
 80134a8:	ec49 8b10 	vmov	d0, r8, r9
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	6022      	str	r2, [r4, #0]
 80134b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80134b4:	4628      	mov	r0, r5
 80134b6:	f7ff fecd 	bl	8013254 <__cvt>
 80134ba:	9b06      	ldr	r3, [sp, #24]
 80134bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134be:	2b47      	cmp	r3, #71	; 0x47
 80134c0:	4680      	mov	r8, r0
 80134c2:	d108      	bne.n	80134d6 <_printf_float+0x142>
 80134c4:	1cc8      	adds	r0, r1, #3
 80134c6:	db02      	blt.n	80134ce <_printf_float+0x13a>
 80134c8:	6863      	ldr	r3, [r4, #4]
 80134ca:	4299      	cmp	r1, r3
 80134cc:	dd41      	ble.n	8013552 <_printf_float+0x1be>
 80134ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80134d2:	fa5f fb8b 	uxtb.w	fp, fp
 80134d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80134da:	d820      	bhi.n	801351e <_printf_float+0x18a>
 80134dc:	3901      	subs	r1, #1
 80134de:	465a      	mov	r2, fp
 80134e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80134e4:	9109      	str	r1, [sp, #36]	; 0x24
 80134e6:	f7ff ff17 	bl	8013318 <__exponent>
 80134ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ec:	1813      	adds	r3, r2, r0
 80134ee:	2a01      	cmp	r2, #1
 80134f0:	4681      	mov	r9, r0
 80134f2:	6123      	str	r3, [r4, #16]
 80134f4:	dc02      	bgt.n	80134fc <_printf_float+0x168>
 80134f6:	6822      	ldr	r2, [r4, #0]
 80134f8:	07d2      	lsls	r2, r2, #31
 80134fa:	d501      	bpl.n	8013500 <_printf_float+0x16c>
 80134fc:	3301      	adds	r3, #1
 80134fe:	6123      	str	r3, [r4, #16]
 8013500:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013504:	2b00      	cmp	r3, #0
 8013506:	d09c      	beq.n	8013442 <_printf_float+0xae>
 8013508:	232d      	movs	r3, #45	; 0x2d
 801350a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801350e:	e798      	b.n	8013442 <_printf_float+0xae>
 8013510:	9a06      	ldr	r2, [sp, #24]
 8013512:	2a47      	cmp	r2, #71	; 0x47
 8013514:	d1be      	bne.n	8013494 <_printf_float+0x100>
 8013516:	2b00      	cmp	r3, #0
 8013518:	d1bc      	bne.n	8013494 <_printf_float+0x100>
 801351a:	2301      	movs	r3, #1
 801351c:	e7b9      	b.n	8013492 <_printf_float+0xfe>
 801351e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013522:	d118      	bne.n	8013556 <_printf_float+0x1c2>
 8013524:	2900      	cmp	r1, #0
 8013526:	6863      	ldr	r3, [r4, #4]
 8013528:	dd0b      	ble.n	8013542 <_printf_float+0x1ae>
 801352a:	6121      	str	r1, [r4, #16]
 801352c:	b913      	cbnz	r3, 8013534 <_printf_float+0x1a0>
 801352e:	6822      	ldr	r2, [r4, #0]
 8013530:	07d0      	lsls	r0, r2, #31
 8013532:	d502      	bpl.n	801353a <_printf_float+0x1a6>
 8013534:	3301      	adds	r3, #1
 8013536:	440b      	add	r3, r1
 8013538:	6123      	str	r3, [r4, #16]
 801353a:	65a1      	str	r1, [r4, #88]	; 0x58
 801353c:	f04f 0900 	mov.w	r9, #0
 8013540:	e7de      	b.n	8013500 <_printf_float+0x16c>
 8013542:	b913      	cbnz	r3, 801354a <_printf_float+0x1b6>
 8013544:	6822      	ldr	r2, [r4, #0]
 8013546:	07d2      	lsls	r2, r2, #31
 8013548:	d501      	bpl.n	801354e <_printf_float+0x1ba>
 801354a:	3302      	adds	r3, #2
 801354c:	e7f4      	b.n	8013538 <_printf_float+0x1a4>
 801354e:	2301      	movs	r3, #1
 8013550:	e7f2      	b.n	8013538 <_printf_float+0x1a4>
 8013552:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013558:	4299      	cmp	r1, r3
 801355a:	db05      	blt.n	8013568 <_printf_float+0x1d4>
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	6121      	str	r1, [r4, #16]
 8013560:	07d8      	lsls	r0, r3, #31
 8013562:	d5ea      	bpl.n	801353a <_printf_float+0x1a6>
 8013564:	1c4b      	adds	r3, r1, #1
 8013566:	e7e7      	b.n	8013538 <_printf_float+0x1a4>
 8013568:	2900      	cmp	r1, #0
 801356a:	bfd4      	ite	le
 801356c:	f1c1 0202 	rsble	r2, r1, #2
 8013570:	2201      	movgt	r2, #1
 8013572:	4413      	add	r3, r2
 8013574:	e7e0      	b.n	8013538 <_printf_float+0x1a4>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	055a      	lsls	r2, r3, #21
 801357a:	d407      	bmi.n	801358c <_printf_float+0x1f8>
 801357c:	6923      	ldr	r3, [r4, #16]
 801357e:	4642      	mov	r2, r8
 8013580:	4631      	mov	r1, r6
 8013582:	4628      	mov	r0, r5
 8013584:	47b8      	blx	r7
 8013586:	3001      	adds	r0, #1
 8013588:	d12c      	bne.n	80135e4 <_printf_float+0x250>
 801358a:	e764      	b.n	8013456 <_printf_float+0xc2>
 801358c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013590:	f240 80e0 	bls.w	8013754 <_printf_float+0x3c0>
 8013594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013598:	2200      	movs	r2, #0
 801359a:	2300      	movs	r3, #0
 801359c:	f7ed fab4 	bl	8000b08 <__aeabi_dcmpeq>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	d034      	beq.n	801360e <_printf_float+0x27a>
 80135a4:	4a37      	ldr	r2, [pc, #220]	; (8013684 <_printf_float+0x2f0>)
 80135a6:	2301      	movs	r3, #1
 80135a8:	4631      	mov	r1, r6
 80135aa:	4628      	mov	r0, r5
 80135ac:	47b8      	blx	r7
 80135ae:	3001      	adds	r0, #1
 80135b0:	f43f af51 	beq.w	8013456 <_printf_float+0xc2>
 80135b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135b8:	429a      	cmp	r2, r3
 80135ba:	db02      	blt.n	80135c2 <_printf_float+0x22e>
 80135bc:	6823      	ldr	r3, [r4, #0]
 80135be:	07d8      	lsls	r0, r3, #31
 80135c0:	d510      	bpl.n	80135e4 <_printf_float+0x250>
 80135c2:	ee18 3a10 	vmov	r3, s16
 80135c6:	4652      	mov	r2, sl
 80135c8:	4631      	mov	r1, r6
 80135ca:	4628      	mov	r0, r5
 80135cc:	47b8      	blx	r7
 80135ce:	3001      	adds	r0, #1
 80135d0:	f43f af41 	beq.w	8013456 <_printf_float+0xc2>
 80135d4:	f04f 0800 	mov.w	r8, #0
 80135d8:	f104 091a 	add.w	r9, r4, #26
 80135dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135de:	3b01      	subs	r3, #1
 80135e0:	4543      	cmp	r3, r8
 80135e2:	dc09      	bgt.n	80135f8 <_printf_float+0x264>
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	079b      	lsls	r3, r3, #30
 80135e8:	f100 8105 	bmi.w	80137f6 <_printf_float+0x462>
 80135ec:	68e0      	ldr	r0, [r4, #12]
 80135ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135f0:	4298      	cmp	r0, r3
 80135f2:	bfb8      	it	lt
 80135f4:	4618      	movlt	r0, r3
 80135f6:	e730      	b.n	801345a <_printf_float+0xc6>
 80135f8:	2301      	movs	r3, #1
 80135fa:	464a      	mov	r2, r9
 80135fc:	4631      	mov	r1, r6
 80135fe:	4628      	mov	r0, r5
 8013600:	47b8      	blx	r7
 8013602:	3001      	adds	r0, #1
 8013604:	f43f af27 	beq.w	8013456 <_printf_float+0xc2>
 8013608:	f108 0801 	add.w	r8, r8, #1
 801360c:	e7e6      	b.n	80135dc <_printf_float+0x248>
 801360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013610:	2b00      	cmp	r3, #0
 8013612:	dc39      	bgt.n	8013688 <_printf_float+0x2f4>
 8013614:	4a1b      	ldr	r2, [pc, #108]	; (8013684 <_printf_float+0x2f0>)
 8013616:	2301      	movs	r3, #1
 8013618:	4631      	mov	r1, r6
 801361a:	4628      	mov	r0, r5
 801361c:	47b8      	blx	r7
 801361e:	3001      	adds	r0, #1
 8013620:	f43f af19 	beq.w	8013456 <_printf_float+0xc2>
 8013624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013628:	4313      	orrs	r3, r2
 801362a:	d102      	bne.n	8013632 <_printf_float+0x29e>
 801362c:	6823      	ldr	r3, [r4, #0]
 801362e:	07d9      	lsls	r1, r3, #31
 8013630:	d5d8      	bpl.n	80135e4 <_printf_float+0x250>
 8013632:	ee18 3a10 	vmov	r3, s16
 8013636:	4652      	mov	r2, sl
 8013638:	4631      	mov	r1, r6
 801363a:	4628      	mov	r0, r5
 801363c:	47b8      	blx	r7
 801363e:	3001      	adds	r0, #1
 8013640:	f43f af09 	beq.w	8013456 <_printf_float+0xc2>
 8013644:	f04f 0900 	mov.w	r9, #0
 8013648:	f104 0a1a 	add.w	sl, r4, #26
 801364c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801364e:	425b      	negs	r3, r3
 8013650:	454b      	cmp	r3, r9
 8013652:	dc01      	bgt.n	8013658 <_printf_float+0x2c4>
 8013654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013656:	e792      	b.n	801357e <_printf_float+0x1ea>
 8013658:	2301      	movs	r3, #1
 801365a:	4652      	mov	r2, sl
 801365c:	4631      	mov	r1, r6
 801365e:	4628      	mov	r0, r5
 8013660:	47b8      	blx	r7
 8013662:	3001      	adds	r0, #1
 8013664:	f43f aef7 	beq.w	8013456 <_printf_float+0xc2>
 8013668:	f109 0901 	add.w	r9, r9, #1
 801366c:	e7ee      	b.n	801364c <_printf_float+0x2b8>
 801366e:	bf00      	nop
 8013670:	7fefffff 	.word	0x7fefffff
 8013674:	080203d4 	.word	0x080203d4
 8013678:	080203d8 	.word	0x080203d8
 801367c:	080203e0 	.word	0x080203e0
 8013680:	080203dc 	.word	0x080203dc
 8013684:	080203e4 	.word	0x080203e4
 8013688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801368a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801368c:	429a      	cmp	r2, r3
 801368e:	bfa8      	it	ge
 8013690:	461a      	movge	r2, r3
 8013692:	2a00      	cmp	r2, #0
 8013694:	4691      	mov	r9, r2
 8013696:	dc37      	bgt.n	8013708 <_printf_float+0x374>
 8013698:	f04f 0b00 	mov.w	fp, #0
 801369c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136a0:	f104 021a 	add.w	r2, r4, #26
 80136a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136a6:	9305      	str	r3, [sp, #20]
 80136a8:	eba3 0309 	sub.w	r3, r3, r9
 80136ac:	455b      	cmp	r3, fp
 80136ae:	dc33      	bgt.n	8013718 <_printf_float+0x384>
 80136b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136b4:	429a      	cmp	r2, r3
 80136b6:	db3b      	blt.n	8013730 <_printf_float+0x39c>
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	07da      	lsls	r2, r3, #31
 80136bc:	d438      	bmi.n	8013730 <_printf_float+0x39c>
 80136be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136c0:	9b05      	ldr	r3, [sp, #20]
 80136c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136c4:	1ad3      	subs	r3, r2, r3
 80136c6:	eba2 0901 	sub.w	r9, r2, r1
 80136ca:	4599      	cmp	r9, r3
 80136cc:	bfa8      	it	ge
 80136ce:	4699      	movge	r9, r3
 80136d0:	f1b9 0f00 	cmp.w	r9, #0
 80136d4:	dc35      	bgt.n	8013742 <_printf_float+0x3ae>
 80136d6:	f04f 0800 	mov.w	r8, #0
 80136da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136de:	f104 0a1a 	add.w	sl, r4, #26
 80136e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136e6:	1a9b      	subs	r3, r3, r2
 80136e8:	eba3 0309 	sub.w	r3, r3, r9
 80136ec:	4543      	cmp	r3, r8
 80136ee:	f77f af79 	ble.w	80135e4 <_printf_float+0x250>
 80136f2:	2301      	movs	r3, #1
 80136f4:	4652      	mov	r2, sl
 80136f6:	4631      	mov	r1, r6
 80136f8:	4628      	mov	r0, r5
 80136fa:	47b8      	blx	r7
 80136fc:	3001      	adds	r0, #1
 80136fe:	f43f aeaa 	beq.w	8013456 <_printf_float+0xc2>
 8013702:	f108 0801 	add.w	r8, r8, #1
 8013706:	e7ec      	b.n	80136e2 <_printf_float+0x34e>
 8013708:	4613      	mov	r3, r2
 801370a:	4631      	mov	r1, r6
 801370c:	4642      	mov	r2, r8
 801370e:	4628      	mov	r0, r5
 8013710:	47b8      	blx	r7
 8013712:	3001      	adds	r0, #1
 8013714:	d1c0      	bne.n	8013698 <_printf_float+0x304>
 8013716:	e69e      	b.n	8013456 <_printf_float+0xc2>
 8013718:	2301      	movs	r3, #1
 801371a:	4631      	mov	r1, r6
 801371c:	4628      	mov	r0, r5
 801371e:	9205      	str	r2, [sp, #20]
 8013720:	47b8      	blx	r7
 8013722:	3001      	adds	r0, #1
 8013724:	f43f ae97 	beq.w	8013456 <_printf_float+0xc2>
 8013728:	9a05      	ldr	r2, [sp, #20]
 801372a:	f10b 0b01 	add.w	fp, fp, #1
 801372e:	e7b9      	b.n	80136a4 <_printf_float+0x310>
 8013730:	ee18 3a10 	vmov	r3, s16
 8013734:	4652      	mov	r2, sl
 8013736:	4631      	mov	r1, r6
 8013738:	4628      	mov	r0, r5
 801373a:	47b8      	blx	r7
 801373c:	3001      	adds	r0, #1
 801373e:	d1be      	bne.n	80136be <_printf_float+0x32a>
 8013740:	e689      	b.n	8013456 <_printf_float+0xc2>
 8013742:	9a05      	ldr	r2, [sp, #20]
 8013744:	464b      	mov	r3, r9
 8013746:	4442      	add	r2, r8
 8013748:	4631      	mov	r1, r6
 801374a:	4628      	mov	r0, r5
 801374c:	47b8      	blx	r7
 801374e:	3001      	adds	r0, #1
 8013750:	d1c1      	bne.n	80136d6 <_printf_float+0x342>
 8013752:	e680      	b.n	8013456 <_printf_float+0xc2>
 8013754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013756:	2a01      	cmp	r2, #1
 8013758:	dc01      	bgt.n	801375e <_printf_float+0x3ca>
 801375a:	07db      	lsls	r3, r3, #31
 801375c:	d538      	bpl.n	80137d0 <_printf_float+0x43c>
 801375e:	2301      	movs	r3, #1
 8013760:	4642      	mov	r2, r8
 8013762:	4631      	mov	r1, r6
 8013764:	4628      	mov	r0, r5
 8013766:	47b8      	blx	r7
 8013768:	3001      	adds	r0, #1
 801376a:	f43f ae74 	beq.w	8013456 <_printf_float+0xc2>
 801376e:	ee18 3a10 	vmov	r3, s16
 8013772:	4652      	mov	r2, sl
 8013774:	4631      	mov	r1, r6
 8013776:	4628      	mov	r0, r5
 8013778:	47b8      	blx	r7
 801377a:	3001      	adds	r0, #1
 801377c:	f43f ae6b 	beq.w	8013456 <_printf_float+0xc2>
 8013780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013784:	2200      	movs	r2, #0
 8013786:	2300      	movs	r3, #0
 8013788:	f7ed f9be 	bl	8000b08 <__aeabi_dcmpeq>
 801378c:	b9d8      	cbnz	r0, 80137c6 <_printf_float+0x432>
 801378e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013790:	f108 0201 	add.w	r2, r8, #1
 8013794:	3b01      	subs	r3, #1
 8013796:	4631      	mov	r1, r6
 8013798:	4628      	mov	r0, r5
 801379a:	47b8      	blx	r7
 801379c:	3001      	adds	r0, #1
 801379e:	d10e      	bne.n	80137be <_printf_float+0x42a>
 80137a0:	e659      	b.n	8013456 <_printf_float+0xc2>
 80137a2:	2301      	movs	r3, #1
 80137a4:	4652      	mov	r2, sl
 80137a6:	4631      	mov	r1, r6
 80137a8:	4628      	mov	r0, r5
 80137aa:	47b8      	blx	r7
 80137ac:	3001      	adds	r0, #1
 80137ae:	f43f ae52 	beq.w	8013456 <_printf_float+0xc2>
 80137b2:	f108 0801 	add.w	r8, r8, #1
 80137b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b8:	3b01      	subs	r3, #1
 80137ba:	4543      	cmp	r3, r8
 80137bc:	dcf1      	bgt.n	80137a2 <_printf_float+0x40e>
 80137be:	464b      	mov	r3, r9
 80137c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137c4:	e6dc      	b.n	8013580 <_printf_float+0x1ec>
 80137c6:	f04f 0800 	mov.w	r8, #0
 80137ca:	f104 0a1a 	add.w	sl, r4, #26
 80137ce:	e7f2      	b.n	80137b6 <_printf_float+0x422>
 80137d0:	2301      	movs	r3, #1
 80137d2:	4642      	mov	r2, r8
 80137d4:	e7df      	b.n	8013796 <_printf_float+0x402>
 80137d6:	2301      	movs	r3, #1
 80137d8:	464a      	mov	r2, r9
 80137da:	4631      	mov	r1, r6
 80137dc:	4628      	mov	r0, r5
 80137de:	47b8      	blx	r7
 80137e0:	3001      	adds	r0, #1
 80137e2:	f43f ae38 	beq.w	8013456 <_printf_float+0xc2>
 80137e6:	f108 0801 	add.w	r8, r8, #1
 80137ea:	68e3      	ldr	r3, [r4, #12]
 80137ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137ee:	1a5b      	subs	r3, r3, r1
 80137f0:	4543      	cmp	r3, r8
 80137f2:	dcf0      	bgt.n	80137d6 <_printf_float+0x442>
 80137f4:	e6fa      	b.n	80135ec <_printf_float+0x258>
 80137f6:	f04f 0800 	mov.w	r8, #0
 80137fa:	f104 0919 	add.w	r9, r4, #25
 80137fe:	e7f4      	b.n	80137ea <_printf_float+0x456>

08013800 <_printf_common>:
 8013800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013804:	4616      	mov	r6, r2
 8013806:	4699      	mov	r9, r3
 8013808:	688a      	ldr	r2, [r1, #8]
 801380a:	690b      	ldr	r3, [r1, #16]
 801380c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013810:	4293      	cmp	r3, r2
 8013812:	bfb8      	it	lt
 8013814:	4613      	movlt	r3, r2
 8013816:	6033      	str	r3, [r6, #0]
 8013818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801381c:	4607      	mov	r7, r0
 801381e:	460c      	mov	r4, r1
 8013820:	b10a      	cbz	r2, 8013826 <_printf_common+0x26>
 8013822:	3301      	adds	r3, #1
 8013824:	6033      	str	r3, [r6, #0]
 8013826:	6823      	ldr	r3, [r4, #0]
 8013828:	0699      	lsls	r1, r3, #26
 801382a:	bf42      	ittt	mi
 801382c:	6833      	ldrmi	r3, [r6, #0]
 801382e:	3302      	addmi	r3, #2
 8013830:	6033      	strmi	r3, [r6, #0]
 8013832:	6825      	ldr	r5, [r4, #0]
 8013834:	f015 0506 	ands.w	r5, r5, #6
 8013838:	d106      	bne.n	8013848 <_printf_common+0x48>
 801383a:	f104 0a19 	add.w	sl, r4, #25
 801383e:	68e3      	ldr	r3, [r4, #12]
 8013840:	6832      	ldr	r2, [r6, #0]
 8013842:	1a9b      	subs	r3, r3, r2
 8013844:	42ab      	cmp	r3, r5
 8013846:	dc26      	bgt.n	8013896 <_printf_common+0x96>
 8013848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801384c:	1e13      	subs	r3, r2, #0
 801384e:	6822      	ldr	r2, [r4, #0]
 8013850:	bf18      	it	ne
 8013852:	2301      	movne	r3, #1
 8013854:	0692      	lsls	r2, r2, #26
 8013856:	d42b      	bmi.n	80138b0 <_printf_common+0xb0>
 8013858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801385c:	4649      	mov	r1, r9
 801385e:	4638      	mov	r0, r7
 8013860:	47c0      	blx	r8
 8013862:	3001      	adds	r0, #1
 8013864:	d01e      	beq.n	80138a4 <_printf_common+0xa4>
 8013866:	6823      	ldr	r3, [r4, #0]
 8013868:	68e5      	ldr	r5, [r4, #12]
 801386a:	6832      	ldr	r2, [r6, #0]
 801386c:	f003 0306 	and.w	r3, r3, #6
 8013870:	2b04      	cmp	r3, #4
 8013872:	bf08      	it	eq
 8013874:	1aad      	subeq	r5, r5, r2
 8013876:	68a3      	ldr	r3, [r4, #8]
 8013878:	6922      	ldr	r2, [r4, #16]
 801387a:	bf0c      	ite	eq
 801387c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013880:	2500      	movne	r5, #0
 8013882:	4293      	cmp	r3, r2
 8013884:	bfc4      	itt	gt
 8013886:	1a9b      	subgt	r3, r3, r2
 8013888:	18ed      	addgt	r5, r5, r3
 801388a:	2600      	movs	r6, #0
 801388c:	341a      	adds	r4, #26
 801388e:	42b5      	cmp	r5, r6
 8013890:	d11a      	bne.n	80138c8 <_printf_common+0xc8>
 8013892:	2000      	movs	r0, #0
 8013894:	e008      	b.n	80138a8 <_printf_common+0xa8>
 8013896:	2301      	movs	r3, #1
 8013898:	4652      	mov	r2, sl
 801389a:	4649      	mov	r1, r9
 801389c:	4638      	mov	r0, r7
 801389e:	47c0      	blx	r8
 80138a0:	3001      	adds	r0, #1
 80138a2:	d103      	bne.n	80138ac <_printf_common+0xac>
 80138a4:	f04f 30ff 	mov.w	r0, #4294967295
 80138a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ac:	3501      	adds	r5, #1
 80138ae:	e7c6      	b.n	801383e <_printf_common+0x3e>
 80138b0:	18e1      	adds	r1, r4, r3
 80138b2:	1c5a      	adds	r2, r3, #1
 80138b4:	2030      	movs	r0, #48	; 0x30
 80138b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138ba:	4422      	add	r2, r4
 80138bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138c4:	3302      	adds	r3, #2
 80138c6:	e7c7      	b.n	8013858 <_printf_common+0x58>
 80138c8:	2301      	movs	r3, #1
 80138ca:	4622      	mov	r2, r4
 80138cc:	4649      	mov	r1, r9
 80138ce:	4638      	mov	r0, r7
 80138d0:	47c0      	blx	r8
 80138d2:	3001      	adds	r0, #1
 80138d4:	d0e6      	beq.n	80138a4 <_printf_common+0xa4>
 80138d6:	3601      	adds	r6, #1
 80138d8:	e7d9      	b.n	801388e <_printf_common+0x8e>
	...

080138dc <_printf_i>:
 80138dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138e0:	460c      	mov	r4, r1
 80138e2:	4691      	mov	r9, r2
 80138e4:	7e27      	ldrb	r7, [r4, #24]
 80138e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138e8:	2f78      	cmp	r7, #120	; 0x78
 80138ea:	4680      	mov	r8, r0
 80138ec:	469a      	mov	sl, r3
 80138ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138f2:	d807      	bhi.n	8013904 <_printf_i+0x28>
 80138f4:	2f62      	cmp	r7, #98	; 0x62
 80138f6:	d80a      	bhi.n	801390e <_printf_i+0x32>
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	f000 80d8 	beq.w	8013aae <_printf_i+0x1d2>
 80138fe:	2f58      	cmp	r7, #88	; 0x58
 8013900:	f000 80a3 	beq.w	8013a4a <_printf_i+0x16e>
 8013904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801390c:	e03a      	b.n	8013984 <_printf_i+0xa8>
 801390e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013912:	2b15      	cmp	r3, #21
 8013914:	d8f6      	bhi.n	8013904 <_printf_i+0x28>
 8013916:	a001      	add	r0, pc, #4	; (adr r0, 801391c <_printf_i+0x40>)
 8013918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801391c:	08013975 	.word	0x08013975
 8013920:	08013989 	.word	0x08013989
 8013924:	08013905 	.word	0x08013905
 8013928:	08013905 	.word	0x08013905
 801392c:	08013905 	.word	0x08013905
 8013930:	08013905 	.word	0x08013905
 8013934:	08013989 	.word	0x08013989
 8013938:	08013905 	.word	0x08013905
 801393c:	08013905 	.word	0x08013905
 8013940:	08013905 	.word	0x08013905
 8013944:	08013905 	.word	0x08013905
 8013948:	08013a95 	.word	0x08013a95
 801394c:	080139b9 	.word	0x080139b9
 8013950:	08013a77 	.word	0x08013a77
 8013954:	08013905 	.word	0x08013905
 8013958:	08013905 	.word	0x08013905
 801395c:	08013ab7 	.word	0x08013ab7
 8013960:	08013905 	.word	0x08013905
 8013964:	080139b9 	.word	0x080139b9
 8013968:	08013905 	.word	0x08013905
 801396c:	08013905 	.word	0x08013905
 8013970:	08013a7f 	.word	0x08013a7f
 8013974:	680b      	ldr	r3, [r1, #0]
 8013976:	1d1a      	adds	r2, r3, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	600a      	str	r2, [r1, #0]
 801397c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013984:	2301      	movs	r3, #1
 8013986:	e0a3      	b.n	8013ad0 <_printf_i+0x1f4>
 8013988:	6825      	ldr	r5, [r4, #0]
 801398a:	6808      	ldr	r0, [r1, #0]
 801398c:	062e      	lsls	r6, r5, #24
 801398e:	f100 0304 	add.w	r3, r0, #4
 8013992:	d50a      	bpl.n	80139aa <_printf_i+0xce>
 8013994:	6805      	ldr	r5, [r0, #0]
 8013996:	600b      	str	r3, [r1, #0]
 8013998:	2d00      	cmp	r5, #0
 801399a:	da03      	bge.n	80139a4 <_printf_i+0xc8>
 801399c:	232d      	movs	r3, #45	; 0x2d
 801399e:	426d      	negs	r5, r5
 80139a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139a4:	485e      	ldr	r0, [pc, #376]	; (8013b20 <_printf_i+0x244>)
 80139a6:	230a      	movs	r3, #10
 80139a8:	e019      	b.n	80139de <_printf_i+0x102>
 80139aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80139ae:	6805      	ldr	r5, [r0, #0]
 80139b0:	600b      	str	r3, [r1, #0]
 80139b2:	bf18      	it	ne
 80139b4:	b22d      	sxthne	r5, r5
 80139b6:	e7ef      	b.n	8013998 <_printf_i+0xbc>
 80139b8:	680b      	ldr	r3, [r1, #0]
 80139ba:	6825      	ldr	r5, [r4, #0]
 80139bc:	1d18      	adds	r0, r3, #4
 80139be:	6008      	str	r0, [r1, #0]
 80139c0:	0628      	lsls	r0, r5, #24
 80139c2:	d501      	bpl.n	80139c8 <_printf_i+0xec>
 80139c4:	681d      	ldr	r5, [r3, #0]
 80139c6:	e002      	b.n	80139ce <_printf_i+0xf2>
 80139c8:	0669      	lsls	r1, r5, #25
 80139ca:	d5fb      	bpl.n	80139c4 <_printf_i+0xe8>
 80139cc:	881d      	ldrh	r5, [r3, #0]
 80139ce:	4854      	ldr	r0, [pc, #336]	; (8013b20 <_printf_i+0x244>)
 80139d0:	2f6f      	cmp	r7, #111	; 0x6f
 80139d2:	bf0c      	ite	eq
 80139d4:	2308      	moveq	r3, #8
 80139d6:	230a      	movne	r3, #10
 80139d8:	2100      	movs	r1, #0
 80139da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139de:	6866      	ldr	r6, [r4, #4]
 80139e0:	60a6      	str	r6, [r4, #8]
 80139e2:	2e00      	cmp	r6, #0
 80139e4:	bfa2      	ittt	ge
 80139e6:	6821      	ldrge	r1, [r4, #0]
 80139e8:	f021 0104 	bicge.w	r1, r1, #4
 80139ec:	6021      	strge	r1, [r4, #0]
 80139ee:	b90d      	cbnz	r5, 80139f4 <_printf_i+0x118>
 80139f0:	2e00      	cmp	r6, #0
 80139f2:	d04d      	beq.n	8013a90 <_printf_i+0x1b4>
 80139f4:	4616      	mov	r6, r2
 80139f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80139fa:	fb03 5711 	mls	r7, r3, r1, r5
 80139fe:	5dc7      	ldrb	r7, [r0, r7]
 8013a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a04:	462f      	mov	r7, r5
 8013a06:	42bb      	cmp	r3, r7
 8013a08:	460d      	mov	r5, r1
 8013a0a:	d9f4      	bls.n	80139f6 <_printf_i+0x11a>
 8013a0c:	2b08      	cmp	r3, #8
 8013a0e:	d10b      	bne.n	8013a28 <_printf_i+0x14c>
 8013a10:	6823      	ldr	r3, [r4, #0]
 8013a12:	07df      	lsls	r7, r3, #31
 8013a14:	d508      	bpl.n	8013a28 <_printf_i+0x14c>
 8013a16:	6923      	ldr	r3, [r4, #16]
 8013a18:	6861      	ldr	r1, [r4, #4]
 8013a1a:	4299      	cmp	r1, r3
 8013a1c:	bfde      	ittt	le
 8013a1e:	2330      	movle	r3, #48	; 0x30
 8013a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a28:	1b92      	subs	r2, r2, r6
 8013a2a:	6122      	str	r2, [r4, #16]
 8013a2c:	f8cd a000 	str.w	sl, [sp]
 8013a30:	464b      	mov	r3, r9
 8013a32:	aa03      	add	r2, sp, #12
 8013a34:	4621      	mov	r1, r4
 8013a36:	4640      	mov	r0, r8
 8013a38:	f7ff fee2 	bl	8013800 <_printf_common>
 8013a3c:	3001      	adds	r0, #1
 8013a3e:	d14c      	bne.n	8013ada <_printf_i+0x1fe>
 8013a40:	f04f 30ff 	mov.w	r0, #4294967295
 8013a44:	b004      	add	sp, #16
 8013a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4a:	4835      	ldr	r0, [pc, #212]	; (8013b20 <_printf_i+0x244>)
 8013a4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013a50:	6823      	ldr	r3, [r4, #0]
 8013a52:	680e      	ldr	r6, [r1, #0]
 8013a54:	061f      	lsls	r7, r3, #24
 8013a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8013a5a:	600e      	str	r6, [r1, #0]
 8013a5c:	d514      	bpl.n	8013a88 <_printf_i+0x1ac>
 8013a5e:	07d9      	lsls	r1, r3, #31
 8013a60:	bf44      	itt	mi
 8013a62:	f043 0320 	orrmi.w	r3, r3, #32
 8013a66:	6023      	strmi	r3, [r4, #0]
 8013a68:	b91d      	cbnz	r5, 8013a72 <_printf_i+0x196>
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	f023 0320 	bic.w	r3, r3, #32
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	2310      	movs	r3, #16
 8013a74:	e7b0      	b.n	80139d8 <_printf_i+0xfc>
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	f043 0320 	orr.w	r3, r3, #32
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	2378      	movs	r3, #120	; 0x78
 8013a80:	4828      	ldr	r0, [pc, #160]	; (8013b24 <_printf_i+0x248>)
 8013a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a86:	e7e3      	b.n	8013a50 <_printf_i+0x174>
 8013a88:	065e      	lsls	r6, r3, #25
 8013a8a:	bf48      	it	mi
 8013a8c:	b2ad      	uxthmi	r5, r5
 8013a8e:	e7e6      	b.n	8013a5e <_printf_i+0x182>
 8013a90:	4616      	mov	r6, r2
 8013a92:	e7bb      	b.n	8013a0c <_printf_i+0x130>
 8013a94:	680b      	ldr	r3, [r1, #0]
 8013a96:	6826      	ldr	r6, [r4, #0]
 8013a98:	6960      	ldr	r0, [r4, #20]
 8013a9a:	1d1d      	adds	r5, r3, #4
 8013a9c:	600d      	str	r5, [r1, #0]
 8013a9e:	0635      	lsls	r5, r6, #24
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	d501      	bpl.n	8013aa8 <_printf_i+0x1cc>
 8013aa4:	6018      	str	r0, [r3, #0]
 8013aa6:	e002      	b.n	8013aae <_printf_i+0x1d2>
 8013aa8:	0671      	lsls	r1, r6, #25
 8013aaa:	d5fb      	bpl.n	8013aa4 <_printf_i+0x1c8>
 8013aac:	8018      	strh	r0, [r3, #0]
 8013aae:	2300      	movs	r3, #0
 8013ab0:	6123      	str	r3, [r4, #16]
 8013ab2:	4616      	mov	r6, r2
 8013ab4:	e7ba      	b.n	8013a2c <_printf_i+0x150>
 8013ab6:	680b      	ldr	r3, [r1, #0]
 8013ab8:	1d1a      	adds	r2, r3, #4
 8013aba:	600a      	str	r2, [r1, #0]
 8013abc:	681e      	ldr	r6, [r3, #0]
 8013abe:	6862      	ldr	r2, [r4, #4]
 8013ac0:	2100      	movs	r1, #0
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	f7ec fba4 	bl	8000210 <memchr>
 8013ac8:	b108      	cbz	r0, 8013ace <_printf_i+0x1f2>
 8013aca:	1b80      	subs	r0, r0, r6
 8013acc:	6060      	str	r0, [r4, #4]
 8013ace:	6863      	ldr	r3, [r4, #4]
 8013ad0:	6123      	str	r3, [r4, #16]
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ad8:	e7a8      	b.n	8013a2c <_printf_i+0x150>
 8013ada:	6923      	ldr	r3, [r4, #16]
 8013adc:	4632      	mov	r2, r6
 8013ade:	4649      	mov	r1, r9
 8013ae0:	4640      	mov	r0, r8
 8013ae2:	47d0      	blx	sl
 8013ae4:	3001      	adds	r0, #1
 8013ae6:	d0ab      	beq.n	8013a40 <_printf_i+0x164>
 8013ae8:	6823      	ldr	r3, [r4, #0]
 8013aea:	079b      	lsls	r3, r3, #30
 8013aec:	d413      	bmi.n	8013b16 <_printf_i+0x23a>
 8013aee:	68e0      	ldr	r0, [r4, #12]
 8013af0:	9b03      	ldr	r3, [sp, #12]
 8013af2:	4298      	cmp	r0, r3
 8013af4:	bfb8      	it	lt
 8013af6:	4618      	movlt	r0, r3
 8013af8:	e7a4      	b.n	8013a44 <_printf_i+0x168>
 8013afa:	2301      	movs	r3, #1
 8013afc:	4632      	mov	r2, r6
 8013afe:	4649      	mov	r1, r9
 8013b00:	4640      	mov	r0, r8
 8013b02:	47d0      	blx	sl
 8013b04:	3001      	adds	r0, #1
 8013b06:	d09b      	beq.n	8013a40 <_printf_i+0x164>
 8013b08:	3501      	adds	r5, #1
 8013b0a:	68e3      	ldr	r3, [r4, #12]
 8013b0c:	9903      	ldr	r1, [sp, #12]
 8013b0e:	1a5b      	subs	r3, r3, r1
 8013b10:	42ab      	cmp	r3, r5
 8013b12:	dcf2      	bgt.n	8013afa <_printf_i+0x21e>
 8013b14:	e7eb      	b.n	8013aee <_printf_i+0x212>
 8013b16:	2500      	movs	r5, #0
 8013b18:	f104 0619 	add.w	r6, r4, #25
 8013b1c:	e7f5      	b.n	8013b0a <_printf_i+0x22e>
 8013b1e:	bf00      	nop
 8013b20:	080203e6 	.word	0x080203e6
 8013b24:	080203f7 	.word	0x080203f7

08013b28 <iprintf>:
 8013b28:	b40f      	push	{r0, r1, r2, r3}
 8013b2a:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <iprintf+0x2c>)
 8013b2c:	b513      	push	{r0, r1, r4, lr}
 8013b2e:	681c      	ldr	r4, [r3, #0]
 8013b30:	b124      	cbz	r4, 8013b3c <iprintf+0x14>
 8013b32:	69a3      	ldr	r3, [r4, #24]
 8013b34:	b913      	cbnz	r3, 8013b3c <iprintf+0x14>
 8013b36:	4620      	mov	r0, r4
 8013b38:	f001 f964 	bl	8014e04 <__sinit>
 8013b3c:	ab05      	add	r3, sp, #20
 8013b3e:	9a04      	ldr	r2, [sp, #16]
 8013b40:	68a1      	ldr	r1, [r4, #8]
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	4620      	mov	r0, r4
 8013b46:	f001 ff85 	bl	8015a54 <_vfiprintf_r>
 8013b4a:	b002      	add	sp, #8
 8013b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b50:	b004      	add	sp, #16
 8013b52:	4770      	bx	lr
 8013b54:	20000190 	.word	0x20000190

08013b58 <_puts_r>:
 8013b58:	b570      	push	{r4, r5, r6, lr}
 8013b5a:	460e      	mov	r6, r1
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	b118      	cbz	r0, 8013b68 <_puts_r+0x10>
 8013b60:	6983      	ldr	r3, [r0, #24]
 8013b62:	b90b      	cbnz	r3, 8013b68 <_puts_r+0x10>
 8013b64:	f001 f94e 	bl	8014e04 <__sinit>
 8013b68:	69ab      	ldr	r3, [r5, #24]
 8013b6a:	68ac      	ldr	r4, [r5, #8]
 8013b6c:	b913      	cbnz	r3, 8013b74 <_puts_r+0x1c>
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f001 f948 	bl	8014e04 <__sinit>
 8013b74:	4b2c      	ldr	r3, [pc, #176]	; (8013c28 <_puts_r+0xd0>)
 8013b76:	429c      	cmp	r4, r3
 8013b78:	d120      	bne.n	8013bbc <_puts_r+0x64>
 8013b7a:	686c      	ldr	r4, [r5, #4]
 8013b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b7e:	07db      	lsls	r3, r3, #31
 8013b80:	d405      	bmi.n	8013b8e <_puts_r+0x36>
 8013b82:	89a3      	ldrh	r3, [r4, #12]
 8013b84:	0598      	lsls	r0, r3, #22
 8013b86:	d402      	bmi.n	8013b8e <_puts_r+0x36>
 8013b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b8a:	f001 f9de 	bl	8014f4a <__retarget_lock_acquire_recursive>
 8013b8e:	89a3      	ldrh	r3, [r4, #12]
 8013b90:	0719      	lsls	r1, r3, #28
 8013b92:	d51d      	bpl.n	8013bd0 <_puts_r+0x78>
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	b1db      	cbz	r3, 8013bd0 <_puts_r+0x78>
 8013b98:	3e01      	subs	r6, #1
 8013b9a:	68a3      	ldr	r3, [r4, #8]
 8013b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	60a3      	str	r3, [r4, #8]
 8013ba4:	bb39      	cbnz	r1, 8013bf6 <_puts_r+0x9e>
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da38      	bge.n	8013c1c <_puts_r+0xc4>
 8013baa:	4622      	mov	r2, r4
 8013bac:	210a      	movs	r1, #10
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f000 f8d6 	bl	8013d60 <__swbuf_r>
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d011      	beq.n	8013bdc <_puts_r+0x84>
 8013bb8:	250a      	movs	r5, #10
 8013bba:	e011      	b.n	8013be0 <_puts_r+0x88>
 8013bbc:	4b1b      	ldr	r3, [pc, #108]	; (8013c2c <_puts_r+0xd4>)
 8013bbe:	429c      	cmp	r4, r3
 8013bc0:	d101      	bne.n	8013bc6 <_puts_r+0x6e>
 8013bc2:	68ac      	ldr	r4, [r5, #8]
 8013bc4:	e7da      	b.n	8013b7c <_puts_r+0x24>
 8013bc6:	4b1a      	ldr	r3, [pc, #104]	; (8013c30 <_puts_r+0xd8>)
 8013bc8:	429c      	cmp	r4, r3
 8013bca:	bf08      	it	eq
 8013bcc:	68ec      	ldreq	r4, [r5, #12]
 8013bce:	e7d5      	b.n	8013b7c <_puts_r+0x24>
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f000 f916 	bl	8013e04 <__swsetup_r>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d0dd      	beq.n	8013b98 <_puts_r+0x40>
 8013bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8013be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013be2:	07da      	lsls	r2, r3, #31
 8013be4:	d405      	bmi.n	8013bf2 <_puts_r+0x9a>
 8013be6:	89a3      	ldrh	r3, [r4, #12]
 8013be8:	059b      	lsls	r3, r3, #22
 8013bea:	d402      	bmi.n	8013bf2 <_puts_r+0x9a>
 8013bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bee:	f001 f9ad 	bl	8014f4c <__retarget_lock_release_recursive>
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	bd70      	pop	{r4, r5, r6, pc}
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	da04      	bge.n	8013c04 <_puts_r+0xac>
 8013bfa:	69a2      	ldr	r2, [r4, #24]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	dc06      	bgt.n	8013c0e <_puts_r+0xb6>
 8013c00:	290a      	cmp	r1, #10
 8013c02:	d004      	beq.n	8013c0e <_puts_r+0xb6>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	1c5a      	adds	r2, r3, #1
 8013c08:	6022      	str	r2, [r4, #0]
 8013c0a:	7019      	strb	r1, [r3, #0]
 8013c0c:	e7c5      	b.n	8013b9a <_puts_r+0x42>
 8013c0e:	4622      	mov	r2, r4
 8013c10:	4628      	mov	r0, r5
 8013c12:	f000 f8a5 	bl	8013d60 <__swbuf_r>
 8013c16:	3001      	adds	r0, #1
 8013c18:	d1bf      	bne.n	8013b9a <_puts_r+0x42>
 8013c1a:	e7df      	b.n	8013bdc <_puts_r+0x84>
 8013c1c:	6823      	ldr	r3, [r4, #0]
 8013c1e:	250a      	movs	r5, #10
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	6022      	str	r2, [r4, #0]
 8013c24:	701d      	strb	r5, [r3, #0]
 8013c26:	e7db      	b.n	8013be0 <_puts_r+0x88>
 8013c28:	080204bc 	.word	0x080204bc
 8013c2c:	080204dc 	.word	0x080204dc
 8013c30:	0802049c 	.word	0x0802049c

08013c34 <puts>:
 8013c34:	4b02      	ldr	r3, [pc, #8]	; (8013c40 <puts+0xc>)
 8013c36:	4601      	mov	r1, r0
 8013c38:	6818      	ldr	r0, [r3, #0]
 8013c3a:	f7ff bf8d 	b.w	8013b58 <_puts_r>
 8013c3e:	bf00      	nop
 8013c40:	20000190 	.word	0x20000190

08013c44 <_sbrk_r>:
 8013c44:	b538      	push	{r3, r4, r5, lr}
 8013c46:	4d06      	ldr	r5, [pc, #24]	; (8013c60 <_sbrk_r+0x1c>)
 8013c48:	2300      	movs	r3, #0
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	4608      	mov	r0, r1
 8013c4e:	602b      	str	r3, [r5, #0]
 8013c50:	f7f4 f89e 	bl	8007d90 <_sbrk>
 8013c54:	1c43      	adds	r3, r0, #1
 8013c56:	d102      	bne.n	8013c5e <_sbrk_r+0x1a>
 8013c58:	682b      	ldr	r3, [r5, #0]
 8013c5a:	b103      	cbz	r3, 8013c5e <_sbrk_r+0x1a>
 8013c5c:	6023      	str	r3, [r4, #0]
 8013c5e:	bd38      	pop	{r3, r4, r5, pc}
 8013c60:	20002590 	.word	0x20002590

08013c64 <_raise_r>:
 8013c64:	291f      	cmp	r1, #31
 8013c66:	b538      	push	{r3, r4, r5, lr}
 8013c68:	4604      	mov	r4, r0
 8013c6a:	460d      	mov	r5, r1
 8013c6c:	d904      	bls.n	8013c78 <_raise_r+0x14>
 8013c6e:	2316      	movs	r3, #22
 8013c70:	6003      	str	r3, [r0, #0]
 8013c72:	f04f 30ff 	mov.w	r0, #4294967295
 8013c76:	bd38      	pop	{r3, r4, r5, pc}
 8013c78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c7a:	b112      	cbz	r2, 8013c82 <_raise_r+0x1e>
 8013c7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c80:	b94b      	cbnz	r3, 8013c96 <_raise_r+0x32>
 8013c82:	4620      	mov	r0, r4
 8013c84:	f000 f830 	bl	8013ce8 <_getpid_r>
 8013c88:	462a      	mov	r2, r5
 8013c8a:	4601      	mov	r1, r0
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c92:	f000 b817 	b.w	8013cc4 <_kill_r>
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d00a      	beq.n	8013cb0 <_raise_r+0x4c>
 8013c9a:	1c59      	adds	r1, r3, #1
 8013c9c:	d103      	bne.n	8013ca6 <_raise_r+0x42>
 8013c9e:	2316      	movs	r3, #22
 8013ca0:	6003      	str	r3, [r0, #0]
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	e7e7      	b.n	8013c76 <_raise_r+0x12>
 8013ca6:	2400      	movs	r4, #0
 8013ca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cac:	4628      	mov	r0, r5
 8013cae:	4798      	blx	r3
 8013cb0:	2000      	movs	r0, #0
 8013cb2:	e7e0      	b.n	8013c76 <_raise_r+0x12>

08013cb4 <raise>:
 8013cb4:	4b02      	ldr	r3, [pc, #8]	; (8013cc0 <raise+0xc>)
 8013cb6:	4601      	mov	r1, r0
 8013cb8:	6818      	ldr	r0, [r3, #0]
 8013cba:	f7ff bfd3 	b.w	8013c64 <_raise_r>
 8013cbe:	bf00      	nop
 8013cc0:	20000190 	.word	0x20000190

08013cc4 <_kill_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4d07      	ldr	r5, [pc, #28]	; (8013ce4 <_kill_r+0x20>)
 8013cc8:	2300      	movs	r3, #0
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4608      	mov	r0, r1
 8013cce:	4611      	mov	r1, r2
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	f7f3 fff1 	bl	8007cb8 <_kill>
 8013cd6:	1c43      	adds	r3, r0, #1
 8013cd8:	d102      	bne.n	8013ce0 <_kill_r+0x1c>
 8013cda:	682b      	ldr	r3, [r5, #0]
 8013cdc:	b103      	cbz	r3, 8013ce0 <_kill_r+0x1c>
 8013cde:	6023      	str	r3, [r4, #0]
 8013ce0:	bd38      	pop	{r3, r4, r5, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20002590 	.word	0x20002590

08013ce8 <_getpid_r>:
 8013ce8:	f7f3 bfde 	b.w	8007ca8 <_getpid>

08013cec <_vsniprintf_r>:
 8013cec:	b530      	push	{r4, r5, lr}
 8013cee:	1e14      	subs	r4, r2, #0
 8013cf0:	4605      	mov	r5, r0
 8013cf2:	b09b      	sub	sp, #108	; 0x6c
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	da05      	bge.n	8013d04 <_vsniprintf_r+0x18>
 8013cf8:	238b      	movs	r3, #139	; 0x8b
 8013cfa:	602b      	str	r3, [r5, #0]
 8013cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013d00:	b01b      	add	sp, #108	; 0x6c
 8013d02:	bd30      	pop	{r4, r5, pc}
 8013d04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013d08:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013d0c:	bf14      	ite	ne
 8013d0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013d12:	4623      	moveq	r3, r4
 8013d14:	9302      	str	r3, [sp, #8]
 8013d16:	9305      	str	r3, [sp, #20]
 8013d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d1c:	9100      	str	r1, [sp, #0]
 8013d1e:	9104      	str	r1, [sp, #16]
 8013d20:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d24:	4602      	mov	r2, r0
 8013d26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013d28:	4669      	mov	r1, sp
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	f001 fd68 	bl	8015800 <_svfiprintf_r>
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	bfbc      	itt	lt
 8013d34:	238b      	movlt	r3, #139	; 0x8b
 8013d36:	602b      	strlt	r3, [r5, #0]
 8013d38:	2c00      	cmp	r4, #0
 8013d3a:	d0e1      	beq.n	8013d00 <_vsniprintf_r+0x14>
 8013d3c:	9b00      	ldr	r3, [sp, #0]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	701a      	strb	r2, [r3, #0]
 8013d42:	e7dd      	b.n	8013d00 <_vsniprintf_r+0x14>

08013d44 <vsniprintf>:
 8013d44:	b507      	push	{r0, r1, r2, lr}
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	4613      	mov	r3, r2
 8013d4a:	460a      	mov	r2, r1
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	4803      	ldr	r0, [pc, #12]	; (8013d5c <vsniprintf+0x18>)
 8013d50:	6800      	ldr	r0, [r0, #0]
 8013d52:	f7ff ffcb 	bl	8013cec <_vsniprintf_r>
 8013d56:	b003      	add	sp, #12
 8013d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d5c:	20000190 	.word	0x20000190

08013d60 <__swbuf_r>:
 8013d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d62:	460e      	mov	r6, r1
 8013d64:	4614      	mov	r4, r2
 8013d66:	4605      	mov	r5, r0
 8013d68:	b118      	cbz	r0, 8013d72 <__swbuf_r+0x12>
 8013d6a:	6983      	ldr	r3, [r0, #24]
 8013d6c:	b90b      	cbnz	r3, 8013d72 <__swbuf_r+0x12>
 8013d6e:	f001 f849 	bl	8014e04 <__sinit>
 8013d72:	4b21      	ldr	r3, [pc, #132]	; (8013df8 <__swbuf_r+0x98>)
 8013d74:	429c      	cmp	r4, r3
 8013d76:	d12b      	bne.n	8013dd0 <__swbuf_r+0x70>
 8013d78:	686c      	ldr	r4, [r5, #4]
 8013d7a:	69a3      	ldr	r3, [r4, #24]
 8013d7c:	60a3      	str	r3, [r4, #8]
 8013d7e:	89a3      	ldrh	r3, [r4, #12]
 8013d80:	071a      	lsls	r2, r3, #28
 8013d82:	d52f      	bpl.n	8013de4 <__swbuf_r+0x84>
 8013d84:	6923      	ldr	r3, [r4, #16]
 8013d86:	b36b      	cbz	r3, 8013de4 <__swbuf_r+0x84>
 8013d88:	6923      	ldr	r3, [r4, #16]
 8013d8a:	6820      	ldr	r0, [r4, #0]
 8013d8c:	1ac0      	subs	r0, r0, r3
 8013d8e:	6963      	ldr	r3, [r4, #20]
 8013d90:	b2f6      	uxtb	r6, r6
 8013d92:	4283      	cmp	r3, r0
 8013d94:	4637      	mov	r7, r6
 8013d96:	dc04      	bgt.n	8013da2 <__swbuf_r+0x42>
 8013d98:	4621      	mov	r1, r4
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	f000 ff9e 	bl	8014cdc <_fflush_r>
 8013da0:	bb30      	cbnz	r0, 8013df0 <__swbuf_r+0x90>
 8013da2:	68a3      	ldr	r3, [r4, #8]
 8013da4:	3b01      	subs	r3, #1
 8013da6:	60a3      	str	r3, [r4, #8]
 8013da8:	6823      	ldr	r3, [r4, #0]
 8013daa:	1c5a      	adds	r2, r3, #1
 8013dac:	6022      	str	r2, [r4, #0]
 8013dae:	701e      	strb	r6, [r3, #0]
 8013db0:	6963      	ldr	r3, [r4, #20]
 8013db2:	3001      	adds	r0, #1
 8013db4:	4283      	cmp	r3, r0
 8013db6:	d004      	beq.n	8013dc2 <__swbuf_r+0x62>
 8013db8:	89a3      	ldrh	r3, [r4, #12]
 8013dba:	07db      	lsls	r3, r3, #31
 8013dbc:	d506      	bpl.n	8013dcc <__swbuf_r+0x6c>
 8013dbe:	2e0a      	cmp	r6, #10
 8013dc0:	d104      	bne.n	8013dcc <__swbuf_r+0x6c>
 8013dc2:	4621      	mov	r1, r4
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	f000 ff89 	bl	8014cdc <_fflush_r>
 8013dca:	b988      	cbnz	r0, 8013df0 <__swbuf_r+0x90>
 8013dcc:	4638      	mov	r0, r7
 8013dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dd0:	4b0a      	ldr	r3, [pc, #40]	; (8013dfc <__swbuf_r+0x9c>)
 8013dd2:	429c      	cmp	r4, r3
 8013dd4:	d101      	bne.n	8013dda <__swbuf_r+0x7a>
 8013dd6:	68ac      	ldr	r4, [r5, #8]
 8013dd8:	e7cf      	b.n	8013d7a <__swbuf_r+0x1a>
 8013dda:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <__swbuf_r+0xa0>)
 8013ddc:	429c      	cmp	r4, r3
 8013dde:	bf08      	it	eq
 8013de0:	68ec      	ldreq	r4, [r5, #12]
 8013de2:	e7ca      	b.n	8013d7a <__swbuf_r+0x1a>
 8013de4:	4621      	mov	r1, r4
 8013de6:	4628      	mov	r0, r5
 8013de8:	f000 f80c 	bl	8013e04 <__swsetup_r>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d0cb      	beq.n	8013d88 <__swbuf_r+0x28>
 8013df0:	f04f 37ff 	mov.w	r7, #4294967295
 8013df4:	e7ea      	b.n	8013dcc <__swbuf_r+0x6c>
 8013df6:	bf00      	nop
 8013df8:	080204bc 	.word	0x080204bc
 8013dfc:	080204dc 	.word	0x080204dc
 8013e00:	0802049c 	.word	0x0802049c

08013e04 <__swsetup_r>:
 8013e04:	4b32      	ldr	r3, [pc, #200]	; (8013ed0 <__swsetup_r+0xcc>)
 8013e06:	b570      	push	{r4, r5, r6, lr}
 8013e08:	681d      	ldr	r5, [r3, #0]
 8013e0a:	4606      	mov	r6, r0
 8013e0c:	460c      	mov	r4, r1
 8013e0e:	b125      	cbz	r5, 8013e1a <__swsetup_r+0x16>
 8013e10:	69ab      	ldr	r3, [r5, #24]
 8013e12:	b913      	cbnz	r3, 8013e1a <__swsetup_r+0x16>
 8013e14:	4628      	mov	r0, r5
 8013e16:	f000 fff5 	bl	8014e04 <__sinit>
 8013e1a:	4b2e      	ldr	r3, [pc, #184]	; (8013ed4 <__swsetup_r+0xd0>)
 8013e1c:	429c      	cmp	r4, r3
 8013e1e:	d10f      	bne.n	8013e40 <__swsetup_r+0x3c>
 8013e20:	686c      	ldr	r4, [r5, #4]
 8013e22:	89a3      	ldrh	r3, [r4, #12]
 8013e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e28:	0719      	lsls	r1, r3, #28
 8013e2a:	d42c      	bmi.n	8013e86 <__swsetup_r+0x82>
 8013e2c:	06dd      	lsls	r5, r3, #27
 8013e2e:	d411      	bmi.n	8013e54 <__swsetup_r+0x50>
 8013e30:	2309      	movs	r3, #9
 8013e32:	6033      	str	r3, [r6, #0]
 8013e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e38:	81a3      	strh	r3, [r4, #12]
 8013e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3e:	e03e      	b.n	8013ebe <__swsetup_r+0xba>
 8013e40:	4b25      	ldr	r3, [pc, #148]	; (8013ed8 <__swsetup_r+0xd4>)
 8013e42:	429c      	cmp	r4, r3
 8013e44:	d101      	bne.n	8013e4a <__swsetup_r+0x46>
 8013e46:	68ac      	ldr	r4, [r5, #8]
 8013e48:	e7eb      	b.n	8013e22 <__swsetup_r+0x1e>
 8013e4a:	4b24      	ldr	r3, [pc, #144]	; (8013edc <__swsetup_r+0xd8>)
 8013e4c:	429c      	cmp	r4, r3
 8013e4e:	bf08      	it	eq
 8013e50:	68ec      	ldreq	r4, [r5, #12]
 8013e52:	e7e6      	b.n	8013e22 <__swsetup_r+0x1e>
 8013e54:	0758      	lsls	r0, r3, #29
 8013e56:	d512      	bpl.n	8013e7e <__swsetup_r+0x7a>
 8013e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e5a:	b141      	cbz	r1, 8013e6e <__swsetup_r+0x6a>
 8013e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e60:	4299      	cmp	r1, r3
 8013e62:	d002      	beq.n	8013e6a <__swsetup_r+0x66>
 8013e64:	4630      	mov	r0, r6
 8013e66:	f7ff f94b 	bl	8013100 <_free_r>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8013e6e:	89a3      	ldrh	r3, [r4, #12]
 8013e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e74:	81a3      	strh	r3, [r4, #12]
 8013e76:	2300      	movs	r3, #0
 8013e78:	6063      	str	r3, [r4, #4]
 8013e7a:	6923      	ldr	r3, [r4, #16]
 8013e7c:	6023      	str	r3, [r4, #0]
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	f043 0308 	orr.w	r3, r3, #8
 8013e84:	81a3      	strh	r3, [r4, #12]
 8013e86:	6923      	ldr	r3, [r4, #16]
 8013e88:	b94b      	cbnz	r3, 8013e9e <__swsetup_r+0x9a>
 8013e8a:	89a3      	ldrh	r3, [r4, #12]
 8013e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e94:	d003      	beq.n	8013e9e <__swsetup_r+0x9a>
 8013e96:	4621      	mov	r1, r4
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f001 f87d 	bl	8014f98 <__smakebuf_r>
 8013e9e:	89a0      	ldrh	r0, [r4, #12]
 8013ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ea4:	f010 0301 	ands.w	r3, r0, #1
 8013ea8:	d00a      	beq.n	8013ec0 <__swsetup_r+0xbc>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	60a3      	str	r3, [r4, #8]
 8013eae:	6963      	ldr	r3, [r4, #20]
 8013eb0:	425b      	negs	r3, r3
 8013eb2:	61a3      	str	r3, [r4, #24]
 8013eb4:	6923      	ldr	r3, [r4, #16]
 8013eb6:	b943      	cbnz	r3, 8013eca <__swsetup_r+0xc6>
 8013eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ebc:	d1ba      	bne.n	8013e34 <__swsetup_r+0x30>
 8013ebe:	bd70      	pop	{r4, r5, r6, pc}
 8013ec0:	0781      	lsls	r1, r0, #30
 8013ec2:	bf58      	it	pl
 8013ec4:	6963      	ldrpl	r3, [r4, #20]
 8013ec6:	60a3      	str	r3, [r4, #8]
 8013ec8:	e7f4      	b.n	8013eb4 <__swsetup_r+0xb0>
 8013eca:	2000      	movs	r0, #0
 8013ecc:	e7f7      	b.n	8013ebe <__swsetup_r+0xba>
 8013ece:	bf00      	nop
 8013ed0:	20000190 	.word	0x20000190
 8013ed4:	080204bc 	.word	0x080204bc
 8013ed8:	080204dc 	.word	0x080204dc
 8013edc:	0802049c 	.word	0x0802049c

08013ee0 <quorem>:
 8013ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	6903      	ldr	r3, [r0, #16]
 8013ee6:	690c      	ldr	r4, [r1, #16]
 8013ee8:	42a3      	cmp	r3, r4
 8013eea:	4607      	mov	r7, r0
 8013eec:	f2c0 8081 	blt.w	8013ff2 <quorem+0x112>
 8013ef0:	3c01      	subs	r4, #1
 8013ef2:	f101 0814 	add.w	r8, r1, #20
 8013ef6:	f100 0514 	add.w	r5, r0, #20
 8013efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013efe:	9301      	str	r3, [sp, #4]
 8013f00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013f04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013f10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013f14:	fbb2 f6f3 	udiv	r6, r2, r3
 8013f18:	d331      	bcc.n	8013f7e <quorem+0x9e>
 8013f1a:	f04f 0e00 	mov.w	lr, #0
 8013f1e:	4640      	mov	r0, r8
 8013f20:	46ac      	mov	ip, r5
 8013f22:	46f2      	mov	sl, lr
 8013f24:	f850 2b04 	ldr.w	r2, [r0], #4
 8013f28:	b293      	uxth	r3, r2
 8013f2a:	fb06 e303 	mla	r3, r6, r3, lr
 8013f2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	ebaa 0303 	sub.w	r3, sl, r3
 8013f38:	0c12      	lsrs	r2, r2, #16
 8013f3a:	f8dc a000 	ldr.w	sl, [ip]
 8013f3e:	fb06 e202 	mla	r2, r6, r2, lr
 8013f42:	fa13 f38a 	uxtah	r3, r3, sl
 8013f46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013f4a:	fa1f fa82 	uxth.w	sl, r2
 8013f4e:	f8dc 2000 	ldr.w	r2, [ip]
 8013f52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013f56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f60:	4581      	cmp	r9, r0
 8013f62:	f84c 3b04 	str.w	r3, [ip], #4
 8013f66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013f6a:	d2db      	bcs.n	8013f24 <quorem+0x44>
 8013f6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013f70:	b92b      	cbnz	r3, 8013f7e <quorem+0x9e>
 8013f72:	9b01      	ldr	r3, [sp, #4]
 8013f74:	3b04      	subs	r3, #4
 8013f76:	429d      	cmp	r5, r3
 8013f78:	461a      	mov	r2, r3
 8013f7a:	d32e      	bcc.n	8013fda <quorem+0xfa>
 8013f7c:	613c      	str	r4, [r7, #16]
 8013f7e:	4638      	mov	r0, r7
 8013f80:	f001 fad4 	bl	801552c <__mcmp>
 8013f84:	2800      	cmp	r0, #0
 8013f86:	db24      	blt.n	8013fd2 <quorem+0xf2>
 8013f88:	3601      	adds	r6, #1
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f04f 0c00 	mov.w	ip, #0
 8013f90:	f858 2b04 	ldr.w	r2, [r8], #4
 8013f94:	f8d0 e000 	ldr.w	lr, [r0]
 8013f98:	b293      	uxth	r3, r2
 8013f9a:	ebac 0303 	sub.w	r3, ip, r3
 8013f9e:	0c12      	lsrs	r2, r2, #16
 8013fa0:	fa13 f38e 	uxtah	r3, r3, lr
 8013fa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013fa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013fb2:	45c1      	cmp	r9, r8
 8013fb4:	f840 3b04 	str.w	r3, [r0], #4
 8013fb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013fbc:	d2e8      	bcs.n	8013f90 <quorem+0xb0>
 8013fbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013fc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013fc6:	b922      	cbnz	r2, 8013fd2 <quorem+0xf2>
 8013fc8:	3b04      	subs	r3, #4
 8013fca:	429d      	cmp	r5, r3
 8013fcc:	461a      	mov	r2, r3
 8013fce:	d30a      	bcc.n	8013fe6 <quorem+0x106>
 8013fd0:	613c      	str	r4, [r7, #16]
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	b003      	add	sp, #12
 8013fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fda:	6812      	ldr	r2, [r2, #0]
 8013fdc:	3b04      	subs	r3, #4
 8013fde:	2a00      	cmp	r2, #0
 8013fe0:	d1cc      	bne.n	8013f7c <quorem+0x9c>
 8013fe2:	3c01      	subs	r4, #1
 8013fe4:	e7c7      	b.n	8013f76 <quorem+0x96>
 8013fe6:	6812      	ldr	r2, [r2, #0]
 8013fe8:	3b04      	subs	r3, #4
 8013fea:	2a00      	cmp	r2, #0
 8013fec:	d1f0      	bne.n	8013fd0 <quorem+0xf0>
 8013fee:	3c01      	subs	r4, #1
 8013ff0:	e7eb      	b.n	8013fca <quorem+0xea>
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	e7ee      	b.n	8013fd4 <quorem+0xf4>
	...

08013ff8 <_dtoa_r>:
 8013ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ffc:	ed2d 8b02 	vpush	{d8}
 8014000:	ec57 6b10 	vmov	r6, r7, d0
 8014004:	b095      	sub	sp, #84	; 0x54
 8014006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801400c:	9105      	str	r1, [sp, #20]
 801400e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014012:	4604      	mov	r4, r0
 8014014:	9209      	str	r2, [sp, #36]	; 0x24
 8014016:	930f      	str	r3, [sp, #60]	; 0x3c
 8014018:	b975      	cbnz	r5, 8014038 <_dtoa_r+0x40>
 801401a:	2010      	movs	r0, #16
 801401c:	f7ff f822 	bl	8013064 <malloc>
 8014020:	4602      	mov	r2, r0
 8014022:	6260      	str	r0, [r4, #36]	; 0x24
 8014024:	b920      	cbnz	r0, 8014030 <_dtoa_r+0x38>
 8014026:	4bb2      	ldr	r3, [pc, #712]	; (80142f0 <_dtoa_r+0x2f8>)
 8014028:	21ea      	movs	r1, #234	; 0xea
 801402a:	48b2      	ldr	r0, [pc, #712]	; (80142f4 <_dtoa_r+0x2fc>)
 801402c:	f001 fe98 	bl	8015d60 <__assert_func>
 8014030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014034:	6005      	str	r5, [r0, #0]
 8014036:	60c5      	str	r5, [r0, #12]
 8014038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801403a:	6819      	ldr	r1, [r3, #0]
 801403c:	b151      	cbz	r1, 8014054 <_dtoa_r+0x5c>
 801403e:	685a      	ldr	r2, [r3, #4]
 8014040:	604a      	str	r2, [r1, #4]
 8014042:	2301      	movs	r3, #1
 8014044:	4093      	lsls	r3, r2
 8014046:	608b      	str	r3, [r1, #8]
 8014048:	4620      	mov	r0, r4
 801404a:	f001 f831 	bl	80150b0 <_Bfree>
 801404e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]
 8014054:	1e3b      	subs	r3, r7, #0
 8014056:	bfb9      	ittee	lt
 8014058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801405c:	9303      	strlt	r3, [sp, #12]
 801405e:	2300      	movge	r3, #0
 8014060:	f8c8 3000 	strge.w	r3, [r8]
 8014064:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014068:	4ba3      	ldr	r3, [pc, #652]	; (80142f8 <_dtoa_r+0x300>)
 801406a:	bfbc      	itt	lt
 801406c:	2201      	movlt	r2, #1
 801406e:	f8c8 2000 	strlt.w	r2, [r8]
 8014072:	ea33 0309 	bics.w	r3, r3, r9
 8014076:	d11b      	bne.n	80140b0 <_dtoa_r+0xb8>
 8014078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801407a:	f242 730f 	movw	r3, #9999	; 0x270f
 801407e:	6013      	str	r3, [r2, #0]
 8014080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014084:	4333      	orrs	r3, r6
 8014086:	f000 857a 	beq.w	8014b7e <_dtoa_r+0xb86>
 801408a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801408c:	b963      	cbnz	r3, 80140a8 <_dtoa_r+0xb0>
 801408e:	4b9b      	ldr	r3, [pc, #620]	; (80142fc <_dtoa_r+0x304>)
 8014090:	e024      	b.n	80140dc <_dtoa_r+0xe4>
 8014092:	4b9b      	ldr	r3, [pc, #620]	; (8014300 <_dtoa_r+0x308>)
 8014094:	9300      	str	r3, [sp, #0]
 8014096:	3308      	adds	r3, #8
 8014098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	9800      	ldr	r0, [sp, #0]
 801409e:	b015      	add	sp, #84	; 0x54
 80140a0:	ecbd 8b02 	vpop	{d8}
 80140a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a8:	4b94      	ldr	r3, [pc, #592]	; (80142fc <_dtoa_r+0x304>)
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	3303      	adds	r3, #3
 80140ae:	e7f3      	b.n	8014098 <_dtoa_r+0xa0>
 80140b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80140b4:	2200      	movs	r2, #0
 80140b6:	ec51 0b17 	vmov	r0, r1, d7
 80140ba:	2300      	movs	r3, #0
 80140bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80140c0:	f7ec fd22 	bl	8000b08 <__aeabi_dcmpeq>
 80140c4:	4680      	mov	r8, r0
 80140c6:	b158      	cbz	r0, 80140e0 <_dtoa_r+0xe8>
 80140c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140ca:	2301      	movs	r3, #1
 80140cc:	6013      	str	r3, [r2, #0]
 80140ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f000 8551 	beq.w	8014b78 <_dtoa_r+0xb80>
 80140d6:	488b      	ldr	r0, [pc, #556]	; (8014304 <_dtoa_r+0x30c>)
 80140d8:	6018      	str	r0, [r3, #0]
 80140da:	1e43      	subs	r3, r0, #1
 80140dc:	9300      	str	r3, [sp, #0]
 80140de:	e7dd      	b.n	801409c <_dtoa_r+0xa4>
 80140e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80140e4:	aa12      	add	r2, sp, #72	; 0x48
 80140e6:	a913      	add	r1, sp, #76	; 0x4c
 80140e8:	4620      	mov	r0, r4
 80140ea:	f001 fac3 	bl	8015674 <__d2b>
 80140ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80140f2:	4683      	mov	fp, r0
 80140f4:	2d00      	cmp	r5, #0
 80140f6:	d07c      	beq.n	80141f2 <_dtoa_r+0x1fa>
 80140f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80140fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014102:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014106:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801410a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801410e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014112:	4b7d      	ldr	r3, [pc, #500]	; (8014308 <_dtoa_r+0x310>)
 8014114:	2200      	movs	r2, #0
 8014116:	4630      	mov	r0, r6
 8014118:	4639      	mov	r1, r7
 801411a:	f7ec f8d5 	bl	80002c8 <__aeabi_dsub>
 801411e:	a36e      	add	r3, pc, #440	; (adr r3, 80142d8 <_dtoa_r+0x2e0>)
 8014120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014124:	f7ec fa88 	bl	8000638 <__aeabi_dmul>
 8014128:	a36d      	add	r3, pc, #436	; (adr r3, 80142e0 <_dtoa_r+0x2e8>)
 801412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412e:	f7ec f8cd 	bl	80002cc <__adddf3>
 8014132:	4606      	mov	r6, r0
 8014134:	4628      	mov	r0, r5
 8014136:	460f      	mov	r7, r1
 8014138:	f7ec fa14 	bl	8000564 <__aeabi_i2d>
 801413c:	a36a      	add	r3, pc, #424	; (adr r3, 80142e8 <_dtoa_r+0x2f0>)
 801413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014142:	f7ec fa79 	bl	8000638 <__aeabi_dmul>
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	4630      	mov	r0, r6
 801414c:	4639      	mov	r1, r7
 801414e:	f7ec f8bd 	bl	80002cc <__adddf3>
 8014152:	4606      	mov	r6, r0
 8014154:	460f      	mov	r7, r1
 8014156:	f7ec fd1f 	bl	8000b98 <__aeabi_d2iz>
 801415a:	2200      	movs	r2, #0
 801415c:	4682      	mov	sl, r0
 801415e:	2300      	movs	r3, #0
 8014160:	4630      	mov	r0, r6
 8014162:	4639      	mov	r1, r7
 8014164:	f7ec fcda 	bl	8000b1c <__aeabi_dcmplt>
 8014168:	b148      	cbz	r0, 801417e <_dtoa_r+0x186>
 801416a:	4650      	mov	r0, sl
 801416c:	f7ec f9fa 	bl	8000564 <__aeabi_i2d>
 8014170:	4632      	mov	r2, r6
 8014172:	463b      	mov	r3, r7
 8014174:	f7ec fcc8 	bl	8000b08 <__aeabi_dcmpeq>
 8014178:	b908      	cbnz	r0, 801417e <_dtoa_r+0x186>
 801417a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801417e:	f1ba 0f16 	cmp.w	sl, #22
 8014182:	d854      	bhi.n	801422e <_dtoa_r+0x236>
 8014184:	4b61      	ldr	r3, [pc, #388]	; (801430c <_dtoa_r+0x314>)
 8014186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014192:	f7ec fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8014196:	2800      	cmp	r0, #0
 8014198:	d04b      	beq.n	8014232 <_dtoa_r+0x23a>
 801419a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801419e:	2300      	movs	r3, #0
 80141a0:	930e      	str	r3, [sp, #56]	; 0x38
 80141a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141a4:	1b5d      	subs	r5, r3, r5
 80141a6:	1e6b      	subs	r3, r5, #1
 80141a8:	9304      	str	r3, [sp, #16]
 80141aa:	bf43      	ittte	mi
 80141ac:	2300      	movmi	r3, #0
 80141ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80141b2:	9304      	strmi	r3, [sp, #16]
 80141b4:	f04f 0800 	movpl.w	r8, #0
 80141b8:	f1ba 0f00 	cmp.w	sl, #0
 80141bc:	db3b      	blt.n	8014236 <_dtoa_r+0x23e>
 80141be:	9b04      	ldr	r3, [sp, #16]
 80141c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80141c4:	4453      	add	r3, sl
 80141c6:	9304      	str	r3, [sp, #16]
 80141c8:	2300      	movs	r3, #0
 80141ca:	9306      	str	r3, [sp, #24]
 80141cc:	9b05      	ldr	r3, [sp, #20]
 80141ce:	2b09      	cmp	r3, #9
 80141d0:	d869      	bhi.n	80142a6 <_dtoa_r+0x2ae>
 80141d2:	2b05      	cmp	r3, #5
 80141d4:	bfc4      	itt	gt
 80141d6:	3b04      	subgt	r3, #4
 80141d8:	9305      	strgt	r3, [sp, #20]
 80141da:	9b05      	ldr	r3, [sp, #20]
 80141dc:	f1a3 0302 	sub.w	r3, r3, #2
 80141e0:	bfcc      	ite	gt
 80141e2:	2500      	movgt	r5, #0
 80141e4:	2501      	movle	r5, #1
 80141e6:	2b03      	cmp	r3, #3
 80141e8:	d869      	bhi.n	80142be <_dtoa_r+0x2c6>
 80141ea:	e8df f003 	tbb	[pc, r3]
 80141ee:	4e2c      	.short	0x4e2c
 80141f0:	5a4c      	.short	0x5a4c
 80141f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80141f6:	441d      	add	r5, r3
 80141f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80141fc:	2b20      	cmp	r3, #32
 80141fe:	bfc1      	itttt	gt
 8014200:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014204:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014208:	fa09 f303 	lslgt.w	r3, r9, r3
 801420c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014210:	bfda      	itte	le
 8014212:	f1c3 0320 	rsble	r3, r3, #32
 8014216:	fa06 f003 	lslle.w	r0, r6, r3
 801421a:	4318      	orrgt	r0, r3
 801421c:	f7ec f992 	bl	8000544 <__aeabi_ui2d>
 8014220:	2301      	movs	r3, #1
 8014222:	4606      	mov	r6, r0
 8014224:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014228:	3d01      	subs	r5, #1
 801422a:	9310      	str	r3, [sp, #64]	; 0x40
 801422c:	e771      	b.n	8014112 <_dtoa_r+0x11a>
 801422e:	2301      	movs	r3, #1
 8014230:	e7b6      	b.n	80141a0 <_dtoa_r+0x1a8>
 8014232:	900e      	str	r0, [sp, #56]	; 0x38
 8014234:	e7b5      	b.n	80141a2 <_dtoa_r+0x1aa>
 8014236:	f1ca 0300 	rsb	r3, sl, #0
 801423a:	9306      	str	r3, [sp, #24]
 801423c:	2300      	movs	r3, #0
 801423e:	eba8 080a 	sub.w	r8, r8, sl
 8014242:	930d      	str	r3, [sp, #52]	; 0x34
 8014244:	e7c2      	b.n	80141cc <_dtoa_r+0x1d4>
 8014246:	2300      	movs	r3, #0
 8014248:	9308      	str	r3, [sp, #32]
 801424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	dc39      	bgt.n	80142c4 <_dtoa_r+0x2cc>
 8014250:	f04f 0901 	mov.w	r9, #1
 8014254:	f8cd 9004 	str.w	r9, [sp, #4]
 8014258:	464b      	mov	r3, r9
 801425a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801425e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014260:	2200      	movs	r2, #0
 8014262:	6042      	str	r2, [r0, #4]
 8014264:	2204      	movs	r2, #4
 8014266:	f102 0614 	add.w	r6, r2, #20
 801426a:	429e      	cmp	r6, r3
 801426c:	6841      	ldr	r1, [r0, #4]
 801426e:	d92f      	bls.n	80142d0 <_dtoa_r+0x2d8>
 8014270:	4620      	mov	r0, r4
 8014272:	f000 fedd 	bl	8015030 <_Balloc>
 8014276:	9000      	str	r0, [sp, #0]
 8014278:	2800      	cmp	r0, #0
 801427a:	d14b      	bne.n	8014314 <_dtoa_r+0x31c>
 801427c:	4b24      	ldr	r3, [pc, #144]	; (8014310 <_dtoa_r+0x318>)
 801427e:	4602      	mov	r2, r0
 8014280:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014284:	e6d1      	b.n	801402a <_dtoa_r+0x32>
 8014286:	2301      	movs	r3, #1
 8014288:	e7de      	b.n	8014248 <_dtoa_r+0x250>
 801428a:	2300      	movs	r3, #0
 801428c:	9308      	str	r3, [sp, #32]
 801428e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014290:	eb0a 0903 	add.w	r9, sl, r3
 8014294:	f109 0301 	add.w	r3, r9, #1
 8014298:	2b01      	cmp	r3, #1
 801429a:	9301      	str	r3, [sp, #4]
 801429c:	bfb8      	it	lt
 801429e:	2301      	movlt	r3, #1
 80142a0:	e7dd      	b.n	801425e <_dtoa_r+0x266>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e7f2      	b.n	801428c <_dtoa_r+0x294>
 80142a6:	2501      	movs	r5, #1
 80142a8:	2300      	movs	r3, #0
 80142aa:	9305      	str	r3, [sp, #20]
 80142ac:	9508      	str	r5, [sp, #32]
 80142ae:	f04f 39ff 	mov.w	r9, #4294967295
 80142b2:	2200      	movs	r2, #0
 80142b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80142b8:	2312      	movs	r3, #18
 80142ba:	9209      	str	r2, [sp, #36]	; 0x24
 80142bc:	e7cf      	b.n	801425e <_dtoa_r+0x266>
 80142be:	2301      	movs	r3, #1
 80142c0:	9308      	str	r3, [sp, #32]
 80142c2:	e7f4      	b.n	80142ae <_dtoa_r+0x2b6>
 80142c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80142c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80142cc:	464b      	mov	r3, r9
 80142ce:	e7c6      	b.n	801425e <_dtoa_r+0x266>
 80142d0:	3101      	adds	r1, #1
 80142d2:	6041      	str	r1, [r0, #4]
 80142d4:	0052      	lsls	r2, r2, #1
 80142d6:	e7c6      	b.n	8014266 <_dtoa_r+0x26e>
 80142d8:	636f4361 	.word	0x636f4361
 80142dc:	3fd287a7 	.word	0x3fd287a7
 80142e0:	8b60c8b3 	.word	0x8b60c8b3
 80142e4:	3fc68a28 	.word	0x3fc68a28
 80142e8:	509f79fb 	.word	0x509f79fb
 80142ec:	3fd34413 	.word	0x3fd34413
 80142f0:	08020415 	.word	0x08020415
 80142f4:	0802042c 	.word	0x0802042c
 80142f8:	7ff00000 	.word	0x7ff00000
 80142fc:	08020411 	.word	0x08020411
 8014300:	08020408 	.word	0x08020408
 8014304:	080203e5 	.word	0x080203e5
 8014308:	3ff80000 	.word	0x3ff80000
 801430c:	08020588 	.word	0x08020588
 8014310:	0802048b 	.word	0x0802048b
 8014314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014316:	9a00      	ldr	r2, [sp, #0]
 8014318:	601a      	str	r2, [r3, #0]
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	2b0e      	cmp	r3, #14
 801431e:	f200 80ad 	bhi.w	801447c <_dtoa_r+0x484>
 8014322:	2d00      	cmp	r5, #0
 8014324:	f000 80aa 	beq.w	801447c <_dtoa_r+0x484>
 8014328:	f1ba 0f00 	cmp.w	sl, #0
 801432c:	dd36      	ble.n	801439c <_dtoa_r+0x3a4>
 801432e:	4ac3      	ldr	r2, [pc, #780]	; (801463c <_dtoa_r+0x644>)
 8014330:	f00a 030f 	and.w	r3, sl, #15
 8014334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014338:	ed93 7b00 	vldr	d7, [r3]
 801433c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014340:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014344:	eeb0 8a47 	vmov.f32	s16, s14
 8014348:	eef0 8a67 	vmov.f32	s17, s15
 801434c:	d016      	beq.n	801437c <_dtoa_r+0x384>
 801434e:	4bbc      	ldr	r3, [pc, #752]	; (8014640 <_dtoa_r+0x648>)
 8014350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014358:	f7ec fa98 	bl	800088c <__aeabi_ddiv>
 801435c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014360:	f007 070f 	and.w	r7, r7, #15
 8014364:	2503      	movs	r5, #3
 8014366:	4eb6      	ldr	r6, [pc, #728]	; (8014640 <_dtoa_r+0x648>)
 8014368:	b957      	cbnz	r7, 8014380 <_dtoa_r+0x388>
 801436a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801436e:	ec53 2b18 	vmov	r2, r3, d8
 8014372:	f7ec fa8b 	bl	800088c <__aeabi_ddiv>
 8014376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801437a:	e029      	b.n	80143d0 <_dtoa_r+0x3d8>
 801437c:	2502      	movs	r5, #2
 801437e:	e7f2      	b.n	8014366 <_dtoa_r+0x36e>
 8014380:	07f9      	lsls	r1, r7, #31
 8014382:	d508      	bpl.n	8014396 <_dtoa_r+0x39e>
 8014384:	ec51 0b18 	vmov	r0, r1, d8
 8014388:	e9d6 2300 	ldrd	r2, r3, [r6]
 801438c:	f7ec f954 	bl	8000638 <__aeabi_dmul>
 8014390:	ec41 0b18 	vmov	d8, r0, r1
 8014394:	3501      	adds	r5, #1
 8014396:	107f      	asrs	r7, r7, #1
 8014398:	3608      	adds	r6, #8
 801439a:	e7e5      	b.n	8014368 <_dtoa_r+0x370>
 801439c:	f000 80a6 	beq.w	80144ec <_dtoa_r+0x4f4>
 80143a0:	f1ca 0600 	rsb	r6, sl, #0
 80143a4:	4ba5      	ldr	r3, [pc, #660]	; (801463c <_dtoa_r+0x644>)
 80143a6:	4fa6      	ldr	r7, [pc, #664]	; (8014640 <_dtoa_r+0x648>)
 80143a8:	f006 020f 	and.w	r2, r6, #15
 80143ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80143b8:	f7ec f93e 	bl	8000638 <__aeabi_dmul>
 80143bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143c0:	1136      	asrs	r6, r6, #4
 80143c2:	2300      	movs	r3, #0
 80143c4:	2502      	movs	r5, #2
 80143c6:	2e00      	cmp	r6, #0
 80143c8:	f040 8085 	bne.w	80144d6 <_dtoa_r+0x4de>
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1d2      	bne.n	8014376 <_dtoa_r+0x37e>
 80143d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	f000 808c 	beq.w	80144f0 <_dtoa_r+0x4f8>
 80143d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80143dc:	4b99      	ldr	r3, [pc, #612]	; (8014644 <_dtoa_r+0x64c>)
 80143de:	2200      	movs	r2, #0
 80143e0:	4630      	mov	r0, r6
 80143e2:	4639      	mov	r1, r7
 80143e4:	f7ec fb9a 	bl	8000b1c <__aeabi_dcmplt>
 80143e8:	2800      	cmp	r0, #0
 80143ea:	f000 8081 	beq.w	80144f0 <_dtoa_r+0x4f8>
 80143ee:	9b01      	ldr	r3, [sp, #4]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d07d      	beq.n	80144f0 <_dtoa_r+0x4f8>
 80143f4:	f1b9 0f00 	cmp.w	r9, #0
 80143f8:	dd3c      	ble.n	8014474 <_dtoa_r+0x47c>
 80143fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80143fe:	9307      	str	r3, [sp, #28]
 8014400:	2200      	movs	r2, #0
 8014402:	4b91      	ldr	r3, [pc, #580]	; (8014648 <_dtoa_r+0x650>)
 8014404:	4630      	mov	r0, r6
 8014406:	4639      	mov	r1, r7
 8014408:	f7ec f916 	bl	8000638 <__aeabi_dmul>
 801440c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014410:	3501      	adds	r5, #1
 8014412:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014416:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801441a:	4628      	mov	r0, r5
 801441c:	f7ec f8a2 	bl	8000564 <__aeabi_i2d>
 8014420:	4632      	mov	r2, r6
 8014422:	463b      	mov	r3, r7
 8014424:	f7ec f908 	bl	8000638 <__aeabi_dmul>
 8014428:	4b88      	ldr	r3, [pc, #544]	; (801464c <_dtoa_r+0x654>)
 801442a:	2200      	movs	r2, #0
 801442c:	f7eb ff4e 	bl	80002cc <__adddf3>
 8014430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014438:	9303      	str	r3, [sp, #12]
 801443a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801443c:	2b00      	cmp	r3, #0
 801443e:	d15c      	bne.n	80144fa <_dtoa_r+0x502>
 8014440:	4b83      	ldr	r3, [pc, #524]	; (8014650 <_dtoa_r+0x658>)
 8014442:	2200      	movs	r2, #0
 8014444:	4630      	mov	r0, r6
 8014446:	4639      	mov	r1, r7
 8014448:	f7eb ff3e 	bl	80002c8 <__aeabi_dsub>
 801444c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	f7ec fb80 	bl	8000b58 <__aeabi_dcmpgt>
 8014458:	2800      	cmp	r0, #0
 801445a:	f040 8296 	bne.w	801498a <_dtoa_r+0x992>
 801445e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014462:	4630      	mov	r0, r6
 8014464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014468:	4639      	mov	r1, r7
 801446a:	f7ec fb57 	bl	8000b1c <__aeabi_dcmplt>
 801446e:	2800      	cmp	r0, #0
 8014470:	f040 8288 	bne.w	8014984 <_dtoa_r+0x98c>
 8014474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801447c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801447e:	2b00      	cmp	r3, #0
 8014480:	f2c0 8158 	blt.w	8014734 <_dtoa_r+0x73c>
 8014484:	f1ba 0f0e 	cmp.w	sl, #14
 8014488:	f300 8154 	bgt.w	8014734 <_dtoa_r+0x73c>
 801448c:	4b6b      	ldr	r3, [pc, #428]	; (801463c <_dtoa_r+0x644>)
 801448e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014492:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014498:	2b00      	cmp	r3, #0
 801449a:	f280 80e3 	bge.w	8014664 <_dtoa_r+0x66c>
 801449e:	9b01      	ldr	r3, [sp, #4]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f300 80df 	bgt.w	8014664 <_dtoa_r+0x66c>
 80144a6:	f040 826d 	bne.w	8014984 <_dtoa_r+0x98c>
 80144aa:	4b69      	ldr	r3, [pc, #420]	; (8014650 <_dtoa_r+0x658>)
 80144ac:	2200      	movs	r2, #0
 80144ae:	4640      	mov	r0, r8
 80144b0:	4649      	mov	r1, r9
 80144b2:	f7ec f8c1 	bl	8000638 <__aeabi_dmul>
 80144b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144ba:	f7ec fb43 	bl	8000b44 <__aeabi_dcmpge>
 80144be:	9e01      	ldr	r6, [sp, #4]
 80144c0:	4637      	mov	r7, r6
 80144c2:	2800      	cmp	r0, #0
 80144c4:	f040 8243 	bne.w	801494e <_dtoa_r+0x956>
 80144c8:	9d00      	ldr	r5, [sp, #0]
 80144ca:	2331      	movs	r3, #49	; 0x31
 80144cc:	f805 3b01 	strb.w	r3, [r5], #1
 80144d0:	f10a 0a01 	add.w	sl, sl, #1
 80144d4:	e23f      	b.n	8014956 <_dtoa_r+0x95e>
 80144d6:	07f2      	lsls	r2, r6, #31
 80144d8:	d505      	bpl.n	80144e6 <_dtoa_r+0x4ee>
 80144da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80144de:	f7ec f8ab 	bl	8000638 <__aeabi_dmul>
 80144e2:	3501      	adds	r5, #1
 80144e4:	2301      	movs	r3, #1
 80144e6:	1076      	asrs	r6, r6, #1
 80144e8:	3708      	adds	r7, #8
 80144ea:	e76c      	b.n	80143c6 <_dtoa_r+0x3ce>
 80144ec:	2502      	movs	r5, #2
 80144ee:	e76f      	b.n	80143d0 <_dtoa_r+0x3d8>
 80144f0:	9b01      	ldr	r3, [sp, #4]
 80144f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80144f6:	930c      	str	r3, [sp, #48]	; 0x30
 80144f8:	e78d      	b.n	8014416 <_dtoa_r+0x41e>
 80144fa:	9900      	ldr	r1, [sp, #0]
 80144fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80144fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014500:	4b4e      	ldr	r3, [pc, #312]	; (801463c <_dtoa_r+0x644>)
 8014502:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014506:	4401      	add	r1, r0
 8014508:	9102      	str	r1, [sp, #8]
 801450a:	9908      	ldr	r1, [sp, #32]
 801450c:	eeb0 8a47 	vmov.f32	s16, s14
 8014510:	eef0 8a67 	vmov.f32	s17, s15
 8014514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801451c:	2900      	cmp	r1, #0
 801451e:	d045      	beq.n	80145ac <_dtoa_r+0x5b4>
 8014520:	494c      	ldr	r1, [pc, #304]	; (8014654 <_dtoa_r+0x65c>)
 8014522:	2000      	movs	r0, #0
 8014524:	f7ec f9b2 	bl	800088c <__aeabi_ddiv>
 8014528:	ec53 2b18 	vmov	r2, r3, d8
 801452c:	f7eb fecc 	bl	80002c8 <__aeabi_dsub>
 8014530:	9d00      	ldr	r5, [sp, #0]
 8014532:	ec41 0b18 	vmov	d8, r0, r1
 8014536:	4639      	mov	r1, r7
 8014538:	4630      	mov	r0, r6
 801453a:	f7ec fb2d 	bl	8000b98 <__aeabi_d2iz>
 801453e:	900c      	str	r0, [sp, #48]	; 0x30
 8014540:	f7ec f810 	bl	8000564 <__aeabi_i2d>
 8014544:	4602      	mov	r2, r0
 8014546:	460b      	mov	r3, r1
 8014548:	4630      	mov	r0, r6
 801454a:	4639      	mov	r1, r7
 801454c:	f7eb febc 	bl	80002c8 <__aeabi_dsub>
 8014550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014552:	3330      	adds	r3, #48	; 0x30
 8014554:	f805 3b01 	strb.w	r3, [r5], #1
 8014558:	ec53 2b18 	vmov	r2, r3, d8
 801455c:	4606      	mov	r6, r0
 801455e:	460f      	mov	r7, r1
 8014560:	f7ec fadc 	bl	8000b1c <__aeabi_dcmplt>
 8014564:	2800      	cmp	r0, #0
 8014566:	d165      	bne.n	8014634 <_dtoa_r+0x63c>
 8014568:	4632      	mov	r2, r6
 801456a:	463b      	mov	r3, r7
 801456c:	4935      	ldr	r1, [pc, #212]	; (8014644 <_dtoa_r+0x64c>)
 801456e:	2000      	movs	r0, #0
 8014570:	f7eb feaa 	bl	80002c8 <__aeabi_dsub>
 8014574:	ec53 2b18 	vmov	r2, r3, d8
 8014578:	f7ec fad0 	bl	8000b1c <__aeabi_dcmplt>
 801457c:	2800      	cmp	r0, #0
 801457e:	f040 80b9 	bne.w	80146f4 <_dtoa_r+0x6fc>
 8014582:	9b02      	ldr	r3, [sp, #8]
 8014584:	429d      	cmp	r5, r3
 8014586:	f43f af75 	beq.w	8014474 <_dtoa_r+0x47c>
 801458a:	4b2f      	ldr	r3, [pc, #188]	; (8014648 <_dtoa_r+0x650>)
 801458c:	ec51 0b18 	vmov	r0, r1, d8
 8014590:	2200      	movs	r2, #0
 8014592:	f7ec f851 	bl	8000638 <__aeabi_dmul>
 8014596:	4b2c      	ldr	r3, [pc, #176]	; (8014648 <_dtoa_r+0x650>)
 8014598:	ec41 0b18 	vmov	d8, r0, r1
 801459c:	2200      	movs	r2, #0
 801459e:	4630      	mov	r0, r6
 80145a0:	4639      	mov	r1, r7
 80145a2:	f7ec f849 	bl	8000638 <__aeabi_dmul>
 80145a6:	4606      	mov	r6, r0
 80145a8:	460f      	mov	r7, r1
 80145aa:	e7c4      	b.n	8014536 <_dtoa_r+0x53e>
 80145ac:	ec51 0b17 	vmov	r0, r1, d7
 80145b0:	f7ec f842 	bl	8000638 <__aeabi_dmul>
 80145b4:	9b02      	ldr	r3, [sp, #8]
 80145b6:	9d00      	ldr	r5, [sp, #0]
 80145b8:	930c      	str	r3, [sp, #48]	; 0x30
 80145ba:	ec41 0b18 	vmov	d8, r0, r1
 80145be:	4639      	mov	r1, r7
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7ec fae9 	bl	8000b98 <__aeabi_d2iz>
 80145c6:	9011      	str	r0, [sp, #68]	; 0x44
 80145c8:	f7eb ffcc 	bl	8000564 <__aeabi_i2d>
 80145cc:	4602      	mov	r2, r0
 80145ce:	460b      	mov	r3, r1
 80145d0:	4630      	mov	r0, r6
 80145d2:	4639      	mov	r1, r7
 80145d4:	f7eb fe78 	bl	80002c8 <__aeabi_dsub>
 80145d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145da:	3330      	adds	r3, #48	; 0x30
 80145dc:	f805 3b01 	strb.w	r3, [r5], #1
 80145e0:	9b02      	ldr	r3, [sp, #8]
 80145e2:	429d      	cmp	r5, r3
 80145e4:	4606      	mov	r6, r0
 80145e6:	460f      	mov	r7, r1
 80145e8:	f04f 0200 	mov.w	r2, #0
 80145ec:	d134      	bne.n	8014658 <_dtoa_r+0x660>
 80145ee:	4b19      	ldr	r3, [pc, #100]	; (8014654 <_dtoa_r+0x65c>)
 80145f0:	ec51 0b18 	vmov	r0, r1, d8
 80145f4:	f7eb fe6a 	bl	80002cc <__adddf3>
 80145f8:	4602      	mov	r2, r0
 80145fa:	460b      	mov	r3, r1
 80145fc:	4630      	mov	r0, r6
 80145fe:	4639      	mov	r1, r7
 8014600:	f7ec faaa 	bl	8000b58 <__aeabi_dcmpgt>
 8014604:	2800      	cmp	r0, #0
 8014606:	d175      	bne.n	80146f4 <_dtoa_r+0x6fc>
 8014608:	ec53 2b18 	vmov	r2, r3, d8
 801460c:	4911      	ldr	r1, [pc, #68]	; (8014654 <_dtoa_r+0x65c>)
 801460e:	2000      	movs	r0, #0
 8014610:	f7eb fe5a 	bl	80002c8 <__aeabi_dsub>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	4630      	mov	r0, r6
 801461a:	4639      	mov	r1, r7
 801461c:	f7ec fa7e 	bl	8000b1c <__aeabi_dcmplt>
 8014620:	2800      	cmp	r0, #0
 8014622:	f43f af27 	beq.w	8014474 <_dtoa_r+0x47c>
 8014626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014628:	1e6b      	subs	r3, r5, #1
 801462a:	930c      	str	r3, [sp, #48]	; 0x30
 801462c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014630:	2b30      	cmp	r3, #48	; 0x30
 8014632:	d0f8      	beq.n	8014626 <_dtoa_r+0x62e>
 8014634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014638:	e04a      	b.n	80146d0 <_dtoa_r+0x6d8>
 801463a:	bf00      	nop
 801463c:	08020588 	.word	0x08020588
 8014640:	08020560 	.word	0x08020560
 8014644:	3ff00000 	.word	0x3ff00000
 8014648:	40240000 	.word	0x40240000
 801464c:	401c0000 	.word	0x401c0000
 8014650:	40140000 	.word	0x40140000
 8014654:	3fe00000 	.word	0x3fe00000
 8014658:	4baf      	ldr	r3, [pc, #700]	; (8014918 <_dtoa_r+0x920>)
 801465a:	f7eb ffed 	bl	8000638 <__aeabi_dmul>
 801465e:	4606      	mov	r6, r0
 8014660:	460f      	mov	r7, r1
 8014662:	e7ac      	b.n	80145be <_dtoa_r+0x5c6>
 8014664:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014668:	9d00      	ldr	r5, [sp, #0]
 801466a:	4642      	mov	r2, r8
 801466c:	464b      	mov	r3, r9
 801466e:	4630      	mov	r0, r6
 8014670:	4639      	mov	r1, r7
 8014672:	f7ec f90b 	bl	800088c <__aeabi_ddiv>
 8014676:	f7ec fa8f 	bl	8000b98 <__aeabi_d2iz>
 801467a:	9002      	str	r0, [sp, #8]
 801467c:	f7eb ff72 	bl	8000564 <__aeabi_i2d>
 8014680:	4642      	mov	r2, r8
 8014682:	464b      	mov	r3, r9
 8014684:	f7eb ffd8 	bl	8000638 <__aeabi_dmul>
 8014688:	4602      	mov	r2, r0
 801468a:	460b      	mov	r3, r1
 801468c:	4630      	mov	r0, r6
 801468e:	4639      	mov	r1, r7
 8014690:	f7eb fe1a 	bl	80002c8 <__aeabi_dsub>
 8014694:	9e02      	ldr	r6, [sp, #8]
 8014696:	9f01      	ldr	r7, [sp, #4]
 8014698:	3630      	adds	r6, #48	; 0x30
 801469a:	f805 6b01 	strb.w	r6, [r5], #1
 801469e:	9e00      	ldr	r6, [sp, #0]
 80146a0:	1bae      	subs	r6, r5, r6
 80146a2:	42b7      	cmp	r7, r6
 80146a4:	4602      	mov	r2, r0
 80146a6:	460b      	mov	r3, r1
 80146a8:	d137      	bne.n	801471a <_dtoa_r+0x722>
 80146aa:	f7eb fe0f 	bl	80002cc <__adddf3>
 80146ae:	4642      	mov	r2, r8
 80146b0:	464b      	mov	r3, r9
 80146b2:	4606      	mov	r6, r0
 80146b4:	460f      	mov	r7, r1
 80146b6:	f7ec fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 80146ba:	b9c8      	cbnz	r0, 80146f0 <_dtoa_r+0x6f8>
 80146bc:	4642      	mov	r2, r8
 80146be:	464b      	mov	r3, r9
 80146c0:	4630      	mov	r0, r6
 80146c2:	4639      	mov	r1, r7
 80146c4:	f7ec fa20 	bl	8000b08 <__aeabi_dcmpeq>
 80146c8:	b110      	cbz	r0, 80146d0 <_dtoa_r+0x6d8>
 80146ca:	9b02      	ldr	r3, [sp, #8]
 80146cc:	07d9      	lsls	r1, r3, #31
 80146ce:	d40f      	bmi.n	80146f0 <_dtoa_r+0x6f8>
 80146d0:	4620      	mov	r0, r4
 80146d2:	4659      	mov	r1, fp
 80146d4:	f000 fcec 	bl	80150b0 <_Bfree>
 80146d8:	2300      	movs	r3, #0
 80146da:	702b      	strb	r3, [r5, #0]
 80146dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146de:	f10a 0001 	add.w	r0, sl, #1
 80146e2:	6018      	str	r0, [r3, #0]
 80146e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f43f acd8 	beq.w	801409c <_dtoa_r+0xa4>
 80146ec:	601d      	str	r5, [r3, #0]
 80146ee:	e4d5      	b.n	801409c <_dtoa_r+0xa4>
 80146f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80146f4:	462b      	mov	r3, r5
 80146f6:	461d      	mov	r5, r3
 80146f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146fc:	2a39      	cmp	r2, #57	; 0x39
 80146fe:	d108      	bne.n	8014712 <_dtoa_r+0x71a>
 8014700:	9a00      	ldr	r2, [sp, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	d1f7      	bne.n	80146f6 <_dtoa_r+0x6fe>
 8014706:	9a07      	ldr	r2, [sp, #28]
 8014708:	9900      	ldr	r1, [sp, #0]
 801470a:	3201      	adds	r2, #1
 801470c:	9207      	str	r2, [sp, #28]
 801470e:	2230      	movs	r2, #48	; 0x30
 8014710:	700a      	strb	r2, [r1, #0]
 8014712:	781a      	ldrb	r2, [r3, #0]
 8014714:	3201      	adds	r2, #1
 8014716:	701a      	strb	r2, [r3, #0]
 8014718:	e78c      	b.n	8014634 <_dtoa_r+0x63c>
 801471a:	4b7f      	ldr	r3, [pc, #508]	; (8014918 <_dtoa_r+0x920>)
 801471c:	2200      	movs	r2, #0
 801471e:	f7eb ff8b 	bl	8000638 <__aeabi_dmul>
 8014722:	2200      	movs	r2, #0
 8014724:	2300      	movs	r3, #0
 8014726:	4606      	mov	r6, r0
 8014728:	460f      	mov	r7, r1
 801472a:	f7ec f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 801472e:	2800      	cmp	r0, #0
 8014730:	d09b      	beq.n	801466a <_dtoa_r+0x672>
 8014732:	e7cd      	b.n	80146d0 <_dtoa_r+0x6d8>
 8014734:	9a08      	ldr	r2, [sp, #32]
 8014736:	2a00      	cmp	r2, #0
 8014738:	f000 80c4 	beq.w	80148c4 <_dtoa_r+0x8cc>
 801473c:	9a05      	ldr	r2, [sp, #20]
 801473e:	2a01      	cmp	r2, #1
 8014740:	f300 80a8 	bgt.w	8014894 <_dtoa_r+0x89c>
 8014744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014746:	2a00      	cmp	r2, #0
 8014748:	f000 80a0 	beq.w	801488c <_dtoa_r+0x894>
 801474c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014750:	9e06      	ldr	r6, [sp, #24]
 8014752:	4645      	mov	r5, r8
 8014754:	9a04      	ldr	r2, [sp, #16]
 8014756:	2101      	movs	r1, #1
 8014758:	441a      	add	r2, r3
 801475a:	4620      	mov	r0, r4
 801475c:	4498      	add	r8, r3
 801475e:	9204      	str	r2, [sp, #16]
 8014760:	f000 fd62 	bl	8015228 <__i2b>
 8014764:	4607      	mov	r7, r0
 8014766:	2d00      	cmp	r5, #0
 8014768:	dd0b      	ble.n	8014782 <_dtoa_r+0x78a>
 801476a:	9b04      	ldr	r3, [sp, #16]
 801476c:	2b00      	cmp	r3, #0
 801476e:	dd08      	ble.n	8014782 <_dtoa_r+0x78a>
 8014770:	42ab      	cmp	r3, r5
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	bfa8      	it	ge
 8014776:	462b      	movge	r3, r5
 8014778:	eba8 0803 	sub.w	r8, r8, r3
 801477c:	1aed      	subs	r5, r5, r3
 801477e:	1ad3      	subs	r3, r2, r3
 8014780:	9304      	str	r3, [sp, #16]
 8014782:	9b06      	ldr	r3, [sp, #24]
 8014784:	b1fb      	cbz	r3, 80147c6 <_dtoa_r+0x7ce>
 8014786:	9b08      	ldr	r3, [sp, #32]
 8014788:	2b00      	cmp	r3, #0
 801478a:	f000 809f 	beq.w	80148cc <_dtoa_r+0x8d4>
 801478e:	2e00      	cmp	r6, #0
 8014790:	dd11      	ble.n	80147b6 <_dtoa_r+0x7be>
 8014792:	4639      	mov	r1, r7
 8014794:	4632      	mov	r2, r6
 8014796:	4620      	mov	r0, r4
 8014798:	f000 fe02 	bl	80153a0 <__pow5mult>
 801479c:	465a      	mov	r2, fp
 801479e:	4601      	mov	r1, r0
 80147a0:	4607      	mov	r7, r0
 80147a2:	4620      	mov	r0, r4
 80147a4:	f000 fd56 	bl	8015254 <__multiply>
 80147a8:	4659      	mov	r1, fp
 80147aa:	9007      	str	r0, [sp, #28]
 80147ac:	4620      	mov	r0, r4
 80147ae:	f000 fc7f 	bl	80150b0 <_Bfree>
 80147b2:	9b07      	ldr	r3, [sp, #28]
 80147b4:	469b      	mov	fp, r3
 80147b6:	9b06      	ldr	r3, [sp, #24]
 80147b8:	1b9a      	subs	r2, r3, r6
 80147ba:	d004      	beq.n	80147c6 <_dtoa_r+0x7ce>
 80147bc:	4659      	mov	r1, fp
 80147be:	4620      	mov	r0, r4
 80147c0:	f000 fdee 	bl	80153a0 <__pow5mult>
 80147c4:	4683      	mov	fp, r0
 80147c6:	2101      	movs	r1, #1
 80147c8:	4620      	mov	r0, r4
 80147ca:	f000 fd2d 	bl	8015228 <__i2b>
 80147ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	4606      	mov	r6, r0
 80147d4:	dd7c      	ble.n	80148d0 <_dtoa_r+0x8d8>
 80147d6:	461a      	mov	r2, r3
 80147d8:	4601      	mov	r1, r0
 80147da:	4620      	mov	r0, r4
 80147dc:	f000 fde0 	bl	80153a0 <__pow5mult>
 80147e0:	9b05      	ldr	r3, [sp, #20]
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	4606      	mov	r6, r0
 80147e6:	dd76      	ble.n	80148d6 <_dtoa_r+0x8de>
 80147e8:	2300      	movs	r3, #0
 80147ea:	9306      	str	r3, [sp, #24]
 80147ec:	6933      	ldr	r3, [r6, #16]
 80147ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80147f2:	6918      	ldr	r0, [r3, #16]
 80147f4:	f000 fcc8 	bl	8015188 <__hi0bits>
 80147f8:	f1c0 0020 	rsb	r0, r0, #32
 80147fc:	9b04      	ldr	r3, [sp, #16]
 80147fe:	4418      	add	r0, r3
 8014800:	f010 001f 	ands.w	r0, r0, #31
 8014804:	f000 8086 	beq.w	8014914 <_dtoa_r+0x91c>
 8014808:	f1c0 0320 	rsb	r3, r0, #32
 801480c:	2b04      	cmp	r3, #4
 801480e:	dd7f      	ble.n	8014910 <_dtoa_r+0x918>
 8014810:	f1c0 001c 	rsb	r0, r0, #28
 8014814:	9b04      	ldr	r3, [sp, #16]
 8014816:	4403      	add	r3, r0
 8014818:	4480      	add	r8, r0
 801481a:	4405      	add	r5, r0
 801481c:	9304      	str	r3, [sp, #16]
 801481e:	f1b8 0f00 	cmp.w	r8, #0
 8014822:	dd05      	ble.n	8014830 <_dtoa_r+0x838>
 8014824:	4659      	mov	r1, fp
 8014826:	4642      	mov	r2, r8
 8014828:	4620      	mov	r0, r4
 801482a:	f000 fe13 	bl	8015454 <__lshift>
 801482e:	4683      	mov	fp, r0
 8014830:	9b04      	ldr	r3, [sp, #16]
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd05      	ble.n	8014842 <_dtoa_r+0x84a>
 8014836:	4631      	mov	r1, r6
 8014838:	461a      	mov	r2, r3
 801483a:	4620      	mov	r0, r4
 801483c:	f000 fe0a 	bl	8015454 <__lshift>
 8014840:	4606      	mov	r6, r0
 8014842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014844:	2b00      	cmp	r3, #0
 8014846:	d069      	beq.n	801491c <_dtoa_r+0x924>
 8014848:	4631      	mov	r1, r6
 801484a:	4658      	mov	r0, fp
 801484c:	f000 fe6e 	bl	801552c <__mcmp>
 8014850:	2800      	cmp	r0, #0
 8014852:	da63      	bge.n	801491c <_dtoa_r+0x924>
 8014854:	2300      	movs	r3, #0
 8014856:	4659      	mov	r1, fp
 8014858:	220a      	movs	r2, #10
 801485a:	4620      	mov	r0, r4
 801485c:	f000 fc4a 	bl	80150f4 <__multadd>
 8014860:	9b08      	ldr	r3, [sp, #32]
 8014862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014866:	4683      	mov	fp, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	f000 818f 	beq.w	8014b8c <_dtoa_r+0xb94>
 801486e:	4639      	mov	r1, r7
 8014870:	2300      	movs	r3, #0
 8014872:	220a      	movs	r2, #10
 8014874:	4620      	mov	r0, r4
 8014876:	f000 fc3d 	bl	80150f4 <__multadd>
 801487a:	f1b9 0f00 	cmp.w	r9, #0
 801487e:	4607      	mov	r7, r0
 8014880:	f300 808e 	bgt.w	80149a0 <_dtoa_r+0x9a8>
 8014884:	9b05      	ldr	r3, [sp, #20]
 8014886:	2b02      	cmp	r3, #2
 8014888:	dc50      	bgt.n	801492c <_dtoa_r+0x934>
 801488a:	e089      	b.n	80149a0 <_dtoa_r+0x9a8>
 801488c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801488e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014892:	e75d      	b.n	8014750 <_dtoa_r+0x758>
 8014894:	9b01      	ldr	r3, [sp, #4]
 8014896:	1e5e      	subs	r6, r3, #1
 8014898:	9b06      	ldr	r3, [sp, #24]
 801489a:	42b3      	cmp	r3, r6
 801489c:	bfbf      	itttt	lt
 801489e:	9b06      	ldrlt	r3, [sp, #24]
 80148a0:	9606      	strlt	r6, [sp, #24]
 80148a2:	1af2      	sublt	r2, r6, r3
 80148a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80148a6:	bfb6      	itet	lt
 80148a8:	189b      	addlt	r3, r3, r2
 80148aa:	1b9e      	subge	r6, r3, r6
 80148ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80148ae:	9b01      	ldr	r3, [sp, #4]
 80148b0:	bfb8      	it	lt
 80148b2:	2600      	movlt	r6, #0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	bfb5      	itete	lt
 80148b8:	eba8 0503 	sublt.w	r5, r8, r3
 80148bc:	9b01      	ldrge	r3, [sp, #4]
 80148be:	2300      	movlt	r3, #0
 80148c0:	4645      	movge	r5, r8
 80148c2:	e747      	b.n	8014754 <_dtoa_r+0x75c>
 80148c4:	9e06      	ldr	r6, [sp, #24]
 80148c6:	9f08      	ldr	r7, [sp, #32]
 80148c8:	4645      	mov	r5, r8
 80148ca:	e74c      	b.n	8014766 <_dtoa_r+0x76e>
 80148cc:	9a06      	ldr	r2, [sp, #24]
 80148ce:	e775      	b.n	80147bc <_dtoa_r+0x7c4>
 80148d0:	9b05      	ldr	r3, [sp, #20]
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	dc18      	bgt.n	8014908 <_dtoa_r+0x910>
 80148d6:	9b02      	ldr	r3, [sp, #8]
 80148d8:	b9b3      	cbnz	r3, 8014908 <_dtoa_r+0x910>
 80148da:	9b03      	ldr	r3, [sp, #12]
 80148dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148e0:	b9a3      	cbnz	r3, 801490c <_dtoa_r+0x914>
 80148e2:	9b03      	ldr	r3, [sp, #12]
 80148e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148e8:	0d1b      	lsrs	r3, r3, #20
 80148ea:	051b      	lsls	r3, r3, #20
 80148ec:	b12b      	cbz	r3, 80148fa <_dtoa_r+0x902>
 80148ee:	9b04      	ldr	r3, [sp, #16]
 80148f0:	3301      	adds	r3, #1
 80148f2:	9304      	str	r3, [sp, #16]
 80148f4:	f108 0801 	add.w	r8, r8, #1
 80148f8:	2301      	movs	r3, #1
 80148fa:	9306      	str	r3, [sp, #24]
 80148fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f47f af74 	bne.w	80147ec <_dtoa_r+0x7f4>
 8014904:	2001      	movs	r0, #1
 8014906:	e779      	b.n	80147fc <_dtoa_r+0x804>
 8014908:	2300      	movs	r3, #0
 801490a:	e7f6      	b.n	80148fa <_dtoa_r+0x902>
 801490c:	9b02      	ldr	r3, [sp, #8]
 801490e:	e7f4      	b.n	80148fa <_dtoa_r+0x902>
 8014910:	d085      	beq.n	801481e <_dtoa_r+0x826>
 8014912:	4618      	mov	r0, r3
 8014914:	301c      	adds	r0, #28
 8014916:	e77d      	b.n	8014814 <_dtoa_r+0x81c>
 8014918:	40240000 	.word	0x40240000
 801491c:	9b01      	ldr	r3, [sp, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	dc38      	bgt.n	8014994 <_dtoa_r+0x99c>
 8014922:	9b05      	ldr	r3, [sp, #20]
 8014924:	2b02      	cmp	r3, #2
 8014926:	dd35      	ble.n	8014994 <_dtoa_r+0x99c>
 8014928:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801492c:	f1b9 0f00 	cmp.w	r9, #0
 8014930:	d10d      	bne.n	801494e <_dtoa_r+0x956>
 8014932:	4631      	mov	r1, r6
 8014934:	464b      	mov	r3, r9
 8014936:	2205      	movs	r2, #5
 8014938:	4620      	mov	r0, r4
 801493a:	f000 fbdb 	bl	80150f4 <__multadd>
 801493e:	4601      	mov	r1, r0
 8014940:	4606      	mov	r6, r0
 8014942:	4658      	mov	r0, fp
 8014944:	f000 fdf2 	bl	801552c <__mcmp>
 8014948:	2800      	cmp	r0, #0
 801494a:	f73f adbd 	bgt.w	80144c8 <_dtoa_r+0x4d0>
 801494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014950:	9d00      	ldr	r5, [sp, #0]
 8014952:	ea6f 0a03 	mvn.w	sl, r3
 8014956:	f04f 0800 	mov.w	r8, #0
 801495a:	4631      	mov	r1, r6
 801495c:	4620      	mov	r0, r4
 801495e:	f000 fba7 	bl	80150b0 <_Bfree>
 8014962:	2f00      	cmp	r7, #0
 8014964:	f43f aeb4 	beq.w	80146d0 <_dtoa_r+0x6d8>
 8014968:	f1b8 0f00 	cmp.w	r8, #0
 801496c:	d005      	beq.n	801497a <_dtoa_r+0x982>
 801496e:	45b8      	cmp	r8, r7
 8014970:	d003      	beq.n	801497a <_dtoa_r+0x982>
 8014972:	4641      	mov	r1, r8
 8014974:	4620      	mov	r0, r4
 8014976:	f000 fb9b 	bl	80150b0 <_Bfree>
 801497a:	4639      	mov	r1, r7
 801497c:	4620      	mov	r0, r4
 801497e:	f000 fb97 	bl	80150b0 <_Bfree>
 8014982:	e6a5      	b.n	80146d0 <_dtoa_r+0x6d8>
 8014984:	2600      	movs	r6, #0
 8014986:	4637      	mov	r7, r6
 8014988:	e7e1      	b.n	801494e <_dtoa_r+0x956>
 801498a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801498c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014990:	4637      	mov	r7, r6
 8014992:	e599      	b.n	80144c8 <_dtoa_r+0x4d0>
 8014994:	9b08      	ldr	r3, [sp, #32]
 8014996:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	f000 80fd 	beq.w	8014b9a <_dtoa_r+0xba2>
 80149a0:	2d00      	cmp	r5, #0
 80149a2:	dd05      	ble.n	80149b0 <_dtoa_r+0x9b8>
 80149a4:	4639      	mov	r1, r7
 80149a6:	462a      	mov	r2, r5
 80149a8:	4620      	mov	r0, r4
 80149aa:	f000 fd53 	bl	8015454 <__lshift>
 80149ae:	4607      	mov	r7, r0
 80149b0:	9b06      	ldr	r3, [sp, #24]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d05c      	beq.n	8014a70 <_dtoa_r+0xa78>
 80149b6:	6879      	ldr	r1, [r7, #4]
 80149b8:	4620      	mov	r0, r4
 80149ba:	f000 fb39 	bl	8015030 <_Balloc>
 80149be:	4605      	mov	r5, r0
 80149c0:	b928      	cbnz	r0, 80149ce <_dtoa_r+0x9d6>
 80149c2:	4b80      	ldr	r3, [pc, #512]	; (8014bc4 <_dtoa_r+0xbcc>)
 80149c4:	4602      	mov	r2, r0
 80149c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80149ca:	f7ff bb2e 	b.w	801402a <_dtoa_r+0x32>
 80149ce:	693a      	ldr	r2, [r7, #16]
 80149d0:	3202      	adds	r2, #2
 80149d2:	0092      	lsls	r2, r2, #2
 80149d4:	f107 010c 	add.w	r1, r7, #12
 80149d8:	300c      	adds	r0, #12
 80149da:	f7fe fb61 	bl	80130a0 <memcpy>
 80149de:	2201      	movs	r2, #1
 80149e0:	4629      	mov	r1, r5
 80149e2:	4620      	mov	r0, r4
 80149e4:	f000 fd36 	bl	8015454 <__lshift>
 80149e8:	9b00      	ldr	r3, [sp, #0]
 80149ea:	3301      	adds	r3, #1
 80149ec:	9301      	str	r3, [sp, #4]
 80149ee:	9b00      	ldr	r3, [sp, #0]
 80149f0:	444b      	add	r3, r9
 80149f2:	9307      	str	r3, [sp, #28]
 80149f4:	9b02      	ldr	r3, [sp, #8]
 80149f6:	f003 0301 	and.w	r3, r3, #1
 80149fa:	46b8      	mov	r8, r7
 80149fc:	9306      	str	r3, [sp, #24]
 80149fe:	4607      	mov	r7, r0
 8014a00:	9b01      	ldr	r3, [sp, #4]
 8014a02:	4631      	mov	r1, r6
 8014a04:	3b01      	subs	r3, #1
 8014a06:	4658      	mov	r0, fp
 8014a08:	9302      	str	r3, [sp, #8]
 8014a0a:	f7ff fa69 	bl	8013ee0 <quorem>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	3330      	adds	r3, #48	; 0x30
 8014a12:	9004      	str	r0, [sp, #16]
 8014a14:	4641      	mov	r1, r8
 8014a16:	4658      	mov	r0, fp
 8014a18:	9308      	str	r3, [sp, #32]
 8014a1a:	f000 fd87 	bl	801552c <__mcmp>
 8014a1e:	463a      	mov	r2, r7
 8014a20:	4681      	mov	r9, r0
 8014a22:	4631      	mov	r1, r6
 8014a24:	4620      	mov	r0, r4
 8014a26:	f000 fd9d 	bl	8015564 <__mdiff>
 8014a2a:	68c2      	ldr	r2, [r0, #12]
 8014a2c:	9b08      	ldr	r3, [sp, #32]
 8014a2e:	4605      	mov	r5, r0
 8014a30:	bb02      	cbnz	r2, 8014a74 <_dtoa_r+0xa7c>
 8014a32:	4601      	mov	r1, r0
 8014a34:	4658      	mov	r0, fp
 8014a36:	f000 fd79 	bl	801552c <__mcmp>
 8014a3a:	9b08      	ldr	r3, [sp, #32]
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	4629      	mov	r1, r5
 8014a40:	4620      	mov	r0, r4
 8014a42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014a46:	f000 fb33 	bl	80150b0 <_Bfree>
 8014a4a:	9b05      	ldr	r3, [sp, #20]
 8014a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a4e:	9d01      	ldr	r5, [sp, #4]
 8014a50:	ea43 0102 	orr.w	r1, r3, r2
 8014a54:	9b06      	ldr	r3, [sp, #24]
 8014a56:	430b      	orrs	r3, r1
 8014a58:	9b08      	ldr	r3, [sp, #32]
 8014a5a:	d10d      	bne.n	8014a78 <_dtoa_r+0xa80>
 8014a5c:	2b39      	cmp	r3, #57	; 0x39
 8014a5e:	d029      	beq.n	8014ab4 <_dtoa_r+0xabc>
 8014a60:	f1b9 0f00 	cmp.w	r9, #0
 8014a64:	dd01      	ble.n	8014a6a <_dtoa_r+0xa72>
 8014a66:	9b04      	ldr	r3, [sp, #16]
 8014a68:	3331      	adds	r3, #49	; 0x31
 8014a6a:	9a02      	ldr	r2, [sp, #8]
 8014a6c:	7013      	strb	r3, [r2, #0]
 8014a6e:	e774      	b.n	801495a <_dtoa_r+0x962>
 8014a70:	4638      	mov	r0, r7
 8014a72:	e7b9      	b.n	80149e8 <_dtoa_r+0x9f0>
 8014a74:	2201      	movs	r2, #1
 8014a76:	e7e2      	b.n	8014a3e <_dtoa_r+0xa46>
 8014a78:	f1b9 0f00 	cmp.w	r9, #0
 8014a7c:	db06      	blt.n	8014a8c <_dtoa_r+0xa94>
 8014a7e:	9905      	ldr	r1, [sp, #20]
 8014a80:	ea41 0909 	orr.w	r9, r1, r9
 8014a84:	9906      	ldr	r1, [sp, #24]
 8014a86:	ea59 0101 	orrs.w	r1, r9, r1
 8014a8a:	d120      	bne.n	8014ace <_dtoa_r+0xad6>
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	ddec      	ble.n	8014a6a <_dtoa_r+0xa72>
 8014a90:	4659      	mov	r1, fp
 8014a92:	2201      	movs	r2, #1
 8014a94:	4620      	mov	r0, r4
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	f000 fcdc 	bl	8015454 <__lshift>
 8014a9c:	4631      	mov	r1, r6
 8014a9e:	4683      	mov	fp, r0
 8014aa0:	f000 fd44 	bl	801552c <__mcmp>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	9b01      	ldr	r3, [sp, #4]
 8014aa8:	dc02      	bgt.n	8014ab0 <_dtoa_r+0xab8>
 8014aaa:	d1de      	bne.n	8014a6a <_dtoa_r+0xa72>
 8014aac:	07da      	lsls	r2, r3, #31
 8014aae:	d5dc      	bpl.n	8014a6a <_dtoa_r+0xa72>
 8014ab0:	2b39      	cmp	r3, #57	; 0x39
 8014ab2:	d1d8      	bne.n	8014a66 <_dtoa_r+0xa6e>
 8014ab4:	9a02      	ldr	r2, [sp, #8]
 8014ab6:	2339      	movs	r3, #57	; 0x39
 8014ab8:	7013      	strb	r3, [r2, #0]
 8014aba:	462b      	mov	r3, r5
 8014abc:	461d      	mov	r5, r3
 8014abe:	3b01      	subs	r3, #1
 8014ac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014ac4:	2a39      	cmp	r2, #57	; 0x39
 8014ac6:	d050      	beq.n	8014b6a <_dtoa_r+0xb72>
 8014ac8:	3201      	adds	r2, #1
 8014aca:	701a      	strb	r2, [r3, #0]
 8014acc:	e745      	b.n	801495a <_dtoa_r+0x962>
 8014ace:	2a00      	cmp	r2, #0
 8014ad0:	dd03      	ble.n	8014ada <_dtoa_r+0xae2>
 8014ad2:	2b39      	cmp	r3, #57	; 0x39
 8014ad4:	d0ee      	beq.n	8014ab4 <_dtoa_r+0xabc>
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	e7c7      	b.n	8014a6a <_dtoa_r+0xa72>
 8014ada:	9a01      	ldr	r2, [sp, #4]
 8014adc:	9907      	ldr	r1, [sp, #28]
 8014ade:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014ae2:	428a      	cmp	r2, r1
 8014ae4:	d02a      	beq.n	8014b3c <_dtoa_r+0xb44>
 8014ae6:	4659      	mov	r1, fp
 8014ae8:	2300      	movs	r3, #0
 8014aea:	220a      	movs	r2, #10
 8014aec:	4620      	mov	r0, r4
 8014aee:	f000 fb01 	bl	80150f4 <__multadd>
 8014af2:	45b8      	cmp	r8, r7
 8014af4:	4683      	mov	fp, r0
 8014af6:	f04f 0300 	mov.w	r3, #0
 8014afa:	f04f 020a 	mov.w	r2, #10
 8014afe:	4641      	mov	r1, r8
 8014b00:	4620      	mov	r0, r4
 8014b02:	d107      	bne.n	8014b14 <_dtoa_r+0xb1c>
 8014b04:	f000 faf6 	bl	80150f4 <__multadd>
 8014b08:	4680      	mov	r8, r0
 8014b0a:	4607      	mov	r7, r0
 8014b0c:	9b01      	ldr	r3, [sp, #4]
 8014b0e:	3301      	adds	r3, #1
 8014b10:	9301      	str	r3, [sp, #4]
 8014b12:	e775      	b.n	8014a00 <_dtoa_r+0xa08>
 8014b14:	f000 faee 	bl	80150f4 <__multadd>
 8014b18:	4639      	mov	r1, r7
 8014b1a:	4680      	mov	r8, r0
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	220a      	movs	r2, #10
 8014b20:	4620      	mov	r0, r4
 8014b22:	f000 fae7 	bl	80150f4 <__multadd>
 8014b26:	4607      	mov	r7, r0
 8014b28:	e7f0      	b.n	8014b0c <_dtoa_r+0xb14>
 8014b2a:	f1b9 0f00 	cmp.w	r9, #0
 8014b2e:	9a00      	ldr	r2, [sp, #0]
 8014b30:	bfcc      	ite	gt
 8014b32:	464d      	movgt	r5, r9
 8014b34:	2501      	movle	r5, #1
 8014b36:	4415      	add	r5, r2
 8014b38:	f04f 0800 	mov.w	r8, #0
 8014b3c:	4659      	mov	r1, fp
 8014b3e:	2201      	movs	r2, #1
 8014b40:	4620      	mov	r0, r4
 8014b42:	9301      	str	r3, [sp, #4]
 8014b44:	f000 fc86 	bl	8015454 <__lshift>
 8014b48:	4631      	mov	r1, r6
 8014b4a:	4683      	mov	fp, r0
 8014b4c:	f000 fcee 	bl	801552c <__mcmp>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	dcb2      	bgt.n	8014aba <_dtoa_r+0xac2>
 8014b54:	d102      	bne.n	8014b5c <_dtoa_r+0xb64>
 8014b56:	9b01      	ldr	r3, [sp, #4]
 8014b58:	07db      	lsls	r3, r3, #31
 8014b5a:	d4ae      	bmi.n	8014aba <_dtoa_r+0xac2>
 8014b5c:	462b      	mov	r3, r5
 8014b5e:	461d      	mov	r5, r3
 8014b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b64:	2a30      	cmp	r2, #48	; 0x30
 8014b66:	d0fa      	beq.n	8014b5e <_dtoa_r+0xb66>
 8014b68:	e6f7      	b.n	801495a <_dtoa_r+0x962>
 8014b6a:	9a00      	ldr	r2, [sp, #0]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d1a5      	bne.n	8014abc <_dtoa_r+0xac4>
 8014b70:	f10a 0a01 	add.w	sl, sl, #1
 8014b74:	2331      	movs	r3, #49	; 0x31
 8014b76:	e779      	b.n	8014a6c <_dtoa_r+0xa74>
 8014b78:	4b13      	ldr	r3, [pc, #76]	; (8014bc8 <_dtoa_r+0xbd0>)
 8014b7a:	f7ff baaf 	b.w	80140dc <_dtoa_r+0xe4>
 8014b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	f47f aa86 	bne.w	8014092 <_dtoa_r+0x9a>
 8014b86:	4b11      	ldr	r3, [pc, #68]	; (8014bcc <_dtoa_r+0xbd4>)
 8014b88:	f7ff baa8 	b.w	80140dc <_dtoa_r+0xe4>
 8014b8c:	f1b9 0f00 	cmp.w	r9, #0
 8014b90:	dc03      	bgt.n	8014b9a <_dtoa_r+0xba2>
 8014b92:	9b05      	ldr	r3, [sp, #20]
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	f73f aec9 	bgt.w	801492c <_dtoa_r+0x934>
 8014b9a:	9d00      	ldr	r5, [sp, #0]
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4658      	mov	r0, fp
 8014ba0:	f7ff f99e 	bl	8013ee0 <quorem>
 8014ba4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014ba8:	f805 3b01 	strb.w	r3, [r5], #1
 8014bac:	9a00      	ldr	r2, [sp, #0]
 8014bae:	1aaa      	subs	r2, r5, r2
 8014bb0:	4591      	cmp	r9, r2
 8014bb2:	ddba      	ble.n	8014b2a <_dtoa_r+0xb32>
 8014bb4:	4659      	mov	r1, fp
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	220a      	movs	r2, #10
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f000 fa9a 	bl	80150f4 <__multadd>
 8014bc0:	4683      	mov	fp, r0
 8014bc2:	e7eb      	b.n	8014b9c <_dtoa_r+0xba4>
 8014bc4:	0802048b 	.word	0x0802048b
 8014bc8:	080203e4 	.word	0x080203e4
 8014bcc:	08020408 	.word	0x08020408

08014bd0 <__sflush_r>:
 8014bd0:	898a      	ldrh	r2, [r1, #12]
 8014bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd6:	4605      	mov	r5, r0
 8014bd8:	0710      	lsls	r0, r2, #28
 8014bda:	460c      	mov	r4, r1
 8014bdc:	d458      	bmi.n	8014c90 <__sflush_r+0xc0>
 8014bde:	684b      	ldr	r3, [r1, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	dc05      	bgt.n	8014bf0 <__sflush_r+0x20>
 8014be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	dc02      	bgt.n	8014bf0 <__sflush_r+0x20>
 8014bea:	2000      	movs	r0, #0
 8014bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bf2:	2e00      	cmp	r6, #0
 8014bf4:	d0f9      	beq.n	8014bea <__sflush_r+0x1a>
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014bfc:	682f      	ldr	r7, [r5, #0]
 8014bfe:	602b      	str	r3, [r5, #0]
 8014c00:	d032      	beq.n	8014c68 <__sflush_r+0x98>
 8014c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	075a      	lsls	r2, r3, #29
 8014c08:	d505      	bpl.n	8014c16 <__sflush_r+0x46>
 8014c0a:	6863      	ldr	r3, [r4, #4]
 8014c0c:	1ac0      	subs	r0, r0, r3
 8014c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c10:	b10b      	cbz	r3, 8014c16 <__sflush_r+0x46>
 8014c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c14:	1ac0      	subs	r0, r0, r3
 8014c16:	2300      	movs	r3, #0
 8014c18:	4602      	mov	r2, r0
 8014c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c1c:	6a21      	ldr	r1, [r4, #32]
 8014c1e:	4628      	mov	r0, r5
 8014c20:	47b0      	blx	r6
 8014c22:	1c43      	adds	r3, r0, #1
 8014c24:	89a3      	ldrh	r3, [r4, #12]
 8014c26:	d106      	bne.n	8014c36 <__sflush_r+0x66>
 8014c28:	6829      	ldr	r1, [r5, #0]
 8014c2a:	291d      	cmp	r1, #29
 8014c2c:	d82c      	bhi.n	8014c88 <__sflush_r+0xb8>
 8014c2e:	4a2a      	ldr	r2, [pc, #168]	; (8014cd8 <__sflush_r+0x108>)
 8014c30:	40ca      	lsrs	r2, r1
 8014c32:	07d6      	lsls	r6, r2, #31
 8014c34:	d528      	bpl.n	8014c88 <__sflush_r+0xb8>
 8014c36:	2200      	movs	r2, #0
 8014c38:	6062      	str	r2, [r4, #4]
 8014c3a:	04d9      	lsls	r1, r3, #19
 8014c3c:	6922      	ldr	r2, [r4, #16]
 8014c3e:	6022      	str	r2, [r4, #0]
 8014c40:	d504      	bpl.n	8014c4c <__sflush_r+0x7c>
 8014c42:	1c42      	adds	r2, r0, #1
 8014c44:	d101      	bne.n	8014c4a <__sflush_r+0x7a>
 8014c46:	682b      	ldr	r3, [r5, #0]
 8014c48:	b903      	cbnz	r3, 8014c4c <__sflush_r+0x7c>
 8014c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8014c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c4e:	602f      	str	r7, [r5, #0]
 8014c50:	2900      	cmp	r1, #0
 8014c52:	d0ca      	beq.n	8014bea <__sflush_r+0x1a>
 8014c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c58:	4299      	cmp	r1, r3
 8014c5a:	d002      	beq.n	8014c62 <__sflush_r+0x92>
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	f7fe fa4f 	bl	8013100 <_free_r>
 8014c62:	2000      	movs	r0, #0
 8014c64:	6360      	str	r0, [r4, #52]	; 0x34
 8014c66:	e7c1      	b.n	8014bec <__sflush_r+0x1c>
 8014c68:	6a21      	ldr	r1, [r4, #32]
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	47b0      	blx	r6
 8014c70:	1c41      	adds	r1, r0, #1
 8014c72:	d1c7      	bne.n	8014c04 <__sflush_r+0x34>
 8014c74:	682b      	ldr	r3, [r5, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d0c4      	beq.n	8014c04 <__sflush_r+0x34>
 8014c7a:	2b1d      	cmp	r3, #29
 8014c7c:	d001      	beq.n	8014c82 <__sflush_r+0xb2>
 8014c7e:	2b16      	cmp	r3, #22
 8014c80:	d101      	bne.n	8014c86 <__sflush_r+0xb6>
 8014c82:	602f      	str	r7, [r5, #0]
 8014c84:	e7b1      	b.n	8014bea <__sflush_r+0x1a>
 8014c86:	89a3      	ldrh	r3, [r4, #12]
 8014c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c8c:	81a3      	strh	r3, [r4, #12]
 8014c8e:	e7ad      	b.n	8014bec <__sflush_r+0x1c>
 8014c90:	690f      	ldr	r7, [r1, #16]
 8014c92:	2f00      	cmp	r7, #0
 8014c94:	d0a9      	beq.n	8014bea <__sflush_r+0x1a>
 8014c96:	0793      	lsls	r3, r2, #30
 8014c98:	680e      	ldr	r6, [r1, #0]
 8014c9a:	bf08      	it	eq
 8014c9c:	694b      	ldreq	r3, [r1, #20]
 8014c9e:	600f      	str	r7, [r1, #0]
 8014ca0:	bf18      	it	ne
 8014ca2:	2300      	movne	r3, #0
 8014ca4:	eba6 0807 	sub.w	r8, r6, r7
 8014ca8:	608b      	str	r3, [r1, #8]
 8014caa:	f1b8 0f00 	cmp.w	r8, #0
 8014cae:	dd9c      	ble.n	8014bea <__sflush_r+0x1a>
 8014cb0:	6a21      	ldr	r1, [r4, #32]
 8014cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014cb4:	4643      	mov	r3, r8
 8014cb6:	463a      	mov	r2, r7
 8014cb8:	4628      	mov	r0, r5
 8014cba:	47b0      	blx	r6
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	dc06      	bgt.n	8014cce <__sflush_r+0xfe>
 8014cc0:	89a3      	ldrh	r3, [r4, #12]
 8014cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cc6:	81a3      	strh	r3, [r4, #12]
 8014cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014ccc:	e78e      	b.n	8014bec <__sflush_r+0x1c>
 8014cce:	4407      	add	r7, r0
 8014cd0:	eba8 0800 	sub.w	r8, r8, r0
 8014cd4:	e7e9      	b.n	8014caa <__sflush_r+0xda>
 8014cd6:	bf00      	nop
 8014cd8:	20400001 	.word	0x20400001

08014cdc <_fflush_r>:
 8014cdc:	b538      	push	{r3, r4, r5, lr}
 8014cde:	690b      	ldr	r3, [r1, #16]
 8014ce0:	4605      	mov	r5, r0
 8014ce2:	460c      	mov	r4, r1
 8014ce4:	b913      	cbnz	r3, 8014cec <_fflush_r+0x10>
 8014ce6:	2500      	movs	r5, #0
 8014ce8:	4628      	mov	r0, r5
 8014cea:	bd38      	pop	{r3, r4, r5, pc}
 8014cec:	b118      	cbz	r0, 8014cf6 <_fflush_r+0x1a>
 8014cee:	6983      	ldr	r3, [r0, #24]
 8014cf0:	b90b      	cbnz	r3, 8014cf6 <_fflush_r+0x1a>
 8014cf2:	f000 f887 	bl	8014e04 <__sinit>
 8014cf6:	4b14      	ldr	r3, [pc, #80]	; (8014d48 <_fflush_r+0x6c>)
 8014cf8:	429c      	cmp	r4, r3
 8014cfa:	d11b      	bne.n	8014d34 <_fflush_r+0x58>
 8014cfc:	686c      	ldr	r4, [r5, #4]
 8014cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d0ef      	beq.n	8014ce6 <_fflush_r+0xa>
 8014d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d08:	07d0      	lsls	r0, r2, #31
 8014d0a:	d404      	bmi.n	8014d16 <_fflush_r+0x3a>
 8014d0c:	0599      	lsls	r1, r3, #22
 8014d0e:	d402      	bmi.n	8014d16 <_fflush_r+0x3a>
 8014d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d12:	f000 f91a 	bl	8014f4a <__retarget_lock_acquire_recursive>
 8014d16:	4628      	mov	r0, r5
 8014d18:	4621      	mov	r1, r4
 8014d1a:	f7ff ff59 	bl	8014bd0 <__sflush_r>
 8014d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d20:	07da      	lsls	r2, r3, #31
 8014d22:	4605      	mov	r5, r0
 8014d24:	d4e0      	bmi.n	8014ce8 <_fflush_r+0xc>
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	059b      	lsls	r3, r3, #22
 8014d2a:	d4dd      	bmi.n	8014ce8 <_fflush_r+0xc>
 8014d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d2e:	f000 f90d 	bl	8014f4c <__retarget_lock_release_recursive>
 8014d32:	e7d9      	b.n	8014ce8 <_fflush_r+0xc>
 8014d34:	4b05      	ldr	r3, [pc, #20]	; (8014d4c <_fflush_r+0x70>)
 8014d36:	429c      	cmp	r4, r3
 8014d38:	d101      	bne.n	8014d3e <_fflush_r+0x62>
 8014d3a:	68ac      	ldr	r4, [r5, #8]
 8014d3c:	e7df      	b.n	8014cfe <_fflush_r+0x22>
 8014d3e:	4b04      	ldr	r3, [pc, #16]	; (8014d50 <_fflush_r+0x74>)
 8014d40:	429c      	cmp	r4, r3
 8014d42:	bf08      	it	eq
 8014d44:	68ec      	ldreq	r4, [r5, #12]
 8014d46:	e7da      	b.n	8014cfe <_fflush_r+0x22>
 8014d48:	080204bc 	.word	0x080204bc
 8014d4c:	080204dc 	.word	0x080204dc
 8014d50:	0802049c 	.word	0x0802049c

08014d54 <std>:
 8014d54:	2300      	movs	r3, #0
 8014d56:	b510      	push	{r4, lr}
 8014d58:	4604      	mov	r4, r0
 8014d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8014d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014d62:	6083      	str	r3, [r0, #8]
 8014d64:	8181      	strh	r1, [r0, #12]
 8014d66:	6643      	str	r3, [r0, #100]	; 0x64
 8014d68:	81c2      	strh	r2, [r0, #14]
 8014d6a:	6183      	str	r3, [r0, #24]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	2208      	movs	r2, #8
 8014d70:	305c      	adds	r0, #92	; 0x5c
 8014d72:	f7fe f9bd 	bl	80130f0 <memset>
 8014d76:	4b05      	ldr	r3, [pc, #20]	; (8014d8c <std+0x38>)
 8014d78:	6263      	str	r3, [r4, #36]	; 0x24
 8014d7a:	4b05      	ldr	r3, [pc, #20]	; (8014d90 <std+0x3c>)
 8014d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014d7e:	4b05      	ldr	r3, [pc, #20]	; (8014d94 <std+0x40>)
 8014d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014d82:	4b05      	ldr	r3, [pc, #20]	; (8014d98 <std+0x44>)
 8014d84:	6224      	str	r4, [r4, #32]
 8014d86:	6323      	str	r3, [r4, #48]	; 0x30
 8014d88:	bd10      	pop	{r4, pc}
 8014d8a:	bf00      	nop
 8014d8c:	08015cb5 	.word	0x08015cb5
 8014d90:	08015cd7 	.word	0x08015cd7
 8014d94:	08015d0f 	.word	0x08015d0f
 8014d98:	08015d33 	.word	0x08015d33

08014d9c <_cleanup_r>:
 8014d9c:	4901      	ldr	r1, [pc, #4]	; (8014da4 <_cleanup_r+0x8>)
 8014d9e:	f000 b8af 	b.w	8014f00 <_fwalk_reent>
 8014da2:	bf00      	nop
 8014da4:	08014cdd 	.word	0x08014cdd

08014da8 <__sfmoreglue>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	1e4a      	subs	r2, r1, #1
 8014dac:	2568      	movs	r5, #104	; 0x68
 8014dae:	4355      	muls	r5, r2
 8014db0:	460e      	mov	r6, r1
 8014db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014db6:	f7fe f9f3 	bl	80131a0 <_malloc_r>
 8014dba:	4604      	mov	r4, r0
 8014dbc:	b140      	cbz	r0, 8014dd0 <__sfmoreglue+0x28>
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8014dc4:	300c      	adds	r0, #12
 8014dc6:	60a0      	str	r0, [r4, #8]
 8014dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014dcc:	f7fe f990 	bl	80130f0 <memset>
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}

08014dd4 <__sfp_lock_acquire>:
 8014dd4:	4801      	ldr	r0, [pc, #4]	; (8014ddc <__sfp_lock_acquire+0x8>)
 8014dd6:	f000 b8b8 	b.w	8014f4a <__retarget_lock_acquire_recursive>
 8014dda:	bf00      	nop
 8014ddc:	2000258c 	.word	0x2000258c

08014de0 <__sfp_lock_release>:
 8014de0:	4801      	ldr	r0, [pc, #4]	; (8014de8 <__sfp_lock_release+0x8>)
 8014de2:	f000 b8b3 	b.w	8014f4c <__retarget_lock_release_recursive>
 8014de6:	bf00      	nop
 8014de8:	2000258c 	.word	0x2000258c

08014dec <__sinit_lock_acquire>:
 8014dec:	4801      	ldr	r0, [pc, #4]	; (8014df4 <__sinit_lock_acquire+0x8>)
 8014dee:	f000 b8ac 	b.w	8014f4a <__retarget_lock_acquire_recursive>
 8014df2:	bf00      	nop
 8014df4:	20002587 	.word	0x20002587

08014df8 <__sinit_lock_release>:
 8014df8:	4801      	ldr	r0, [pc, #4]	; (8014e00 <__sinit_lock_release+0x8>)
 8014dfa:	f000 b8a7 	b.w	8014f4c <__retarget_lock_release_recursive>
 8014dfe:	bf00      	nop
 8014e00:	20002587 	.word	0x20002587

08014e04 <__sinit>:
 8014e04:	b510      	push	{r4, lr}
 8014e06:	4604      	mov	r4, r0
 8014e08:	f7ff fff0 	bl	8014dec <__sinit_lock_acquire>
 8014e0c:	69a3      	ldr	r3, [r4, #24]
 8014e0e:	b11b      	cbz	r3, 8014e18 <__sinit+0x14>
 8014e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e14:	f7ff bff0 	b.w	8014df8 <__sinit_lock_release>
 8014e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8014e1e:	4b13      	ldr	r3, [pc, #76]	; (8014e6c <__sinit+0x68>)
 8014e20:	4a13      	ldr	r2, [pc, #76]	; (8014e70 <__sinit+0x6c>)
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8014e26:	42a3      	cmp	r3, r4
 8014e28:	bf04      	itt	eq
 8014e2a:	2301      	moveq	r3, #1
 8014e2c:	61a3      	streq	r3, [r4, #24]
 8014e2e:	4620      	mov	r0, r4
 8014e30:	f000 f820 	bl	8014e74 <__sfp>
 8014e34:	6060      	str	r0, [r4, #4]
 8014e36:	4620      	mov	r0, r4
 8014e38:	f000 f81c 	bl	8014e74 <__sfp>
 8014e3c:	60a0      	str	r0, [r4, #8]
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f000 f818 	bl	8014e74 <__sfp>
 8014e44:	2200      	movs	r2, #0
 8014e46:	60e0      	str	r0, [r4, #12]
 8014e48:	2104      	movs	r1, #4
 8014e4a:	6860      	ldr	r0, [r4, #4]
 8014e4c:	f7ff ff82 	bl	8014d54 <std>
 8014e50:	68a0      	ldr	r0, [r4, #8]
 8014e52:	2201      	movs	r2, #1
 8014e54:	2109      	movs	r1, #9
 8014e56:	f7ff ff7d 	bl	8014d54 <std>
 8014e5a:	68e0      	ldr	r0, [r4, #12]
 8014e5c:	2202      	movs	r2, #2
 8014e5e:	2112      	movs	r1, #18
 8014e60:	f7ff ff78 	bl	8014d54 <std>
 8014e64:	2301      	movs	r3, #1
 8014e66:	61a3      	str	r3, [r4, #24]
 8014e68:	e7d2      	b.n	8014e10 <__sinit+0xc>
 8014e6a:	bf00      	nop
 8014e6c:	080203d0 	.word	0x080203d0
 8014e70:	08014d9d 	.word	0x08014d9d

08014e74 <__sfp>:
 8014e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e76:	4607      	mov	r7, r0
 8014e78:	f7ff ffac 	bl	8014dd4 <__sfp_lock_acquire>
 8014e7c:	4b1e      	ldr	r3, [pc, #120]	; (8014ef8 <__sfp+0x84>)
 8014e7e:	681e      	ldr	r6, [r3, #0]
 8014e80:	69b3      	ldr	r3, [r6, #24]
 8014e82:	b913      	cbnz	r3, 8014e8a <__sfp+0x16>
 8014e84:	4630      	mov	r0, r6
 8014e86:	f7ff ffbd 	bl	8014e04 <__sinit>
 8014e8a:	3648      	adds	r6, #72	; 0x48
 8014e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	d503      	bpl.n	8014e9c <__sfp+0x28>
 8014e94:	6833      	ldr	r3, [r6, #0]
 8014e96:	b30b      	cbz	r3, 8014edc <__sfp+0x68>
 8014e98:	6836      	ldr	r6, [r6, #0]
 8014e9a:	e7f7      	b.n	8014e8c <__sfp+0x18>
 8014e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ea0:	b9d5      	cbnz	r5, 8014ed8 <__sfp+0x64>
 8014ea2:	4b16      	ldr	r3, [pc, #88]	; (8014efc <__sfp+0x88>)
 8014ea4:	60e3      	str	r3, [r4, #12]
 8014ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8014eac:	f000 f84c 	bl	8014f48 <__retarget_lock_init_recursive>
 8014eb0:	f7ff ff96 	bl	8014de0 <__sfp_lock_release>
 8014eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014ebc:	6025      	str	r5, [r4, #0]
 8014ebe:	61a5      	str	r5, [r4, #24]
 8014ec0:	2208      	movs	r2, #8
 8014ec2:	4629      	mov	r1, r5
 8014ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ec8:	f7fe f912 	bl	80130f0 <memset>
 8014ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ed8:	3468      	adds	r4, #104	; 0x68
 8014eda:	e7d9      	b.n	8014e90 <__sfp+0x1c>
 8014edc:	2104      	movs	r1, #4
 8014ede:	4638      	mov	r0, r7
 8014ee0:	f7ff ff62 	bl	8014da8 <__sfmoreglue>
 8014ee4:	4604      	mov	r4, r0
 8014ee6:	6030      	str	r0, [r6, #0]
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	d1d5      	bne.n	8014e98 <__sfp+0x24>
 8014eec:	f7ff ff78 	bl	8014de0 <__sfp_lock_release>
 8014ef0:	230c      	movs	r3, #12
 8014ef2:	603b      	str	r3, [r7, #0]
 8014ef4:	e7ee      	b.n	8014ed4 <__sfp+0x60>
 8014ef6:	bf00      	nop
 8014ef8:	080203d0 	.word	0x080203d0
 8014efc:	ffff0001 	.word	0xffff0001

08014f00 <_fwalk_reent>:
 8014f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f04:	4606      	mov	r6, r0
 8014f06:	4688      	mov	r8, r1
 8014f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f0c:	2700      	movs	r7, #0
 8014f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f12:	f1b9 0901 	subs.w	r9, r9, #1
 8014f16:	d505      	bpl.n	8014f24 <_fwalk_reent+0x24>
 8014f18:	6824      	ldr	r4, [r4, #0]
 8014f1a:	2c00      	cmp	r4, #0
 8014f1c:	d1f7      	bne.n	8014f0e <_fwalk_reent+0xe>
 8014f1e:	4638      	mov	r0, r7
 8014f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f24:	89ab      	ldrh	r3, [r5, #12]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d907      	bls.n	8014f3a <_fwalk_reent+0x3a>
 8014f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	d003      	beq.n	8014f3a <_fwalk_reent+0x3a>
 8014f32:	4629      	mov	r1, r5
 8014f34:	4630      	mov	r0, r6
 8014f36:	47c0      	blx	r8
 8014f38:	4307      	orrs	r7, r0
 8014f3a:	3568      	adds	r5, #104	; 0x68
 8014f3c:	e7e9      	b.n	8014f12 <_fwalk_reent+0x12>
	...

08014f40 <_localeconv_r>:
 8014f40:	4800      	ldr	r0, [pc, #0]	; (8014f44 <_localeconv_r+0x4>)
 8014f42:	4770      	bx	lr
 8014f44:	200002e4 	.word	0x200002e4

08014f48 <__retarget_lock_init_recursive>:
 8014f48:	4770      	bx	lr

08014f4a <__retarget_lock_acquire_recursive>:
 8014f4a:	4770      	bx	lr

08014f4c <__retarget_lock_release_recursive>:
 8014f4c:	4770      	bx	lr

08014f4e <__swhatbuf_r>:
 8014f4e:	b570      	push	{r4, r5, r6, lr}
 8014f50:	460e      	mov	r6, r1
 8014f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f56:	2900      	cmp	r1, #0
 8014f58:	b096      	sub	sp, #88	; 0x58
 8014f5a:	4614      	mov	r4, r2
 8014f5c:	461d      	mov	r5, r3
 8014f5e:	da07      	bge.n	8014f70 <__swhatbuf_r+0x22>
 8014f60:	2300      	movs	r3, #0
 8014f62:	602b      	str	r3, [r5, #0]
 8014f64:	89b3      	ldrh	r3, [r6, #12]
 8014f66:	061a      	lsls	r2, r3, #24
 8014f68:	d410      	bmi.n	8014f8c <__swhatbuf_r+0x3e>
 8014f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f6e:	e00e      	b.n	8014f8e <__swhatbuf_r+0x40>
 8014f70:	466a      	mov	r2, sp
 8014f72:	f000 ff35 	bl	8015de0 <_fstat_r>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	dbf2      	blt.n	8014f60 <__swhatbuf_r+0x12>
 8014f7a:	9a01      	ldr	r2, [sp, #4]
 8014f7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f84:	425a      	negs	r2, r3
 8014f86:	415a      	adcs	r2, r3
 8014f88:	602a      	str	r2, [r5, #0]
 8014f8a:	e7ee      	b.n	8014f6a <__swhatbuf_r+0x1c>
 8014f8c:	2340      	movs	r3, #64	; 0x40
 8014f8e:	2000      	movs	r0, #0
 8014f90:	6023      	str	r3, [r4, #0]
 8014f92:	b016      	add	sp, #88	; 0x58
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014f98 <__smakebuf_r>:
 8014f98:	898b      	ldrh	r3, [r1, #12]
 8014f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f9c:	079d      	lsls	r5, r3, #30
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	460c      	mov	r4, r1
 8014fa2:	d507      	bpl.n	8014fb4 <__smakebuf_r+0x1c>
 8014fa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014fa8:	6023      	str	r3, [r4, #0]
 8014faa:	6123      	str	r3, [r4, #16]
 8014fac:	2301      	movs	r3, #1
 8014fae:	6163      	str	r3, [r4, #20]
 8014fb0:	b002      	add	sp, #8
 8014fb2:	bd70      	pop	{r4, r5, r6, pc}
 8014fb4:	ab01      	add	r3, sp, #4
 8014fb6:	466a      	mov	r2, sp
 8014fb8:	f7ff ffc9 	bl	8014f4e <__swhatbuf_r>
 8014fbc:	9900      	ldr	r1, [sp, #0]
 8014fbe:	4605      	mov	r5, r0
 8014fc0:	4630      	mov	r0, r6
 8014fc2:	f7fe f8ed 	bl	80131a0 <_malloc_r>
 8014fc6:	b948      	cbnz	r0, 8014fdc <__smakebuf_r+0x44>
 8014fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fcc:	059a      	lsls	r2, r3, #22
 8014fce:	d4ef      	bmi.n	8014fb0 <__smakebuf_r+0x18>
 8014fd0:	f023 0303 	bic.w	r3, r3, #3
 8014fd4:	f043 0302 	orr.w	r3, r3, #2
 8014fd8:	81a3      	strh	r3, [r4, #12]
 8014fda:	e7e3      	b.n	8014fa4 <__smakebuf_r+0xc>
 8014fdc:	4b0d      	ldr	r3, [pc, #52]	; (8015014 <__smakebuf_r+0x7c>)
 8014fde:	62b3      	str	r3, [r6, #40]	; 0x28
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	6020      	str	r0, [r4, #0]
 8014fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fe8:	81a3      	strh	r3, [r4, #12]
 8014fea:	9b00      	ldr	r3, [sp, #0]
 8014fec:	6163      	str	r3, [r4, #20]
 8014fee:	9b01      	ldr	r3, [sp, #4]
 8014ff0:	6120      	str	r0, [r4, #16]
 8014ff2:	b15b      	cbz	r3, 801500c <__smakebuf_r+0x74>
 8014ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	f000 ff03 	bl	8015e04 <_isatty_r>
 8014ffe:	b128      	cbz	r0, 801500c <__smakebuf_r+0x74>
 8015000:	89a3      	ldrh	r3, [r4, #12]
 8015002:	f023 0303 	bic.w	r3, r3, #3
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	81a3      	strh	r3, [r4, #12]
 801500c:	89a0      	ldrh	r0, [r4, #12]
 801500e:	4305      	orrs	r5, r0
 8015010:	81a5      	strh	r5, [r4, #12]
 8015012:	e7cd      	b.n	8014fb0 <__smakebuf_r+0x18>
 8015014:	08014d9d 	.word	0x08014d9d

08015018 <__malloc_lock>:
 8015018:	4801      	ldr	r0, [pc, #4]	; (8015020 <__malloc_lock+0x8>)
 801501a:	f7ff bf96 	b.w	8014f4a <__retarget_lock_acquire_recursive>
 801501e:	bf00      	nop
 8015020:	20002588 	.word	0x20002588

08015024 <__malloc_unlock>:
 8015024:	4801      	ldr	r0, [pc, #4]	; (801502c <__malloc_unlock+0x8>)
 8015026:	f7ff bf91 	b.w	8014f4c <__retarget_lock_release_recursive>
 801502a:	bf00      	nop
 801502c:	20002588 	.word	0x20002588

08015030 <_Balloc>:
 8015030:	b570      	push	{r4, r5, r6, lr}
 8015032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015034:	4604      	mov	r4, r0
 8015036:	460d      	mov	r5, r1
 8015038:	b976      	cbnz	r6, 8015058 <_Balloc+0x28>
 801503a:	2010      	movs	r0, #16
 801503c:	f7fe f812 	bl	8013064 <malloc>
 8015040:	4602      	mov	r2, r0
 8015042:	6260      	str	r0, [r4, #36]	; 0x24
 8015044:	b920      	cbnz	r0, 8015050 <_Balloc+0x20>
 8015046:	4b18      	ldr	r3, [pc, #96]	; (80150a8 <_Balloc+0x78>)
 8015048:	4818      	ldr	r0, [pc, #96]	; (80150ac <_Balloc+0x7c>)
 801504a:	2166      	movs	r1, #102	; 0x66
 801504c:	f000 fe88 	bl	8015d60 <__assert_func>
 8015050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015054:	6006      	str	r6, [r0, #0]
 8015056:	60c6      	str	r6, [r0, #12]
 8015058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801505a:	68f3      	ldr	r3, [r6, #12]
 801505c:	b183      	cbz	r3, 8015080 <_Balloc+0x50>
 801505e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015066:	b9b8      	cbnz	r0, 8015098 <_Balloc+0x68>
 8015068:	2101      	movs	r1, #1
 801506a:	fa01 f605 	lsl.w	r6, r1, r5
 801506e:	1d72      	adds	r2, r6, #5
 8015070:	0092      	lsls	r2, r2, #2
 8015072:	4620      	mov	r0, r4
 8015074:	f000 fb5a 	bl	801572c <_calloc_r>
 8015078:	b160      	cbz	r0, 8015094 <_Balloc+0x64>
 801507a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801507e:	e00e      	b.n	801509e <_Balloc+0x6e>
 8015080:	2221      	movs	r2, #33	; 0x21
 8015082:	2104      	movs	r1, #4
 8015084:	4620      	mov	r0, r4
 8015086:	f000 fb51 	bl	801572c <_calloc_r>
 801508a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801508c:	60f0      	str	r0, [r6, #12]
 801508e:	68db      	ldr	r3, [r3, #12]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d1e4      	bne.n	801505e <_Balloc+0x2e>
 8015094:	2000      	movs	r0, #0
 8015096:	bd70      	pop	{r4, r5, r6, pc}
 8015098:	6802      	ldr	r2, [r0, #0]
 801509a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801509e:	2300      	movs	r3, #0
 80150a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80150a4:	e7f7      	b.n	8015096 <_Balloc+0x66>
 80150a6:	bf00      	nop
 80150a8:	08020415 	.word	0x08020415
 80150ac:	080204fc 	.word	0x080204fc

080150b0 <_Bfree>:
 80150b0:	b570      	push	{r4, r5, r6, lr}
 80150b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80150b4:	4605      	mov	r5, r0
 80150b6:	460c      	mov	r4, r1
 80150b8:	b976      	cbnz	r6, 80150d8 <_Bfree+0x28>
 80150ba:	2010      	movs	r0, #16
 80150bc:	f7fd ffd2 	bl	8013064 <malloc>
 80150c0:	4602      	mov	r2, r0
 80150c2:	6268      	str	r0, [r5, #36]	; 0x24
 80150c4:	b920      	cbnz	r0, 80150d0 <_Bfree+0x20>
 80150c6:	4b09      	ldr	r3, [pc, #36]	; (80150ec <_Bfree+0x3c>)
 80150c8:	4809      	ldr	r0, [pc, #36]	; (80150f0 <_Bfree+0x40>)
 80150ca:	218a      	movs	r1, #138	; 0x8a
 80150cc:	f000 fe48 	bl	8015d60 <__assert_func>
 80150d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150d4:	6006      	str	r6, [r0, #0]
 80150d6:	60c6      	str	r6, [r0, #12]
 80150d8:	b13c      	cbz	r4, 80150ea <_Bfree+0x3a>
 80150da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80150dc:	6862      	ldr	r2, [r4, #4]
 80150de:	68db      	ldr	r3, [r3, #12]
 80150e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80150e4:	6021      	str	r1, [r4, #0]
 80150e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	08020415 	.word	0x08020415
 80150f0:	080204fc 	.word	0x080204fc

080150f4 <__multadd>:
 80150f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f8:	690e      	ldr	r6, [r1, #16]
 80150fa:	4607      	mov	r7, r0
 80150fc:	4698      	mov	r8, r3
 80150fe:	460c      	mov	r4, r1
 8015100:	f101 0014 	add.w	r0, r1, #20
 8015104:	2300      	movs	r3, #0
 8015106:	6805      	ldr	r5, [r0, #0]
 8015108:	b2a9      	uxth	r1, r5
 801510a:	fb02 8101 	mla	r1, r2, r1, r8
 801510e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015112:	0c2d      	lsrs	r5, r5, #16
 8015114:	fb02 c505 	mla	r5, r2, r5, ip
 8015118:	b289      	uxth	r1, r1
 801511a:	3301      	adds	r3, #1
 801511c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015120:	429e      	cmp	r6, r3
 8015122:	f840 1b04 	str.w	r1, [r0], #4
 8015126:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801512a:	dcec      	bgt.n	8015106 <__multadd+0x12>
 801512c:	f1b8 0f00 	cmp.w	r8, #0
 8015130:	d022      	beq.n	8015178 <__multadd+0x84>
 8015132:	68a3      	ldr	r3, [r4, #8]
 8015134:	42b3      	cmp	r3, r6
 8015136:	dc19      	bgt.n	801516c <__multadd+0x78>
 8015138:	6861      	ldr	r1, [r4, #4]
 801513a:	4638      	mov	r0, r7
 801513c:	3101      	adds	r1, #1
 801513e:	f7ff ff77 	bl	8015030 <_Balloc>
 8015142:	4605      	mov	r5, r0
 8015144:	b928      	cbnz	r0, 8015152 <__multadd+0x5e>
 8015146:	4602      	mov	r2, r0
 8015148:	4b0d      	ldr	r3, [pc, #52]	; (8015180 <__multadd+0x8c>)
 801514a:	480e      	ldr	r0, [pc, #56]	; (8015184 <__multadd+0x90>)
 801514c:	21b5      	movs	r1, #181	; 0xb5
 801514e:	f000 fe07 	bl	8015d60 <__assert_func>
 8015152:	6922      	ldr	r2, [r4, #16]
 8015154:	3202      	adds	r2, #2
 8015156:	f104 010c 	add.w	r1, r4, #12
 801515a:	0092      	lsls	r2, r2, #2
 801515c:	300c      	adds	r0, #12
 801515e:	f7fd ff9f 	bl	80130a0 <memcpy>
 8015162:	4621      	mov	r1, r4
 8015164:	4638      	mov	r0, r7
 8015166:	f7ff ffa3 	bl	80150b0 <_Bfree>
 801516a:	462c      	mov	r4, r5
 801516c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015170:	3601      	adds	r6, #1
 8015172:	f8c3 8014 	str.w	r8, [r3, #20]
 8015176:	6126      	str	r6, [r4, #16]
 8015178:	4620      	mov	r0, r4
 801517a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801517e:	bf00      	nop
 8015180:	0802048b 	.word	0x0802048b
 8015184:	080204fc 	.word	0x080204fc

08015188 <__hi0bits>:
 8015188:	0c03      	lsrs	r3, r0, #16
 801518a:	041b      	lsls	r3, r3, #16
 801518c:	b9d3      	cbnz	r3, 80151c4 <__hi0bits+0x3c>
 801518e:	0400      	lsls	r0, r0, #16
 8015190:	2310      	movs	r3, #16
 8015192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015196:	bf04      	itt	eq
 8015198:	0200      	lsleq	r0, r0, #8
 801519a:	3308      	addeq	r3, #8
 801519c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80151a0:	bf04      	itt	eq
 80151a2:	0100      	lsleq	r0, r0, #4
 80151a4:	3304      	addeq	r3, #4
 80151a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80151aa:	bf04      	itt	eq
 80151ac:	0080      	lsleq	r0, r0, #2
 80151ae:	3302      	addeq	r3, #2
 80151b0:	2800      	cmp	r0, #0
 80151b2:	db05      	blt.n	80151c0 <__hi0bits+0x38>
 80151b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80151b8:	f103 0301 	add.w	r3, r3, #1
 80151bc:	bf08      	it	eq
 80151be:	2320      	moveq	r3, #32
 80151c0:	4618      	mov	r0, r3
 80151c2:	4770      	bx	lr
 80151c4:	2300      	movs	r3, #0
 80151c6:	e7e4      	b.n	8015192 <__hi0bits+0xa>

080151c8 <__lo0bits>:
 80151c8:	6803      	ldr	r3, [r0, #0]
 80151ca:	f013 0207 	ands.w	r2, r3, #7
 80151ce:	4601      	mov	r1, r0
 80151d0:	d00b      	beq.n	80151ea <__lo0bits+0x22>
 80151d2:	07da      	lsls	r2, r3, #31
 80151d4:	d424      	bmi.n	8015220 <__lo0bits+0x58>
 80151d6:	0798      	lsls	r0, r3, #30
 80151d8:	bf49      	itett	mi
 80151da:	085b      	lsrmi	r3, r3, #1
 80151dc:	089b      	lsrpl	r3, r3, #2
 80151de:	2001      	movmi	r0, #1
 80151e0:	600b      	strmi	r3, [r1, #0]
 80151e2:	bf5c      	itt	pl
 80151e4:	600b      	strpl	r3, [r1, #0]
 80151e6:	2002      	movpl	r0, #2
 80151e8:	4770      	bx	lr
 80151ea:	b298      	uxth	r0, r3
 80151ec:	b9b0      	cbnz	r0, 801521c <__lo0bits+0x54>
 80151ee:	0c1b      	lsrs	r3, r3, #16
 80151f0:	2010      	movs	r0, #16
 80151f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80151f6:	bf04      	itt	eq
 80151f8:	0a1b      	lsreq	r3, r3, #8
 80151fa:	3008      	addeq	r0, #8
 80151fc:	071a      	lsls	r2, r3, #28
 80151fe:	bf04      	itt	eq
 8015200:	091b      	lsreq	r3, r3, #4
 8015202:	3004      	addeq	r0, #4
 8015204:	079a      	lsls	r2, r3, #30
 8015206:	bf04      	itt	eq
 8015208:	089b      	lsreq	r3, r3, #2
 801520a:	3002      	addeq	r0, #2
 801520c:	07da      	lsls	r2, r3, #31
 801520e:	d403      	bmi.n	8015218 <__lo0bits+0x50>
 8015210:	085b      	lsrs	r3, r3, #1
 8015212:	f100 0001 	add.w	r0, r0, #1
 8015216:	d005      	beq.n	8015224 <__lo0bits+0x5c>
 8015218:	600b      	str	r3, [r1, #0]
 801521a:	4770      	bx	lr
 801521c:	4610      	mov	r0, r2
 801521e:	e7e8      	b.n	80151f2 <__lo0bits+0x2a>
 8015220:	2000      	movs	r0, #0
 8015222:	4770      	bx	lr
 8015224:	2020      	movs	r0, #32
 8015226:	4770      	bx	lr

08015228 <__i2b>:
 8015228:	b510      	push	{r4, lr}
 801522a:	460c      	mov	r4, r1
 801522c:	2101      	movs	r1, #1
 801522e:	f7ff feff 	bl	8015030 <_Balloc>
 8015232:	4602      	mov	r2, r0
 8015234:	b928      	cbnz	r0, 8015242 <__i2b+0x1a>
 8015236:	4b05      	ldr	r3, [pc, #20]	; (801524c <__i2b+0x24>)
 8015238:	4805      	ldr	r0, [pc, #20]	; (8015250 <__i2b+0x28>)
 801523a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801523e:	f000 fd8f 	bl	8015d60 <__assert_func>
 8015242:	2301      	movs	r3, #1
 8015244:	6144      	str	r4, [r0, #20]
 8015246:	6103      	str	r3, [r0, #16]
 8015248:	bd10      	pop	{r4, pc}
 801524a:	bf00      	nop
 801524c:	0802048b 	.word	0x0802048b
 8015250:	080204fc 	.word	0x080204fc

08015254 <__multiply>:
 8015254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015258:	4614      	mov	r4, r2
 801525a:	690a      	ldr	r2, [r1, #16]
 801525c:	6923      	ldr	r3, [r4, #16]
 801525e:	429a      	cmp	r2, r3
 8015260:	bfb8      	it	lt
 8015262:	460b      	movlt	r3, r1
 8015264:	460d      	mov	r5, r1
 8015266:	bfbc      	itt	lt
 8015268:	4625      	movlt	r5, r4
 801526a:	461c      	movlt	r4, r3
 801526c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015270:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015274:	68ab      	ldr	r3, [r5, #8]
 8015276:	6869      	ldr	r1, [r5, #4]
 8015278:	eb0a 0709 	add.w	r7, sl, r9
 801527c:	42bb      	cmp	r3, r7
 801527e:	b085      	sub	sp, #20
 8015280:	bfb8      	it	lt
 8015282:	3101      	addlt	r1, #1
 8015284:	f7ff fed4 	bl	8015030 <_Balloc>
 8015288:	b930      	cbnz	r0, 8015298 <__multiply+0x44>
 801528a:	4602      	mov	r2, r0
 801528c:	4b42      	ldr	r3, [pc, #264]	; (8015398 <__multiply+0x144>)
 801528e:	4843      	ldr	r0, [pc, #268]	; (801539c <__multiply+0x148>)
 8015290:	f240 115d 	movw	r1, #349	; 0x15d
 8015294:	f000 fd64 	bl	8015d60 <__assert_func>
 8015298:	f100 0614 	add.w	r6, r0, #20
 801529c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80152a0:	4633      	mov	r3, r6
 80152a2:	2200      	movs	r2, #0
 80152a4:	4543      	cmp	r3, r8
 80152a6:	d31e      	bcc.n	80152e6 <__multiply+0x92>
 80152a8:	f105 0c14 	add.w	ip, r5, #20
 80152ac:	f104 0314 	add.w	r3, r4, #20
 80152b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80152b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80152b8:	9202      	str	r2, [sp, #8]
 80152ba:	ebac 0205 	sub.w	r2, ip, r5
 80152be:	3a15      	subs	r2, #21
 80152c0:	f022 0203 	bic.w	r2, r2, #3
 80152c4:	3204      	adds	r2, #4
 80152c6:	f105 0115 	add.w	r1, r5, #21
 80152ca:	458c      	cmp	ip, r1
 80152cc:	bf38      	it	cc
 80152ce:	2204      	movcc	r2, #4
 80152d0:	9201      	str	r2, [sp, #4]
 80152d2:	9a02      	ldr	r2, [sp, #8]
 80152d4:	9303      	str	r3, [sp, #12]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d808      	bhi.n	80152ec <__multiply+0x98>
 80152da:	2f00      	cmp	r7, #0
 80152dc:	dc55      	bgt.n	801538a <__multiply+0x136>
 80152de:	6107      	str	r7, [r0, #16]
 80152e0:	b005      	add	sp, #20
 80152e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e6:	f843 2b04 	str.w	r2, [r3], #4
 80152ea:	e7db      	b.n	80152a4 <__multiply+0x50>
 80152ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80152f0:	f1ba 0f00 	cmp.w	sl, #0
 80152f4:	d020      	beq.n	8015338 <__multiply+0xe4>
 80152f6:	f105 0e14 	add.w	lr, r5, #20
 80152fa:	46b1      	mov	r9, r6
 80152fc:	2200      	movs	r2, #0
 80152fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015302:	f8d9 b000 	ldr.w	fp, [r9]
 8015306:	b2a1      	uxth	r1, r4
 8015308:	fa1f fb8b 	uxth.w	fp, fp
 801530c:	fb0a b101 	mla	r1, sl, r1, fp
 8015310:	4411      	add	r1, r2
 8015312:	f8d9 2000 	ldr.w	r2, [r9]
 8015316:	0c24      	lsrs	r4, r4, #16
 8015318:	0c12      	lsrs	r2, r2, #16
 801531a:	fb0a 2404 	mla	r4, sl, r4, r2
 801531e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015322:	b289      	uxth	r1, r1
 8015324:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015328:	45f4      	cmp	ip, lr
 801532a:	f849 1b04 	str.w	r1, [r9], #4
 801532e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015332:	d8e4      	bhi.n	80152fe <__multiply+0xaa>
 8015334:	9901      	ldr	r1, [sp, #4]
 8015336:	5072      	str	r2, [r6, r1]
 8015338:	9a03      	ldr	r2, [sp, #12]
 801533a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801533e:	3304      	adds	r3, #4
 8015340:	f1b9 0f00 	cmp.w	r9, #0
 8015344:	d01f      	beq.n	8015386 <__multiply+0x132>
 8015346:	6834      	ldr	r4, [r6, #0]
 8015348:	f105 0114 	add.w	r1, r5, #20
 801534c:	46b6      	mov	lr, r6
 801534e:	f04f 0a00 	mov.w	sl, #0
 8015352:	880a      	ldrh	r2, [r1, #0]
 8015354:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015358:	fb09 b202 	mla	r2, r9, r2, fp
 801535c:	4492      	add	sl, r2
 801535e:	b2a4      	uxth	r4, r4
 8015360:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015364:	f84e 4b04 	str.w	r4, [lr], #4
 8015368:	f851 4b04 	ldr.w	r4, [r1], #4
 801536c:	f8be 2000 	ldrh.w	r2, [lr]
 8015370:	0c24      	lsrs	r4, r4, #16
 8015372:	fb09 2404 	mla	r4, r9, r4, r2
 8015376:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801537a:	458c      	cmp	ip, r1
 801537c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015380:	d8e7      	bhi.n	8015352 <__multiply+0xfe>
 8015382:	9a01      	ldr	r2, [sp, #4]
 8015384:	50b4      	str	r4, [r6, r2]
 8015386:	3604      	adds	r6, #4
 8015388:	e7a3      	b.n	80152d2 <__multiply+0x7e>
 801538a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801538e:	2b00      	cmp	r3, #0
 8015390:	d1a5      	bne.n	80152de <__multiply+0x8a>
 8015392:	3f01      	subs	r7, #1
 8015394:	e7a1      	b.n	80152da <__multiply+0x86>
 8015396:	bf00      	nop
 8015398:	0802048b 	.word	0x0802048b
 801539c:	080204fc 	.word	0x080204fc

080153a0 <__pow5mult>:
 80153a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153a4:	4615      	mov	r5, r2
 80153a6:	f012 0203 	ands.w	r2, r2, #3
 80153aa:	4606      	mov	r6, r0
 80153ac:	460f      	mov	r7, r1
 80153ae:	d007      	beq.n	80153c0 <__pow5mult+0x20>
 80153b0:	4c25      	ldr	r4, [pc, #148]	; (8015448 <__pow5mult+0xa8>)
 80153b2:	3a01      	subs	r2, #1
 80153b4:	2300      	movs	r3, #0
 80153b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80153ba:	f7ff fe9b 	bl	80150f4 <__multadd>
 80153be:	4607      	mov	r7, r0
 80153c0:	10ad      	asrs	r5, r5, #2
 80153c2:	d03d      	beq.n	8015440 <__pow5mult+0xa0>
 80153c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80153c6:	b97c      	cbnz	r4, 80153e8 <__pow5mult+0x48>
 80153c8:	2010      	movs	r0, #16
 80153ca:	f7fd fe4b 	bl	8013064 <malloc>
 80153ce:	4602      	mov	r2, r0
 80153d0:	6270      	str	r0, [r6, #36]	; 0x24
 80153d2:	b928      	cbnz	r0, 80153e0 <__pow5mult+0x40>
 80153d4:	4b1d      	ldr	r3, [pc, #116]	; (801544c <__pow5mult+0xac>)
 80153d6:	481e      	ldr	r0, [pc, #120]	; (8015450 <__pow5mult+0xb0>)
 80153d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80153dc:	f000 fcc0 	bl	8015d60 <__assert_func>
 80153e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80153e4:	6004      	str	r4, [r0, #0]
 80153e6:	60c4      	str	r4, [r0, #12]
 80153e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80153ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80153f0:	b94c      	cbnz	r4, 8015406 <__pow5mult+0x66>
 80153f2:	f240 2171 	movw	r1, #625	; 0x271
 80153f6:	4630      	mov	r0, r6
 80153f8:	f7ff ff16 	bl	8015228 <__i2b>
 80153fc:	2300      	movs	r3, #0
 80153fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8015402:	4604      	mov	r4, r0
 8015404:	6003      	str	r3, [r0, #0]
 8015406:	f04f 0900 	mov.w	r9, #0
 801540a:	07eb      	lsls	r3, r5, #31
 801540c:	d50a      	bpl.n	8015424 <__pow5mult+0x84>
 801540e:	4639      	mov	r1, r7
 8015410:	4622      	mov	r2, r4
 8015412:	4630      	mov	r0, r6
 8015414:	f7ff ff1e 	bl	8015254 <__multiply>
 8015418:	4639      	mov	r1, r7
 801541a:	4680      	mov	r8, r0
 801541c:	4630      	mov	r0, r6
 801541e:	f7ff fe47 	bl	80150b0 <_Bfree>
 8015422:	4647      	mov	r7, r8
 8015424:	106d      	asrs	r5, r5, #1
 8015426:	d00b      	beq.n	8015440 <__pow5mult+0xa0>
 8015428:	6820      	ldr	r0, [r4, #0]
 801542a:	b938      	cbnz	r0, 801543c <__pow5mult+0x9c>
 801542c:	4622      	mov	r2, r4
 801542e:	4621      	mov	r1, r4
 8015430:	4630      	mov	r0, r6
 8015432:	f7ff ff0f 	bl	8015254 <__multiply>
 8015436:	6020      	str	r0, [r4, #0]
 8015438:	f8c0 9000 	str.w	r9, [r0]
 801543c:	4604      	mov	r4, r0
 801543e:	e7e4      	b.n	801540a <__pow5mult+0x6a>
 8015440:	4638      	mov	r0, r7
 8015442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015446:	bf00      	nop
 8015448:	08020650 	.word	0x08020650
 801544c:	08020415 	.word	0x08020415
 8015450:	080204fc 	.word	0x080204fc

08015454 <__lshift>:
 8015454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015458:	460c      	mov	r4, r1
 801545a:	6849      	ldr	r1, [r1, #4]
 801545c:	6923      	ldr	r3, [r4, #16]
 801545e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015462:	68a3      	ldr	r3, [r4, #8]
 8015464:	4607      	mov	r7, r0
 8015466:	4691      	mov	r9, r2
 8015468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801546c:	f108 0601 	add.w	r6, r8, #1
 8015470:	42b3      	cmp	r3, r6
 8015472:	db0b      	blt.n	801548c <__lshift+0x38>
 8015474:	4638      	mov	r0, r7
 8015476:	f7ff fddb 	bl	8015030 <_Balloc>
 801547a:	4605      	mov	r5, r0
 801547c:	b948      	cbnz	r0, 8015492 <__lshift+0x3e>
 801547e:	4602      	mov	r2, r0
 8015480:	4b28      	ldr	r3, [pc, #160]	; (8015524 <__lshift+0xd0>)
 8015482:	4829      	ldr	r0, [pc, #164]	; (8015528 <__lshift+0xd4>)
 8015484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015488:	f000 fc6a 	bl	8015d60 <__assert_func>
 801548c:	3101      	adds	r1, #1
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	e7ee      	b.n	8015470 <__lshift+0x1c>
 8015492:	2300      	movs	r3, #0
 8015494:	f100 0114 	add.w	r1, r0, #20
 8015498:	f100 0210 	add.w	r2, r0, #16
 801549c:	4618      	mov	r0, r3
 801549e:	4553      	cmp	r3, sl
 80154a0:	db33      	blt.n	801550a <__lshift+0xb6>
 80154a2:	6920      	ldr	r0, [r4, #16]
 80154a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80154a8:	f104 0314 	add.w	r3, r4, #20
 80154ac:	f019 091f 	ands.w	r9, r9, #31
 80154b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80154b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80154b8:	d02b      	beq.n	8015512 <__lshift+0xbe>
 80154ba:	f1c9 0e20 	rsb	lr, r9, #32
 80154be:	468a      	mov	sl, r1
 80154c0:	2200      	movs	r2, #0
 80154c2:	6818      	ldr	r0, [r3, #0]
 80154c4:	fa00 f009 	lsl.w	r0, r0, r9
 80154c8:	4302      	orrs	r2, r0
 80154ca:	f84a 2b04 	str.w	r2, [sl], #4
 80154ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80154d2:	459c      	cmp	ip, r3
 80154d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80154d8:	d8f3      	bhi.n	80154c2 <__lshift+0x6e>
 80154da:	ebac 0304 	sub.w	r3, ip, r4
 80154de:	3b15      	subs	r3, #21
 80154e0:	f023 0303 	bic.w	r3, r3, #3
 80154e4:	3304      	adds	r3, #4
 80154e6:	f104 0015 	add.w	r0, r4, #21
 80154ea:	4584      	cmp	ip, r0
 80154ec:	bf38      	it	cc
 80154ee:	2304      	movcc	r3, #4
 80154f0:	50ca      	str	r2, [r1, r3]
 80154f2:	b10a      	cbz	r2, 80154f8 <__lshift+0xa4>
 80154f4:	f108 0602 	add.w	r6, r8, #2
 80154f8:	3e01      	subs	r6, #1
 80154fa:	4638      	mov	r0, r7
 80154fc:	612e      	str	r6, [r5, #16]
 80154fe:	4621      	mov	r1, r4
 8015500:	f7ff fdd6 	bl	80150b0 <_Bfree>
 8015504:	4628      	mov	r0, r5
 8015506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801550a:	f842 0f04 	str.w	r0, [r2, #4]!
 801550e:	3301      	adds	r3, #1
 8015510:	e7c5      	b.n	801549e <__lshift+0x4a>
 8015512:	3904      	subs	r1, #4
 8015514:	f853 2b04 	ldr.w	r2, [r3], #4
 8015518:	f841 2f04 	str.w	r2, [r1, #4]!
 801551c:	459c      	cmp	ip, r3
 801551e:	d8f9      	bhi.n	8015514 <__lshift+0xc0>
 8015520:	e7ea      	b.n	80154f8 <__lshift+0xa4>
 8015522:	bf00      	nop
 8015524:	0802048b 	.word	0x0802048b
 8015528:	080204fc 	.word	0x080204fc

0801552c <__mcmp>:
 801552c:	b530      	push	{r4, r5, lr}
 801552e:	6902      	ldr	r2, [r0, #16]
 8015530:	690c      	ldr	r4, [r1, #16]
 8015532:	1b12      	subs	r2, r2, r4
 8015534:	d10e      	bne.n	8015554 <__mcmp+0x28>
 8015536:	f100 0314 	add.w	r3, r0, #20
 801553a:	3114      	adds	r1, #20
 801553c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801554c:	42a5      	cmp	r5, r4
 801554e:	d003      	beq.n	8015558 <__mcmp+0x2c>
 8015550:	d305      	bcc.n	801555e <__mcmp+0x32>
 8015552:	2201      	movs	r2, #1
 8015554:	4610      	mov	r0, r2
 8015556:	bd30      	pop	{r4, r5, pc}
 8015558:	4283      	cmp	r3, r0
 801555a:	d3f3      	bcc.n	8015544 <__mcmp+0x18>
 801555c:	e7fa      	b.n	8015554 <__mcmp+0x28>
 801555e:	f04f 32ff 	mov.w	r2, #4294967295
 8015562:	e7f7      	b.n	8015554 <__mcmp+0x28>

08015564 <__mdiff>:
 8015564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015568:	460c      	mov	r4, r1
 801556a:	4606      	mov	r6, r0
 801556c:	4611      	mov	r1, r2
 801556e:	4620      	mov	r0, r4
 8015570:	4617      	mov	r7, r2
 8015572:	f7ff ffdb 	bl	801552c <__mcmp>
 8015576:	1e05      	subs	r5, r0, #0
 8015578:	d110      	bne.n	801559c <__mdiff+0x38>
 801557a:	4629      	mov	r1, r5
 801557c:	4630      	mov	r0, r6
 801557e:	f7ff fd57 	bl	8015030 <_Balloc>
 8015582:	b930      	cbnz	r0, 8015592 <__mdiff+0x2e>
 8015584:	4b39      	ldr	r3, [pc, #228]	; (801566c <__mdiff+0x108>)
 8015586:	4602      	mov	r2, r0
 8015588:	f240 2132 	movw	r1, #562	; 0x232
 801558c:	4838      	ldr	r0, [pc, #224]	; (8015670 <__mdiff+0x10c>)
 801558e:	f000 fbe7 	bl	8015d60 <__assert_func>
 8015592:	2301      	movs	r3, #1
 8015594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801559c:	bfa4      	itt	ge
 801559e:	463b      	movge	r3, r7
 80155a0:	4627      	movge	r7, r4
 80155a2:	4630      	mov	r0, r6
 80155a4:	6879      	ldr	r1, [r7, #4]
 80155a6:	bfa6      	itte	ge
 80155a8:	461c      	movge	r4, r3
 80155aa:	2500      	movge	r5, #0
 80155ac:	2501      	movlt	r5, #1
 80155ae:	f7ff fd3f 	bl	8015030 <_Balloc>
 80155b2:	b920      	cbnz	r0, 80155be <__mdiff+0x5a>
 80155b4:	4b2d      	ldr	r3, [pc, #180]	; (801566c <__mdiff+0x108>)
 80155b6:	4602      	mov	r2, r0
 80155b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80155bc:	e7e6      	b.n	801558c <__mdiff+0x28>
 80155be:	693e      	ldr	r6, [r7, #16]
 80155c0:	60c5      	str	r5, [r0, #12]
 80155c2:	6925      	ldr	r5, [r4, #16]
 80155c4:	f107 0114 	add.w	r1, r7, #20
 80155c8:	f104 0914 	add.w	r9, r4, #20
 80155cc:	f100 0e14 	add.w	lr, r0, #20
 80155d0:	f107 0210 	add.w	r2, r7, #16
 80155d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80155d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80155dc:	46f2      	mov	sl, lr
 80155de:	2700      	movs	r7, #0
 80155e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80155e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80155e8:	fa1f f883 	uxth.w	r8, r3
 80155ec:	fa17 f78b 	uxtah	r7, r7, fp
 80155f0:	0c1b      	lsrs	r3, r3, #16
 80155f2:	eba7 0808 	sub.w	r8, r7, r8
 80155f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80155fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80155fe:	fa1f f888 	uxth.w	r8, r8
 8015602:	141f      	asrs	r7, r3, #16
 8015604:	454d      	cmp	r5, r9
 8015606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801560a:	f84a 3b04 	str.w	r3, [sl], #4
 801560e:	d8e7      	bhi.n	80155e0 <__mdiff+0x7c>
 8015610:	1b2b      	subs	r3, r5, r4
 8015612:	3b15      	subs	r3, #21
 8015614:	f023 0303 	bic.w	r3, r3, #3
 8015618:	3304      	adds	r3, #4
 801561a:	3415      	adds	r4, #21
 801561c:	42a5      	cmp	r5, r4
 801561e:	bf38      	it	cc
 8015620:	2304      	movcc	r3, #4
 8015622:	4419      	add	r1, r3
 8015624:	4473      	add	r3, lr
 8015626:	469e      	mov	lr, r3
 8015628:	460d      	mov	r5, r1
 801562a:	4565      	cmp	r5, ip
 801562c:	d30e      	bcc.n	801564c <__mdiff+0xe8>
 801562e:	f10c 0203 	add.w	r2, ip, #3
 8015632:	1a52      	subs	r2, r2, r1
 8015634:	f022 0203 	bic.w	r2, r2, #3
 8015638:	3903      	subs	r1, #3
 801563a:	458c      	cmp	ip, r1
 801563c:	bf38      	it	cc
 801563e:	2200      	movcc	r2, #0
 8015640:	441a      	add	r2, r3
 8015642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015646:	b17b      	cbz	r3, 8015668 <__mdiff+0x104>
 8015648:	6106      	str	r6, [r0, #16]
 801564a:	e7a5      	b.n	8015598 <__mdiff+0x34>
 801564c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015650:	fa17 f488 	uxtah	r4, r7, r8
 8015654:	1422      	asrs	r2, r4, #16
 8015656:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801565a:	b2a4      	uxth	r4, r4
 801565c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015660:	f84e 4b04 	str.w	r4, [lr], #4
 8015664:	1417      	asrs	r7, r2, #16
 8015666:	e7e0      	b.n	801562a <__mdiff+0xc6>
 8015668:	3e01      	subs	r6, #1
 801566a:	e7ea      	b.n	8015642 <__mdiff+0xde>
 801566c:	0802048b 	.word	0x0802048b
 8015670:	080204fc 	.word	0x080204fc

08015674 <__d2b>:
 8015674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015678:	4689      	mov	r9, r1
 801567a:	2101      	movs	r1, #1
 801567c:	ec57 6b10 	vmov	r6, r7, d0
 8015680:	4690      	mov	r8, r2
 8015682:	f7ff fcd5 	bl	8015030 <_Balloc>
 8015686:	4604      	mov	r4, r0
 8015688:	b930      	cbnz	r0, 8015698 <__d2b+0x24>
 801568a:	4602      	mov	r2, r0
 801568c:	4b25      	ldr	r3, [pc, #148]	; (8015724 <__d2b+0xb0>)
 801568e:	4826      	ldr	r0, [pc, #152]	; (8015728 <__d2b+0xb4>)
 8015690:	f240 310a 	movw	r1, #778	; 0x30a
 8015694:	f000 fb64 	bl	8015d60 <__assert_func>
 8015698:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801569c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80156a0:	bb35      	cbnz	r5, 80156f0 <__d2b+0x7c>
 80156a2:	2e00      	cmp	r6, #0
 80156a4:	9301      	str	r3, [sp, #4]
 80156a6:	d028      	beq.n	80156fa <__d2b+0x86>
 80156a8:	4668      	mov	r0, sp
 80156aa:	9600      	str	r6, [sp, #0]
 80156ac:	f7ff fd8c 	bl	80151c8 <__lo0bits>
 80156b0:	9900      	ldr	r1, [sp, #0]
 80156b2:	b300      	cbz	r0, 80156f6 <__d2b+0x82>
 80156b4:	9a01      	ldr	r2, [sp, #4]
 80156b6:	f1c0 0320 	rsb	r3, r0, #32
 80156ba:	fa02 f303 	lsl.w	r3, r2, r3
 80156be:	430b      	orrs	r3, r1
 80156c0:	40c2      	lsrs	r2, r0
 80156c2:	6163      	str	r3, [r4, #20]
 80156c4:	9201      	str	r2, [sp, #4]
 80156c6:	9b01      	ldr	r3, [sp, #4]
 80156c8:	61a3      	str	r3, [r4, #24]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	bf14      	ite	ne
 80156ce:	2202      	movne	r2, #2
 80156d0:	2201      	moveq	r2, #1
 80156d2:	6122      	str	r2, [r4, #16]
 80156d4:	b1d5      	cbz	r5, 801570c <__d2b+0x98>
 80156d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80156da:	4405      	add	r5, r0
 80156dc:	f8c9 5000 	str.w	r5, [r9]
 80156e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80156e4:	f8c8 0000 	str.w	r0, [r8]
 80156e8:	4620      	mov	r0, r4
 80156ea:	b003      	add	sp, #12
 80156ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80156f4:	e7d5      	b.n	80156a2 <__d2b+0x2e>
 80156f6:	6161      	str	r1, [r4, #20]
 80156f8:	e7e5      	b.n	80156c6 <__d2b+0x52>
 80156fa:	a801      	add	r0, sp, #4
 80156fc:	f7ff fd64 	bl	80151c8 <__lo0bits>
 8015700:	9b01      	ldr	r3, [sp, #4]
 8015702:	6163      	str	r3, [r4, #20]
 8015704:	2201      	movs	r2, #1
 8015706:	6122      	str	r2, [r4, #16]
 8015708:	3020      	adds	r0, #32
 801570a:	e7e3      	b.n	80156d4 <__d2b+0x60>
 801570c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015714:	f8c9 0000 	str.w	r0, [r9]
 8015718:	6918      	ldr	r0, [r3, #16]
 801571a:	f7ff fd35 	bl	8015188 <__hi0bits>
 801571e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015722:	e7df      	b.n	80156e4 <__d2b+0x70>
 8015724:	0802048b 	.word	0x0802048b
 8015728:	080204fc 	.word	0x080204fc

0801572c <_calloc_r>:
 801572c:	b513      	push	{r0, r1, r4, lr}
 801572e:	434a      	muls	r2, r1
 8015730:	4611      	mov	r1, r2
 8015732:	9201      	str	r2, [sp, #4]
 8015734:	f7fd fd34 	bl	80131a0 <_malloc_r>
 8015738:	4604      	mov	r4, r0
 801573a:	b118      	cbz	r0, 8015744 <_calloc_r+0x18>
 801573c:	9a01      	ldr	r2, [sp, #4]
 801573e:	2100      	movs	r1, #0
 8015740:	f7fd fcd6 	bl	80130f0 <memset>
 8015744:	4620      	mov	r0, r4
 8015746:	b002      	add	sp, #8
 8015748:	bd10      	pop	{r4, pc}

0801574a <__ssputs_r>:
 801574a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801574e:	688e      	ldr	r6, [r1, #8]
 8015750:	429e      	cmp	r6, r3
 8015752:	4682      	mov	sl, r0
 8015754:	460c      	mov	r4, r1
 8015756:	4690      	mov	r8, r2
 8015758:	461f      	mov	r7, r3
 801575a:	d838      	bhi.n	80157ce <__ssputs_r+0x84>
 801575c:	898a      	ldrh	r2, [r1, #12]
 801575e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015762:	d032      	beq.n	80157ca <__ssputs_r+0x80>
 8015764:	6825      	ldr	r5, [r4, #0]
 8015766:	6909      	ldr	r1, [r1, #16]
 8015768:	eba5 0901 	sub.w	r9, r5, r1
 801576c:	6965      	ldr	r5, [r4, #20]
 801576e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015776:	3301      	adds	r3, #1
 8015778:	444b      	add	r3, r9
 801577a:	106d      	asrs	r5, r5, #1
 801577c:	429d      	cmp	r5, r3
 801577e:	bf38      	it	cc
 8015780:	461d      	movcc	r5, r3
 8015782:	0553      	lsls	r3, r2, #21
 8015784:	d531      	bpl.n	80157ea <__ssputs_r+0xa0>
 8015786:	4629      	mov	r1, r5
 8015788:	f7fd fd0a 	bl	80131a0 <_malloc_r>
 801578c:	4606      	mov	r6, r0
 801578e:	b950      	cbnz	r0, 80157a6 <__ssputs_r+0x5c>
 8015790:	230c      	movs	r3, #12
 8015792:	f8ca 3000 	str.w	r3, [sl]
 8015796:	89a3      	ldrh	r3, [r4, #12]
 8015798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801579c:	81a3      	strh	r3, [r4, #12]
 801579e:	f04f 30ff 	mov.w	r0, #4294967295
 80157a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157a6:	6921      	ldr	r1, [r4, #16]
 80157a8:	464a      	mov	r2, r9
 80157aa:	f7fd fc79 	bl	80130a0 <memcpy>
 80157ae:	89a3      	ldrh	r3, [r4, #12]
 80157b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80157b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157b8:	81a3      	strh	r3, [r4, #12]
 80157ba:	6126      	str	r6, [r4, #16]
 80157bc:	6165      	str	r5, [r4, #20]
 80157be:	444e      	add	r6, r9
 80157c0:	eba5 0509 	sub.w	r5, r5, r9
 80157c4:	6026      	str	r6, [r4, #0]
 80157c6:	60a5      	str	r5, [r4, #8]
 80157c8:	463e      	mov	r6, r7
 80157ca:	42be      	cmp	r6, r7
 80157cc:	d900      	bls.n	80157d0 <__ssputs_r+0x86>
 80157ce:	463e      	mov	r6, r7
 80157d0:	4632      	mov	r2, r6
 80157d2:	6820      	ldr	r0, [r4, #0]
 80157d4:	4641      	mov	r1, r8
 80157d6:	f7fd fc71 	bl	80130bc <memmove>
 80157da:	68a3      	ldr	r3, [r4, #8]
 80157dc:	6822      	ldr	r2, [r4, #0]
 80157de:	1b9b      	subs	r3, r3, r6
 80157e0:	4432      	add	r2, r6
 80157e2:	60a3      	str	r3, [r4, #8]
 80157e4:	6022      	str	r2, [r4, #0]
 80157e6:	2000      	movs	r0, #0
 80157e8:	e7db      	b.n	80157a2 <__ssputs_r+0x58>
 80157ea:	462a      	mov	r2, r5
 80157ec:	f000 fb3e 	bl	8015e6c <_realloc_r>
 80157f0:	4606      	mov	r6, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d1e1      	bne.n	80157ba <__ssputs_r+0x70>
 80157f6:	6921      	ldr	r1, [r4, #16]
 80157f8:	4650      	mov	r0, sl
 80157fa:	f7fd fc81 	bl	8013100 <_free_r>
 80157fe:	e7c7      	b.n	8015790 <__ssputs_r+0x46>

08015800 <_svfiprintf_r>:
 8015800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	4698      	mov	r8, r3
 8015806:	898b      	ldrh	r3, [r1, #12]
 8015808:	061b      	lsls	r3, r3, #24
 801580a:	b09d      	sub	sp, #116	; 0x74
 801580c:	4607      	mov	r7, r0
 801580e:	460d      	mov	r5, r1
 8015810:	4614      	mov	r4, r2
 8015812:	d50e      	bpl.n	8015832 <_svfiprintf_r+0x32>
 8015814:	690b      	ldr	r3, [r1, #16]
 8015816:	b963      	cbnz	r3, 8015832 <_svfiprintf_r+0x32>
 8015818:	2140      	movs	r1, #64	; 0x40
 801581a:	f7fd fcc1 	bl	80131a0 <_malloc_r>
 801581e:	6028      	str	r0, [r5, #0]
 8015820:	6128      	str	r0, [r5, #16]
 8015822:	b920      	cbnz	r0, 801582e <_svfiprintf_r+0x2e>
 8015824:	230c      	movs	r3, #12
 8015826:	603b      	str	r3, [r7, #0]
 8015828:	f04f 30ff 	mov.w	r0, #4294967295
 801582c:	e0d1      	b.n	80159d2 <_svfiprintf_r+0x1d2>
 801582e:	2340      	movs	r3, #64	; 0x40
 8015830:	616b      	str	r3, [r5, #20]
 8015832:	2300      	movs	r3, #0
 8015834:	9309      	str	r3, [sp, #36]	; 0x24
 8015836:	2320      	movs	r3, #32
 8015838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801583c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015840:	2330      	movs	r3, #48	; 0x30
 8015842:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80159ec <_svfiprintf_r+0x1ec>
 8015846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801584a:	f04f 0901 	mov.w	r9, #1
 801584e:	4623      	mov	r3, r4
 8015850:	469a      	mov	sl, r3
 8015852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015856:	b10a      	cbz	r2, 801585c <_svfiprintf_r+0x5c>
 8015858:	2a25      	cmp	r2, #37	; 0x25
 801585a:	d1f9      	bne.n	8015850 <_svfiprintf_r+0x50>
 801585c:	ebba 0b04 	subs.w	fp, sl, r4
 8015860:	d00b      	beq.n	801587a <_svfiprintf_r+0x7a>
 8015862:	465b      	mov	r3, fp
 8015864:	4622      	mov	r2, r4
 8015866:	4629      	mov	r1, r5
 8015868:	4638      	mov	r0, r7
 801586a:	f7ff ff6e 	bl	801574a <__ssputs_r>
 801586e:	3001      	adds	r0, #1
 8015870:	f000 80aa 	beq.w	80159c8 <_svfiprintf_r+0x1c8>
 8015874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015876:	445a      	add	r2, fp
 8015878:	9209      	str	r2, [sp, #36]	; 0x24
 801587a:	f89a 3000 	ldrb.w	r3, [sl]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f000 80a2 	beq.w	80159c8 <_svfiprintf_r+0x1c8>
 8015884:	2300      	movs	r3, #0
 8015886:	f04f 32ff 	mov.w	r2, #4294967295
 801588a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801588e:	f10a 0a01 	add.w	sl, sl, #1
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	9307      	str	r3, [sp, #28]
 8015896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801589a:	931a      	str	r3, [sp, #104]	; 0x68
 801589c:	4654      	mov	r4, sl
 801589e:	2205      	movs	r2, #5
 80158a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158a4:	4851      	ldr	r0, [pc, #324]	; (80159ec <_svfiprintf_r+0x1ec>)
 80158a6:	f7ea fcb3 	bl	8000210 <memchr>
 80158aa:	9a04      	ldr	r2, [sp, #16]
 80158ac:	b9d8      	cbnz	r0, 80158e6 <_svfiprintf_r+0xe6>
 80158ae:	06d0      	lsls	r0, r2, #27
 80158b0:	bf44      	itt	mi
 80158b2:	2320      	movmi	r3, #32
 80158b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158b8:	0711      	lsls	r1, r2, #28
 80158ba:	bf44      	itt	mi
 80158bc:	232b      	movmi	r3, #43	; 0x2b
 80158be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158c2:	f89a 3000 	ldrb.w	r3, [sl]
 80158c6:	2b2a      	cmp	r3, #42	; 0x2a
 80158c8:	d015      	beq.n	80158f6 <_svfiprintf_r+0xf6>
 80158ca:	9a07      	ldr	r2, [sp, #28]
 80158cc:	4654      	mov	r4, sl
 80158ce:	2000      	movs	r0, #0
 80158d0:	f04f 0c0a 	mov.w	ip, #10
 80158d4:	4621      	mov	r1, r4
 80158d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158da:	3b30      	subs	r3, #48	; 0x30
 80158dc:	2b09      	cmp	r3, #9
 80158de:	d94e      	bls.n	801597e <_svfiprintf_r+0x17e>
 80158e0:	b1b0      	cbz	r0, 8015910 <_svfiprintf_r+0x110>
 80158e2:	9207      	str	r2, [sp, #28]
 80158e4:	e014      	b.n	8015910 <_svfiprintf_r+0x110>
 80158e6:	eba0 0308 	sub.w	r3, r0, r8
 80158ea:	fa09 f303 	lsl.w	r3, r9, r3
 80158ee:	4313      	orrs	r3, r2
 80158f0:	9304      	str	r3, [sp, #16]
 80158f2:	46a2      	mov	sl, r4
 80158f4:	e7d2      	b.n	801589c <_svfiprintf_r+0x9c>
 80158f6:	9b03      	ldr	r3, [sp, #12]
 80158f8:	1d19      	adds	r1, r3, #4
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	9103      	str	r1, [sp, #12]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	bfbb      	ittet	lt
 8015902:	425b      	neglt	r3, r3
 8015904:	f042 0202 	orrlt.w	r2, r2, #2
 8015908:	9307      	strge	r3, [sp, #28]
 801590a:	9307      	strlt	r3, [sp, #28]
 801590c:	bfb8      	it	lt
 801590e:	9204      	strlt	r2, [sp, #16]
 8015910:	7823      	ldrb	r3, [r4, #0]
 8015912:	2b2e      	cmp	r3, #46	; 0x2e
 8015914:	d10c      	bne.n	8015930 <_svfiprintf_r+0x130>
 8015916:	7863      	ldrb	r3, [r4, #1]
 8015918:	2b2a      	cmp	r3, #42	; 0x2a
 801591a:	d135      	bne.n	8015988 <_svfiprintf_r+0x188>
 801591c:	9b03      	ldr	r3, [sp, #12]
 801591e:	1d1a      	adds	r2, r3, #4
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	9203      	str	r2, [sp, #12]
 8015924:	2b00      	cmp	r3, #0
 8015926:	bfb8      	it	lt
 8015928:	f04f 33ff 	movlt.w	r3, #4294967295
 801592c:	3402      	adds	r4, #2
 801592e:	9305      	str	r3, [sp, #20]
 8015930:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80159fc <_svfiprintf_r+0x1fc>
 8015934:	7821      	ldrb	r1, [r4, #0]
 8015936:	2203      	movs	r2, #3
 8015938:	4650      	mov	r0, sl
 801593a:	f7ea fc69 	bl	8000210 <memchr>
 801593e:	b140      	cbz	r0, 8015952 <_svfiprintf_r+0x152>
 8015940:	2340      	movs	r3, #64	; 0x40
 8015942:	eba0 000a 	sub.w	r0, r0, sl
 8015946:	fa03 f000 	lsl.w	r0, r3, r0
 801594a:	9b04      	ldr	r3, [sp, #16]
 801594c:	4303      	orrs	r3, r0
 801594e:	3401      	adds	r4, #1
 8015950:	9304      	str	r3, [sp, #16]
 8015952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015956:	4826      	ldr	r0, [pc, #152]	; (80159f0 <_svfiprintf_r+0x1f0>)
 8015958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801595c:	2206      	movs	r2, #6
 801595e:	f7ea fc57 	bl	8000210 <memchr>
 8015962:	2800      	cmp	r0, #0
 8015964:	d038      	beq.n	80159d8 <_svfiprintf_r+0x1d8>
 8015966:	4b23      	ldr	r3, [pc, #140]	; (80159f4 <_svfiprintf_r+0x1f4>)
 8015968:	bb1b      	cbnz	r3, 80159b2 <_svfiprintf_r+0x1b2>
 801596a:	9b03      	ldr	r3, [sp, #12]
 801596c:	3307      	adds	r3, #7
 801596e:	f023 0307 	bic.w	r3, r3, #7
 8015972:	3308      	adds	r3, #8
 8015974:	9303      	str	r3, [sp, #12]
 8015976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015978:	4433      	add	r3, r6
 801597a:	9309      	str	r3, [sp, #36]	; 0x24
 801597c:	e767      	b.n	801584e <_svfiprintf_r+0x4e>
 801597e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015982:	460c      	mov	r4, r1
 8015984:	2001      	movs	r0, #1
 8015986:	e7a5      	b.n	80158d4 <_svfiprintf_r+0xd4>
 8015988:	2300      	movs	r3, #0
 801598a:	3401      	adds	r4, #1
 801598c:	9305      	str	r3, [sp, #20]
 801598e:	4619      	mov	r1, r3
 8015990:	f04f 0c0a 	mov.w	ip, #10
 8015994:	4620      	mov	r0, r4
 8015996:	f810 2b01 	ldrb.w	r2, [r0], #1
 801599a:	3a30      	subs	r2, #48	; 0x30
 801599c:	2a09      	cmp	r2, #9
 801599e:	d903      	bls.n	80159a8 <_svfiprintf_r+0x1a8>
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d0c5      	beq.n	8015930 <_svfiprintf_r+0x130>
 80159a4:	9105      	str	r1, [sp, #20]
 80159a6:	e7c3      	b.n	8015930 <_svfiprintf_r+0x130>
 80159a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80159ac:	4604      	mov	r4, r0
 80159ae:	2301      	movs	r3, #1
 80159b0:	e7f0      	b.n	8015994 <_svfiprintf_r+0x194>
 80159b2:	ab03      	add	r3, sp, #12
 80159b4:	9300      	str	r3, [sp, #0]
 80159b6:	462a      	mov	r2, r5
 80159b8:	4b0f      	ldr	r3, [pc, #60]	; (80159f8 <_svfiprintf_r+0x1f8>)
 80159ba:	a904      	add	r1, sp, #16
 80159bc:	4638      	mov	r0, r7
 80159be:	f7fd fce9 	bl	8013394 <_printf_float>
 80159c2:	1c42      	adds	r2, r0, #1
 80159c4:	4606      	mov	r6, r0
 80159c6:	d1d6      	bne.n	8015976 <_svfiprintf_r+0x176>
 80159c8:	89ab      	ldrh	r3, [r5, #12]
 80159ca:	065b      	lsls	r3, r3, #25
 80159cc:	f53f af2c 	bmi.w	8015828 <_svfiprintf_r+0x28>
 80159d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159d2:	b01d      	add	sp, #116	; 0x74
 80159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d8:	ab03      	add	r3, sp, #12
 80159da:	9300      	str	r3, [sp, #0]
 80159dc:	462a      	mov	r2, r5
 80159de:	4b06      	ldr	r3, [pc, #24]	; (80159f8 <_svfiprintf_r+0x1f8>)
 80159e0:	a904      	add	r1, sp, #16
 80159e2:	4638      	mov	r0, r7
 80159e4:	f7fd ff7a 	bl	80138dc <_printf_i>
 80159e8:	e7eb      	b.n	80159c2 <_svfiprintf_r+0x1c2>
 80159ea:	bf00      	nop
 80159ec:	0802065c 	.word	0x0802065c
 80159f0:	08020666 	.word	0x08020666
 80159f4:	08013395 	.word	0x08013395
 80159f8:	0801574b 	.word	0x0801574b
 80159fc:	08020662 	.word	0x08020662

08015a00 <__sfputc_r>:
 8015a00:	6893      	ldr	r3, [r2, #8]
 8015a02:	3b01      	subs	r3, #1
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	b410      	push	{r4}
 8015a08:	6093      	str	r3, [r2, #8]
 8015a0a:	da08      	bge.n	8015a1e <__sfputc_r+0x1e>
 8015a0c:	6994      	ldr	r4, [r2, #24]
 8015a0e:	42a3      	cmp	r3, r4
 8015a10:	db01      	blt.n	8015a16 <__sfputc_r+0x16>
 8015a12:	290a      	cmp	r1, #10
 8015a14:	d103      	bne.n	8015a1e <__sfputc_r+0x1e>
 8015a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a1a:	f7fe b9a1 	b.w	8013d60 <__swbuf_r>
 8015a1e:	6813      	ldr	r3, [r2, #0]
 8015a20:	1c58      	adds	r0, r3, #1
 8015a22:	6010      	str	r0, [r2, #0]
 8015a24:	7019      	strb	r1, [r3, #0]
 8015a26:	4608      	mov	r0, r1
 8015a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a2c:	4770      	bx	lr

08015a2e <__sfputs_r>:
 8015a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a30:	4606      	mov	r6, r0
 8015a32:	460f      	mov	r7, r1
 8015a34:	4614      	mov	r4, r2
 8015a36:	18d5      	adds	r5, r2, r3
 8015a38:	42ac      	cmp	r4, r5
 8015a3a:	d101      	bne.n	8015a40 <__sfputs_r+0x12>
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	e007      	b.n	8015a50 <__sfputs_r+0x22>
 8015a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a44:	463a      	mov	r2, r7
 8015a46:	4630      	mov	r0, r6
 8015a48:	f7ff ffda 	bl	8015a00 <__sfputc_r>
 8015a4c:	1c43      	adds	r3, r0, #1
 8015a4e:	d1f3      	bne.n	8015a38 <__sfputs_r+0xa>
 8015a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a54 <_vfiprintf_r>:
 8015a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a58:	460d      	mov	r5, r1
 8015a5a:	b09d      	sub	sp, #116	; 0x74
 8015a5c:	4614      	mov	r4, r2
 8015a5e:	4698      	mov	r8, r3
 8015a60:	4606      	mov	r6, r0
 8015a62:	b118      	cbz	r0, 8015a6c <_vfiprintf_r+0x18>
 8015a64:	6983      	ldr	r3, [r0, #24]
 8015a66:	b90b      	cbnz	r3, 8015a6c <_vfiprintf_r+0x18>
 8015a68:	f7ff f9cc 	bl	8014e04 <__sinit>
 8015a6c:	4b89      	ldr	r3, [pc, #548]	; (8015c94 <_vfiprintf_r+0x240>)
 8015a6e:	429d      	cmp	r5, r3
 8015a70:	d11b      	bne.n	8015aaa <_vfiprintf_r+0x56>
 8015a72:	6875      	ldr	r5, [r6, #4]
 8015a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a76:	07d9      	lsls	r1, r3, #31
 8015a78:	d405      	bmi.n	8015a86 <_vfiprintf_r+0x32>
 8015a7a:	89ab      	ldrh	r3, [r5, #12]
 8015a7c:	059a      	lsls	r2, r3, #22
 8015a7e:	d402      	bmi.n	8015a86 <_vfiprintf_r+0x32>
 8015a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a82:	f7ff fa62 	bl	8014f4a <__retarget_lock_acquire_recursive>
 8015a86:	89ab      	ldrh	r3, [r5, #12]
 8015a88:	071b      	lsls	r3, r3, #28
 8015a8a:	d501      	bpl.n	8015a90 <_vfiprintf_r+0x3c>
 8015a8c:	692b      	ldr	r3, [r5, #16]
 8015a8e:	b9eb      	cbnz	r3, 8015acc <_vfiprintf_r+0x78>
 8015a90:	4629      	mov	r1, r5
 8015a92:	4630      	mov	r0, r6
 8015a94:	f7fe f9b6 	bl	8013e04 <__swsetup_r>
 8015a98:	b1c0      	cbz	r0, 8015acc <_vfiprintf_r+0x78>
 8015a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a9c:	07dc      	lsls	r4, r3, #31
 8015a9e:	d50e      	bpl.n	8015abe <_vfiprintf_r+0x6a>
 8015aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8015aa4:	b01d      	add	sp, #116	; 0x74
 8015aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aaa:	4b7b      	ldr	r3, [pc, #492]	; (8015c98 <_vfiprintf_r+0x244>)
 8015aac:	429d      	cmp	r5, r3
 8015aae:	d101      	bne.n	8015ab4 <_vfiprintf_r+0x60>
 8015ab0:	68b5      	ldr	r5, [r6, #8]
 8015ab2:	e7df      	b.n	8015a74 <_vfiprintf_r+0x20>
 8015ab4:	4b79      	ldr	r3, [pc, #484]	; (8015c9c <_vfiprintf_r+0x248>)
 8015ab6:	429d      	cmp	r5, r3
 8015ab8:	bf08      	it	eq
 8015aba:	68f5      	ldreq	r5, [r6, #12]
 8015abc:	e7da      	b.n	8015a74 <_vfiprintf_r+0x20>
 8015abe:	89ab      	ldrh	r3, [r5, #12]
 8015ac0:	0598      	lsls	r0, r3, #22
 8015ac2:	d4ed      	bmi.n	8015aa0 <_vfiprintf_r+0x4c>
 8015ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ac6:	f7ff fa41 	bl	8014f4c <__retarget_lock_release_recursive>
 8015aca:	e7e9      	b.n	8015aa0 <_vfiprintf_r+0x4c>
 8015acc:	2300      	movs	r3, #0
 8015ace:	9309      	str	r3, [sp, #36]	; 0x24
 8015ad0:	2320      	movs	r3, #32
 8015ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ada:	2330      	movs	r3, #48	; 0x30
 8015adc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ca0 <_vfiprintf_r+0x24c>
 8015ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ae4:	f04f 0901 	mov.w	r9, #1
 8015ae8:	4623      	mov	r3, r4
 8015aea:	469a      	mov	sl, r3
 8015aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015af0:	b10a      	cbz	r2, 8015af6 <_vfiprintf_r+0xa2>
 8015af2:	2a25      	cmp	r2, #37	; 0x25
 8015af4:	d1f9      	bne.n	8015aea <_vfiprintf_r+0x96>
 8015af6:	ebba 0b04 	subs.w	fp, sl, r4
 8015afa:	d00b      	beq.n	8015b14 <_vfiprintf_r+0xc0>
 8015afc:	465b      	mov	r3, fp
 8015afe:	4622      	mov	r2, r4
 8015b00:	4629      	mov	r1, r5
 8015b02:	4630      	mov	r0, r6
 8015b04:	f7ff ff93 	bl	8015a2e <__sfputs_r>
 8015b08:	3001      	adds	r0, #1
 8015b0a:	f000 80aa 	beq.w	8015c62 <_vfiprintf_r+0x20e>
 8015b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b10:	445a      	add	r2, fp
 8015b12:	9209      	str	r2, [sp, #36]	; 0x24
 8015b14:	f89a 3000 	ldrb.w	r3, [sl]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f000 80a2 	beq.w	8015c62 <_vfiprintf_r+0x20e>
 8015b1e:	2300      	movs	r3, #0
 8015b20:	f04f 32ff 	mov.w	r2, #4294967295
 8015b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b28:	f10a 0a01 	add.w	sl, sl, #1
 8015b2c:	9304      	str	r3, [sp, #16]
 8015b2e:	9307      	str	r3, [sp, #28]
 8015b30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b34:	931a      	str	r3, [sp, #104]	; 0x68
 8015b36:	4654      	mov	r4, sl
 8015b38:	2205      	movs	r2, #5
 8015b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b3e:	4858      	ldr	r0, [pc, #352]	; (8015ca0 <_vfiprintf_r+0x24c>)
 8015b40:	f7ea fb66 	bl	8000210 <memchr>
 8015b44:	9a04      	ldr	r2, [sp, #16]
 8015b46:	b9d8      	cbnz	r0, 8015b80 <_vfiprintf_r+0x12c>
 8015b48:	06d1      	lsls	r1, r2, #27
 8015b4a:	bf44      	itt	mi
 8015b4c:	2320      	movmi	r3, #32
 8015b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b52:	0713      	lsls	r3, r2, #28
 8015b54:	bf44      	itt	mi
 8015b56:	232b      	movmi	r3, #43	; 0x2b
 8015b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8015b60:	2b2a      	cmp	r3, #42	; 0x2a
 8015b62:	d015      	beq.n	8015b90 <_vfiprintf_r+0x13c>
 8015b64:	9a07      	ldr	r2, [sp, #28]
 8015b66:	4654      	mov	r4, sl
 8015b68:	2000      	movs	r0, #0
 8015b6a:	f04f 0c0a 	mov.w	ip, #10
 8015b6e:	4621      	mov	r1, r4
 8015b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b74:	3b30      	subs	r3, #48	; 0x30
 8015b76:	2b09      	cmp	r3, #9
 8015b78:	d94e      	bls.n	8015c18 <_vfiprintf_r+0x1c4>
 8015b7a:	b1b0      	cbz	r0, 8015baa <_vfiprintf_r+0x156>
 8015b7c:	9207      	str	r2, [sp, #28]
 8015b7e:	e014      	b.n	8015baa <_vfiprintf_r+0x156>
 8015b80:	eba0 0308 	sub.w	r3, r0, r8
 8015b84:	fa09 f303 	lsl.w	r3, r9, r3
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	9304      	str	r3, [sp, #16]
 8015b8c:	46a2      	mov	sl, r4
 8015b8e:	e7d2      	b.n	8015b36 <_vfiprintf_r+0xe2>
 8015b90:	9b03      	ldr	r3, [sp, #12]
 8015b92:	1d19      	adds	r1, r3, #4
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	9103      	str	r1, [sp, #12]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	bfbb      	ittet	lt
 8015b9c:	425b      	neglt	r3, r3
 8015b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8015ba2:	9307      	strge	r3, [sp, #28]
 8015ba4:	9307      	strlt	r3, [sp, #28]
 8015ba6:	bfb8      	it	lt
 8015ba8:	9204      	strlt	r2, [sp, #16]
 8015baa:	7823      	ldrb	r3, [r4, #0]
 8015bac:	2b2e      	cmp	r3, #46	; 0x2e
 8015bae:	d10c      	bne.n	8015bca <_vfiprintf_r+0x176>
 8015bb0:	7863      	ldrb	r3, [r4, #1]
 8015bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8015bb4:	d135      	bne.n	8015c22 <_vfiprintf_r+0x1ce>
 8015bb6:	9b03      	ldr	r3, [sp, #12]
 8015bb8:	1d1a      	adds	r2, r3, #4
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	9203      	str	r2, [sp, #12]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	bfb8      	it	lt
 8015bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8015bc6:	3402      	adds	r4, #2
 8015bc8:	9305      	str	r3, [sp, #20]
 8015bca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015cb0 <_vfiprintf_r+0x25c>
 8015bce:	7821      	ldrb	r1, [r4, #0]
 8015bd0:	2203      	movs	r2, #3
 8015bd2:	4650      	mov	r0, sl
 8015bd4:	f7ea fb1c 	bl	8000210 <memchr>
 8015bd8:	b140      	cbz	r0, 8015bec <_vfiprintf_r+0x198>
 8015bda:	2340      	movs	r3, #64	; 0x40
 8015bdc:	eba0 000a 	sub.w	r0, r0, sl
 8015be0:	fa03 f000 	lsl.w	r0, r3, r0
 8015be4:	9b04      	ldr	r3, [sp, #16]
 8015be6:	4303      	orrs	r3, r0
 8015be8:	3401      	adds	r4, #1
 8015bea:	9304      	str	r3, [sp, #16]
 8015bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bf0:	482c      	ldr	r0, [pc, #176]	; (8015ca4 <_vfiprintf_r+0x250>)
 8015bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bf6:	2206      	movs	r2, #6
 8015bf8:	f7ea fb0a 	bl	8000210 <memchr>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d03f      	beq.n	8015c80 <_vfiprintf_r+0x22c>
 8015c00:	4b29      	ldr	r3, [pc, #164]	; (8015ca8 <_vfiprintf_r+0x254>)
 8015c02:	bb1b      	cbnz	r3, 8015c4c <_vfiprintf_r+0x1f8>
 8015c04:	9b03      	ldr	r3, [sp, #12]
 8015c06:	3307      	adds	r3, #7
 8015c08:	f023 0307 	bic.w	r3, r3, #7
 8015c0c:	3308      	adds	r3, #8
 8015c0e:	9303      	str	r3, [sp, #12]
 8015c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c12:	443b      	add	r3, r7
 8015c14:	9309      	str	r3, [sp, #36]	; 0x24
 8015c16:	e767      	b.n	8015ae8 <_vfiprintf_r+0x94>
 8015c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c1c:	460c      	mov	r4, r1
 8015c1e:	2001      	movs	r0, #1
 8015c20:	e7a5      	b.n	8015b6e <_vfiprintf_r+0x11a>
 8015c22:	2300      	movs	r3, #0
 8015c24:	3401      	adds	r4, #1
 8015c26:	9305      	str	r3, [sp, #20]
 8015c28:	4619      	mov	r1, r3
 8015c2a:	f04f 0c0a 	mov.w	ip, #10
 8015c2e:	4620      	mov	r0, r4
 8015c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c34:	3a30      	subs	r2, #48	; 0x30
 8015c36:	2a09      	cmp	r2, #9
 8015c38:	d903      	bls.n	8015c42 <_vfiprintf_r+0x1ee>
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d0c5      	beq.n	8015bca <_vfiprintf_r+0x176>
 8015c3e:	9105      	str	r1, [sp, #20]
 8015c40:	e7c3      	b.n	8015bca <_vfiprintf_r+0x176>
 8015c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c46:	4604      	mov	r4, r0
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e7f0      	b.n	8015c2e <_vfiprintf_r+0x1da>
 8015c4c:	ab03      	add	r3, sp, #12
 8015c4e:	9300      	str	r3, [sp, #0]
 8015c50:	462a      	mov	r2, r5
 8015c52:	4b16      	ldr	r3, [pc, #88]	; (8015cac <_vfiprintf_r+0x258>)
 8015c54:	a904      	add	r1, sp, #16
 8015c56:	4630      	mov	r0, r6
 8015c58:	f7fd fb9c 	bl	8013394 <_printf_float>
 8015c5c:	4607      	mov	r7, r0
 8015c5e:	1c78      	adds	r0, r7, #1
 8015c60:	d1d6      	bne.n	8015c10 <_vfiprintf_r+0x1bc>
 8015c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c64:	07d9      	lsls	r1, r3, #31
 8015c66:	d405      	bmi.n	8015c74 <_vfiprintf_r+0x220>
 8015c68:	89ab      	ldrh	r3, [r5, #12]
 8015c6a:	059a      	lsls	r2, r3, #22
 8015c6c:	d402      	bmi.n	8015c74 <_vfiprintf_r+0x220>
 8015c6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c70:	f7ff f96c 	bl	8014f4c <__retarget_lock_release_recursive>
 8015c74:	89ab      	ldrh	r3, [r5, #12]
 8015c76:	065b      	lsls	r3, r3, #25
 8015c78:	f53f af12 	bmi.w	8015aa0 <_vfiprintf_r+0x4c>
 8015c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c7e:	e711      	b.n	8015aa4 <_vfiprintf_r+0x50>
 8015c80:	ab03      	add	r3, sp, #12
 8015c82:	9300      	str	r3, [sp, #0]
 8015c84:	462a      	mov	r2, r5
 8015c86:	4b09      	ldr	r3, [pc, #36]	; (8015cac <_vfiprintf_r+0x258>)
 8015c88:	a904      	add	r1, sp, #16
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	f7fd fe26 	bl	80138dc <_printf_i>
 8015c90:	e7e4      	b.n	8015c5c <_vfiprintf_r+0x208>
 8015c92:	bf00      	nop
 8015c94:	080204bc 	.word	0x080204bc
 8015c98:	080204dc 	.word	0x080204dc
 8015c9c:	0802049c 	.word	0x0802049c
 8015ca0:	0802065c 	.word	0x0802065c
 8015ca4:	08020666 	.word	0x08020666
 8015ca8:	08013395 	.word	0x08013395
 8015cac:	08015a2f 	.word	0x08015a2f
 8015cb0:	08020662 	.word	0x08020662

08015cb4 <__sread>:
 8015cb4:	b510      	push	{r4, lr}
 8015cb6:	460c      	mov	r4, r1
 8015cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cbc:	f000 f8fc 	bl	8015eb8 <_read_r>
 8015cc0:	2800      	cmp	r0, #0
 8015cc2:	bfab      	itete	ge
 8015cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8015cc8:	181b      	addge	r3, r3, r0
 8015cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cce:	bfac      	ite	ge
 8015cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8015cd2:	81a3      	strhlt	r3, [r4, #12]
 8015cd4:	bd10      	pop	{r4, pc}

08015cd6 <__swrite>:
 8015cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cda:	461f      	mov	r7, r3
 8015cdc:	898b      	ldrh	r3, [r1, #12]
 8015cde:	05db      	lsls	r3, r3, #23
 8015ce0:	4605      	mov	r5, r0
 8015ce2:	460c      	mov	r4, r1
 8015ce4:	4616      	mov	r6, r2
 8015ce6:	d505      	bpl.n	8015cf4 <__swrite+0x1e>
 8015ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cec:	2302      	movs	r3, #2
 8015cee:	2200      	movs	r2, #0
 8015cf0:	f000 f898 	bl	8015e24 <_lseek_r>
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015cfe:	81a3      	strh	r3, [r4, #12]
 8015d00:	4632      	mov	r2, r6
 8015d02:	463b      	mov	r3, r7
 8015d04:	4628      	mov	r0, r5
 8015d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d0a:	f000 b817 	b.w	8015d3c <_write_r>

08015d0e <__sseek>:
 8015d0e:	b510      	push	{r4, lr}
 8015d10:	460c      	mov	r4, r1
 8015d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d16:	f000 f885 	bl	8015e24 <_lseek_r>
 8015d1a:	1c43      	adds	r3, r0, #1
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	bf15      	itete	ne
 8015d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d2a:	81a3      	strheq	r3, [r4, #12]
 8015d2c:	bf18      	it	ne
 8015d2e:	81a3      	strhne	r3, [r4, #12]
 8015d30:	bd10      	pop	{r4, pc}

08015d32 <__sclose>:
 8015d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d36:	f000 b831 	b.w	8015d9c <_close_r>
	...

08015d3c <_write_r>:
 8015d3c:	b538      	push	{r3, r4, r5, lr}
 8015d3e:	4d07      	ldr	r5, [pc, #28]	; (8015d5c <_write_r+0x20>)
 8015d40:	4604      	mov	r4, r0
 8015d42:	4608      	mov	r0, r1
 8015d44:	4611      	mov	r1, r2
 8015d46:	2200      	movs	r2, #0
 8015d48:	602a      	str	r2, [r5, #0]
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	f7f0 fe5c 	bl	8006a08 <_write>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_write_r+0x1e>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_write_r+0x1e>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	20002590 	.word	0x20002590

08015d60 <__assert_func>:
 8015d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015d62:	4614      	mov	r4, r2
 8015d64:	461a      	mov	r2, r3
 8015d66:	4b09      	ldr	r3, [pc, #36]	; (8015d8c <__assert_func+0x2c>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	68d8      	ldr	r0, [r3, #12]
 8015d6e:	b14c      	cbz	r4, 8015d84 <__assert_func+0x24>
 8015d70:	4b07      	ldr	r3, [pc, #28]	; (8015d90 <__assert_func+0x30>)
 8015d72:	9100      	str	r1, [sp, #0]
 8015d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d78:	4906      	ldr	r1, [pc, #24]	; (8015d94 <__assert_func+0x34>)
 8015d7a:	462b      	mov	r3, r5
 8015d7c:	f000 f81e 	bl	8015dbc <fiprintf>
 8015d80:	f7fd f93e 	bl	8013000 <abort>
 8015d84:	4b04      	ldr	r3, [pc, #16]	; (8015d98 <__assert_func+0x38>)
 8015d86:	461c      	mov	r4, r3
 8015d88:	e7f3      	b.n	8015d72 <__assert_func+0x12>
 8015d8a:	bf00      	nop
 8015d8c:	20000190 	.word	0x20000190
 8015d90:	0802066d 	.word	0x0802066d
 8015d94:	0802067a 	.word	0x0802067a
 8015d98:	080206a8 	.word	0x080206a8

08015d9c <_close_r>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4d06      	ldr	r5, [pc, #24]	; (8015db8 <_close_r+0x1c>)
 8015da0:	2300      	movs	r3, #0
 8015da2:	4604      	mov	r4, r0
 8015da4:	4608      	mov	r0, r1
 8015da6:	602b      	str	r3, [r5, #0]
 8015da8:	f7f1 ffbd 	bl	8007d26 <_close>
 8015dac:	1c43      	adds	r3, r0, #1
 8015dae:	d102      	bne.n	8015db6 <_close_r+0x1a>
 8015db0:	682b      	ldr	r3, [r5, #0]
 8015db2:	b103      	cbz	r3, 8015db6 <_close_r+0x1a>
 8015db4:	6023      	str	r3, [r4, #0]
 8015db6:	bd38      	pop	{r3, r4, r5, pc}
 8015db8:	20002590 	.word	0x20002590

08015dbc <fiprintf>:
 8015dbc:	b40e      	push	{r1, r2, r3}
 8015dbe:	b503      	push	{r0, r1, lr}
 8015dc0:	4601      	mov	r1, r0
 8015dc2:	ab03      	add	r3, sp, #12
 8015dc4:	4805      	ldr	r0, [pc, #20]	; (8015ddc <fiprintf+0x20>)
 8015dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	f7ff fe41 	bl	8015a54 <_vfiprintf_r>
 8015dd2:	b002      	add	sp, #8
 8015dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015dd8:	b003      	add	sp, #12
 8015dda:	4770      	bx	lr
 8015ddc:	20000190 	.word	0x20000190

08015de0 <_fstat_r>:
 8015de0:	b538      	push	{r3, r4, r5, lr}
 8015de2:	4d07      	ldr	r5, [pc, #28]	; (8015e00 <_fstat_r+0x20>)
 8015de4:	2300      	movs	r3, #0
 8015de6:	4604      	mov	r4, r0
 8015de8:	4608      	mov	r0, r1
 8015dea:	4611      	mov	r1, r2
 8015dec:	602b      	str	r3, [r5, #0]
 8015dee:	f7f1 ffa6 	bl	8007d3e <_fstat>
 8015df2:	1c43      	adds	r3, r0, #1
 8015df4:	d102      	bne.n	8015dfc <_fstat_r+0x1c>
 8015df6:	682b      	ldr	r3, [r5, #0]
 8015df8:	b103      	cbz	r3, 8015dfc <_fstat_r+0x1c>
 8015dfa:	6023      	str	r3, [r4, #0]
 8015dfc:	bd38      	pop	{r3, r4, r5, pc}
 8015dfe:	bf00      	nop
 8015e00:	20002590 	.word	0x20002590

08015e04 <_isatty_r>:
 8015e04:	b538      	push	{r3, r4, r5, lr}
 8015e06:	4d06      	ldr	r5, [pc, #24]	; (8015e20 <_isatty_r+0x1c>)
 8015e08:	2300      	movs	r3, #0
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	4608      	mov	r0, r1
 8015e0e:	602b      	str	r3, [r5, #0]
 8015e10:	f7f1 ffa5 	bl	8007d5e <_isatty>
 8015e14:	1c43      	adds	r3, r0, #1
 8015e16:	d102      	bne.n	8015e1e <_isatty_r+0x1a>
 8015e18:	682b      	ldr	r3, [r5, #0]
 8015e1a:	b103      	cbz	r3, 8015e1e <_isatty_r+0x1a>
 8015e1c:	6023      	str	r3, [r4, #0]
 8015e1e:	bd38      	pop	{r3, r4, r5, pc}
 8015e20:	20002590 	.word	0x20002590

08015e24 <_lseek_r>:
 8015e24:	b538      	push	{r3, r4, r5, lr}
 8015e26:	4d07      	ldr	r5, [pc, #28]	; (8015e44 <_lseek_r+0x20>)
 8015e28:	4604      	mov	r4, r0
 8015e2a:	4608      	mov	r0, r1
 8015e2c:	4611      	mov	r1, r2
 8015e2e:	2200      	movs	r2, #0
 8015e30:	602a      	str	r2, [r5, #0]
 8015e32:	461a      	mov	r2, r3
 8015e34:	f7f1 ff9e 	bl	8007d74 <_lseek>
 8015e38:	1c43      	adds	r3, r0, #1
 8015e3a:	d102      	bne.n	8015e42 <_lseek_r+0x1e>
 8015e3c:	682b      	ldr	r3, [r5, #0]
 8015e3e:	b103      	cbz	r3, 8015e42 <_lseek_r+0x1e>
 8015e40:	6023      	str	r3, [r4, #0]
 8015e42:	bd38      	pop	{r3, r4, r5, pc}
 8015e44:	20002590 	.word	0x20002590

08015e48 <__ascii_mbtowc>:
 8015e48:	b082      	sub	sp, #8
 8015e4a:	b901      	cbnz	r1, 8015e4e <__ascii_mbtowc+0x6>
 8015e4c:	a901      	add	r1, sp, #4
 8015e4e:	b142      	cbz	r2, 8015e62 <__ascii_mbtowc+0x1a>
 8015e50:	b14b      	cbz	r3, 8015e66 <__ascii_mbtowc+0x1e>
 8015e52:	7813      	ldrb	r3, [r2, #0]
 8015e54:	600b      	str	r3, [r1, #0]
 8015e56:	7812      	ldrb	r2, [r2, #0]
 8015e58:	1e10      	subs	r0, r2, #0
 8015e5a:	bf18      	it	ne
 8015e5c:	2001      	movne	r0, #1
 8015e5e:	b002      	add	sp, #8
 8015e60:	4770      	bx	lr
 8015e62:	4610      	mov	r0, r2
 8015e64:	e7fb      	b.n	8015e5e <__ascii_mbtowc+0x16>
 8015e66:	f06f 0001 	mvn.w	r0, #1
 8015e6a:	e7f8      	b.n	8015e5e <__ascii_mbtowc+0x16>

08015e6c <_realloc_r>:
 8015e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6e:	4607      	mov	r7, r0
 8015e70:	4614      	mov	r4, r2
 8015e72:	460e      	mov	r6, r1
 8015e74:	b921      	cbnz	r1, 8015e80 <_realloc_r+0x14>
 8015e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015e7a:	4611      	mov	r1, r2
 8015e7c:	f7fd b990 	b.w	80131a0 <_malloc_r>
 8015e80:	b922      	cbnz	r2, 8015e8c <_realloc_r+0x20>
 8015e82:	f7fd f93d 	bl	8013100 <_free_r>
 8015e86:	4625      	mov	r5, r4
 8015e88:	4628      	mov	r0, r5
 8015e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e8c:	f000 f833 	bl	8015ef6 <_malloc_usable_size_r>
 8015e90:	42a0      	cmp	r0, r4
 8015e92:	d20f      	bcs.n	8015eb4 <_realloc_r+0x48>
 8015e94:	4621      	mov	r1, r4
 8015e96:	4638      	mov	r0, r7
 8015e98:	f7fd f982 	bl	80131a0 <_malloc_r>
 8015e9c:	4605      	mov	r5, r0
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d0f2      	beq.n	8015e88 <_realloc_r+0x1c>
 8015ea2:	4631      	mov	r1, r6
 8015ea4:	4622      	mov	r2, r4
 8015ea6:	f7fd f8fb 	bl	80130a0 <memcpy>
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4638      	mov	r0, r7
 8015eae:	f7fd f927 	bl	8013100 <_free_r>
 8015eb2:	e7e9      	b.n	8015e88 <_realloc_r+0x1c>
 8015eb4:	4635      	mov	r5, r6
 8015eb6:	e7e7      	b.n	8015e88 <_realloc_r+0x1c>

08015eb8 <_read_r>:
 8015eb8:	b538      	push	{r3, r4, r5, lr}
 8015eba:	4d07      	ldr	r5, [pc, #28]	; (8015ed8 <_read_r+0x20>)
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	4608      	mov	r0, r1
 8015ec0:	4611      	mov	r1, r2
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	602a      	str	r2, [r5, #0]
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	f7f1 ff10 	bl	8007cec <_read>
 8015ecc:	1c43      	adds	r3, r0, #1
 8015ece:	d102      	bne.n	8015ed6 <_read_r+0x1e>
 8015ed0:	682b      	ldr	r3, [r5, #0]
 8015ed2:	b103      	cbz	r3, 8015ed6 <_read_r+0x1e>
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	bd38      	pop	{r3, r4, r5, pc}
 8015ed8:	20002590 	.word	0x20002590

08015edc <__ascii_wctomb>:
 8015edc:	b149      	cbz	r1, 8015ef2 <__ascii_wctomb+0x16>
 8015ede:	2aff      	cmp	r2, #255	; 0xff
 8015ee0:	bf85      	ittet	hi
 8015ee2:	238a      	movhi	r3, #138	; 0x8a
 8015ee4:	6003      	strhi	r3, [r0, #0]
 8015ee6:	700a      	strbls	r2, [r1, #0]
 8015ee8:	f04f 30ff 	movhi.w	r0, #4294967295
 8015eec:	bf98      	it	ls
 8015eee:	2001      	movls	r0, #1
 8015ef0:	4770      	bx	lr
 8015ef2:	4608      	mov	r0, r1
 8015ef4:	4770      	bx	lr

08015ef6 <_malloc_usable_size_r>:
 8015ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015efa:	1f18      	subs	r0, r3, #4
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	bfbc      	itt	lt
 8015f00:	580b      	ldrlt	r3, [r1, r0]
 8015f02:	18c0      	addlt	r0, r0, r3
 8015f04:	4770      	bx	lr
	...

08015f08 <_init>:
 8015f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f0a:	bf00      	nop
 8015f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f0e:	bc08      	pop	{r3}
 8015f10:	469e      	mov	lr, r3
 8015f12:	4770      	bx	lr

08015f14 <_fini>:
 8015f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f16:	bf00      	nop
 8015f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f1a:	bc08      	pop	{r3}
 8015f1c:	469e      	mov	lr, r3
 8015f1e:	4770      	bx	lr
