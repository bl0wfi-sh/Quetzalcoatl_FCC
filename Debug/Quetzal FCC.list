
Quetzal FCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bb2c  080167c0  080167c0  000267c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080222ec  080222ec  00040360  2**0
                  CONTENTS
  4 .ARM          00000008  080222ec  080222ec  000322ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080222f4  080222f4  00040360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000030  080222f4  080222f4  000322f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000002c  08022324  08022324  00032324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08022350  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002264  20000360  080226b0  00040360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025c4  080226b0  000425c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009afe9  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bcb2  00000000  00000000  000db379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f10  00000000  00000000  000e7030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002cb0  00000000  00000000  000e9f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f07  00000000  00000000  000ecbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038c0b  00000000  00000000  0011faf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119ec2  00000000  00000000  00158702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002725c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f498  00000000  00000000  00272618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000360 	.word	0x20000360
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080167a8 	.word	0x080167a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000364 	.word	0x20000364
 800020c:	080167a8 	.word	0x080167a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_ZNSt7__cxx119to_stringEi+0x24>)
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <_ZNSt7__cxx119to_stringEi+0x28>)
 8000ef6:	f001 f96b 	bl	80021d0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	080167c0 	.word	0x080167c0
 8000f08:	080145e1 	.word	0x080145e1

08000f0c <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	ed87 0a00 	vstr	s0, [r7]
    const int __n =
 8000f18:	233a      	movs	r3, #58	; 0x3a
 8000f1a:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8000f1c:	6838      	ldr	r0, [r7, #0]
 8000f1e:	f7ff fb33 	bl	8000588 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	e9cd 2300 	strd	r2, r3, [sp]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <_ZNSt7__cxx119to_stringEf+0x34>)
 8000f2e:	223a      	movs	r2, #58	; 0x3a
 8000f30:	4904      	ldr	r1, [pc, #16]	; (8000f44 <_ZNSt7__cxx119to_stringEf+0x38>)
 8000f32:	f001 f94d 	bl	80021d0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080167c4 	.word	0x080167c4
 8000f44:	080145e1 	.word	0x080145e1

08000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
}

// Print string with new line.
static void println(std::string s)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f012 fad7 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f56:	4604      	mov	r4, r0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f012 f991 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	4621      	mov	r1, r4
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f6a:	f00d f822 	bl	800dfb2 <HAL_UART_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8000f72:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f76:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8000f78:	f107 010c 	add.w	r1, r7, #12
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	2202      	movs	r2, #2
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8000f84:	f00d f815 	bl	800dfb2 <HAL_UART_Transmit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	20000988 	.word	0x20000988

08000f98 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fa6:	f012 fb5b 	bl	8013660 <expf>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN3LPFC1Ev>:
#include <math.h>

class LPF
{
public:
	LPF()
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
		: cutoff(0), alpha(0), last_out(0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
	{

	}
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_ZN3LPF6filterEf>:
		this->alpha = exp(-cut*dt);
	}

	~LPF();

	float filter(float meas)
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	ed87 0a00 	vstr	s0, [r7]
	{
		last_out = alpha*last_out + (1 - alpha)*meas;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	edd3 7a01 	vldr	s15, [r3, #4]
 8001008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800100c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001010:	edd7 7a00 	vldr	s15, [r7]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a02 	vstr	s15, [r3, #8]
		return last_out;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	ee07 3a90 	vmov	s15, r3
	}
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN3LPF9setCutOffEff>:

	// Setters if needed.
	void setCutOff(float cut, float dt)			// Setting a new cutoff frequency will reset the filter to 0.
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	ed87 0a02 	vstr	s0, [r7, #8]
 8001044:	edc7 0a01 	vstr	s1, [r7, #4]
	{
		cutoff = cut;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	601a      	str	r2, [r3, #0]
		alpha = exp(-cut*dt);
 800104e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001052:	eeb1 7a67 	vneg.f32	s14, s15
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	f7ff ff99 	bl	8000f98 <_ZSt3expf>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edc3 7a01 	vstr	s15, [r3, #4]
		last_out = 0;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN3LPF9getCutoffEv>:

	// Getter if needed.
	float getCutoff(){ return cutoff; }
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *  Created on: Sep 16, 2022
 *      Author: heapr0ll
 */
#include "BMI088Driver.hpp"

BMI088::BMI088(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6178      	str	r0, [r7, #20]
 80010a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80010ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80010b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80010b4:	460b      	mov	r3, r1
 80010b6:	603a      	str	r2, [r7, #0]
 80010b8:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 80010ba:	697c      	ldr	r4, [r7, #20]
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f012 fa44 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80010c8:	f107 0218 	add.w	r2, r7, #24
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4619      	mov	r1, r3
 80010d0:	ed97 1a02 	vldr	s2, [r7, #8]
 80010d4:	edd7 0a03 	vldr	s1, [r7, #12]
 80010d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80010dc:	4620      	mov	r0, r4
 80010de:	f005 f877 	bl	80061d0 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f012 f8bc 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x118>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	334c      	adds	r3, #76	; 0x4c
 80010f6:	2405      	movs	r4, #5
 80010f8:	461d      	mov	r5, r3
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	db05      	blt.n	800110a <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
 80010fe:	4628      	mov	r0, r5
 8001100:	f7ff ff5a 	bl	8000fb8 <_ZN3LPFC1Ev>
 8001104:	350c      	adds	r5, #12
 8001106:	3c01      	subs	r4, #1
 8001108:	e7f7      	b.n	80010fa <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c>)
 800110e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
{
	devAddrAcc = BMI088_ACC_ADDRESS;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2218      	movs	r2, #24
 800111e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	devAddrGyro = BMI088_GYRO_ADDRESS;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2268      	movs	r2, #104	; 0x68
 8001126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	gcal_x = 0;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
	gcal_y = 0;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
	gcal_z = 0;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44

	// Initialize low pass filters.
	// Default = 35Hz for gyros, 45Hz accels.
	lpfs[0].setCutOff(35.0f, peri_s);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	334c      	adds	r3, #76	; 0x4c
 8001146:	edd7 0a03 	vldr	s1, [r7, #12]
 800114a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80011c0 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff72 	bl	8001038 <_ZN3LPF9setCutOffEff>
	lpfs[1].setCutOff(35.0f, peri_s);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3358      	adds	r3, #88	; 0x58
 8001158:	edd7 0a03 	vldr	s1, [r7, #12]
 800115c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80011c0 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff69 	bl	8001038 <_ZN3LPF9setCutOffEff>
	lpfs[2].setCutOff(35.0f, peri_s);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3364      	adds	r3, #100	; 0x64
 800116a:	edd7 0a03 	vldr	s1, [r7, #12]
 800116e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80011c0 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff60 	bl	8001038 <_ZN3LPF9setCutOffEff>

	lpfs[3].setCutOff(45.0f, peri_s);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3370      	adds	r3, #112	; 0x70
 800117c:	edd7 0a03 	vldr	s1, [r7, #12]
 8001180:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80011c4 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff57 	bl	8001038 <_ZN3LPF9setCutOffEff>
	lpfs[4].setCutOff(45.0f, peri_s);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	337c      	adds	r3, #124	; 0x7c
 800118e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001192:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80011c4 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff4e 	bl	8001038 <_ZN3LPF9setCutOffEff>
	lpfs[5].setCutOff(45.0f, peri_s);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3388      	adds	r3, #136	; 0x88
 80011a0:	edd7 0a03 	vldr	s1, [r7, #12]
 80011a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80011c4 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x124>
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff45 	bl	8001038 <_ZN3LPF9setCutOffEff>
}
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4618      	mov	r0, r3
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bdb0      	pop	{r4, r5, r7, pc}
 80011b8:	08021d10 	.word	0x08021d10
 80011bc:	20000a74 	.word	0x20000a74
 80011c0:	420c0000 	.word	0x420c0000
 80011c4:	42340000 	.word	0x42340000

080011c8 <_ZN6BMI08812consoleFuncaEv>:

bool BMI088::consoleFunca()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ac      	sub	sp, #176	; 0xb0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4618      	mov	r0, r3
 80011d6:	f011 fdce 	bl	8012d76 <_ZNSaIcEC1Ev>
 80011da:	f107 0220 	add.w	r2, r7, #32
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4952      	ldr	r1, [pc, #328]	; (800132c <_ZN6BMI08812consoleFuncaEv+0x164>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f012 f9e7 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feaa 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f012 f833 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f011 fdb8 	bl	8012d78 <_ZNSaIcED1Ev>
	println("Read BMI088 accel, gyro, and temp data @ 800Hz.");
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	4618      	mov	r0, r3
 800120e:	f011 fdb2 	bl	8012d76 <_ZNSaIcEC1Ev>
 8001212:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4945      	ldr	r1, [pc, #276]	; (8001330 <_ZN6BMI08812consoleFuncaEv+0x168>)
 800121c:	4618      	mov	r0, r3
 800121e:	f012 f9cb 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe8e 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4618      	mov	r0, r3
 8001232:	f012 f817 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800123a:	4618      	mov	r0, r3
 800123c:	f011 fd9c 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\tArgs");
 8001240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001244:	4618      	mov	r0, r3
 8001246:	f011 fd96 	bl	8012d76 <_ZNSaIcEC1Ev>
 800124a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800124e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001252:	4938      	ldr	r1, [pc, #224]	; (8001334 <_ZN6BMI08812consoleFuncaEv+0x16c>)
 8001254:	4618      	mov	r0, r3
 8001256:	f012 f9af 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe72 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001268:	4618      	mov	r0, r3
 800126a:	f011 fffb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800126e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001272:	4618      	mov	r0, r3
 8001274:	f011 fd80 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* status - Show most recent accel, gyro, and temp data.");
 8001278:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800127c:	4618      	mov	r0, r3
 800127e:	f011 fd7a 	bl	8012d76 <_ZNSaIcEC1Ev>
 8001282:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001286:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800128a:	492b      	ldr	r1, [pc, #172]	; (8001338 <_ZN6BMI08812consoleFuncaEv+0x170>)
 800128c:	4618      	mov	r0, r3
 800128e:	f012 f993 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001292:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe56 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800129c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012a0:	4618      	mov	r0, r3
 80012a2:	f011 ffdf 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012aa:	4618      	mov	r0, r3
 80012ac:	f011 fd64 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* filter_on - Turn data filter on.");
 80012b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012b4:	4618      	mov	r0, r3
 80012b6:	f011 fd5e 	bl	8012d76 <_ZNSaIcEC1Ev>
 80012ba:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80012be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c2:	491e      	ldr	r1, [pc, #120]	; (800133c <_ZN6BMI08812consoleFuncaEv+0x174>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f012 f977 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe3a 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80012d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012d8:	4618      	mov	r0, r3
 80012da:	f011 ffc3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012e2:	4618      	mov	r0, r3
 80012e4:	f011 fd48 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* filter_off - Turn data filter off.");
 80012e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ec:	4618      	mov	r0, r3
 80012ee:	f011 fd42 	bl	8012d76 <_ZNSaIcEC1Ev>
 80012f2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80012f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012fa:	4911      	ldr	r1, [pc, #68]	; (8001340 <_ZN6BMI08812consoleFuncaEv+0x178>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f012 f95b 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001302:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe1e 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800130c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001310:	4618      	mov	r0, r3
 8001312:	f011 ffa7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001316:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800131a:	4618      	mov	r0, r3
 800131c:	f011 fd2c 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	37b0      	adds	r7, #176	; 0xb0
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	080167cc 	.word	0x080167cc
 8001330:	080167dc 	.word	0x080167dc
 8001334:	0801680c 	.word	0x0801680c
 8001338:	08016814 	.word	0x08016814
 800133c:	08016850 	.word	0x08016850
 8001340:	08016874 	.word	0x08016874

08001344 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BMI088::consoleFuncb(std::string& s)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	f5ad 7d48 	sub.w	sp, sp, #800	; 0x320
 800134a:	af00      	add	r7, sp, #0
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	6018      	str	r0, [r3, #0]
 8001350:	463b      	mov	r3, r7
 8001352:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 8001354:	463b      	mov	r3, r7
 8001356:	49f0      	ldr	r1, [pc, #960]	; (8001718 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d4>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f000 ff71 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8239 	beq.w	80017d8 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x494>
	{

		if (!imu_msg_pntr->locked)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	7e9b      	ldrb	r3, [r3, #26]
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8211 	beq.w	800179e <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x45a>
		{
			println("BMI088 Filter Status - " + std::to_string(filter_on));
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001384:	461a      	mov	r2, r3
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fda7 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800139a:	49e0      	ldr	r1, [pc, #896]	; (800171c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d8>)
 800139c:	4618      	mov	r0, r3
 800139e:	f000 ff62 	bl	8002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fdce 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4618      	mov	r0, r3
 80013b2:	f011 ff57 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f011 ff52 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			println("BMI088 Filter (Hz) [Gyro, Accel]");
 80013c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c4:	4618      	mov	r0, r3
 80013c6:	f011 fcd6 	bl	8012d76 <_ZNSaIcEC1Ev>
 80013ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80013ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d2:	49d3      	ldr	r1, [pc, #844]	; (8001720 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3dc>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f012 f8ef 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fdb2 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80013e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e8:	4618      	mov	r0, r3
 80013ea:	f011 ff3b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80013ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 fcc0 	bl	8012d78 <_ZNSaIcED1Ev>
			println("BMI088 Filters - " +
					std::to_string(lpfs[0].getCutoff()) + ", " +
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	334c      	adds	r3, #76	; 0x4c
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe3e 	bl	8001080 <_ZN3LPF9getCutoffEv>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd7b 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			println("BMI088 Filters - " +
 8001416:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800141a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800141e:	49c1      	ldr	r1, [pc, #772]	; (8001724 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e0>)
 8001420:	4618      	mov	r0, r3
 8001422:	f000 ff20 	bl	8002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
					std::to_string(lpfs[0].getCutoff()) + ", " +
 8001426:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800142a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800142e:	4abe      	ldr	r2, [pc, #760]	; (8001728 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e4>)
 8001430:	4618      	mov	r0, r3
 8001432:	f000 ff30 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(lpfs[3].getCutoff())
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3370      	adds	r3, #112	; 0x70
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe1f 	bl	8001080 <_ZN3LPF9getCutoffEv>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd5c 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(lpfs[0].getCutoff()) + ", " +
 8001454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001458:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800145c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001460:	4618      	mov	r0, r3
 8001462:	f000 ff2f 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
			println("BMI088 Filters - " +
 8001466:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fd6c 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
					std::to_string(lpfs[3].getCutoff())
 8001470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001474:	4618      	mov	r0, r3
 8001476:	f011 fef5 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800147a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800147e:	4618      	mov	r0, r3
 8001480:	f011 fef0 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(lpfs[0].getCutoff()) + ", " +
 8001484:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001488:	4618      	mov	r0, r3
 800148a:	f011 feeb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800148e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001492:	4618      	mov	r0, r3
 8001494:	f011 fee6 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001498:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800149c:	4618      	mov	r0, r3
 800149e:	f011 fee1 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					);

			println("BMI088 Units - [rads, m/s^2, C]");
 80014a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014a6:	4618      	mov	r0, r3
 80014a8:	f011 fc65 	bl	8012d76 <_ZNSaIcEC1Ev>
 80014ac:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80014b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014b4:	499d      	ldr	r1, [pc, #628]	; (800172c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e8>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f012 f87e 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd41 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80014c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f011 feca 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80014d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014d4:	4618      	mov	r0, r3
 80014d6:	f011 fc4f 	bl	8012d78 <_ZNSaIcED1Ev>
			println("BMI088 Frmt  - [gx, gy, gz, ax, ay, az, temp]");
 80014da:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80014de:	4618      	mov	r0, r3
 80014e0:	f011 fc49 	bl	8012d76 <_ZNSaIcEC1Ev>
 80014e4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80014e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014ec:	4990      	ldr	r1, [pc, #576]	; (8001730 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ec>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f012 f862 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80014f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd25 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80014fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001502:	4618      	mov	r0, r3
 8001504:	f011 feae 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001508:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800150c:	4618      	mov	r0, r3
 800150e:	f011 fc33 	bl	8012d78 <_ZNSaIcED1Ev>
			println("BMI088 Data  - " +
					std::to_string(imu_msg_pntr->gx) + " " +
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fcf0 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			println("BMI088 Data  - " +
 800152c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001530:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001534:	497f      	ldr	r1, [pc, #508]	; (8001734 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f0>)
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe95 	bl	8002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
					std::to_string(imu_msg_pntr->gx) + " " +
 800153c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001540:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8001544:	4a7c      	ldr	r2, [pc, #496]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fea5 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->gy) + " " +
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001554:	edd3 7a01 	vldr	s15, [r3, #4]
 8001558:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fcd3 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gx) + " " +
 8001566:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800156a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800156e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fea6 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->gy) + " " +
 8001578:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800157c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001580:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fe87 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->gz) + " " +
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	edd3 7a02 	vldr	s15, [r3, #8]
 8001594:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fcb5 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gy) + " " +
 80015a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80015a6:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80015aa:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fe88 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->gz) + " " +
 80015b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80015b8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80015bc:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fe69 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->ax) + " " +
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80015d0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc97 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->gz) + " " +
 80015de:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80015e2:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80015e6:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fe6a 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->ax) + " " +
 80015f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80015f4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fe4b 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->ay) + " " +
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001608:	edd3 7a04 	vldr	s15, [r3, #16]
 800160c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc79 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->ax) + " " +
 800161a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800161e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001622:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fe4c 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->ay) + " " +
 800162c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001630:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fe2d 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->az) + " " +
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	edd3 7a05 	vldr	s15, [r3, #20]
 8001648:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc5b 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(imu_msg_pntr->ay) + " " +
 8001656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800165a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800165e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fe2e 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(imu_msg_pntr->az) + " " +
 8001668:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800166c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001670:	4a31      	ldr	r2, [pc, #196]	; (8001738 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fe0f 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(imu_msg_pntr->temp)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001680:	8b1b      	ldrh	r3, [r3, #24]
 8001682:	461a      	mov	r2, r3
 8001684:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fc28 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
					std::to_string(imu_msg_pntr->az) + " " +
 8001690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001694:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001698:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fe11 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
			println("BMI088 Data  - " +
 80016a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc4e 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
					std::to_string(imu_msg_pntr->temp)
 80016ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80016b0:	4618      	mov	r0, r3
 80016b2:	f011 fdd7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016b6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f011 fdd2 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->az) + " " +
 80016c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016c4:	4618      	mov	r0, r3
 80016c6:	f011 fdcd 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016ce:	4618      	mov	r0, r3
 80016d0:	f011 fdc8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016d4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80016d8:	4618      	mov	r0, r3
 80016da:	f011 fdc3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->ay) + " " +
 80016de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80016e2:	4618      	mov	r0, r3
 80016e4:	f011 fdbe 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80016ec:	4618      	mov	r0, r3
 80016ee:	f011 fdb9 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016f2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 fdb4 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->ax) + " " +
 80016fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001700:	4618      	mov	r0, r3
 8001702:	f011 fdaf 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001706:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800170a:	4618      	mov	r0, r3
 800170c:	f011 fdaa 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001710:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001714:	e012      	b.n	800173c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f8>
 8001716:	bf00      	nop
 8001718:	0801689c 	.word	0x0801689c
 800171c:	080168a4 	.word	0x080168a4
 8001720:	080168bc 	.word	0x080168bc
 8001724:	080168e0 	.word	0x080168e0
 8001728:	080168f4 	.word	0x080168f4
 800172c:	080168f8 	.word	0x080168f8
 8001730:	08016918 	.word	0x08016918
 8001734:	08016948 	.word	0x08016948
 8001738:	08016958 	.word	0x08016958
 800173c:	4618      	mov	r0, r3
 800173e:	f011 fd91 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gz) + " " +
 8001742:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001746:	4618      	mov	r0, r3
 8001748:	f011 fd8c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800174c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001750:	4618      	mov	r0, r3
 8001752:	f011 fd87 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001756:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800175a:	4618      	mov	r0, r3
 800175c:	f011 fd82 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gy) + " " +
 8001760:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001764:	4618      	mov	r0, r3
 8001766:	f011 fd7d 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800176a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800176e:	4618      	mov	r0, r3
 8001770:	f011 fd78 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001774:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001778:	4618      	mov	r0, r3
 800177a:	f011 fd73 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(imu_msg_pntr->gx) + " " +
 800177e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001782:	4618      	mov	r0, r3
 8001784:	f011 fd6e 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001788:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800178c:	4618      	mov	r0, r3
 800178e:	f011 fd69 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001792:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001796:	4618      	mov	r0, r3
 8001798:	f011 fd64 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800179c:	e05e      	b.n	800185c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>
					);
		}else{
			println("Shared memory locked!");
 800179e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80017a2:	4618      	mov	r0, r3
 80017a4:	f011 fae7 	bl	8012d76 <_ZNSaIcEC1Ev>
 80017a8:	f507 7240 	add.w	r2, r7, #768	; 0x300
 80017ac:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80017b0:	492d      	ldr	r1, [pc, #180]	; (8001868 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x524>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f011 ff00 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017b8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fbc3 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80017c2:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80017c6:	4618      	mov	r0, r3
 80017c8:	f011 fd4c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017cc:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80017d0:	4618      	mov	r0, r3
 80017d2:	f011 fad1 	bl	8012d78 <_ZNSaIcED1Ev>
 80017d6:	e041      	b.n	800185c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>
		}

	}else if (s == "filter_on"){
 80017d8:	463b      	mov	r3, r7
 80017da:	4924      	ldr	r1, [pc, #144]	; (800186c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x528>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	f000 fd2f 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4b0>

		filter_on = true;
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80017f2:	e033      	b.n	800185c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>

	}else if (s == "filter_off"){
 80017f4:	463b      	mov	r3, r7
 80017f6:	491e      	ldr	r1, [pc, #120]	; (8001870 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52c>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f000 fd21 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4cc>

		filter_on = false;
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800180e:	e025      	b.n	800185c <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>

	}else{
		println("Invalid parameter!");
 8001810:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001814:	4618      	mov	r0, r3
 8001816:	f011 faae 	bl	8012d76 <_ZNSaIcEC1Ev>
 800181a:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 800181e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8001822:	4914      	ldr	r1, [pc, #80]	; (8001874 <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x530>)
 8001824:	4618      	mov	r0, r3
 8001826:	f011 fec7 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800182a:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb8a 	bl	8000f48 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001834:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8001838:	4618      	mov	r0, r3
 800183a:	f011 fd13 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800183e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001842:	4618      	mov	r0, r3
 8001844:	f011 fa98 	bl	8012d78 <_ZNSaIcED1Ev>
		consoleFunca();
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	6810      	ldr	r0, [r2, #0]
 8001856:	4798      	blx	r3
		return false;
 8001858:	2300      	movs	r3, #0
 800185a:	e000      	b.n	800185e <_ZN6BMI08812consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x51a>
	}

	return true;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	f507 7748 	add.w	r7, r7, #800	; 0x320
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	0801695c 	.word	0x0801695c
 800186c:	08016974 	.word	0x08016974
 8001870:	08016980 	.word	0x08016980
 8001874:	0801698c 	.word	0x0801698c

08001878 <_ZN6BMI08812taskFunctionEv>:

bool BMI088::taskFunction()
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	float gy[3] = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
	float ax[3] = {0};
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]

	getGyroscope(gy, gy + 1, gy + 2);
 8001898:	f107 0214 	add.w	r2, r7, #20
 800189c:	3204      	adds	r2, #4
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	3308      	adds	r3, #8
 80018a4:	f107 0114 	add.w	r1, r7, #20
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fb0d 	bl	8001ec8 <_ZN6BMI08812getGyroscopeEPfS0_S0_>
	getAcceleration(ax, ax + 1, ax + 2);
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	3204      	adds	r2, #4
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	3308      	adds	r3, #8
 80018ba:	f107 0108 	add.w	r1, r7, #8
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fa84 	bl	8001dcc <_ZN6BMI08815getAccelerationEPfS0_S0_>

	imu_msg_pntr->locked = true;			// Lock the shared memory while writting to it.
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	2201      	movs	r2, #1
 80018cc:	769a      	strb	r2, [r3, #26]

	if (filter_on)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d066      	beq.n	80019a6 <_ZN6BMI08812taskFunctionEv+0x12e>
	{
		// Low pass filter gyro data.
		imu_msg_pntr->gx = lpfs[0].filter(gy[0]);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80018de:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	4610      	mov	r0, r2
 80018ee:	f7ff fb7a 	bl	8000fe6 <_ZN3LPF6filterEf>
 80018f2:	eef0 7a40 	vmov.f32	s15, s0
 80018f6:	edc4 7a00 	vstr	s15, [r4]
		imu_msg_pntr->gy = lpfs[1].filter(gy[1]);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001900:	edd7 7a06 	vldr	s15, [r7, #24]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	4610      	mov	r0, r2
 8001910:	f7ff fb69 	bl	8000fe6 <_ZN3LPF6filterEf>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
 8001918:	edc4 7a01 	vstr	s15, [r4, #4]
		imu_msg_pntr->gz = lpfs[2].filter(gy[2]);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001922:	edd7 7a07 	vldr	s15, [r7, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	4610      	mov	r0, r2
 8001932:	f7ff fb58 	bl	8000fe6 <_ZN3LPF6filterEf>
 8001936:	eef0 7a40 	vmov.f32	s15, s0
 800193a:	edc4 7a02 	vstr	s15, [r4, #8]

		// Low pass filter accel data.
		imu_msg_pntr->ax = lpfs[3].filter(ax[0]);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001944:	edd7 7a02 	vldr	s15, [r7, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	4610      	mov	r0, r2
 8001954:	f7ff fb47 	bl	8000fe6 <_ZN3LPF6filterEf>
 8001958:	eef0 7a40 	vmov.f32	s15, s0
 800195c:	edc4 7a03 	vstr	s15, [r4, #12]
		imu_msg_pntr->ay = lpfs[4].filter(ax[1]);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8001966:	edd7 7a03 	vldr	s15, [r7, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8001970:	eeb0 0a67 	vmov.f32	s0, s15
 8001974:	4610      	mov	r0, r2
 8001976:	f7ff fb36 	bl	8000fe6 <_ZN3LPF6filterEf>
 800197a:	eef0 7a40 	vmov.f32	s15, s0
 800197e:	edc4 7a04 	vstr	s15, [r4, #16]
		imu_msg_pntr->az = lpfs[5].filter(ax[2]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8001988:	edd7 7a04 	vldr	s15, [r7, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff fb25 	bl	8000fe6 <_ZN3LPF6filterEf>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	edc4 7a05 	vstr	s15, [r4, #20]
 80019a4:	e01d      	b.n	80019e2 <_ZN6BMI08812taskFunctionEv+0x16a>
	}else{
		imu_msg_pntr->gx = gy[0];
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
		imu_msg_pntr->gy = gy[1];
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	605a      	str	r2, [r3, #4]
		imu_msg_pntr->gz = gy[2];
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	609a      	str	r2, [r3, #8]

		// Low pass filter accel data.
		imu_msg_pntr->ax = ax[0];
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	60da      	str	r2, [r3, #12]
		imu_msg_pntr->ay = ax[1];
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	611a      	str	r2, [r3, #16]
		imu_msg_pntr->az = ax[2];
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	615a      	str	r2, [r3, #20]
	}

	imu_msg_pntr->temp = getTemperature();
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fb00 	bl	8001fe8 <_ZN6BMI08814getTemperatureEv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	b292      	uxth	r2, r2
 80019f4:	831a      	strh	r2, [r3, #24]
	imu_msg_pntr->locked = false;			// Un-lock the shared memory while writting to it.
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	2200      	movs	r2, #0
 80019fe:	769a      	strb	r2, [r3, #26]
	return true;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}

08001a0a <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>:

bool BMI088::initialize(FMPI2C_HandleTypeDef* i) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]

	i2c = i;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	649a      	str	r2, [r3, #72]	; 0x48

	// Check if is connected.
	if (!isConnection()) return false;
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f88f 	bl	8001b3e <_ZN6BMI08812isConnectionEv>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x26>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e021      	b.n	8001a74 <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef+0x6a>

    setAccScaleRange(RANGE_3G);
 8001a30:	2100      	movs	r1, #0
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f906 	bl	8001c44 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>
    setAccOutputDataRate(ODR_1600);
 8001a38:	210c      	movs	r1, #12
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f936 	bl	8001cac <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>
    setAccLowPassFilterBandwidth(BWP_4_FOLD);   // Refer to data sheet to see how Low Pass Filter is set based on Output Data Rate and this register value.
 8001a40:	2108      	movs	r1, #8
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f953 	bl	8001cee <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>
    setAccPoweMode(ACC_ACTIVE);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8aa 	bl	8001ba4 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>

    setGyroScaleRange(RANGE_500);
 8001a50:	2102      	movs	r1, #2
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f96e 	bl	8001d34 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>
    setGyroOutputDataRate(ODR_2000_BW_230);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f9a6 	bl	8001dac <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>
    setGyroPoweMode(GYRO_NORMAL);
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8c7 	bl	8001bf6 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>

    calibrateGyro(5000);
 8001a68:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f805 	bl	8001a7c <_ZN6BMI08813calibrateGyroEi>

    return true;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN6BMI08813calibrateGyroEi>:

void BMI088::calibrateGyro(int count){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    float x_tot = 0, y_tot = 0, z_tot = 0;
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++){
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	da24      	bge.n	8001aee <_ZN6BMI08813calibrateGyroEi+0x72>
      float gx, gy, gz;
      getGyroscope(&gx, &gy, &gz);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	f107 0210 	add.w	r2, r7, #16
 8001aac:	f107 0114 	add.w	r1, r7, #20
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa09 	bl	8001ec8 <_ZN6BMI08812getGyroscopeEPfS0_S0_>
      x_tot += gx;
 8001ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      y_tot += gy;
 8001ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aca:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad2:	edc7 7a08 	vstr	s15, [r7, #32]
      z_tot += gz;
 8001ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ada:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	edc7 7a07 	vstr	s15, [r7, #28]
    for(int i = 0; i < count; i++){
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e7d6      	b.n	8001a9c <_ZN6BMI08813calibrateGyroEi+0x20>
    }
    gcal_x = x_tot / count;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    gcal_y = y_tot / count;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    gcal_z = z_tot / count;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_ZN6BMI08812isConnectionEv>:

bool BMI088::isConnection(void) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
    return ((getAccID() == 0x1E) && (getGyroID() == 0x0F));
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f810 	bl	8001b6c <_ZN6BMI0888getAccIDEv>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b1e      	cmp	r3, #30
 8001b50:	d107      	bne.n	8001b62 <_ZN6BMI08812isConnectionEv+0x24>
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f818 	bl	8001b88 <_ZN6BMI0889getGyroIDEv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	d101      	bne.n	8001b62 <_ZN6BMI08812isConnectionEv+0x24>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <_ZN6BMI08812isConnectionEv+0x26>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN6BMI0888getAccIDEv>:

void BMI088::resetGyro(void) {
    write8(GYRO, BMI088_GYRO_SOFT_RESET, 0xB6);
}

uint8_t BMI088::getAccID(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    return read8(ACC, BMI088_ACC_CHIP_ID);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fa89 	bl	8002090 <_ZN6BMI0885read8E13device_type_th>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZN6BMI0889getGyroIDEv>:

uint8_t BMI088::getGyroID(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    return read8(GYRO, BMI088_GYRO_CHIP_ID);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2101      	movs	r1, #1
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fa7b 	bl	8002090 <_ZN6BMI0885read8E13device_type_th>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t>:

void BMI088::setAccPoweMode(acc_power_type_t mode) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
    if (mode == ACC_ACTIVE) {
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x2c>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x04);
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	227d      	movs	r2, #125	; 0x7d
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fa35 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x00);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	227c      	movs	r2, #124	; 0x7c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fa2f 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == ACC_SUSPEND) {
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
    }
}
 8001bce:	e00e      	b.n	8001bee <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
    } else if (mode == ACC_SUSPEND) {
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d10b      	bne.n	8001bee <_ZN6BMI08814setAccPoweModeE16acc_power_type_t+0x4a>
        write8(ACC, BMI088_ACC_PWR_CONF, 0x03);
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	227c      	movs	r2, #124	; 0x7c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fa25 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
        write8(ACC, BMI088_ACC_PWR_CTRl, 0x00);
 8001be2:	2300      	movs	r3, #0
 8001be4:	227d      	movs	r2, #125	; 0x7d
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa1f 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t>:

void BMI088::setGyroPoweMode(gyro_power_type_t mode) {
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
    if (mode == GYRO_NORMAL) {
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d106      	bne.n	8001c16 <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x20>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_NORMAL);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2211      	movs	r2, #17
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa0c 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
    } else if (mode == GYRO_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
    } else if (mode == GYRO_DEEP_SUSPEND) {
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
    }
}
 8001c14:	e012      	b.n	8001c3c <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_SUSPEND) {
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d106      	bne.n	8001c2a <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x34>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_SUSPEND);
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	2211      	movs	r2, #17
 8001c20:	2101      	movs	r1, #1
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fa02 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001c28:	e008      	b.n	8001c3c <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
    } else if (mode == GYRO_DEEP_SUSPEND) {
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d105      	bne.n	8001c3c <_ZN6BMI08815setGyroPoweModeE17gyro_power_type_t+0x46>
        write8(GYRO, BMI088_GYRO_LPM_1, (uint8_t)GYRO_DEEP_SUSPEND);
 8001c30:	2320      	movs	r3, #32
 8001c32:	2211      	movs	r2, #17
 8001c34:	2101      	movs	r1, #1
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f9f8 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t>:

void BMI088::setAccScaleRange(acc_scale_type_t range) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_3G) {
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x1a>
        accRange = 3;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x58>)
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5c:	e013      	b.n	8001c86 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_6G) {
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d103      	bne.n	8001c6c <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x28>
        accRange = 6;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x5c>)
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6a:	e00c      	b.n	8001c86 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_12G) {
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d103      	bne.n	8001c7a <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x36>
        accRange = 12;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x60>)
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
 8001c78:	e005      	b.n	8001c86 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
    } else if (range == RANGE_24G) {
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d102      	bne.n	8001c86 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x42>
        accRange = 24;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <_ZN6BMI08816setAccScaleRangeE16acc_scale_type_t+0x64>)
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    write8(ACC, BMI088_ACC_RANGE, (uint8_t)range);
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	2241      	movs	r2, #65	; 0x41
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f9cd 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40400000 	.word	0x40400000
 8001ca0:	40c00000 	.word	0x40c00000
 8001ca4:	41400000 	.word	0x41400000
 8001ca8:	41c00000 	.word	0x41c00000

08001cac <_ZN6BMI08820setAccOutputDataRateE14acc_odr_type_t>:

void BMI088::setAccOutputDataRate(acc_odr_type_t odr) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f9e5 	bl	8002090 <_ZN6BMI0885read8E13device_type_th>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
    data = data & 0xf0;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f023 030f 	bic.w	r3, r3, #15
 8001cd0:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)odr;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f9a3 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZN6BMI08828setAccLowPassFilterBandwidthE14acc_bwp_type_t>:

void BMI088::setAccLowPassFilterBandwidth(acc_bwp_type_t bwp) {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
    uint8_t data = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]

    data = read8(ACC, BMI088_ACC_CONF);
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f9c4 	bl	8002090 <_ZN6BMI0885read8E13device_type_th>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
    data = data & 0x0f;                   // Wipe only top 4 bits
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	73fb      	strb	r3, [r7, #15]
    data = data | (uint8_t)(bwp << 4);    // Low pass filter is bits [7:4]
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	73fb      	strb	r3, [r7, #15]

    write8(ACC, BMI088_ACC_CONF, data);
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	2100      	movs	r1, #0
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f980 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t>:


void BMI088::setGyroScaleRange(gyro_scale_type_t range) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
    if (range == RANGE_2000) {
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x1a>
        gyroRange = 2000;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x64>)
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d4c:	e01a      	b.n	8001d84 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_1000) {
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d103      	bne.n	8001d5c <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x28>
        gyroRange = 1000;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x68>)
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5a:	e013      	b.n	8001d84 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_500) {
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d103      	bne.n	8001d6a <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x36>
        gyroRange = 500;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x6c>)
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
 8001d68:	e00c      	b.n	8001d84 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_250) {
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d103      	bne.n	8001d78 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x44>
        gyroRange = 250;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x70>)
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34
 8001d76:	e005      	b.n	8001d84 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
    } else if (range == RANGE_125) {
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d102      	bne.n	8001d84 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x50>
        gyroRange = 125;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <_ZN6BMI08817setGyroScaleRangeE17gyro_scale_type_t+0x74>)
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
    }

    write8(GYRO, BMI088_GYRO_RANGE, (uint8_t)range);
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	220f      	movs	r2, #15
 8001d88:	2101      	movs	r1, #1
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f94e 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	44fa0000 	.word	0x44fa0000
 8001d9c:	447a0000 	.word	0x447a0000
 8001da0:	43fa0000 	.word	0x43fa0000
 8001da4:	437a0000 	.word	0x437a0000
 8001da8:	42fa0000 	.word	0x42fa0000

08001dac <_ZN6BMI08821setGyroOutputDataRateE15gyro_odr_type_t>:

void BMI088::setGyroOutputDataRate(gyro_odr_type_t odr) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
    write8(GYRO, BMI088_GYRO_BAND_WIDTH, (uint8_t)odr);
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	2210      	movs	r2, #16
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f934 	bl	800202c <_ZN6BMI0886write8E13device_type_thh>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN6BMI08815getAccelerationEPfS0_S0_>:

void BMI088::getAcceleration(float* x, float* y, float* z) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	2300      	movs	r3, #0
 8001de0:	833b      	strh	r3, [r7, #24]
    uint16_t ax = 0, ay = 0, az = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001de6:	2300      	movs	r3, #0
 8001de8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001dea:	2300      	movs	r3, #0
 8001dec:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]

    read(ACC, BMI088_ACC_X_LSB, buf, 6);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2206      	movs	r2, #6
 8001dfa:	9200      	str	r2, [sp, #0]
 8001dfc:	2212      	movs	r2, #18
 8001dfe:	2100      	movs	r1, #0
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f9b8 	bl	8002176 <_ZN6BMI0884readE13device_type_thPht>

    ax = buf[0] | (buf[1] << 8);
 8001e06:	7d3b      	ldrb	r3, [r7, #20]
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	7d7b      	ldrb	r3, [r7, #21]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	84fb      	strh	r3, [r7, #38]	; 0x26
    ay = buf[2] | (buf[3] << 8);
 8001e16:	7dbb      	ldrb	r3, [r7, #22]
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	84bb      	strh	r3, [r7, #36]	; 0x24
    az = buf[4] | (buf[5] << 8);
 8001e26:	7e3b      	ldrb	r3, [r7, #24]
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	7e7b      	ldrb	r3, [r7, #25]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)ax;
 8001e36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = accRange * value / 32768;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001e4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e54:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001ec4 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)ay;
 8001e62:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = accRange * value / 32768;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001e78:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001ec4 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)az;
 8001e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = accRange * value / 32768;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eac:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001ec4 <_ZN6BMI08815getAccelerationEPfS0_S0_+0xf8>
 8001eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	47000000 	.word	0x47000000

08001ec8 <_ZN6BMI08812getGyroscopeEPfS0_S0_>:
    value = accRange * value / 32768;

    return value;
}

void BMI088::getGyroscope(float* x, float* y, float* z) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	; 0x30
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
    uint8_t buf[6] = {0};
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	833b      	strh	r3, [r7, #24]
    uint16_t gx = 0, gy = 0, gz = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	847b      	strh	r3, [r7, #34]	; 0x22
    float value = 0;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]

    read(GYRO, BMI088_GYRO_RATE_X_LSB, buf, 6);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2206      	movs	r2, #6
 8001ef6:	9200      	str	r2, [sp, #0]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	2101      	movs	r1, #1
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f93a 	bl	8002176 <_ZN6BMI0884readE13device_type_thPht>

    gx = buf[0] | (buf[1] << 8);
 8001f02:	7d3b      	ldrb	r3, [r7, #20]
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	7d7b      	ldrb	r3, [r7, #21]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	84fb      	strh	r3, [r7, #38]	; 0x26
    gy = buf[2] | (buf[3] << 8);
 8001f12:	7dbb      	ldrb	r3, [r7, #22]
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	84bb      	strh	r3, [r7, #36]	; 0x24
    gz = buf[4] | (buf[5] << 8);
 8001f22:	7e3b      	ldrb	r3, [r7, #24]
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	7e7b      	ldrb	r3, [r7, #25]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	847b      	strh	r3, [r7, #34]	; 0x22

    value = (int16_t)gx;
 8001f32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3e:	edc7 7a07 	vstr	s15, [r7, #28]
    *x = (gyroRange * value / 32768) - gcal_x;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f50:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001fe4 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gy;
 8001f68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	edc7 7a07 	vstr	s15, [r7, #28]
    *y = -(gyroRange * value / 32768) - gcal_y;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f86:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001fe4 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8e:	eeb1 7a67 	vneg.f32	s14, s15
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	edc3 7a00 	vstr	s15, [r3]

    value = (int16_t)gz;
 8001fa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fae:	edc7 7a07 	vstr	s15, [r7, #28]
    *z = -(gyroRange * value / 32768) - gcal_z;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001fb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001fe4 <_ZN6BMI08812getGyroscopeEPfS0_S0_+0x11c>
 8001fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	edc3 7a00 	vstr	s15, [r3]
}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	47000000 	.word	0x47000000

08001fe8 <_ZN6BMI08814getTemperatureEv>:
    value = (gyroRange * value / 32768) - gcal_z;

    return value * -1.0f;
}

int16_t BMI088::getTemperature(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    uint16_t data = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	81fb      	strh	r3, [r7, #14]

    data = read16Be(ACC, BMI088_ACC_TEMP_MSB);
 8001ff4:	2222      	movs	r2, #34	; 0x22
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f887 	bl	800210c <_ZN6BMI0888read16BeE13device_type_th>
 8001ffe:	4603      	mov	r3, r0
 8002000:	81fb      	strh	r3, [r7, #14]
    data = data >> 5;
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	115b      	asrs	r3, r3, #5
 8002006:	81fb      	strh	r3, [r7, #14]

    if (data > 1023) {
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d303      	bcc.n	8002018 <_ZN6BMI08814getTemperatureEv+0x30>
        data = data - 2048;
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002016:	81fb      	strh	r3, [r7, #14]
    }

    return (int16_t)(data / 8 + 23);
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	b29b      	uxth	r3, r3
 800201e:	3317      	adds	r3, #23
 8002020:	b29b      	uxth	r3, r3
 8002022:	b21b      	sxth	r3, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZN6BMI0886write8E13device_type_thh>:

void BMI088::write8(device_type_t dev, uint8_t reg, uint8_t val) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af04      	add	r7, sp, #16
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4603      	mov	r3, r0
 800203c:	70fb      	strb	r3, [r7, #3]
 800203e:	460b      	mov	r3, r1
 8002040:	70bb      	strb	r3, [r7, #2]
 8002042:	4613      	mov	r3, r2
 8002044:	707b      	strb	r3, [r7, #1]
    uint8_t addr = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]

    if (dev) {
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <_ZN6BMI0886write8E13device_type_thh+0x2e>
        addr = devAddrGyro;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e003      	b.n	8002062 <_ZN6BMI0886write8E13device_type_thh+0x36>
    } else {
        addr = devAddrAcc;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002060:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Write(i2c, (uint16_t)(addr<<1), reg, 1, &val, 1, HAL_MAX_DELAY);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	b29b      	uxth	r3, r3
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	b299      	uxth	r1, r3
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	b29a      	uxth	r2, r3
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	2301      	movs	r3, #1
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	1c7b      	adds	r3, r7, #1
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	f007 fcb1 	bl	80099e8 <HAL_FMPI2C_Mem_Write>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <_ZN6BMI0885read8E13device_type_th>:

uint8_t BMI088::read8(device_type_t dev, uint8_t reg) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af04      	add	r7, sp, #16
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0, data = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	2300      	movs	r3, #0
 80020a6:	737b      	strb	r3, [r7, #13]

    if (dev) {
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d004      	beq.n	80020b8 <_ZN6BMI0885read8E13device_type_th+0x28>
        addr = devAddrGyro;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e003      	b.n	80020c0 <_ZN6BMI0885read8E13device_type_th+0x30>
    } else {
        addr = devAddrAcc;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020be:	73fb      	strb	r3, [r7, #15]
    }

    HAL_StatusTypeDef code = HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, &data, 1, HAL_MAX_DELAY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	b299      	uxth	r1, r3
 80020cc:	78bb      	ldrb	r3, [r7, #2]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	f107 030d 	add.w	r3, r7, #13
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2301      	movs	r3, #1
 80020e2:	f007 fd95 	bl	8009c10 <HAL_FMPI2C_Mem_Read>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73bb      	strb	r3, [r7, #14]
    if (code != HAL_OK)
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <_ZN6BMI0885read8E13device_type_th+0x6c>
    {
    	printf("[BMI088] - Error %d while trying to read %d bytes from REG %d\r\n", code, 1, reg);
 80020f0:	7bb9      	ldrb	r1, [r7, #14]
 80020f2:	78bb      	ldrb	r3, [r7, #2]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <_ZN6BMI0885read8E13device_type_th+0x78>)
 80020f8:	f012 f964 	bl	80143c4 <iprintf>
    }

    return data;
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	080169a0 	.word	0x080169a0

0800210c <_ZN6BMI0888read16BeE13device_type_th>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8));
}

uint16_t BMI088::read16Be(device_type_t dev, uint8_t reg) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af04      	add	r7, sp, #16
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
 8002118:	4613      	mov	r3, r2
 800211a:	70bb      	strb	r3, [r7, #2]
    uint8_t addr = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    if (dev) {
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <_ZN6BMI0888read16BeE13device_type_th+0x24>
        addr = devAddrGyro;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e003      	b.n	8002138 <_ZN6BMI0888read16BeE13device_type_th+0x2c>
    } else {
        addr = devAddrAcc;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002136:	73fb      	strb	r3, [r7, #15]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 2, HAL_MAX_DELAY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29b      	uxth	r3, r3
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	b299      	uxth	r1, r3
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	b29a      	uxth	r2, r3
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	2302      	movs	r3, #2
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	f007 fd59 	bl	8009c10 <HAL_FMPI2C_Mem_Read>

    return (data[1] | (data[0] << 8));
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	b21a      	sxth	r2, r3
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21b      	sxth	r3, r3
 800216c:	b29b      	uxth	r3, r3
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZN6BMI0884readE13device_type_thPht>:
    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, data, 3, HAL_MAX_DELAY);

    return (data[0] | (data[1] << 8) | (data[2] << 16));
}

void BMI088::read(device_type_t dev, uint8_t reg, uint8_t* buf, uint16_t len) {
 8002176:	b580      	push	{r7, lr}
 8002178:	b08a      	sub	sp, #40	; 0x28
 800217a:	af04      	add	r7, sp, #16
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	72fb      	strb	r3, [r7, #11]
 8002184:	4613      	mov	r3, r2
 8002186:	72bb      	strb	r3, [r7, #10]
    uint8_t addr = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]

    if (dev) {
 800218c:	7afb      	ldrb	r3, [r7, #11]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <_ZN6BMI0884readE13device_type_thPht+0x26>
        addr = devAddrGyro;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e003      	b.n	80021a4 <_ZN6BMI0884readE13device_type_thPht+0x2e>
    } else {
        addr = devAddrAcc;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a2:	75fb      	strb	r3, [r7, #23]
    }

    HAL_FMPI2C_Mem_Read(i2c, (uint16_t)(addr<<1), reg, 1, buf, len, HAL_MAX_DELAY);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	b299      	uxth	r1, r3
 80021b0:	7abb      	ldrb	r3, [r7, #10]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	8c3b      	ldrh	r3, [r7, #32]
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	f007 fd24 	bl	8009c10 <HAL_FMPI2C_Mem_Read>
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80021d0:	b408      	push	{r3}
 80021d2:	b590      	push	{r4, r7, lr}
 80021d4:	b088      	sub	sp, #32
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3307      	adds	r3, #7
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	ebad 0d03 	sub.w	sp, sp, r3
 80021ea:	466b      	mov	r3, sp
 80021ec:	3307      	adds	r3, #7
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80021f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f8:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80021fa:	68bc      	ldr	r4, [r7, #8]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	69f8      	ldr	r0, [r7, #28]
 8002204:	47a0      	blx	r4
 8002206:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	18d4      	adds	r4, r2, r3
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4618      	mov	r0, r3
 8002214:	f010 fdaf 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4622      	mov	r2, r4
 800221e:	69f9      	ldr	r1, [r7, #28]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f890 	bl	8002346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4618      	mov	r0, r3
 800222c:	f010 fda4 	bl	8012d78 <_ZNSaIcED1Ev>
 8002230:	bf00      	nop
    }
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800223c:	b001      	add	sp, #4
 800223e:	4770      	bx	lr

08002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 800224a:	6839      	ldr	r1, [r7, #0]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f011 f969 	bl	8013524 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	2100      	movs	r1, #0
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f011 f8de 	bl	8013438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 800227c:	4603      	mov	r3, r0
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f88b 	bl	800239a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f010 ffd1 	bl	8013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f011 f913 	bl	80134d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f874 	bl	800239a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4619      	mov	r1, r3
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f010 ffba 	bl	8013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
      const auto __size = __lhs.size() + __rhs.size();
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f010 ffd3 	bl	801327c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80022d6:	4604      	mov	r4, r0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f010 ffcf 	bl	801327c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80022de:	4603      	mov	r3, r0
 80022e0:	4423      	add	r3, r4
 80022e2:	617b      	str	r3, [r7, #20]
      const bool __cond = (__size > __lhs.capacity()
 80022e4:	68b8      	ldr	r0, [r7, #8]
 80022e6:	f010 ffcd 	bl	8013284 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80022ea:	4602      	mov	r2, r0
			   && __size <= __rhs.capacity());
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d908      	bls.n	8002304 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f010 ffc6 	bl	8013284 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d801      	bhi.n	8002304 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x40>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x42>
 8002304:	2300      	movs	r3, #0
      const bool __cond = (__size > __lhs.capacity()
 8002306:	74fb      	strb	r3, [r7, #19]
	            : std::move(__lhs.append(__rhs));
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x60>
      return __cond ? std::move(__rhs.insert(0, __lhs))
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f011 f886 	bl	8013424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8002318:	4603      	mov	r3, r0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f83d 	bl	800239a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002320:	4603      	mov	r3, r0
 8002322:	e008      	b.n	8002336 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x72>
	            : std::move(__lhs.append(__rhs));
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f011 f8b8 	bl	801349c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800232c:	4603      	mov	r3, r0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f833 	bl	800239a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f010 ff79 	bl	8013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8002354:	68fc      	ldr	r4, [r7, #12]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f010 fe88 	bl	801306c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800235c:	4603      	mov	r3, r0
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f011 f8f2 	bl	801354c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f805 	bl	800237c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f80f 	bl	80023b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80023be:	4623      	mov	r3, r4
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f805 	bl	80023d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
	...

080023d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f000 f83e 	bl	8002464 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8002402:	f010 fd71 	bl	8012ee8 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68b8      	ldr	r0, [r7, #8]
 800240a:	f000 f83b 	bl	8002484 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800240e:	4603      	mov	r3, r0
 8002410:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d910      	bls.n	800243a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	4619      	mov	r1, r3
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f010 fe2d 	bl	8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002426:	4603      	mov	r3, r0
 8002428:	4619      	mov	r1, r3
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f010 fe1a 	bl	8013064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4619      	mov	r1, r3
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f010 fe1b 	bl	8013070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f010 fe14 	bl	8013068 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002440:	4603      	mov	r3, r0
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4618      	mov	r0, r3
 8002448:	f010 fe7f 	bl	801314a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4619      	mov	r1, r3
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f010 fe0f 	bl	8013074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	080169e0 	.word	0x080169e0

08002464 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800248e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f80a 	bl	80024ac <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8002498:	462a      	mov	r2, r5
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	4620      	mov	r0, r4
 800249e:	f000 f80f 	bl	80024c0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80024a2:	4603      	mov	r3, r0
    }
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}

080024ac <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
    }
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <_Z41__static_initialization_and_destruction_0ii>:
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d126      	bne.n	800253e <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d121      	bne.n	800253e <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	4618      	mov	r0, r3
 8002500:	f010 fc39 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	461a      	mov	r2, r3
 800250a:	4916      	ldr	r1, [pc, #88]	; (8002564 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800250c:	4816      	ldr	r0, [pc, #88]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800250e:	f011 f853 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	4618      	mov	r0, r3
 8002518:	f010 fc2e 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4618      	mov	r0, r3
 8002522:	f010 fc28 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	461a      	mov	r2, r3
 800252c:	490f      	ldr	r1, [pc, #60]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800252e:	4810      	ldr	r0, [pc, #64]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002530:	f011 f842 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4618      	mov	r0, r3
 800253a:	f010 fc1d 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	4293      	cmp	r3, r2
 800254c:	d105      	bne.n	800255a <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002550:	f010 fe88 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002556:	f010 fe85 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	08016a0c 	.word	0x08016a0c
 8002568:	2000037c 	.word	0x2000037c
 800256c:	08016a10 	.word	0x08016a10
 8002570:	20000394 	.word	0x20000394

08002574 <_GLOBAL__sub_I__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
 8002578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff ffaf 	bl	80024e0 <_Z41__static_initialization_and_destruction_0ii>
 8002582:	bd80      	pop	{r7, pc}

08002584 <_GLOBAL__sub_D__ZN6BMI088C2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
 8002588:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff ffa7 	bl	80024e0 <_Z41__static_initialization_and_destruction_0ii>
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f010 ffb1 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80025a2:	4604      	mov	r4, r0
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f010 fe6b 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	4621      	mov	r1, r4
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80025b6:	f00b fcfc 	bl	800dfb2 <HAL_UART_Transmit>
 80025ba:	4603      	mov	r3, r0
 80025bc:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 80025be:	f640 230d 	movw	r3, #2573	; 0xa0d
 80025c2:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 80025c4:	f107 010c 	add.w	r1, r7, #12
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	2202      	movs	r2, #2
 80025ce:	4804      	ldr	r0, [pc, #16]	; (80025e0 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80025d0:	f00b fcef 	bl	800dfb2 <HAL_UART_Transmit>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	20000988 	.word	0x20000988

080025e4 <_ZN4Task12taskFunctionEv>:
	// Move assignment operator.
	Task& operator=(Task&& other) noexcept;
	Task& operator=(const Task& other) = delete;	// Disabling copy constructor so you can only move objects.

	// Callback function for Task object within scheduler.
	virtual bool taskFunction()
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	{
		return true;
 80025ec:	2301      	movs	r3, #1
	}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <_ZN4Task12consoleFuncaEv>:

	// Callback functions for Task object within console.
	virtual bool consoleFunca()
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	{
		println("Function not implemented by Task!");
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	4618      	mov	r0, r3
 800260a:	f010 fbb4 	bl	8012d76 <_ZNSaIcEC1Ev>
 800260e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	490c      	ldr	r1, [pc, #48]	; (8002648 <_ZN4Task12consoleFuncaEv+0x4c>)
 8002618:	4618      	mov	r0, r3
 800261a:	f010 ffcd 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffb6 	bl	8002594 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4618      	mov	r0, r3
 800262e:	f010 fe19 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f010 fb9e 	bl	8012d78 <_ZNSaIcED1Ev>
		return true;
 800263c:	2301      	movs	r3, #1
	}
 800263e:	4618      	mov	r0, r3
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	08017b74 	.word	0x08017b74

0800264c <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

	virtual bool consoleFuncb(std::string& s)
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	{
		println("Function not implemented by Task!");
 8002656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265a:	4618      	mov	r0, r3
 800265c:	f010 fb8b 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002660:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	490b      	ldr	r1, [pc, #44]	; (8002698 <_ZN4Task12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800266a:	4618      	mov	r0, r3
 800266c:	f010 ffa4 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff8d 	bl	8002594 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	4618      	mov	r0, r3
 8002680:	f010 fdf0 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002688:	4618      	mov	r0, r3
 800268a:	f010 fb75 	bl	8012d78 <_ZNSaIcED1Ev>
		return true;
 800268e:	2301      	movs	r3, #1
	}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	08017b74 	.word	0x08017b74

0800269c <_Z41__static_initialization_and_destruction_0ii>:
}

BaroMag::~BaroMag()
{

}
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d126      	bne.n	80026fa <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d121      	bne.n	80026fa <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	4618      	mov	r0, r3
 80026bc:	f010 fb5b 	bl	8012d76 <_ZNSaIcEC1Ev>
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	461a      	mov	r2, r3
 80026c6:	4916      	ldr	r1, [pc, #88]	; (8002720 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80026c8:	4816      	ldr	r0, [pc, #88]	; (8002724 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80026ca:	f010 ff75 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4618      	mov	r0, r3
 80026d4:	f010 fb50 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	4618      	mov	r0, r3
 80026de:	f010 fb4a 	bl	8012d76 <_ZNSaIcEC1Ev>
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	461a      	mov	r2, r3
 80026e8:	490f      	ldr	r1, [pc, #60]	; (8002728 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80026ec:	f010 ff64 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	4618      	mov	r0, r3
 80026f6:	f010 fb3f 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	4293      	cmp	r3, r2
 8002708:	d105      	bne.n	8002716 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800270a:	4808      	ldr	r0, [pc, #32]	; (800272c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800270c:	f010 fdaa 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002712:	f010 fda7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	08017b98 	.word	0x08017b98
 8002724:	200003ac 	.word	0x200003ac
 8002728:	08017b9c 	.word	0x08017b9c
 800272c:	200003c4 	.word	0x200003c4

08002730 <_GLOBAL__sub_I__ZN6DPS310C2Ev>:
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
 8002734:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff ffaf 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 800273e:	bd80      	pop	{r7, pc}

08002740 <_GLOBAL__sub_D__ZN6DPS310C2Ev>:
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
 8002744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff ffa7 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f010 fed3 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800275e:	4604      	mov	r4, r0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f010 fd8d 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002766:	4603      	mov	r3, r0
 8002768:	b29a      	uxth	r2, r3
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	4621      	mov	r1, r4
 8002770:	480a      	ldr	r0, [pc, #40]	; (800279c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8002772:	f00b fc1e 	bl	800dfb2 <HAL_UART_Transmit>
 8002776:	4603      	mov	r3, r0
 8002778:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 800277a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800277e:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8002780:	f107 010c 	add.w	r1, r7, #12
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	2202      	movs	r2, #2
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800278c:	f00b fc11 	bl	800dfb2 <HAL_UART_Transmit>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	20000988 	.word	0x20000988

080027a0 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BatteryMon.hpp"

BattMon::BattMon(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b08d      	sub	sp, #52	; 0x34
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6178      	str	r0, [r7, #20]
 80027a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80027ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80027b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80027b4:	460b      	mov	r3, r1
 80027b6:	603a      	str	r2, [r7, #0]
 80027b8:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 80027ba:	697c      	ldr	r4, [r7, #20]
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f010 fec4 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80027c8:	f107 0218 	add.w	r2, r7, #24
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4619      	mov	r1, r3
 80027d0:	ed97 1a02 	vldr	s2, [r7, #8]
 80027d4:	edd7 0a03 	vldr	s1, [r7, #12]
 80027d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80027dc:	4620      	mov	r0, r4
 80027de:	f003 fcf7 	bl	80061d0 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f010 fd3c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>)
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34
{

}
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4618      	mov	r0, r3
 80027fc:	3734      	adds	r7, #52	; 0x34
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	bf00      	nop
 8002804:	08021d38 	.word	0x08021d38
 8002808:	20000a90 	.word	0x20000a90

0800280c <_ZN7BattMon4initEP17ADC_HandleTypeDef>:
{

}

void BattMon::init(ADC_HandleTypeDef* adc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	hadc = adc;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_ZN7BattMon12consoleFuncaEv>:

bool BattMon::consoleFunca()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b09e      	sub	sp, #120	; 0x78
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	4618      	mov	r0, r3
 8002836:	f010 fa9e 	bl	8012d76 <_ZNSaIcEC1Ev>
 800283a:	f107 0220 	add.w	r2, r7, #32
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4936      	ldr	r1, [pc, #216]	; (800291c <_ZN7BattMon12consoleFuncaEv+0xf4>)
 8002844:	4618      	mov	r0, r3
 8002846:	f010 feb7 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff7e 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	4618      	mov	r0, r3
 800285a:	f010 fd03 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800285e:	f107 0320 	add.w	r3, r7, #32
 8002862:	4618      	mov	r0, r3
 8002864:	f010 fa88 	bl	8012d78 <_ZNSaIcED1Ev>
	println("Read 4s Lipo Cell Voltages @ 4Hz.");
 8002868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800286c:	4618      	mov	r0, r3
 800286e:	f010 fa82 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002872:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287a:	4929      	ldr	r1, [pc, #164]	; (8002920 <_ZN7BattMon12consoleFuncaEv+0xf8>)
 800287c:	4618      	mov	r0, r3
 800287e:	f010 fe9b 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff62 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f010 fce7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800289a:	4618      	mov	r0, r3
 800289c:	f010 fa6c 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\tArgs");
 80028a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028a4:	4618      	mov	r0, r3
 80028a6:	f010 fa66 	bl	8012d76 <_ZNSaIcEC1Ev>
 80028aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80028ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028b2:	491c      	ldr	r1, [pc, #112]	; (8002924 <_ZN7BattMon12consoleFuncaEv+0xfc>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f010 fe7f 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff46 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80028c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028c8:	4618      	mov	r0, r3
 80028ca:	f010 fccb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028d2:	4618      	mov	r0, r3
 80028d4:	f010 fa50 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* status - Shows most recent pack voltage and individual cell voltages.");
 80028d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028dc:	4618      	mov	r0, r3
 80028de:	f010 fa4a 	bl	8012d76 <_ZNSaIcEC1Ev>
 80028e2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80028e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028ea:	490f      	ldr	r1, [pc, #60]	; (8002928 <_ZN7BattMon12consoleFuncaEv+0x100>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f010 fe63 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff2a 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80028fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002900:	4618      	mov	r0, r3
 8002902:	f010 fcaf 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002906:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800290a:	4618      	mov	r0, r3
 800290c:	f010 fa34 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8002910:	2301      	movs	r3, #1
}
 8002912:	4618      	mov	r0, r3
 8002914:	3778      	adds	r7, #120	; 0x78
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	08018d28 	.word	0x08018d28
 8002920:	08018d38 	.word	0x08018d38
 8002924:	08018d5c 	.word	0x08018d5c
 8002928:	08018d64 	.word	0x08018d64

0800292c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool BattMon::consoleFuncb(std::string& s)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b0f2      	sub	sp, #456	; 0x1c8
 8002930:	af00      	add	r7, sp, #0
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	6018      	str	r0, [r3, #0]
 8002936:	463b      	mov	r3, r7
 8002938:	6019      	str	r1, [r3, #0]
	// Check argument string.
	if (s == "status")
 800293a:	463b      	mov	r3, r7
 800293c:	49b3      	ldr	r1, [pc, #716]	; (8002c0c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e0>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	f7ff fc7e 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8133 	beq.w	8002bb2 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x286>
	{
		if (!batt_msg_pntr->locked)
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	7d1b      	ldrb	r3, [r3, #20]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 810c 	beq.w	8002b78 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>
		{
			println("Lipo Pack Units - [Volts]");
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	4618      	mov	r0, r3
 8002966:	f010 fa06 	bl	8012d76 <_ZNSaIcEC1Ev>
 800296a:	f107 0220 	add.w	r2, r7, #32
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	49a7      	ldr	r1, [pc, #668]	; (8002c10 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e4>)
 8002974:	4618      	mov	r0, r3
 8002976:	f010 fe1f 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fee6 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	4618      	mov	r0, r3
 800298a:	f010 fc6b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	4618      	mov	r0, r3
 8002994:	f010 f9f0 	bl	8012d78 <_ZNSaIcED1Ev>
			println("Lipo Pack Frmt  - [c1, c2, c3, c4, total]");
 8002998:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800299c:	4618      	mov	r0, r3
 800299e:	f010 f9ea 	bl	8012d76 <_ZNSaIcEC1Ev>
 80029a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029aa:	499a      	ldr	r1, [pc, #616]	; (8002c14 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e8>)
 80029ac:	4618      	mov	r0, r3
 80029ae:	f010 fe03 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff feca 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	4618      	mov	r0, r3
 80029c2:	f010 fc4f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80029c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ca:	4618      	mov	r0, r3
 80029cc:	f010 f9d4 	bl	8012d78 <_ZNSaIcED1Ev>
			println("Lipo Pack Data  - " +
					std::to_string(batt_msg_pntr->cell1) + " " +
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029de:	eeb0 0a67 	vmov.f32	s0, s15
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fa92 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			println("Lipo Pack Data  - " +
 80029e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80029f0:	4989      	ldr	r1, [pc, #548]	; (8002c18 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc37 	bl	8002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
					std::to_string(batt_msg_pntr->cell1) + " " +
 80029f8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029fc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002a00:	4a86      	ldr	r2, [pc, #536]	; (8002c1c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fc47 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a16:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fa76 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002a20:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002a28:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fc49 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002a32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002a36:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002a3a:	4a78      	ldr	r2, [pc, #480]	; (8002c1c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fc2a 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell3) + " " +
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fa59 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002a5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a5e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002a62:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fc2c 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell3) + " " +
 8002a6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a70:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002a74:	4a69      	ldr	r2, [pc, #420]	; (8002c1c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fc0d 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fa3c 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell3) + " " +
 8002a94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a98:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002a9c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fc0f 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002aa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aaa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002aae:	4a5b      	ldr	r2, [pc, #364]	; (8002c1c <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fbf0 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(batt_msg_pntr->pack_volt));
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ac0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fa1f 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ad2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8002ad6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fbf2 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
			println("Lipo Pack Data  - " +
 8002ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe33 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
					std::to_string(batt_msg_pntr->pack_volt));
 8002aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aee:	4618      	mov	r0, r3
 8002af0:	f010 fbb8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002af4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002af8:	4618      	mov	r0, r3
 8002afa:	f010 fbb3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell4) + " " +
 8002afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b02:	4618      	mov	r0, r3
 8002b04:	f010 fbae 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f010 fba9 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002b16:	4618      	mov	r0, r3
 8002b18:	f010 fba4 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell3) + " " +
 8002b1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002b20:	4618      	mov	r0, r3
 8002b22:	f010 fb9f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f010 fb9a 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002b34:	4618      	mov	r0, r3
 8002b36:	f010 fb95 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell2) + " " +
 8002b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f010 fb90 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b44:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f010 fb8b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b52:	4618      	mov	r0, r3
 8002b54:	f010 fb86 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(batt_msg_pntr->cell1) + " " +
 8002b58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f010 fb81 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b66:	4618      	mov	r0, r3
 8002b68:	f010 fb7c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b70:	4618      	mov	r0, r3
 8002b72:	f010 fb77 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b76:	e042      	b.n	8002bfe <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d2>
		}else{
			println("Shared memory locked!");
 8002b78:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f010 f8fa 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002b82:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8002b86:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b8a:	4925      	ldr	r1, [pc, #148]	; (8002c20 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f010 fd13 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b92:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fdda 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002b9c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f010 fb5f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ba6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002baa:	4618      	mov	r0, r3
 8002bac:	f010 f8e4 	bl	8012d78 <_ZNSaIcED1Ev>
 8002bb0:	e025      	b.n	8002bfe <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d2>
		}

	}else{
		println("Invalid parameter!");
 8002bb2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f010 f8dd 	bl	8012d76 <_ZNSaIcEC1Ev>
 8002bbc:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8002bc0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002bc4:	4917      	ldr	r1, [pc, #92]	; (8002c24 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f010 fcf6 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002bcc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fdbd 	bl	8002750 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002bd6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f010 fb42 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002be0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002be4:	4618      	mov	r0, r3
 8002be6:	f010 f8c7 	bl	8012d78 <_ZNSaIcED1Ev>
		consoleFunca();
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1d3a      	adds	r2, r7, #4
 8002bf6:	6810      	ldr	r0, [r2, #0]
 8002bf8:	4798      	blx	r3
		return false;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <_ZN7BattMon12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2d4>
	}

	return true;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08018db0 	.word	0x08018db0
 8002c10:	08018db8 	.word	0x08018db8
 8002c14:	08018dd4 	.word	0x08018dd4
 8002c18:	08018e00 	.word	0x08018e00
 8002c1c:	08018e14 	.word	0x08018e14
 8002c20:	08018e18 	.word	0x08018e18
 8002c24:	08018e30 	.word	0x08018e30

08002c28 <_ZN7BattMon12taskFunctionEv>:

bool BattMon::taskFunction()
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	// Read all cells, lock shared memory.
	batt_msg_pntr->locked = true;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2201      	movs	r2, #1
 8002c36:	751a      	strb	r2, [r3, #20]
	batt_msg_pntr->cell1 = readCell1();
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8f1 	bl	8002e24 <_ZN7BattMon9readCell1Ev>
 8002c42:	eef0 7a40 	vmov.f32	s15, s0
 8002c46:	edc4 7a00 	vstr	s15, [r4]
	batt_msg_pntr->cell2 = readCell2() - batt_msg_pntr->cell1;
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f924 	bl	8002e98 <_ZN7BattMon9readCell2Ev>
 8002c50:	eeb0 7a40 	vmov.f32	s14, s0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c64:	edc3 7a01 	vstr	s15, [r3, #4]
	batt_msg_pntr->cell3 = readCell3() - batt_msg_pntr->cell2 - batt_msg_pntr->cell1;
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f94f 	bl	8002f0c <_ZN7BattMon9readCell3Ev>
 8002c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c8e:	edc3 7a02 	vstr	s15, [r3, #8]
	batt_msg_pntr->pack_volt = readCell4();
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f972 	bl	8002f80 <_ZN7BattMon9readCell4Ev>
 8002c9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ca0:	edc4 7a04 	vstr	s15, [r4, #16]
	batt_msg_pntr->cell4 = batt_msg_pntr->pack_volt - batt_msg_pntr->cell3 - batt_msg_pntr->cell2 - batt_msg_pntr->cell1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd4:	edc3 7a03 	vstr	s15, [r3, #12]
	batt_msg_pntr->locked = false;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2200      	movs	r2, #0
 8002cde:	751a      	strb	r2, [r3, #20]

	return true;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}

08002cea <_ZN7BattMon10setupCell1Ev>:

void BattMon::setupCell1()
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_4;
 8002d00:	2304      	movs	r3, #4
 8002d02:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002d08:	2305      	movs	r3, #5
 8002d0a:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f107 0208 	add.w	r2, r7, #8
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f005 fe94 	bl	8008a44 <HAL_ADC_ConfigChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <_ZN7BattMon10setupCell1Ev+0x46>
	{
		Error_Handler();
 8002d2c:	f004 fe3a 	bl	80079a4 <Error_Handler>
	}
}
 8002d30:	bf00      	nop
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN7BattMon10setupCell2Ev>:

void BattMon::setupCell2()
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_5;
 8002d4e:	2305      	movs	r3, #5
 8002d50:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002d56:	2305      	movs	r3, #5
 8002d58:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f107 0208 	add.w	r2, r7, #8
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fe6d 	bl	8008a44 <HAL_ADC_ConfigChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <_ZN7BattMon10setupCell2Ev+0x46>
	{
		Error_Handler();
 8002d7a:	f004 fe13 	bl	80079a4 <Error_Handler>
	}
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZN7BattMon10setupCell3Ev>:

void BattMon::setupCell3()
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8002d9c:	2306      	movs	r3, #6
 8002d9e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002da4:	2305      	movs	r3, #5
 8002da6:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f107 0208 	add.w	r2, r7, #8
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 fe46 	bl	8008a44 <HAL_ADC_ConfigChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <_ZN7BattMon10setupCell3Ev+0x46>
	{
		Error_Handler();
 8002dc8:	f004 fdec 	bl	80079a4 <Error_Handler>
	}
}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_ZN7BattMon10setupCell4Ev>:

void BattMon::setupCell4()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_7;
 8002dea:	2307      	movs	r3, #7
 8002dec:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002df2:	2305      	movs	r3, #5
 8002df4:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f107 0208 	add.w	r2, r7, #8
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f005 fe1f 	bl	8008a44 <HAL_ADC_ConfigChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <_ZN7BattMon10setupCell4Ev+0x46>
	{
		Error_Handler();
 8002e16:	f004 fdc5 	bl	80079a4 <Error_Handler>
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <_ZN7BattMon9readCell1Ev>:

float BattMon::readCell1()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	setupCell1();
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff5c 	bl	8002cea <_ZN7BattMon10setupCell1Ev>
	HAL_ADC_Start(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fc66 	bl	8008708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e44:	4618      	mov	r0, r3
 8002e46:	f005 fd64 	bl	8008912 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 fd2c 	bl	80088ac <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL1_R1 + CELL1_R2)) / (CELL1_R2 * 4096.0f);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 fde5 	bl	8008a28 <HAL_ADC_GetValue>
 8002e5e:	ee07 0a90 	vmov	s15, r0
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002e8c <_ZN7BattMon9readCell1Ev+0x68>
 8002e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002e90 <_ZN7BattMon9readCell1Ev+0x6c>
 8002e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e76:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002e94 <_ZN7BattMon9readCell1Ev+0x70>
 8002e7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e7e:	eef0 7a66 	vmov.f32	s15, s13

}
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40533333 	.word	0x40533333
 8002e90:	43480000 	.word	0x43480000
 8002e94:	48c80000 	.word	0x48c80000

08002e98 <_ZN7BattMon9readCell2Ev>:

float BattMon::readCell2()
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	setupCell2();
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff49 	bl	8002d38 <_ZN7BattMon10setupCell2Ev>
	HAL_ADC_Start(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 fc2c 	bl	8008708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fd2a 	bl	8008912 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f005 fcf2 	bl	80088ac <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL2_R1 + CELL2_R2)) / (CELL2_R2 * 4096.0f);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 fdab 	bl	8008a28 <HAL_ADC_GetValue>
 8002ed2:	ee07 0a90 	vmov	s15, r0
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002f00 <_ZN7BattMon9readCell2Ev+0x68>
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f04 <_ZN7BattMon9readCell2Ev+0x6c>
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f08 <_ZN7BattMon9readCell2Ev+0x70>
 8002eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ef2:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40533333 	.word	0x40533333
 8002f04:	43c80000 	.word	0x43c80000
 8002f08:	48c80000 	.word	0x48c80000

08002f0c <_ZN7BattMon9readCell3Ev>:

float BattMon::readCell3()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	setupCell3();
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff36 	bl	8002d86 <_ZN7BattMon10setupCell3Ev>
	HAL_ADC_Start(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f005 fbf2 	bl	8008708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f005 fcf0 	bl	8008912 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4618      	mov	r0, r3
 8002f38:	f005 fcb8 	bl	80088ac <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL3_R1 + CELL3_R2)) / (CELL3_R2 * 4096.0f);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4618      	mov	r0, r3
 8002f42:	f005 fd71 	bl	8008a28 <HAL_ADC_GetValue>
 8002f46:	ee07 0a90 	vmov	s15, r0
 8002f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002f74 <_ZN7BattMon9readCell3Ev+0x68>
 8002f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f56:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f78 <_ZN7BattMon9readCell3Ev+0x6c>
 8002f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f7c <_ZN7BattMon9readCell3Ev+0x70>
 8002f62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f66:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40533333 	.word	0x40533333
 8002f78:	44160000 	.word	0x44160000
 8002f7c:	48c80000 	.word	0x48c80000

08002f80 <_ZN7BattMon9readCell4Ev>:

float BattMon::readCell4()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	setupCell4();
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff23 	bl	8002dd4 <_ZN7BattMon10setupCell4Ev>
	HAL_ADC_Start(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 fbb8 	bl	8008708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fcb6 	bl	8008912 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4618      	mov	r0, r3
 8002fac:	f005 fc7e 	bl	80088ac <HAL_ADC_Stop>
	return ((float)HAL_ADC_GetValue(hadc) * 3.3f * (CELL4_R1 + CELL4_R2)) / (CELL4_R2 * 4096.0f);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f005 fd37 	bl	8008a28 <HAL_ADC_GetValue>
 8002fba:	ee07 0a90 	vmov	s15, r0
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002fe8 <_ZN7BattMon9readCell4Ev+0x68>
 8002fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002fec <_ZN7BattMon9readCell4Ev+0x6c>
 8002fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fd2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ff0 <_ZN7BattMon9readCell4Ev+0x70>
 8002fd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fda:	eef0 7a66 	vmov.f32	s15, s13
}
 8002fde:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40533333 	.word	0x40533333
 8002fec:	44478000 	.word	0x44478000
 8002ff0:	48c80000 	.word	0x48c80000

08002ff4 <_Z41__static_initialization_and_destruction_0ii>:
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d126      	bne.n	8003052 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300a:	4293      	cmp	r3, r2
 800300c:	d121      	bne.n	8003052 <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4618      	mov	r0, r3
 8003014:	f00f feaf 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	461a      	mov	r2, r3
 800301e:	4916      	ldr	r1, [pc, #88]	; (8003078 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003020:	4816      	ldr	r0, [pc, #88]	; (800307c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003022:	f010 fac9 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f00f fea4 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	4618      	mov	r0, r3
 8003036:	f00f fe9e 	bl	8012d76 <_ZNSaIcEC1Ev>
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	461a      	mov	r2, r3
 8003040:	490f      	ldr	r1, [pc, #60]	; (8003080 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003042:	4810      	ldr	r0, [pc, #64]	; (8003084 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003044:	f010 fab8 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	4618      	mov	r0, r3
 800304e:	f00f fe93 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305e:	4293      	cmp	r3, r2
 8003060:	d105      	bne.n	800306e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003062:	4808      	ldr	r0, [pc, #32]	; (8003084 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003064:	f010 f8fe 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8003068:	4804      	ldr	r0, [pc, #16]	; (800307c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800306a:	f010 f8fb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	08018e70 	.word	0x08018e70
 800307c:	200003dc 	.word	0x200003dc
 8003080:	08018e74 	.word	0x08018e74
 8003084:	200003f4 	.word	0x200003f4

08003088 <_GLOBAL__sub_I__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
 800308c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003090:	2001      	movs	r0, #1
 8003092:	f7ff ffaf 	bl	8002ff4 <_Z41__static_initialization_and_destruction_0ii>
 8003096:	bd80      	pop	{r7, pc}

08003098 <_GLOBAL__sub_D__ZN7BattMonC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
 800309c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff ffa7 	bl	8002ff4 <_Z41__static_initialization_and_destruction_0ii>
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "BlinkLEDTask.hpp"

BlinkTask::BlinkTask(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b08d      	sub	sp, #52	; 0x34
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6178      	str	r0, [r7, #20]
 80030b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80030b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80030b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80030bc:	460b      	mov	r3, r1
 80030be:	603a      	str	r2, [r7, #0]
 80030c0:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
			peri_s,
			mstr_tick_s,
			pri,
			nm)
 80030c2:	697c      	ldr	r4, [r7, #20]
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f010 fa40 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80030d0:	f107 0218 	add.w	r2, r7, #24
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	4619      	mov	r1, r3
 80030d8:	ed97 1a02 	vldr	s2, [r7, #8]
 80030dc:	edd7 0a03 	vldr	s1, [r7, #12]
 80030e0:	ed97 0a04 	vldr	s0, [r7, #16]
 80030e4:	4620      	mov	r0, r4
 80030e6:	f003 f873 	bl	80061d0 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	4618      	mov	r0, r3
 80030f0:	f010 f8b8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	601a      	str	r2, [r3, #0]
{

}
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4618      	mov	r0, r3
 80030fe:	3734      	adds	r7, #52	; 0x34
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	08021d4c 	.word	0x08021d4c

08003108 <_ZN9BlinkTask12taskFunctionEv>:
{

}

bool BlinkTask::taskFunction()
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8003110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003114:	4803      	ldr	r0, [pc, #12]	; (8003124 <_ZN9BlinkTask12taskFunctionEv+0x1c>)
 8003116:	f007 faba 	bl	800a68e <HAL_GPIO_TogglePin>
	return true;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40020400 	.word	0x40020400

08003128 <_Z41__static_initialization_and_destruction_0ii>:
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d126      	bne.n	8003186 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	4293      	cmp	r3, r2
 8003140:	d121      	bne.n	8003186 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f00f fe15 	bl	8012d76 <_ZNSaIcEC1Ev>
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	461a      	mov	r2, r3
 8003152:	4916      	ldr	r1, [pc, #88]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003154:	4816      	ldr	r0, [pc, #88]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003156:	f010 fa2f 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	f00f fe0a 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4618      	mov	r0, r3
 800316a:	f00f fe04 	bl	8012d76 <_ZNSaIcEC1Ev>
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	461a      	mov	r2, r3
 8003174:	490f      	ldr	r1, [pc, #60]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003176:	4810      	ldr	r0, [pc, #64]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003178:	f010 fa1e 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	4618      	mov	r0, r3
 8003182:	f00f fdf9 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003192:	4293      	cmp	r3, r2
 8003194:	d105      	bne.n	80031a2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003196:	4808      	ldr	r0, [pc, #32]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003198:	f010 f864 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800319e:	f010 f861 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	08019ffc 	.word	0x08019ffc
 80031b0:	2000040c 	.word	0x2000040c
 80031b4:	0801a000 	.word	0x0801a000
 80031b8:	20000424 	.word	0x20000424

080031bc <_GLOBAL__sub_I__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
 80031c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7ff ffaf 	bl	8003128 <_Z41__static_initialization_and_destruction_0ii>
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_GLOBAL__sub_D__ZN9BlinkTaskC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff ffa7 	bl	8003128 <_Z41__static_initialization_and_destruction_0ii>
 80031da:	bd80      	pop	{r7, pc}

080031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 *      Author: heapr0ll
 */

#include "Command.hpp"

command::command(std::string name, bool (*pntra)(), bool(*pntrb)(std::string& s))
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3308      	adds	r3, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f010 f817 	bl	8013222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	this->name = name;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3308      	adds	r3, #8
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f010 f838 	bl	8013270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	runa = pntra;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
	runb = pntrb;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	605a      	str	r2, [r3, #4]
}
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <_ZN7commandD1Ev>:
	this->name = name;
	runa = (bool (*)())tsk_pntr_a;
	runb = (bool (*)(std::string&))tsk_pntr_b;
}

command::~command()
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3308      	adds	r3, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f010 f81e 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
{

}
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <_Z41__static_initialization_and_destruction_0ii>:
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d126      	bne.n	8003292 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800324a:	4293      	cmp	r3, r2
 800324c:	d121      	bne.n	8003292 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	4618      	mov	r0, r3
 8003254:	f00f fd8f 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	461a      	mov	r2, r3
 800325e:	4916      	ldr	r1, [pc, #88]	; (80032b8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003260:	4816      	ldr	r0, [pc, #88]	; (80032bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003262:	f010 f9a9 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	4618      	mov	r0, r3
 800326c:	f00f fd84 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	4618      	mov	r0, r3
 8003276:	f00f fd7e 	bl	8012d76 <_ZNSaIcEC1Ev>
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	461a      	mov	r2, r3
 8003280:	490f      	ldr	r1, [pc, #60]	; (80032c0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003282:	4810      	ldr	r0, [pc, #64]	; (80032c4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003284:	f010 f998 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	4618      	mov	r0, r3
 800328e:	f00f fd73 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329e:	4293      	cmp	r3, r2
 80032a0:	d105      	bne.n	80032ae <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80032a2:	4808      	ldr	r0, [pc, #32]	; (80032c4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80032a4:	f00f ffde 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 80032a8:	4804      	ldr	r0, [pc, #16]	; (80032bc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80032aa:	f00f ffdb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	0801b164 	.word	0x0801b164
 80032bc:	2000043c 	.word	0x2000043c
 80032c0:	0801b168 	.word	0x0801b168
 80032c4:	20000454 	.word	0x20000454

080032c8 <_GLOBAL__sub_I__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032d0:	2001      	movs	r0, #1
 80032d2:	f7ff ffaf 	bl	8003234 <_Z41__static_initialization_and_destruction_0ii>
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_GLOBAL__sub_D__ZN7commandC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
 80032dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7ff ffa7 	bl	8003234 <_Z41__static_initialization_and_destruction_0ii>
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f805 	bl	800331e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
    }
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fc ffac 	bl	80002b0 <strlen>
 8003358:	4603      	mov	r3, r0
      }
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <_ZL9startUARTv>:
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 8003368:	2201      	movs	r2, #1
 800336a:	4903      	ldr	r1, [pc, #12]	; (8003378 <_ZL9startUARTv+0x14>)
 800336c:	4803      	ldr	r0, [pc, #12]	; (800337c <_ZL9startUARTv+0x18>)
 800336e:	f00a feb2 	bl	800e0d6 <HAL_UART_Receive_DMA>
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200005c9 	.word	0x200005c9
 800337c:	20000988 	.word	0x20000988

08003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f010 f8bb 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800338e:	4604      	mov	r4, r0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f00f ff75 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003396:	4603      	mov	r3, r0
 8003398:	b29a      	uxth	r2, r3
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	4621      	mov	r1, r4
 80033a0:	480a      	ldr	r0, [pc, #40]	; (80033cc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80033a2:	f00a fe06 	bl	800dfb2 <HAL_UART_Transmit>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 80033aa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80033ae:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 80033b0:	f107 010c 	add.w	r1, r7, #12
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	2202      	movs	r2, #2
 80033ba:	4804      	ldr	r0, [pc, #16]	; (80033cc <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80033bc:	f00a fdf9 	bl	800dfb2 <HAL_UART_Transmit>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	20000988 	.word	0x20000988

080033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Print string without new line.
static void print(std::string s)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f010 f893 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80033de:	4604      	mov	r4, r0
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f00f ff4d 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	4621      	mov	r1, r4
 80033f0:	4804      	ldr	r0, [pc, #16]	; (8003404 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 80033f2:	f00a fdde 	bl	800dfb2 <HAL_UART_Transmit>
 80033f6:	4603      	mov	r3, r0
 80033f8:	73fb      	strb	r3, [r7, #15]
	if (hstatus != HAL_OK)
	{
		/* Handle error here! */
	}
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	20000988 	.word	0x20000988

08003408 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string bfrspc(std::string s)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    // Returns the string up to the first space
    unsigned int i = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
    const char* cs = s.c_str();
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f010 f874 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800341c:	60b8      	str	r0, [r7, #8]
    while (cs[i] != ' ' && i < s.length()) {
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b20      	cmp	r3, #32
 8003428:	d008      	beq.n	800343c <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 800342a:	6838      	ldr	r0, [r7, #0]
 800342c:	f00f ff28 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4293      	cmp	r3, r2
 8003436:	d201      	bcs.n	800343c <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
    while (cs[i] != ' ' && i < s.length()) {
 8003448:	e7e9      	b.n	800341e <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    return s.substr(0,i);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	6839      	ldr	r1, [r7, #0]
 8003452:	f010 f8e9 	bl	8013628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
}
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

static std::string aftspc(std::string s)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
    // Returns the string after the first space
    unsigned int i = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
    const char* cs = s.c_str();
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f010 f848 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003474:	6138      	str	r0, [r7, #16]
    while (cs[i] != ' ' && i < s.length()) {
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b20      	cmp	r3, #32
 8003480:	d008      	beq.n	8003494 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8003482:	6838      	ldr	r0, [r7, #0]
 8003484:	f00f fefc 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	4293      	cmp	r3, r2
 800348e:	d201      	bcs.n	8003494 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
        i++;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3301      	adds	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
    while (cs[i] != ' ' && i < s.length()) {
 80034a0:	e7e9      	b.n	8003476 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
    }
    if (i >= s.length()) {
 80034a2:	6838      	ldr	r0, [r7, #0]
 80034a4:	f00f feec 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80034a8:	4602      	mov	r2, r0
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bf2c      	ite	cs
 80034b0:	2301      	movcs	r3, #1
 80034b2:	2300      	movcc	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d011      	beq.n	80034de <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
        return "";
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	4618      	mov	r0, r3
 80034c0:	f00f fc59 	bl	8012d76 <_ZNSaIcEC1Ev>
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	461a      	mov	r2, r3
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f010 f873 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00f fc4e 	bl	8012d78 <_ZNSaIcED1Ev>
 80034dc:	e00c      	b.n	80034f8 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x98>
    }
    else {
        return s.substr(i+1,s.length()-i);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1c5c      	adds	r4, r3, #1
 80034e2:	6838      	ldr	r0, [r7, #0]
 80034e4:	f00f fecc 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4622      	mov	r2, r4
 80034f2:	6839      	ldr	r1, [r7, #0]
 80034f4:	f010 f898 	bl	8013628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    }
}
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	0801c2c8 	.word	0x0801c2c8

08003504 <_ZN4Task7getNameB5cxx11Ev>:
	unsigned long getDelay(){ return delay_tk; }
	void setDelay(unsigned long d){ delay_tk = d; }

	unsigned long getPeriod(){ return period_tk; }

	std::string getName() { return name; }
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f010 f81b 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZN7command7getNameB5cxx11Ev>:
	// Command functions to be called.
	bool (*runa)();
	bool (*runb)(std::string& s);

	// Getters
	std::string getName() { return name; }
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3308      	adds	r3, #8
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f010 f80c 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZL5helpav>:
/*
 * @brief: Help command.
 *  Just a place holder so the help string can be printed as a possible command.
 */
static bool helpa()
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	return true;
 8003544:	2301      	movs	r3, #1
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool helpb(std::string& s)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	return true;
 8003558:	2301      	movs	r3, #1
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_ZN7commandC1ERKS_>:
class command
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 0208 	add.w	r2, r3, #8
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f00f ffdf 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZL5echoav>:
/*
 * @brief: Echo command.
 *  Simply echo's back anything you type in.
 */
static bool echoa()
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 80035a2:	f107 031c 	add.w	r3, r7, #28
 80035a6:	4618      	mov	r0, r3
 80035a8:	f00f fbe5 	bl	8012d76 <_ZNSaIcEC1Ev>
 80035ac:	f107 021c 	add.w	r2, r7, #28
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	490b      	ldr	r1, [pc, #44]	; (80035e0 <_ZL5echoav+0x44>)
 80035b4:	4618      	mov	r0, r3
 80035b6:	f00f ffff 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fedf 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	4618      	mov	r0, r3
 80035c6:	f00f fe4d 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4618      	mov	r0, r3
 80035d0:	f00f fbd2 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	0801c2cc 	.word	0x0801c2cc

080035e4 <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool echob(std::string& s)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	println(s);
 80035ec:	f107 0308 	add.w	r3, r7, #8
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00f ffac 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff febf 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	4618      	mov	r0, r3
 8003608:	f00f fe2c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 800360c:	2301      	movs	r3, #1
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <_ZL6clearav>:
/*
 * @brief: Clear command.
 *  Clears the terminal window when it gets too messy.
 */
static bool cleara()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 800361e:	f107 031c 	add.w	r3, r7, #28
 8003622:	4618      	mov	r0, r3
 8003624:	f00f fba7 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003628:	f107 021c 	add.w	r2, r7, #28
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	490b      	ldr	r1, [pc, #44]	; (800365c <_ZL6clearav+0x44>)
 8003630:	4618      	mov	r0, r3
 8003632:	f00f ffc1 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fec9 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f00f fe0f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	4618      	mov	r0, r3
 800364c:	f00f fb94 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8003650:	2301      	movs	r3, #1
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	0801c2f4 	.word	0x0801c2f4

08003660 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool clearb(std::string& s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 8003668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366c:	4618      	mov	r0, r3
 800366e:	f00f fb82 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003672:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003676:	f107 030c 	add.w	r3, r7, #12
 800367a:	490c      	ldr	r1, [pc, #48]	; (80036ac <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 800367c:	4618      	mov	r0, r3
 800367e:	f00f ff9b 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fea2 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f00f fde7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	4618      	mov	r0, r3
 800369c:	f00f fb6c 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	0801c2f4 	.word	0x0801c2f4

080036b0 <_ZL7bannerav>:
/*
 * @brief: Banner command.
 *  Prints the banner to the screen.
 */
static bool bannera()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
	println(wlcm);
 80036b6:	463b      	mov	r3, r7
 80036b8:	4908      	ldr	r1, [pc, #32]	; (80036dc <_ZL7bannerav+0x2c>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00f ff48 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80036c0:	463b      	mov	r3, r7
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fe5c 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036c8:	463b      	mov	r3, r7
 80036ca:	4618      	mov	r0, r3
 80036cc:	f00f fdca 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 80036d0:	2301      	movs	r3, #1
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000484 	.word	0x20000484

080036e0 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
static bool bannerb(std::string& s)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	println(wlcm);
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4909      	ldr	r1, [pc, #36]	; (8003714 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 80036ee:	4618      	mov	r0, r3
 80036f0:	f00f ff2e 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fe41 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80036fe:	f107 0308 	add.w	r3, r7, #8
 8003702:	4618      	mov	r0, r3
 8003704:	f00f fdae 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8003708:	2301      	movs	r3, #1
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000484 	.word	0x20000484

08003718 <_ZN7Console11printBannerEv>:

	bool isCommand(std::string &cmd);
	bool isTask(std::string &cmd);

	bool exec(std::string &cmd);
	void printBanner() { println(wlcm); }
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4908      	ldr	r1, [pc, #32]	; (8003748 <_ZN7Console11printBannerEv+0x30>)
 8003726:	4618      	mov	r0, r3
 8003728:	f00f ff12 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800372c:	f107 0308 	add.w	r3, r7, #8
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fe25 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f00f fd92 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003740:	bf00      	nop
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000484 	.word	0x20000484

0800374c <_ZN7Console11printCursorEv>:
	void printCursor() { print(cursor); }
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4908      	ldr	r1, [pc, #32]	; (800377c <_ZN7Console11printCursorEv+0x30>)
 800375a:	4618      	mov	r0, r3
 800375c:	f00f fef8 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fe33 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800376a:	f107 0308 	add.w	r3, r7, #8
 800376e:	4618      	mov	r0, r3
 8003770:	f00f fd78 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003774:	bf00      	nop
 8003776:	3720      	adds	r7, #32
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	2000046c 	.word	0x2000046c

08003780 <HAL_UART_RxCpltCallback>:
// Our singleton instance of the console!
Console cs;

// Callback that handles UART events.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800378a:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b0d      	cmp	r3, #13
 8003792:	d005      	beq.n	80037a0 <HAL_UART_RxCpltCallback+0x20>
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003796:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b0a      	cmp	r3, #10
 800379e:	d101      	bne.n	80037a4 <HAL_UART_RxCpltCallback+0x24>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_UART_RxCpltCallback+0x26>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_UART_RxCpltCallback+0x40>
	{
		uint8_t tmp[2] = {'\r', '\n'};
 80037aa:	f640 230d 	movw	r3, #2573	; 0xa0d
 80037ae:	81bb      	strh	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, tmp, 2, 100);
 80037b0:	f107 010c 	add.w	r1, r7, #12
 80037b4:	2364      	movs	r3, #100	; 0x64
 80037b6:	2202      	movs	r2, #2
 80037b8:	4848      	ldr	r0, [pc, #288]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 80037ba:	f00a fbfa 	bl	800dfb2 <HAL_UART_Transmit>
 80037be:	e02f      	b.n	8003820 <HAL_UART_RxCpltCallback+0xa0>
	} else if (consoleInput.raw_byte == 0x08)												// Handle the case of a backspace being typed.
 80037c0:	4b45      	ldr	r3, [pc, #276]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80037c2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01e      	beq.n	8003814 <HAL_UART_RxCpltCallback+0x94>
	{
		// Move the cursor back, print a space, then move the cursor back again.
		if (consoleInput.numReadBytes > 0)
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80037d8:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01f      	beq.n	8003820 <HAL_UART_RxCpltCallback+0xa0>
		{
			uint8_t tmp2 = 0x08;	// backspace
 80037e0:	2308      	movs	r3, #8
 80037e2:	72fb      	strb	r3, [r7, #11]
			uint8_t tmp1 = ' ';		// space
 80037e4:	2320      	movs	r3, #32
 80037e6:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 80037e8:	f107 010b 	add.w	r1, r7, #11
 80037ec:	2364      	movs	r3, #100	; 0x64
 80037ee:	2201      	movs	r2, #1
 80037f0:	483a      	ldr	r0, [pc, #232]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 80037f2:	f00a fbde 	bl	800dfb2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp1, 1, 100);
 80037f6:	f107 010a 	add.w	r1, r7, #10
 80037fa:	2364      	movs	r3, #100	; 0x64
 80037fc:	2201      	movs	r2, #1
 80037fe:	4837      	ldr	r0, [pc, #220]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 8003800:	f00a fbd7 	bl	800dfb2 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, &tmp2, 1, 100);
 8003804:	f107 010b 	add.w	r1, r7, #11
 8003808:	2364      	movs	r3, #100	; 0x64
 800380a:	2201      	movs	r2, #1
 800380c:	4833      	ldr	r0, [pc, #204]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 800380e:	f00a fbd0 	bl	800dfb2 <HAL_UART_Transmit>
 8003812:	e005      	b.n	8003820 <HAL_UART_RxCpltCallback+0xa0>
		}

	}else{																			// Echo back out whatever the user types!

		HAL_UART_Transmit(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1, 100);
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	2201      	movs	r2, #1
 8003818:	4931      	ldr	r1, [pc, #196]	; (80038e0 <HAL_UART_RxCpltCallback+0x160>)
 800381a:	4830      	ldr	r0, [pc, #192]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 800381c:	f00a fbc9 	bl	800dfb2 <HAL_UART_Transmit>
	}

	// Copy data into raw_input until a new line character is received, or the buffer overflows.
	// It is up to the consumer of this buffer to mark the struct as NOT ready again after they have copied the buffer data.
	if ( (consoleInput.ready == false) && (consoleInput.numReadBytes < 300) )		// Leaving space for one last 0 byte so this can be interpreted as a string!
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003822:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003826:	2b00      	cmp	r3, #0
 8003828:	d14d      	bne.n	80038c6 <HAL_UART_RxCpltCallback+0x146>
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800382c:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003830:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003834:	d247      	bcs.n	80038c6 <HAL_UART_RxCpltCallback+0x146>
	{
		// Got a new line character, this is the end of a valid command.
		// Mark buffer as ready.
		if (consoleInput.raw_byte == '\r' || consoleInput.raw_byte == '\n')
 8003836:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003838:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b0d      	cmp	r3, #13
 8003840:	d005      	beq.n	800384e <HAL_UART_RxCpltCallback+0xce>
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003844:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b0a      	cmp	r3, #10
 800384c:	d101      	bne.n	8003852 <HAL_UART_RxCpltCallback+0xd2>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_UART_RxCpltCallback+0xd4>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <HAL_UART_RxCpltCallback+0xe2>
		{
			consoleInput.ready = true;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8003860:	e031      	b.n	80038c6 <HAL_UART_RxCpltCallback+0x146>

		} else if (consoleInput.raw_byte == 0x08)						// Handling backspaces!
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003864:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b08      	cmp	r3, #8
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d014      	beq.n	80038a2 <HAL_UART_RxCpltCallback+0x122>
		{
			// Decrease the count of written bytes, and write a null byte in that position.
			if (consoleInput.numReadBytes > 0)
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800387a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 800387e:	2b00      	cmp	r3, #0
 8003880:	d021      	beq.n	80038c6 <HAL_UART_RxCpltCallback+0x146>
			{
				consoleInput.numReadBytes -= 1;
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003884:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800388e:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
				consoleInput.raw_input[consoleInput.numReadBytes] = 0;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 8003894:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8003898:	461a      	mov	r2, r3
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]
 80038a0:	e011      	b.n	80038c6 <HAL_UART_RxCpltCallback+0x146>
			}

		}else{
			consoleInput.raw_input[consoleInput.numReadBytes] = consoleInput.raw_byte;
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80038a4:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80038ac:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80038b0:	b2d9      	uxtb	r1, r3
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80038b4:	5499      	strb	r1, [r3, r2]
			consoleInput.numReadBytes++;
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80038b8:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 80038bc:	3301      	adds	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_UART_RxCpltCallback+0x158>)
 80038c2:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		}
	}

	// Set off another DMA transaction.
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)(&consoleInput.raw_byte), 1);
 80038c6:	2201      	movs	r2, #1
 80038c8:	4905      	ldr	r1, [pc, #20]	; (80038e0 <HAL_UART_RxCpltCallback+0x160>)
 80038ca:	4804      	ldr	r0, [pc, #16]	; (80038dc <HAL_UART_RxCpltCallback+0x15c>)
 80038cc:	f00a fc03 	bl	800e0d6 <HAL_UART_Receive_DMA>
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000049c 	.word	0x2000049c
 80038dc:	20000988 	.word	0x20000988
 80038e0:	200005c9 	.word	0x200005c9

080038e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fd04 	bl	80042fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fce2 	bl	80042d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ffeb 	bl	80038fc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EEC1Ev>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fce9 	bl	8004312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fd07 	bl	8004366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>:
      _Rb_tree() = default;
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fce5 	bl	800433c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>:
      map() = default;
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ffeb 	bl	8003962 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EEC1Ev>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>:
      ~map() = default;
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fcec 	bl	800437e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN7ConsoleC1Ev>:

Console::Console()
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ffab 	bl	8003916 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEEC1Ev>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3318      	adds	r3, #24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ffd9 	bl	800397c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEEC1Ev>
{
	loadCmnds();
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9f8 	bl	8003dc0 <_ZN7Console9loadCmndsEv>
}
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_ZN7ConsoleD1Ev>:

Console::~Console()
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3318      	adds	r3, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ffd5 	bl	8003996 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEED1Ev>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff9e 	bl	8003930 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEED1Ev>
{

}
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isCommand(std::string &cmd)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
	if(cmnds.count(cmd) < 1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fccb 	bl	80043a8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		return false;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	}else{
		return true;
 8003a26:	2301      	movs	r3, #1
	}
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::isTask(std::string &cmd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
	if(task_cmnds.count(cmd) < 1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fcd5 	bl	80043f0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	{
		return false;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	}else{
		return true;
 8003a5a:	2301      	movs	r3, #1
	}
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_ZN7Console4loopEv>:

void Console::loop()
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0a4      	sub	sp, #144	; 0x90
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	if (isNewCommandReady())
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fa41 	bl	8003ef4 <_ZN7Console17isNewCommandReadyEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a5 	beq.w	8003bc4 <_ZN7Console4loopEv+0x160>
	{
		std::string new_cmd(consoleInput.raw_input);
 8003a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f00f f979 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003a84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	494f      	ldr	r1, [pc, #316]	; (8003bcc <_ZN7Console4loopEv+0x168>)
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f00f fd92 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f00f f96d 	bl	8012d78 <_ZNSaIcED1Ev>
		memset(consoleInput.raw_input, 0, sizeof(consoleInput.raw_input));		// Wipe the raw buffer, get it ready to read new data.
 8003a9e:	f240 122d 	movw	r2, #301	; 0x12d
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4849      	ldr	r0, [pc, #292]	; (8003bcc <_ZN7Console4loopEv+0x168>)
 8003aa6:	f00f ff71 	bl	801398c <memset>
		consoleInput.numReadBytes = 0;
 8003aaa:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <_ZN7Console4loopEv+0x168>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
		consoleInput.ready = false;											// Green light for interrupt to start dumping data into raw_input buffer!
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <_ZN7Console4loopEv+0x168>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		if (new_cmd.length() > 0)
 8003aba:	f107 030c 	add.w	r3, r7, #12
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00f fbde 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d06f      	beq.n	8003bb4 <_ZN7Console4loopEv+0x150>
		{

			// The help command must be implemented here as I can't access console map from inside sys_cmnds.hpp
			if (new_cmd == "help")
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	493d      	ldr	r1, [pc, #244]	; (8003bd0 <_ZN7Console4loopEv+0x16c>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fbb0 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <_ZN7Console4loopEv+0x8a>
			{
				// Show all possible system commands
				printAllCommands();
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa14 	bl	8003f14 <_ZN7Console16printAllCommandsEv>
 8003aec:	e062      	b.n	8003bb4 <_ZN7Console4loopEv+0x150>
			}else if (!exec(new_cmd))
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f883 	bl	8003c00 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d056      	beq.n	8003bb4 <_ZN7Console4loopEv+0x150>
			{
				print("\'" + new_cmd + "\'");
 8003b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b0a:	f107 020c 	add.w	r2, r7, #12
 8003b0e:	4931      	ldr	r1, [pc, #196]	; (8003bd4 <_ZN7Console4loopEv+0x170>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fc91 	bl	8004438 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <_ZN7Console4loopEv+0x170>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fbb8 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fc50 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b34:	4618      	mov	r0, r3
 8003b36:	f00f fb95 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f00f fb90 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				println(" is an unrecognized command!");
 8003b44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00f f914 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003b4e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b56:	4920      	ldr	r1, [pc, #128]	; (8003bd8 <_ZN7Console4loopEv+0x174>)
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00f fd2d 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fc0c 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f00f fb79 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b76:	4618      	mov	r0, r3
 8003b78:	f00f f8fe 	bl	8012d78 <_ZNSaIcED1Ev>
				println("Use 'help' to show all valid terminal commands.");
 8003b7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b80:	4618      	mov	r0, r3
 8003b82:	f00f f8f8 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003b86:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003b8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b8e:	4913      	ldr	r1, [pc, #76]	; (8003bdc <_ZN7Console4loopEv+0x178>)
 8003b90:	4618      	mov	r0, r3
 8003b92:	f00f fd11 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fbf0 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003ba0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f00f fb5d 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003baa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f00f f8e2 	bl	8012d78 <_ZNSaIcED1Ev>
			}

		}

		printCursor();
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fdc9 	bl	800374c <_ZN7Console11printCursorEv>
		std::string new_cmd(consoleInput.raw_input);
 8003bba:	f107 030c 	add.w	r3, r7, #12
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00f fb50 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8003bc4:	bf00      	nop
 8003bc6:	3790      	adds	r7, #144	; 0x90
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	2000049c 	.word	0x2000049c
 8003bd0:	0801c2fc 	.word	0x0801c2fc
 8003bd4:	0801c304 	.word	0x0801c304
 8003bd8:	0801c308 	.word	0x0801c308
 8003bdc:	0801c328 	.word	0x0801c328

08003be0 <_ZN7Console5startEv>:

void Console::start()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	startUART();
 8003be8:	f7ff fbbc 	bl	8003364 <_ZL9startUARTv>
	printBanner();
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fd93 	bl	8003718 <_ZN7Console11printBannerEv>
	printCursor();
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fdaa 	bl	800374c <_ZN7Console11printCursorEv>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool Console::exec(std::string &cmd)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b09f      	sub	sp, #124	; 0x7c
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	std::string command = bfrspc(cmd); 		// Separate string at space
 8003c0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c0e:	6839      	ldr	r1, [r7, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f00f fc9d 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003c16:	f107 0320 	add.w	r3, r7, #32
 8003c1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fbf1 	bl	8003408 <_ZL6bfrspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f00f fb1a 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	if (isCommand(command) || isTask(command)) { 				// Check if input is even a command
 8003c30:	f107 0320 	add.w	r3, r7, #32
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fee1 	bl	80039fe <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
 8003c42:	f107 0320 	add.w	r3, r7, #32
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fef1 	bl	8003a30 <_ZN7Console6isTaskERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8093 	beq.w	8003d86 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x186>

		std::string args = aftspc(cmd); 	// Separate arguments from command
 8003c60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f00f fc72 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fbf2 	bl	8003460 <_ZL6aftspcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00f faef 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		if (isCommand(command))				// Its a system command.
 8003c86:	f107 0320 	add.w	r3, r7, #32
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff feb6 	bl	80039fe <_ZN7Console9isCommandERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d033      	beq.n	8003d00 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x100>
		{
			if (args.length() > 0) {
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f00f faef 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d014      	beq.n	8003cdc <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
				cmnds.find(command)->second.runb(args);	// Execute command with arguments.
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f107 0220 	add.w	r2, r7, #32
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fbe1 	bl	8004482 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fbe9 	bl	80044a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f107 0208 	add.w	r2, r7, #8
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4798      	blx	r3
 8003cda:	e04d      	b.n	8003d78 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				cmnds.find(command)->second.runa();		// Execute command without arguments.
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f107 0220 	add.w	r2, r7, #32
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fbcc 	bl	8004482 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>
 8003cea:	4603      	mov	r3, r0
 8003cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fbd4 	bl	80044a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4798      	blx	r3
 8003cfe:	e03b      	b.n	8003d78 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			}
		}else{

			// Its a task!
			if (args.length() > 0) {
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	4618      	mov	r0, r3
 8003d06:	f00f fabb 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x14c>
				task_cmnds.find(command)->second->consoleFuncb(args);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	f107 0220 	add.w	r2, r7, #32
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fbc9 	bl	80044bc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fbd1 	bl	80044da <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	f107 0108 	add.w	r1, r7, #8
 8003d46:	4618      	mov	r0, r3
 8003d48:	4790      	blx	r2
 8003d4a:	e015      	b.n	8003d78 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x178>
			} else {
				task_cmnds.find(command)->second->consoleFunca();
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3318      	adds	r3, #24
 8003d50:	f107 0220 	add.w	r2, r7, #32
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fbb0 	bl	80044bc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	677b      	str	r3, [r7, #116]	; 0x74
 8003d60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fbb8 	bl	80044da <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	3204      	adds	r2, #4
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	4790      	blx	r2
			}

		}

		return true;
 8003d78:	2401      	movs	r4, #1
		std::string args = aftspc(cmd); 	// Separate arguments from command
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f00f fa70 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d84:	e000      	b.n	8003d88 <_ZN7Console4execERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x188>

	} else {
		return false;
 8003d86:	2400      	movs	r4, #0
	std::string command = bfrspc(cmd); 		// Separate string at space
 8003d88:	f107 0320 	add.w	r3, r7, #32
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f00f fa69 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d92:	4623      	mov	r3, r4
	}
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	377c      	adds	r7, #124	; 0x7c
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd90      	pop	{r4, r7, pc}

08003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3318      	adds	r3, #24
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fa34 	bl	8003216 <_ZN7commandD1Ev>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f00f fa57 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_ZN7Console9loadCmndsEv>:

void Console::loadCmnds()
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b0db      	sub	sp, #364	; 0x16c
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	6018      	str	r0, [r3, #0]
	// Loading all commands, must be done manually for now.
	cmnds.insert( {echo.getName(),  echo} );
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681c      	ldr	r4, [r3, #0]
 8003dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd2:	4944      	ldr	r1, [pc, #272]	; (8003ee4 <_ZN7Console9loadCmndsEv+0x124>)
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fba4 	bl	8003522 <_ZN7command7getNameB5cxx11Ev>
 8003dda:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <_ZN7Console9loadCmndsEv+0x124>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fb86 	bl	80044f6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	f107 0210 	add.w	r2, r7, #16
 8003df2:	4621      	mov	r1, r4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fb9d 	bl	8004534 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ffcc 	bl	8003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00f fa2b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {clear.getName(), clear} );
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	681c      	ldr	r4, [r3, #0]
 8003e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e16:	4934      	ldr	r1, [pc, #208]	; (8003ee8 <_ZN7Console9loadCmndsEv+0x128>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fb82 	bl	8003522 <_ZN7command7getNameB5cxx11Ev>
 8003e1e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003e22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <_ZN7Console9loadCmndsEv+0x128>)
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb64 	bl	80044f6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003e2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e32:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003e36:	4621      	mov	r1, r4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fb7b 	bl	8004534 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003e3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ffaa 	bl	8003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003e48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f00f fa09 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {banner.getName(), banner} );
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	681c      	ldr	r4, [r3, #0]
 8003e56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e5a:	4924      	ldr	r1, [pc, #144]	; (8003eec <_ZN7Console9loadCmndsEv+0x12c>)
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fb60 	bl	8003522 <_ZN7command7getNameB5cxx11Ev>
 8003e62:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8003e66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e6a:	4a20      	ldr	r2, [pc, #128]	; (8003eec <_ZN7Console9loadCmndsEv+0x12c>)
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fb42 	bl	80044f6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003e72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e76:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fb59 	bl	8004534 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003e82:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ff88 	bl	8003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003e8c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00f f9e7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	cmnds.insert( {help.getName(), help} );
 8003e96:	1d3b      	adds	r3, r7, #4
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003e9e:	4914      	ldr	r1, [pc, #80]	; (8003ef0 <_ZN7Console9loadCmndsEv+0x130>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fb3e 	bl	8003522 <_ZN7command7getNameB5cxx11Ev>
 8003ea6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8003eaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <_ZN7Console9loadCmndsEv+0x130>)
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fb20 	bl	80044f6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>
 8003eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003eba:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fb37 	bl	8004534 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>
 8003ec6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ff66 	bl	8003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8003ed0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00f f9c5 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003eda:	bf00      	nop
 8003edc:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	200005f0 	.word	0x200005f0
 8003ee8:	20000610 	.word	0x20000610
 8003eec:	20000630 	.word	0x20000630
 8003ef0:	200005d0 	.word	0x200005d0

08003ef4 <_ZN7Console17isNewCommandReadyEv>:

bool Console::isNewCommandReady()
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	return consoleInput.ready;
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <_ZN7Console17isNewCommandReadyEv+0x1c>)
 8003efe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000049c 	.word	0x2000049c

08003f14 <_ZN7Console16printAllCommandsEv>:

void Console::printAllCommands()
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b0c5      	sub	sp, #276	; 0x114
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	6018      	str	r0, [r3, #0]
	println("System Commands:\tSystem Tasks:");
 8003f1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f22:	4618      	mov	r0, r3
 8003f24:	f00e ff27 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003f28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003f2c:	f107 0318 	add.w	r3, r7, #24
 8003f30:	49c6      	ldr	r1, [pc, #792]	; (800424c <_ZN7Console16printAllCommandsEv+0x338>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f00f fb40 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003f38:	f107 0318 	add.w	r3, r7, #24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fa1f 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f00f f98c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f50:	4618      	mov	r0, r3
 8003f52:	f00e ff11 	bl	8012d78 <_ZNSaIcED1Ev>

	unsigned int small_cnt = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	if (cmnds.size() >= task_cmnds.size())
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fafb 	bl	800455c <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 8003f66:	4604      	mov	r4, r0
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fb01 	bl	8004576 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	429c      	cmp	r4, r3
 8003f78:	bf2c      	ite	cs
 8003f7a:	2301      	movcs	r3, #1
 8003f7c:	2300      	movcc	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80ad 	beq.w	80040e0 <_ZN7Console16printAllCommandsEv+0x1cc>
	{
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fb00 	bl	8004590 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 8003f90:	4603      	mov	r3, r0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fb06 	bl	80045aa <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fb09 	bl	80045c4 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8144 	beq.w	8004242 <_ZN7Console16printAllCommandsEv+0x32e>
		{
			print(it->first);
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb29 	bl	8004616 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f00f fabe 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003fd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f9f9 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f00f f93e 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			print("\t\t\t");
 8003fe8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fec:	4618      	mov	r0, r3
 8003fee:	f00e fec2 	bl	8012d76 <_ZNSaIcEC1Ev>
 8003ff2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ff6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ffa:	4995      	ldr	r1, [pc, #596]	; (8004250 <_ZN7Console16printAllCommandsEv+0x33c>)
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00f fadb 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff f9e2 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800400c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004010:	4618      	mov	r0, r3
 8004012:	f00f f927 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004016:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800401a:	4618      	mov	r0, r3
 800401c:	f00e feac 	bl	8012d78 <_ZNSaIcED1Ev>

			if (small_cnt < task_cmnds.size())
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3318      	adds	r3, #24
 8004026:	4618      	mov	r0, r3
 8004028:	f000 faa5 	bl	8004576 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>
 800402c:	4602      	mov	r2, r0
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004032:	4293      	cmp	r3, r2
 8004034:	bf34      	ite	cc
 8004036:	2301      	movcc	r3, #1
 8004038:	2300      	movcs	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d027      	beq.n	8004090 <_ZN7Console16printAllCommandsEv+0x17c>
			{
				auto tsk_it = task_cmnds.cbegin();
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3318      	adds	r3, #24
 8004046:	4618      	mov	r0, r3
 8004048:	f000 faf3 	bl	8004632 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 800404c:	4602      	mov	r2, r0
 800404e:	f107 0310 	add.w	r3, r7, #16
 8004052:	601a      	str	r2, [r3, #0]
				std::advance(tsk_it, small_cnt);
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800405c:	4618      	mov	r0, r3
 800405e:	f000 faf5 	bl	800464c <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>
				print(tsk_it->first);
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fb03 	bl	8004672 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f00f fa6a 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800407c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f9a5 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800408a:	4618      	mov	r0, r3
 800408c:	f00f f8ea 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

			println("");
 8004090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004094:	4618      	mov	r0, r3
 8004096:	f00e fe6e 	bl	8012d76 <_ZNSaIcEC1Ev>
 800409a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800409e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040a2:	496c      	ldr	r1, [pc, #432]	; (8004254 <_ZN7Console16printAllCommandsEv+0x340>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00f fa87 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80040aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff f966 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80040b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040b8:	4618      	mov	r0, r3
 80040ba:	f00f f8d3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80040be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00e fe58 	bl	8012d78 <_ZNSaIcED1Ev>
			small_cnt++;
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	3301      	adds	r3, #1
 80040ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = cmnds.cbegin(); it != cmnds.cend(); it++)
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fa87 	bl	80045ec <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>
 80040de:	e759      	b.n	8003f94 <_ZN7Console16printAllCommandsEv+0x80>
		}
	}else{							// Task list is bigger than command list.

		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 faa3 	bl	8004632 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3318      	adds	r3, #24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fac7 	bl	800468e <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>
 8004100:	4603      	mov	r3, r0
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004106:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fac9 	bl	80046a8 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8092 	beq.w	8004242 <_ZN7Console16printAllCommandsEv+0x32e>
		{
			if (small_cnt < cmnds.size())
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fa1a 	bl	800455c <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>
 8004128:	4602      	mov	r2, r0
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412e:	4293      	cmp	r3, r2
 8004130:	bf34      	ite	cc
 8004132:	2301      	movcc	r3, #1
 8004134:	2300      	movcs	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d043      	beq.n	80041c4 <_ZN7Console16printAllCommandsEv+0x2b0>
			{
				auto cmnd_it = cmnds.cbegin();
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fa25 	bl	8004590 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>
 8004146:	4602      	mov	r2, r0
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	601a      	str	r2, [r3, #0]
				std::advance(cmnd_it, small_cnt);
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8004156:	4618      	mov	r0, r3
 8004158:	f000 facf 	bl	80046fa <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>
				print(cmnd_it->first);
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa58 	bl	8004616 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f00f f9ed 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff f928 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004184:	4618      	mov	r0, r3
 8004186:	f00f f86d 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				print("\t\t\t");
 800418a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800418e:	4618      	mov	r0, r3
 8004190:	f00e fdf1 	bl	8012d76 <_ZNSaIcEC1Ev>
 8004194:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004198:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800419c:	492c      	ldr	r1, [pc, #176]	; (8004250 <_ZN7Console16printAllCommandsEv+0x33c>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f00f fa0a 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80041a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff f911 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80041ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80041b2:	4618      	mov	r0, r3
 80041b4:	f00f f856 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041bc:	4618      	mov	r0, r3
 80041be:	f00e fddb 	bl	8012d78 <_ZNSaIcED1Ev>
 80041c2:	e01b      	b.n	80041fc <_ZN7Console16printAllCommandsEv+0x2e8>
			}else{
				print("\t\t\t\t");
 80041c4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f00e fdd4 	bl	8012d76 <_ZNSaIcEC1Ev>
 80041ce:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80041d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041d6:	4920      	ldr	r1, [pc, #128]	; (8004258 <_ZN7Console16printAllCommandsEv+0x344>)
 80041d8:	4618      	mov	r0, r3
 80041da:	f00f f9ed 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80041de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f8f4 	bl	80033d0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80041e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00f f839 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f00e fdbe 	bl	8012d78 <_ZNSaIcED1Ev>
			}

			println(it->first);
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa36 	bl	8004672 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f00f f99d 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004216:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f8b0 	bl	8003380 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004220:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004224:	4618      	mov	r0, r3
 8004226:	f00f f81d 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			small_cnt++;
 800422a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422e:	3301      	adds	r3, #1
 8004230:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		for (auto it = task_cmnds.cbegin(); it != task_cmnds.cend(); it++)
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fa48 	bl	80046d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>
 8004240:	e758      	b.n	80040f4 <_ZN7Console16printAllCommandsEv+0x1e0>
		}

	}
}
 8004242:	bf00      	nop
 8004244:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004248:	46bd      	mov	sp, r7
 800424a:	bd90      	pop	{r4, r7, pc}
 800424c:	0801c358 	.word	0x0801c358
 8004250:	0801c378 	.word	0x0801c378
 8004254:	0801c2c8 	.word	0x0801c2c8
 8004258:	0801c37c 	.word	0x0801c37c

0800425c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>:
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4618      	mov	r0, r3
 8004268:	f00e fffc 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <_ZN7Console16addCommandByTaskEP4Task>:
{
	cmnds.insert( {name, command(name, pntra, pntrb)} );
}

void Console::addCommandByTask(Task* tsk)
{
 8004276:	b590      	push	{r4, r7, lr}
 8004278:	b093      	sub	sp, #76	; 0x4c
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	// Call the addCommand function.
	task_cmnds.insert( {tsk->getName(), tsk} );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0418 	add.w	r4, r3, #24
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff f938 	bl	8003504 <_ZN4Task7getNameB5cxx11Ev>
 8004294:	463a      	mov	r2, r7
 8004296:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fa3e 	bl	8004720 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	f107 0214 	add.w	r2, r7, #20
 80042ac:	4621      	mov	r1, r4
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa51 	bl	8004756 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ffcf 	bl	800425c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 80042be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042c2:	4618      	mov	r0, r3
 80042c4:	f00e ffce 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80042c8:	bf00      	nop
 80042ca:	374c      	adds	r7, #76	; 0x4c
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd90      	pop	{r4, r7, pc}

080042d0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa50 	bl	800477e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa58 	bl	8004796 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f808 	bl	8003300 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa52 	bl	80047ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa70 	bl	8004800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004320:	4603      	mov	r3, r0
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fa4c 	bl	80047c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fad9 	bl	80038e4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE13_Rb_tree_implISD_Lb1EED1Ev>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fa67 	bl	8004818 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fa22 	bl	8004796 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe ffd2 	bl	8003300 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa5e 	bl	8004830 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa7c 	bl	8004884 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 800438c:	4603      	mov	r3, r0
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa58 	bl	8004846 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fad6 	bl	800394a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE13_Rb_tree_implISE_Lb1EED1Ev>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa70 	bl	800489c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 80043bc:	4603      	mov	r3, r0
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 faa6 	bl	8004914 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	f107 020c 	add.w	r2, r7, #12
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 faad 	bl	8004936 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x3e>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE5countERSA_+0x40>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_>:
      count(const key_type& __x) const
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 faad 	bl	800495e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 8004404:	4603      	mov	r3, r0
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fae3 	bl	80049d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004410:	4603      	mov	r3, r0
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	f107 020c 	add.w	r2, r7, #12
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 faea 	bl	80049f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x3e>
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE5countERSB_+0x40>
 800442e:	2301      	movs	r3, #1
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      __glibcxx_requires_string(__lhs);
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      const __size_type __len = _Traits::length(__lhs);
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	f7fe ff80 	bl	800334a <_ZNSt11char_traitsIcE6lengthEPKc>
 800444a:	6178      	str	r0, [r7, #20]
      __string_type __str;
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f00e fee8 	bl	8013222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      __str.reserve(__len + __rhs.size());
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f00e ff12 	bl	801327c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
 800445e:	4619      	mov	r1, r3
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f00e ff17 	bl	8013294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f00f f820 	bl	80134b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f00f f812 	bl	801349c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8004478:	bf00      	nop
    }
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4findERSA_>:
      find(const key_type& __x)
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6839      	ldr	r1, [r7, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fac5 	bl	8004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 faf3 	bl	8004a98 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4findERSB_>:
      find(const key_type& __x)
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 faf2 	bl	8004ab4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZNKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb20 	bl	8004b2c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1IS5_RS7_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004502:	68fc      	ldr	r4, [r7, #12]
 8004504:	68b8      	ldr	r0, [r7, #8]
 8004506:	f000 fb1f 	bl	8004b48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800450a:	4603      	mov	r3, r0
 800450c:	4619      	mov	r1, r3
 800450e:	4620      	mov	r0, r4
 8004510:	f00e fe8e 	bl	8013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f103 0418 	add.w	r4, r3, #24
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fb1f 	bl	8004b5e <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>
 8004520:	4603      	mov	r3, r0
 8004522:	4619      	mov	r1, r3
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff f81e 	bl	8003566 <_ZN7commandC1ERKS_>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}

08004534 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6insertEOSB_>:
      insert(value_type&& __x)
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 8004540:	68bc      	ldr	r4, [r7, #8]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb16 	bl	8004b74 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4621      	mov	r1, r4
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fb1b 	bl	8004b8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bd90      	pop	{r4, r7, pc}

0800455c <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fb5e 	bl	8004c28 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>
 800456c:	4603      	mov	r3, r0
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
      { return _M_t.size(); }
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb5d 	bl	8004c40 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>
 8004586:	4603      	mov	r3, r0
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE6cbeginEv>:
      cbegin() const noexcept
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fb5c 	bl	8004c58 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandSt4lessIS5_ESaISt4pairIKS5_S6_EEE4cendEv>:
      cend() const noexcept
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f9ad 	bl	8004914 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f00e fbfb 	bl	8012dfc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
	return __tmp;
 800460c:	68fb      	ldr	r3, [r7, #12]
      }
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb29 	bl	8004c7a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8004628:	4603      	mov	r3, r0
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6cbeginEv>:
      cbegin() const noexcept
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fb2a 	bl	8004c96 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fb2c 	bl	8004cb8 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>
 8004660:	4622      	mov	r2, r4
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb31 	bl	8004ccc <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bd90      	pop	{r4, r7, pc}

08004672 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb4d 	bl	8004d1e <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8004684:	4603      	mov	r3, r0
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <_ZNKSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE4cendEv>:
      cend() const noexcept
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f99c 	bl	80049d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 800469e:	4603      	mov	r3, r0
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f00e fb89 	bl	8012dfc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]
	return __tmp;
 80046f0:	68fb      	ldr	r3, [r7, #12]
      }
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZSt7advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 80046fa:	b590      	push	{r4, r7, lr}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fb16 	bl	8004d3a <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>
 800470e:	4622      	mov	r2, r4
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fb1b 	bl	8004d4e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>
    }
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bd90      	pop	{r4, r7, pc}

08004720 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1IS5_RS8_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800472c:	68fc      	ldr	r4, [r7, #12]
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 fa0a 	bl	8004b48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004734:	4603      	mov	r3, r0
 8004736:	4619      	mov	r1, r3
 8004738:	4620      	mov	r0, r4
 800473a:	f00e fd79 	bl	8013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fb2e 	bl	8004da0 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>
 8004744:	4603      	mov	r3, r0
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	619a      	str	r2, [r3, #24]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}

08004756 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskSt4lessIS5_ESaISt4pairIKS5_S7_EEE6insertEOSC_>:
      insert(value_type&& __x)
 8004756:	b590      	push	{r4, r7, lr}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
      { return _M_t._M_insert_unique(std::move(__x)); }
 8004762:	68bc      	ldr	r4, [r7, #8]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb26 	bl	8004db6 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4621      	mov	r1, r4
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb2b 	bl	8004dcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}

0800477e <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fb6f 	bl	8004e6a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <_ZNSt20_Rb_tree_key_compareISt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      _Rb_tree_key_compare()
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
      { }
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0x36>
	{
	  _M_erase(_S_right(__x));
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f000 fb54 	bl	8004e80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 80047d8:	4603      	mov	r3, r0
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fff0 	bl	80047c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E>
	  _Link_type __y = _S_left(__x);
 80047e2:	6838      	ldr	r0, [r7, #0]
 80047e4:	f000 fb58 	bl	8004e98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 80047e8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb5f 	bl	8004eb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>
	  __x = __y;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80047f6:	e7e9      	b.n	80047cc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E+0xa>
	}
    }
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <_ZNSaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fb56 	bl	8004ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEED1Ev>:
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0x36>
	  _M_erase(_S_right(__x));
 8004856:	6838      	ldr	r0, [r7, #0]
 8004858:	f000 fb46 	bl	8004ee8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 800485c:	4603      	mov	r3, r0
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff fff0 	bl	8004846 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E>
	  _Link_type __y = _S_left(__x);
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f000 fb4a 	bl	8004f00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 800486c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb51 	bl	8004f18 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>
	  __x = __y;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800487a:	e7e9      	b.n	8004850 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E+0xa>
    }
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fb47 	bl	8004f3a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80048ac:	4604      	mov	r4, r0
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb4f 	bl	8004f52 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80048b4:	4602      	mov	r2, r0
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	4621      	mov	r1, r4
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb55 	bl	8004f6a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>
 80048c0:	4603      	mov	r3, r0
 80048c2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f825 	bl	8004914 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 80048ca:	4603      	mov	r3, r0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	f107 020c 	add.w	r2, r7, #12
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f82c 	bl	8004936 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 80048de:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80048e4:	687c      	ldr	r4, [r7, #4]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fb6f 	bl	8004fcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80048ee:	4603      	mov	r3, r0
 80048f0:	461a      	mov	r2, r3
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	4620      	mov	r0, r4
 80048f6:	f000 fb75 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f807 	bl	8004914 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004906:	4603      	mov	r3, r0
 8004908:	e000      	b.n	800490c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 800490a:	68bb      	ldr	r3, [r7, #8]
    }
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}

08004914 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fb6b 	bl	8005002 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800495e:	b590      	push	{r4, r7, lr}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb59 	bl	8005020 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 800496e:	4604      	mov	r4, r0
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb61 	bl	8005038 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004976:	4602      	mov	r2, r0
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4621      	mov	r1, r4
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fb67 	bl	8005050 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>
 8004982:	4603      	mov	r3, r0
 8004984:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f825 	bl	80049d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 800498c:	4603      	mov	r3, r0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	f107 020c 	add.w	r2, r7, #12
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f82c 	bl	80049f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 80049a0:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 80049a6:	687c      	ldr	r4, [r7, #4]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb81 	bl	80050b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 fb14 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f807 	bl	80049d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e000      	b.n	80049ce <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 80049cc:	68bb      	ldr	r3, [r7, #8]
    }
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd90      	pop	{r4, r7, pc}

080049d6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	1d1a      	adds	r2, r3, #4
 80049e2:	f107 030c 	add.w	r3, r7, #12
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fb6e 	bl	80050ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fee8 	bl	8004800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 8004a30:	4604      	mov	r4, r0
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb58 	bl	80050e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fb5e 	bl	8005100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>
 8004a44:	4603      	mov	r3, r0
 8004a46:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb8a 	bl	8005162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	f107 020c 	add.w	r2, r7, #12
 8004a56:	f107 0308 	add.w	r3, r7, #8
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb91 	bl	8005184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 8004a62:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004a68:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 faad 	bl	8004fcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fab3 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb6c 	bl	8005162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	e000      	b.n	8004a90 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4findERS7_+0x70>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
    }
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd90      	pop	{r4, r7, pc}

08004a98 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr()
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3310      	adds	r3, #16
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fb81 	bl	80051ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fee0 	bl	8004884 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fb7c 	bl	80051c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8004acc:	4602      	mov	r2, r0
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fb82 	bl	80051dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fbae 	bl	800523e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	f107 020c 	add.w	r2, r7, #12
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fbb5 	bl	8005260 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 8004af6:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x64>
	      || _M_impl._M_key_compare(__k,
 8004afc:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8004afe:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fad6 	bl	80050b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 fa69 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb90 	bl	800523e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e000      	b.n	8004b24 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_+0x70>
 8004b22:	68bb      	ldr	r3, [r7, #8]
    }
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr()
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3310      	adds	r3, #16
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fba5 	bl	8005288 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <_ZSt7forwardIR7commandEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004b8a:	b5b0      	push	{r4, r5, r7, lr}
 8004b8c:	b08e      	sub	sp, #56	; 0x38
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004b96:	f107 031c 	add.w	r3, r7, #28
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fc04 	bl	80053aa <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 8004ba2:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fb78 	bl	80052a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d022      	beq.n	8004bfc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004bb6:	f107 0310 	add.w	r3, r7, #16
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fc00 	bl	80053c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8004bc2:	697c      	ldr	r4, [r7, #20]
 8004bc4:	69bd      	ldr	r5, [r7, #24]
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fc0a 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f107 0310 	add.w	r3, r7, #16
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4621      	mov	r1, r4
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	f000 fc0b 	bl	80053f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>
 8004be0:	4603      	mov	r3, r0
 8004be2:	623b      	str	r3, [r7, #32]
		      true);
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bea:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004bee:	f107 0320 	add.w	r3, r7, #32
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fc47 	bl	8005488 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
 8004bfa:	e011      	b.n	8004c20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE16_M_insert_uniqueIS9_EES6_ISt17_Rb_tree_iteratorIS9_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fc58 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004c10:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8004c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fc34 	bl	8005488 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>
    }
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	3730      	adds	r7, #48	; 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bdb0      	pop	{r4, r5, r7, pc}

08004c28 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9c9 	bl	8005002 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>:
      _M_valptr() const
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3310      	adds	r3, #16
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fc26 	bl	80054d8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_header._M_left); }
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	f107 030c 	add.w	r3, r7, #12
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fa0e 	bl	80050ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEENSt15iterator_traitsIT_E17iterator_categoryERKSE_>:
    __iterator_category(const _Iter&)
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dd0d      	ble.n	8004cfa <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	60ba      	str	r2, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fbfc 	bl	80054f0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>
        while (__n--)
 8004cf8:	e7f1      	b.n	8004cde <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	60ba      	str	r2, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fbff 	bl	8005512 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
        while (__n++)
 8004d14:	e7f1      	b.n	8004cfa <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>:
      _M_valptr() const
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3310      	adds	r3, #16
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fc02 	bl	8005534 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <_ZSt19__iterator_categoryISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEENSt15iterator_traitsIT_E17iterator_categoryERKSD_>:
    __iterator_category(const _Iter&)
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag>:
    __advance(_BidirectionalIterator& __i, _Distance __n,
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	713a      	strb	r2, [r7, #4]
      if (__n > 0)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd0d      	ble.n	8004d7c <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
        while (__n--)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	60ba      	str	r2, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  ++__i;
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fbe9 	bl	800554c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>
        while (__n--)
 8004d7a:	e7f1      	b.n	8004d60 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x12>
        while (__n++)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	60ba      	str	r2, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x4a>
	  --__i;
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fbec 	bl	800556e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
        while (__n++)
 8004d96:	e7f1      	b.n	8004d7c <_ZSt9__advanceISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEiEvRT_T0_St26bidirectional_iterator_tag+0x2e>
    }
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <_ZSt7forwardIRP4TaskEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <_ZSt4moveIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEONSt16remove_referenceIT_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b08e      	sub	sp, #56	; 0x38
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 8004dd8:	f107 031c 	add.w	r3, r7, #28
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fc5b 	bl	800569a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 8004de4:	4602      	mov	r2, r0
      pair<_Base_ptr, _Base_ptr> __res
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fbcf 	bl	8005590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>
      if (__res.second)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 8004df8:	f107 0310 	add.w	r3, r7, #16
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fc57 	bl	80056b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>
	  return _Res(_M_insert_(__res.first, __res.second,
 8004e04:	697c      	ldr	r4, [r7, #20]
 8004e06:	69bd      	ldr	r5, [r7, #24]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fc61 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f107 0310 	add.w	r3, r7, #16
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f000 fc62 	bl	80056e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
 8004e22:	4603      	mov	r3, r0
 8004e24:	623b      	str	r3, [r7, #32]
		      true);
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e2c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8004e30:	f107 0320 	add.w	r3, r7, #32
 8004e34:	4619      	mov	r1, r3
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fc9e 	bl	8005778 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
 8004e3c:	e011      	b.n	8004e62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE16_M_insert_uniqueISA_EES6_ISt17_Rb_tree_iteratorISA_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fcaf 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e52:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8004e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fc8b 	bl	8005778 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>
    }
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	3730      	adds	r7, #48	; 0x30
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdb0      	pop	{r4, r5, r7, pc}

08004e6a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fc83 	bl	80057c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>
	_M_put_node(__p);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fc94 	bl	80057f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>
      }
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEC1Ev>:
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc76 	bl	8005816 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>
	_M_put_node(__p);
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fc87 	bl	8005840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>
      }
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
      }
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004f6a:	b590      	push	{r4, r7, lr}
 8004f6c:	b087      	sub	sp, #28
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004f7e:	68fc      	ldr	r4, [r7, #12]
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f000 fc6f 	bl	8005864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004f86:	4603      	mov	r3, r0
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 f829 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f083 0301 	eor.w	r3, r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	68b8      	ldr	r0, [r7, #8]
 8004fa4:	f000 fc71 	bl	800588a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8004fa8:	60b8      	str	r0, [r7, #8]
 8004faa:	e7e5      	b.n	8004f78 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f000 fc78 	bl	80058a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8004fb2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8004fb4:	e7e0      	b.n	8004f78 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS9_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f820 	bl	8005002 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>
 8004fc2:	697b      	ldr	r3, [r7, #20]
    }
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd90      	pop	{r4, r7, pc}

08004fcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fc45 	bl	8005864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f000 fc61 	bl	80058ba <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
      }
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8005064:	68fc      	ldr	r4, [r7, #12]
 8005066:	68b8      	ldr	r0, [r7, #8]
 8005068:	f000 fc37 	bl	80058da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 800506c:	4603      	mov	r3, r0
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	4620      	mov	r0, r4
 8005074:	f7ff ffb6 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005078:	4603      	mov	r3, r0
 800507a:	f083 0301 	eor.w	r3, r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	68b8      	ldr	r0, [r7, #8]
 800508a:	f000 fc39 	bl	8005900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>
 800508e:	60b8      	str	r0, [r7, #8]
 8005090:	e7e5      	b.n	800505e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f000 fc40 	bl	8005918 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8005098:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800509a:	e7e0      	b.n	800505e <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPKSt13_Rb_tree_nodeISA_EPKSt18_Rb_tree_node_baseRS7_+0xe>
      return const_iterator(__y);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f811 	bl	80050ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>
 80050a8:	697b      	ldr	r3, [r7, #20]
    }
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}

080050b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fc0d 	bl	80058da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8005114:	68fc      	ldr	r4, [r7, #12]
 8005116:	68b8      	ldr	r0, [r7, #8]
 8005118:	f000 fba4 	bl	8005864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 800511c:	4603      	mov	r3, r0
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	4620      	mov	r0, r4
 8005124:	f7ff ff5e 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005128:	4603      	mov	r3, r0
 800512a:	f083 0301 	eor.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	68b8      	ldr	r0, [r7, #8]
 800513a:	f7ff fead 	bl	8004e98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 800513e:	60b8      	str	r0, [r7, #8]
 8005140:	e7e5      	b.n	800510e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 8005142:	68b8      	ldr	r0, [r7, #8]
 8005144:	f7ff fe9c 	bl	8004e80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005148:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800514a:	e7e0      	b.n	800510e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS9_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f9b1 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8005158:	697b      	ldr	r3, [r7, #20]
    }
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd90      	pop	{r4, r7, pc}

08005162 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f9a0 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fbbb 	bl	8005930 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80051f0:	68fc      	ldr	r4, [r7, #12]
 80051f2:	68b8      	ldr	r0, [r7, #8]
 80051f4:	f000 fb71 	bl	80058da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80051f8:	4603      	mov	r3, r0
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff fef0 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005204:	4603      	mov	r3, r0
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d006      	beq.n	800521e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0x42>
	  __y = __x, __x = _S_left(__x);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	68b8      	ldr	r0, [r7, #8]
 8005216:	f7ff fe73 	bl	8004f00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 800521a:	60b8      	str	r0, [r7, #8]
 800521c:	e7e5      	b.n	80051ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
	  __x = _S_right(__x);
 800521e:	68b8      	ldr	r0, [r7, #8]
 8005220:	f7ff fe62 	bl	8004ee8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005224:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8005226:	e7e0      	b.n	80051ea <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS7_+0xe>
      return iterator(__y);
 8005228:	f107 0314 	add.w	r3, r7, #20
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fabb 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8005234:	697b      	ldr	r3, [r7, #20]
    }
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}

0800523e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	f107 030c 	add.w	r3, r7, #12
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 faaa 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb58 	bl	8005946 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8005296:	4603      	mov	r3, r0
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b08b      	sub	sp, #44	; 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f7ff faa7 	bl	8004800 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_M_beginEv>
 80052b2:	4603      	mov	r3, r0
 80052b4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f7ff ff16 	bl	80050e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 80052bc:	4603      	mov	r3, r0
 80052be:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d020      	beq.n	800530e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80052d0:	68bc      	ldr	r4, [r7, #8]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fac5 	bl	8005864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff fe7f 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x60>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fdce 	bl	8004e98 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPSt18_Rb_tree_node_base>
 80052fc:	4603      	mov	r3, r0
 80052fe:	e004      	b.n	800530a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x6a>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fdbc 	bl	8004e80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPSt18_Rb_tree_node_base>
 8005308:	4603      	mov	r3, r0
 800530a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800530c:	e7db      	b.n	80052c6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	f107 0310 	add.w	r3, r7, #16
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f8cf 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800531c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01d      	beq.n	8005360 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	f000 fb19 	bl	800595c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>
 800532a:	4603      	mov	r3, r0
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	f107 021c 	add.w	r2, r7, #28
 8005332:	f107 0310 	add.w	r3, r7, #16
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ff23 	bl	8005184 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEESC_>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8005344:	f107 0214 	add.w	r2, r7, #20
 8005348:	f107 0318 	add.w	r3, r7, #24
 800534c:	4619      	mov	r1, r3
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fb15 	bl	800597e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 8005354:	e025      	b.n	80053a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8005356:	f107 0310 	add.w	r3, r7, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fb28 	bl	80059b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005360:	68bc      	ldr	r4, [r7, #8]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fe31 	bl	8004fcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800536a:	4603      	mov	r3, r0
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4619      	mov	r1, r3
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fe37 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 800537c:	f107 0214 	add.w	r2, r7, #20
 8005380:	f107 0318 	add.w	r3, r7, #24
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 faf9 	bl	800597e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>
 800538c:	e009      	b.n	80053a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	f107 0220 	add.w	r2, r7, #32
 8005396:	f107 0310 	add.w	r3, r7, #16
 800539a:	4619      	mov	r1, r3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fb18 	bl	80059d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	372c      	adds	r7, #44	; 0x2c
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}

080053aa <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>:
  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeC1ERSF_>:
	_Alloc_node(_Rb_tree& __t)
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80053f6:	b5b0      	push	{r4, r5, r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d11a      	bne.n	8005440 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fe6c 	bl	80050e8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_M_endEv>
 8005410:	4602      	mov	r2, r0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005418:	68fc      	ldr	r4, [r7, #12]
 800541a:	f107 0310 	add.w	r3, r7, #16
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ffc2 	bl	80053aa <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERS9_>
 8005426:	4605      	mov	r5, r0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fdcf 	bl	8004fcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800542e:	4603      	mov	r3, r0
 8005430:	461a      	mov	r2, r3
 8005432:	4629      	mov	r1, r5
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff fdd5 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x4e>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE10_M_insert_IS9_NSF_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_EPSt18_Rb_tree_node_baseSL_OT_RT0_+0x50>
 8005444:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005446:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005448:	6838      	ldr	r0, [r7, #0]
 800544a:	f7ff ffc9 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 800544e:	4603      	mov	r3, r0
 8005450:	4619      	mov	r1, r3
 8005452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005454:	f000 fad3 	bl	80059fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>
 8005458:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800545e:	7ff8      	ldrb	r0, [r7, #31]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	f00d fce1 	bl	8012e2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	69b9      	ldr	r1, [r7, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f81e 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 800547e:	697b      	ldr	r3, [r7, #20]
      }
 8005480:	4618      	mov	r0, r3
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bdb0      	pop	{r4, r5, r7, pc}

08005488 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEbEC1ISA_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005494:	68b8      	ldr	r0, [r7, #8]
 8005496:	f000 fac6 	bl	8005a26 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>
 800549a:	4602      	mov	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 faca 	bl	8005a3c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80054a8:	4603      	mov	r3, r0
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	711a      	strb	r2, [r3, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fab6 	bl	8005a52 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f00d fc7d 	bl	8012dfc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8005502:	4602      	mov	r2, r0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]
	return *this;
 8005508:	687b      	ldr	r3, [r7, #4]
      }
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f00d fc81 	bl	8012e26 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
	return *this;
 800552a:	687b      	ldr	r3, [r7, #4]
      }
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa93 	bl	8005a68 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>
 8005542:	4603      	mov	r3, r0
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f00d fc4f 	bl	8012dfc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 800555e:	4602      	mov	r2, r0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
	return *this;
 8005564:	687b      	ldr	r3, [r7, #4]
      }
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f00d fc53 	bl	8012e26 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>
 8005580:	4602      	mov	r2, r0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
	return *this;
 8005586:	687b      	ldr	r3, [r7, #4]
      }
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b08b      	sub	sp, #44	; 0x2c
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f7ff f971 	bl	8004884 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_beginEv>
 80055a2:	4603      	mov	r3, r0
 80055a4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f7ff fe0c 	bl	80051c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 80055ac:	4603      	mov	r3, r0
 80055ae:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6e>
	  __y = __x;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80055c0:	68bc      	ldr	r4, [r7, #8]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f988 	bl	80058da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7ff fd07 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80055dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x60>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fc8a 	bl	8004f00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPSt18_Rb_tree_node_base>
 80055ec:	4603      	mov	r3, r0
 80055ee:	e004      	b.n	80055fa <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x6a>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fc78 	bl	8004ee8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPSt18_Rb_tree_node_base>
 80055f8:	4603      	mov	r3, r0
 80055fa:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80055fc:	e7db      	b.n	80055b6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x26>
      iterator __j = iterator(__y);
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f8cf 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800560c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01d      	beq.n	8005650 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xc0>
	  if (__j == begin())
 8005614:	68b8      	ldr	r0, [r7, #8]
 8005616:	f000 fa32 	bl	8005a7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>
 800561a:	4603      	mov	r3, r0
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	f107 021c 	add.w	r2, r7, #28
 8005622:	f107 0310 	add.w	r3, r7, #16
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fe19 	bl	8005260 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEESD_>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xb6>
	    return _Res(__x, __y);
 8005634:	f107 0214 	add.w	r2, r7, #20
 8005638:	f107 0318 	add.w	r3, r7, #24
 800563c:	4619      	mov	r1, r3
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fa2e 	bl	8005aa0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 8005644:	e025      	b.n	8005692 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
	    --__j;
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa41 	bl	8005ad2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8005650:	68bc      	ldr	r4, [r7, #8]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fd2c 	bl	80050b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800565a:	4603      	mov	r3, r0
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff fcbf 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0xee>
	return _Res(__x, __y);
 800566c:	f107 0214 	add.w	r2, r7, #20
 8005670:	f107 0318 	add.w	r3, r7, #24
 8005674:	4619      	mov	r1, r3
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa12 	bl	8005aa0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>
 800567c:	e009      	b.n	8005692 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_+0x102>
      return _Res(__j._M_node, 0);
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	f107 0220 	add.w	r2, r7, #32
 8005686:	f107 0310 	add.w	r3, r7, #16
 800568a:	4619      	mov	r1, r3
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f9a0 	bl	80059d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	372c      	adds	r7, #44	; 0x2c
 8005696:	46bd      	mov	sp, r7
 8005698:	bd90      	pop	{r4, r7, pc}

0800569a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>:
      operator()(_Pair& __x) const
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeC1ERSG_>:
	_Alloc_node(_Rb_tree& __t)
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80056e6:	b5b0      	push	{r4, r5, r7, lr}
 80056e8:	b088      	sub	sp, #32
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11a      	bne.n	8005730 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fd62 	bl	80051c4 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_M_endEv>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8005708:	68fc      	ldr	r4, [r7, #12]
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ffc2 	bl	800569a <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERSA_>
 8005716:	4605      	mov	r5, r0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fcca 	bl	80050b2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	4629      	mov	r1, r5
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff fc5d 	bl	8004fe4 <_ZNKSt4lessINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEclERKS5_S8_>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4e>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE10_M_insert_ISA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x50>
 8005734:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8005736:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8005738:	6838      	ldr	r0, [r7, #0]
 800573a:	f7ff ffc9 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 800573e:	4603      	mov	r3, r0
 8005740:	4619      	mov	r1, r3
 8005742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005744:	f000 f9d6 	bl	8005af4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>
 8005748:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800574e:	7ff8      	ldrb	r0, [r7, #31]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	f00d fb69 	bl	8012e2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f81e 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 800576e:	697b      	ldr	r3, [r7, #20]
      }
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bdb0      	pop	{r4, r5, r7, pc}

08005778 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEbEC1ISB_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005784:	68b8      	ldr	r0, [r7, #8]
 8005786:	f000 f9c9 	bl	8005b1c <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>
 800578a:	4602      	mov	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f952 	bl	8005a3c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8005798:	4603      	mov	r3, r0
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	711a      	strb	r2, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f9ad 	bl	8005b32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 80057d8:	4604      	mov	r4, r0
 80057da:	6838      	ldr	r0, [r7, #0]
 80057dc:	f7ff f95c 	bl	8004a98 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 80057e0:	4603      	mov	r3, r0
 80057e2:	4619      	mov	r1, r3
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 f9af 	bl	8005b48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>
      }
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}

080057f2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS9_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f998 	bl	8005b32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005802:	4603      	mov	r3, r0
 8005804:	2201      	movs	r2, #1
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f9aa 	bl	8005b62 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005816:	b590      	push	{r4, r7, lr}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f9ad 	bl	8005b80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005826:	4604      	mov	r4, r0
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f7ff f97f 	bl	8004b2c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f9af 	bl	8005b96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>
      }
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bd90      	pop	{r4, r7, pc}

08005840 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_put_nodeEPSt13_Rb_tree_nodeISA_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f998 	bl	8005b80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005850:	4603      	mov	r3, r0
 8005852:	2201      	movs	r2, #1
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f9aa 	bl	8005bb0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE6_S_keyEPKSt13_Rb_tree_nodeIS9_E>:
      _S_key(_Const_Link_type __x)
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff fa04 	bl	8004c7a <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8005872:	4602      	mov	r2, r0
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f9a7 	bl	8005bce <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>
 8005880:	4603      	mov	r3, r0
      }
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <_ZStltIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EESA_>:
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) < 0; }
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f00d fe1e 	bl	8013508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80058cc:	4603      	mov	r3, r0
 80058ce:	0fdb      	lsrs	r3, r3, #31
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE6_S_keyEPKSt13_Rb_tree_nodeISA_E>:
      _S_key(_Const_Link_type __x)
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fa1b 	bl	8004d1e <_ZNKSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 80058e8:	4602      	mov	r2, r0
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f978 	bl	8005be6 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>
 80058f6:	4603      	mov	r3, r0
      }
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() noexcept
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() noexcept
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fda3 	bl	80054ba <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEC1EPSt18_Rb_tree_node_base>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f000 f937 	bl	8005bfe <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>
 8005990:	4603      	mov	r3, r0
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f93b 	bl	8005c14 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800599e:	4603      	mov	r3, r0
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f00d fa30 	bl	8012e22 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80059c2:	4602      	mov	r2, r0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	return *this;
 80059c8:	687b      	ldr	r3, [r7, #4]
      }
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 80059de:	68b8      	ldr	r0, [r7, #8]
 80059e0:	f000 f918 	bl	8005c14 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80059e4:	4603      	mov	r3, r0
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_Alloc_nodeclIS9_EEPSt13_Rb_tree_nodeIS9_EOT_>:
	  operator()(_Arg&& __arg) const
 80059fe:	b590      	push	{r4, r7, lr}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681c      	ldr	r4, [r3, #0]
 8005a0c:	6838      	ldr	r0, [r7, #0]
 8005a0e:	f7ff fce7 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4619      	mov	r1, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f907 	bl	8005c2a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd90      	pop	{r4, r7, pc}

08005a26 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE7_M_addrEv>:
      _M_addr() const noexcept
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE7_M_addrEv>:
      _M_addr() const noexcept
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	f107 030c 	add.w	r3, r7, #12
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fe8a 	bl	80057aa <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEC1EPSt18_Rb_tree_node_base>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005aac:	68b8      	ldr	r0, [r7, #8]
 8005aae:	f000 f8d3 	bl	8005c58 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f8aa 	bl	8005c14 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_ZNSt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f00d f99f 	bl	8012e22 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	601a      	str	r2, [r3, #0]
	return *this;
 8005aea:	687b      	ldr	r3, [r7, #4]
      }
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <_ZNKSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_Alloc_nodeclISA_EEPSt13_Rb_tree_nodeISA_EOT_>:
	  operator()(_Arg&& __arg) const
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681c      	ldr	r4, [r3, #0]
 8005b02:	6838      	ldr	r0, [r7, #0]
 8005b04:	f7ff fde4 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f8ae 	bl	8005c6e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>
 8005b12:	4603      	mov	r3, r0
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}

08005b1c <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE7destroyISA_EEvRSC_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f8a1 	bl	8005c9c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f89e 	bl	8005cb4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE7destroyISB_EEvRSD_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f893 	bl	8005cce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE10deallocateERSD_PSC_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f890 	bl	8005ce6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEclERKS9_>:

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <_ZNKSt10_Select1stISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEclERKSA_>:
      operator()(const _Pair& __x) const
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEOT_RNSt16remove_referenceISE_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE14_M_create_nodeIJS9_EEEPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f863 	bl	8005d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>
 8005c3a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005c3c:	6838      	ldr	r0, [r7, #0]
 8005c3e:	f7ff fbcf 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f86a 	bl	8005d22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>
	  return __tmp;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEOT_RNSt16remove_referenceISF_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE14_M_create_nodeIJSA_EEEPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f872 	bl	8005d62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>
 8005c7e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8005c80:	6838      	ldr	r0, [r7, #0]
 8005c82:	f7ff fd25 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f879 	bl	8005d84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>
	  return __tmp;
 8005c92:	68fb      	ldr	r3, [r7, #12]
	}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE7destroyISB_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8005ca6:	6838      	ldr	r0, [r7, #0]
 8005ca8:	f7fe f878 	bl	8003d9c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandED1Ev>
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE10deallocateEPSC_j>:
      deallocate(pointer __p, size_type)
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005cc0:	68b8      	ldr	r0, [r7, #8]
 8005cc2:	f00d f845 	bl	8012d50 <_ZdlPv>
      }
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE7destroyISC_EEvPT_>:
	destroy(_Up* __p)
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8005cd8:	6838      	ldr	r0, [r7, #0]
 8005cda:	f7fe fabf 	bl	800425c <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskED1Ev>
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE10deallocateEPSD_j>:
      deallocate(pointer __p, size_type)
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005cf2:	68b8      	ldr	r0, [r7, #8]
 8005cf4:	f00d f82c 	bl	8012d50 <_ZdlPv>
      }
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE11_M_get_nodeEv>:
      _M_get_node()
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff12 	bl	8005b32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2101      	movs	r1, #1
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f856 	bl	8005dc4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE17_M_construct_nodeIJS9_EEEvPSt13_Rb_tree_nodeIS9_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005d22:	b5b0      	push	{r4, r5, r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4619      	mov	r1, r3
 8005d32:	2048      	movs	r0, #72	; 0x48
 8005d34:	f7fd fad8 	bl	80032e8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fefa 	bl	8005b32 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_7commandESt10_Select1stIS9_ESt4lessIS5_ESaIS9_EE21_M_get_Node_allocatorEv>
 8005d3e:	4604      	mov	r4, r0
 8005d40:	68b8      	ldr	r0, [r7, #8]
 8005d42:	f7fe fea9 	bl	8004a98 <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEE9_M_valptrEv>
 8005d46:	4605      	mov	r5, r0
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fb49 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461a      	mov	r2, r3
 8005d52:	4629      	mov	r1, r5
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 f844 	bl	8005de2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>
	}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bdb0      	pop	{r4, r5, r7, pc}

08005d62 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE11_M_get_nodeEv>:
      _M_get_node()
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff ff08 	bl	8005b80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f847 	bl	8005e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE17_M_construct_nodeIJSA_EEEvPSt13_Rb_tree_nodeISA_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4619      	mov	r1, r3
 8005d94:	202c      	movs	r0, #44	; 0x2c
 8005d96:	f7fd faa7 	bl	80032e8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fef0 	bl	8005b80 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4TaskESt10_Select1stISA_ESt4lessIS5_ESaISA_EE21_M_get_Node_allocatorEv>
 8005da0:	4604      	mov	r4, r0
 8005da2:	68b8      	ldr	r0, [r7, #8]
 8005da4:	f7fe fec2 	bl	8004b2c <_ZNSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEE9_M_valptrEv>
 8005da8:	4605      	mov	r5, r0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fc90 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	4629      	mov	r1, r5
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f835 	bl	8005e26 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>
	}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bdb0      	pop	{r4, r5, r7, pc}

08005dc4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005dce:	2200      	movs	r2, #0
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f83a 	bl	8005e4c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEEE9constructISA_JSA_EEEvRSC_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff faf6 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f860 	bl	8005ec0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE8allocateERSD_j>:
      allocate(allocator_type& __a, size_type __n)
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005e12:	2200      	movs	r2, #0
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f86a 	bl	8005ef0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEEE9constructISB_JSB_EEEvRSD_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fc4c 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f88a 	bl	8005f58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f895 	bl	8005f88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bf8c      	ite	hi
 8005e66:	2301      	movhi	r3, #1
 8005e68:	2300      	movls	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e70:	f00d f837 	bl	8012ee2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f00c ff68 	bl	8012d54 <_Znwj>
 8005e84:	4603      	mov	r3, r0
      }
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>:
      constexpr pair(pair&&) = default;
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f00d fb56 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0218 	add.w	r2, r3, #24
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	3318      	adds	r3, #24
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7fd fb58 	bl	8003566 <_ZN7commandC1ERKS_>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE9constructISB_JSB_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fa87 	bl	80053e0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEOT_RNSt16remove_referenceISA_E4typeE>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	2038      	movs	r0, #56	; 0x38
 8005eda:	f7fd fa05 	bl	80032e8 <_ZnwjPv>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ffd3 	bl	8005e8e <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEC1EOS8_>
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}

08005ef0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f851 	bl	8005fa4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bf8c      	ite	hi
 8005f0a:	2301      	movhi	r3, #1
 8005f0c:	2300      	movls	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005f14:	f00c ffe5 	bl	8012ee2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	222c      	movs	r2, #44	; 0x2c
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	4618      	mov	r0, r3
 8005f22:	f00c ff17 	bl	8012d54 <_Znwj>
 8005f26:	4603      	mov	r3, r0
      }
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f00d fb05 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	619a      	str	r2, [r3, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE9constructISC_JSC_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fbb3 	bl	80056d0 <_ZSt7forwardISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEOT_RNSt16remove_referenceISB_E4typeE>
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	201c      	movs	r0, #28
 8005f72:	f7fd f9b9 	bl	80032e8 <_ZnwjPv>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ffd8 	bl	8005f30 <_ZNSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEC1EOS9_>
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE7commandEEE8max_sizeEv+0x18>)
      }
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	01c71c71 	.word	0x01c71c71

08005fa4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP4TaskEEE8max_sizeEv+0x18>)
      }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	02e8ba2e 	.word	0x02e8ba2e

08005fc0 <_Z41__static_initialization_and_destruction_0ii>:
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b0a0      	sub	sp, #128	; 0x80
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	f040 80a3 	bne.w	8006118 <_Z41__static_initialization_and_destruction_0ii+0x158>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	f040 809d 	bne.w	8006118 <_Z41__static_initialization_and_destruction_0ii+0x158>
const std::string cursor = "> ";
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00c fec7 	bl	8012d76 <_ZNSaIcEC1Ev>
 8005fe8:	f107 0308 	add.w	r3, r7, #8
 8005fec:	461a      	mov	r2, r3
 8005fee:	495b      	ldr	r1, [pc, #364]	; (800615c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8005ff0:	485b      	ldr	r0, [pc, #364]	; (8006160 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8005ff2:	f00d fae1 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f00c febc 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4618      	mov	r0, r3
 8006006:	f00c feb6 	bl	8012d76 <_ZNSaIcEC1Ev>
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	461a      	mov	r2, r3
 8006010:	4954      	ldr	r1, [pc, #336]	; (8006164 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8006012:	4855      	ldr	r0, [pc, #340]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8006014:	f00d fad0 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8006018:	f107 030c 	add.w	r3, r7, #12
 800601c:	4618      	mov	r0, r3
 800601e:	f00c feab 	bl	8012d78 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 8006022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006026:	4618      	mov	r0, r3
 8006028:	f00c fea5 	bl	8012d76 <_ZNSaIcEC1Ev>
 800602c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006030:	f107 0310 	add.w	r3, r7, #16
 8006034:	494d      	ldr	r1, [pc, #308]	; (800616c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8006036:	4618      	mov	r0, r3
 8006038:	f00d fabe 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800603c:	f107 0110 	add.w	r1, r7, #16
 8006040:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8006042:	4a4c      	ldr	r2, [pc, #304]	; (8006174 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8006044:	484c      	ldr	r0, [pc, #304]	; (8006178 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8006046:	f7fd f8c9 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 800604a:	f107 0310 	add.w	r3, r7, #16
 800604e:	4618      	mov	r0, r3
 8006050:	f00d f908 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006058:	4618      	mov	r0, r3
 800605a:	f00c fe8d 	bl	8012d78 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 800605e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006062:	4618      	mov	r0, r3
 8006064:	f00c fe87 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006068:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800606c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006070:	4942      	ldr	r1, [pc, #264]	; (800617c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8006072:	4618      	mov	r0, r3
 8006074:	f00d faa0 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006078:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800607c:	4b40      	ldr	r3, [pc, #256]	; (8006180 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800607e:	4a41      	ldr	r2, [pc, #260]	; (8006184 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8006080:	4841      	ldr	r0, [pc, #260]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8006082:	f7fd f8ab 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8006086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800608a:	4618      	mov	r0, r3
 800608c:	f00d f8ea 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006090:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006094:	4618      	mov	r0, r3
 8006096:	f00c fe6f 	bl	8012d78 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 800609a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800609e:	4618      	mov	r0, r3
 80060a0:	f00c fe69 	bl	8012d76 <_ZNSaIcEC1Ev>
 80060a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80060a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060ac:	4937      	ldr	r1, [pc, #220]	; (800618c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f00d fa82 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80060b8:	4b35      	ldr	r3, [pc, #212]	; (8006190 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80060ba:	4a36      	ldr	r2, [pc, #216]	; (8006194 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80060bc:	4836      	ldr	r0, [pc, #216]	; (8006198 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80060be:	f7fd f88d 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80060c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00d f8cc 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80060cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80060d0:	4618      	mov	r0, r3
 80060d2:	f00c fe51 	bl	8012d78 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 80060d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80060da:	4618      	mov	r0, r3
 80060dc:	f00c fe4b 	bl	8012d76 <_ZNSaIcEC1Ev>
 80060e0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80060e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80060e8:	492c      	ldr	r1, [pc, #176]	; (800619c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80060ea:	4618      	mov	r0, r3
 80060ec:	f00d fa64 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80060f0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80060f4:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80060f6:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80060f8:	482b      	ldr	r0, [pc, #172]	; (80061a8 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80060fa:	f7fd f86f 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 80060fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006102:	4618      	mov	r0, r3
 8006104:	f00d f8ae 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006108:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800610c:	4618      	mov	r0, r3
 800610e:	f00c fe33 	bl	8012d78 <_ZNSaIcED1Ev>
Console cs;
 8006112:	4826      	ldr	r0, [pc, #152]	; (80061ac <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8006114:	f7fd fc4c 	bl	80039b0 <_ZN7ConsoleC1Ev>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d119      	bne.n	8006152 <_Z41__static_initialization_and_destruction_0ii+0x192>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006124:	4293      	cmp	r3, r2
 8006126:	d114      	bne.n	8006152 <_Z41__static_initialization_and_destruction_0ii+0x192>
 8006128:	4820      	ldr	r0, [pc, #128]	; (80061ac <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800612a:	f7fd fc56 	bl	80039da <_ZN7ConsoleD1Ev>
 800612e:	481e      	ldr	r0, [pc, #120]	; (80061a8 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8006130:	f7fd f871 	bl	8003216 <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8006134:	4818      	ldr	r0, [pc, #96]	; (8006198 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8006136:	f7fd f86e 	bl	8003216 <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 800613a:	4813      	ldr	r0, [pc, #76]	; (8006188 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800613c:	f7fd f86b 	bl	8003216 <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 8006140:	480d      	ldr	r0, [pc, #52]	; (8006178 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8006142:	f7fd f868 	bl	8003216 <_ZN7commandD1Ev>
const std::string wlcm =
 8006146:	4808      	ldr	r0, [pc, #32]	; (8006168 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8006148:	f00d f88c 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 800614e:	f00d f889 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006152:	bf00      	nop
 8006154:	3780      	adds	r7, #128	; 0x80
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	0801c384 	.word	0x0801c384
 8006160:	2000046c 	.word	0x2000046c
 8006164:	0801c388 	.word	0x0801c388
 8006168:	20000484 	.word	0x20000484
 800616c:	0801c2fc 	.word	0x0801c2fc
 8006170:	08003551 	.word	0x08003551
 8006174:	08003541 	.word	0x08003541
 8006178:	200005d0 	.word	0x200005d0
 800617c:	0801d4e8 	.word	0x0801d4e8
 8006180:	080035e5 	.word	0x080035e5
 8006184:	0800359d 	.word	0x0800359d
 8006188:	200005f0 	.word	0x200005f0
 800618c:	0801d4f0 	.word	0x0801d4f0
 8006190:	08003661 	.word	0x08003661
 8006194:	08003619 	.word	0x08003619
 8006198:	20000610 	.word	0x20000610
 800619c:	0801d4f8 	.word	0x0801d4f8
 80061a0:	080036e1 	.word	0x080036e1
 80061a4:	080036b1 	.word	0x080036b1
 80061a8:	20000630 	.word	0x20000630
 80061ac:	20000650 	.word	0x20000650

080061b0 <_GLOBAL__sub_I_cs>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061b8:	2001      	movs	r0, #1
 80061ba:	f7ff ff01 	bl	8005fc0 <_Z41__static_initialization_and_destruction_0ii>
 80061be:	bd80      	pop	{r7, pc}

080061c0 <_GLOBAL__sub_D_cs>:
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061c8:	2000      	movs	r0, #0
 80061ca:	f7ff fef9 	bl	8005fc0 <_Z41__static_initialization_and_destruction_0ii>
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	: state{st}, priority{pri}, delay_tk{del}, period_tk{per}
{

}

Task::Task(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6178      	str	r0, [r7, #20]
 80061d8:	ed87 0a04 	vstr	s0, [r7, #16]
 80061dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80061e0:	ed87 1a02 	vstr	s2, [r7, #8]
 80061e4:	460b      	mov	r3, r1
 80061e6:	603a      	str	r2, [r7, #0]
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3314      	adds	r3, #20
 80061f4:	4618      	mov	r0, r3
 80061f6:	f00d f814 	bl	8013222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	state = 0;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	605a      	str	r2, [r3, #4]
	priority = pri;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	79fa      	ldrb	r2, [r7, #7]
 8006204:	721a      	strb	r2, [r3, #8]
	name = nm;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	3314      	adds	r3, #20
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f00d f82f 	bl	8013270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

	// Calculating delay and period based on master tick value.
	delay_tk = (unsigned long)(delay_s / mstr_tick_s);
 8006212:	edd7 6a04 	vldr	s13, [r7, #16]
 8006216:	ed97 7a02 	vldr	s14, [r7, #8]
 800621a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006222:	ee17 2a90 	vmov	r2, s15
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	60da      	str	r2, [r3, #12]
	period_tk = (unsigned long)(peri_s / mstr_tick_s);
 800622a:	edd7 6a03 	vldr	s13, [r7, #12]
 800622e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800623a:	ee17 2a90 	vmov	r2, s15
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	611a      	str	r2, [r3, #16]
}
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	08021d24 	.word	0x08021d24

08006250 <_Z41__static_initialization_and_destruction_0ii>:
		delay_tk = other.delay_tk;
		period_tk = other.period_tk;
	}

	return *this;
}
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d126      	bne.n	80062ae <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006266:	4293      	cmp	r3, r2
 8006268:	d121      	bne.n	80062ae <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f00c fd81 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	461a      	mov	r2, r3
 800627a:	4916      	ldr	r1, [pc, #88]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800627c:	4816      	ldr	r0, [pc, #88]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800627e:	f00d f99b 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f00c fd76 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 800628c:	f107 030c 	add.w	r3, r7, #12
 8006290:	4618      	mov	r0, r3
 8006292:	f00c fd70 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006296:	f107 030c 	add.w	r3, r7, #12
 800629a:	461a      	mov	r2, r3
 800629c:	490f      	ldr	r1, [pc, #60]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800629e:	4810      	ldr	r0, [pc, #64]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80062a0:	f00d f98a 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 80062a4:	f107 030c 	add.w	r3, r7, #12
 80062a8:	4618      	mov	r0, r3
 80062aa:	f00c fd65 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d105      	bne.n	80062ca <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80062be:	4808      	ldr	r0, [pc, #32]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80062c0:	f00c ffd0 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 80062c4:	4804      	ldr	r0, [pc, #16]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80062c6:	f00c ffcd 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	0801d530 	.word	0x0801d530
 80062d8:	20000680 	.word	0x20000680
 80062dc:	0801d534 	.word	0x0801d534
 80062e0:	20000698 	.word	0x20000698

080062e4 <_GLOBAL__sub_I__ZN4TaskC2Ev>:
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062ec:	2001      	movs	r0, #1
 80062ee:	f7ff ffaf 	bl	8006250 <_Z41__static_initialization_and_destruction_0ii>
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <_GLOBAL__sub_D__ZN4TaskC2Ev>:
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062fc:	2000      	movs	r0, #0
 80062fe:	f7ff ffa7 	bl	8006250 <_Z41__static_initialization_and_destruction_0ii>
 8006302:	bd80      	pop	{r7, pc}

08006304 <_ZN4Task8getStateEv>:
	int getState(){ return state; }
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <_ZN4Task8setStateEi>:
	void setState(int x) { state = x; }
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	605a      	str	r2, [r3, #4]
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <_ZN4Task8getDelayEv>:
	unsigned long getDelay(){ return delay_tk; }
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <_ZN4Task8setDelayEm>:
	void setDelay(unsigned long d){ delay_tk = d; }
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	60da      	str	r2, [r3, #12]
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZN4Task9getPeriodEv>:
	unsigned long getPeriod(){ return period_tk; }
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_PeriodElapsedCallback>:

// Task master object needs to be created so .cpp can have SysTick_Handler call our objects update function.
TaskMaster<10> scheduler;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	if (htim == scheduler.getTimerInst())
 800638c:	4809      	ldr	r0, [pc, #36]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800638e:	f000 f821 	bl	80063d4 <_ZN10TaskMasterILi10EE12getTimerInstEv>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4293      	cmp	r3, r2
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		// The timer our scheduler is using has elapsed!
		scheduler.update();
 80063a4:	4803      	ldr	r0, [pc, #12]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80063a6:	f000 f821 	bl	80063ec <_ZN10TaskMasterILi10EE6updateEv>
	}
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	200006e0 	.word	0x200006e0

080063b8 <_ZN10TaskMasterILi10EEC1Ev>:
	// Start the interrupt routine of the timer.
	HAL_TIM_Base_Start_IT(_timer_inst);
}

template <int N>
TaskMaster<N>::TaskMaster()
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	220a      	movs	r2, #10
 80063c4:	601a      	str	r2, [r3, #0]
{

}
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <_ZN10TaskMasterILi10EE12getTimerInstEv>:
	TIM_HandleTypeDef* getTimerInst() { return _timer_inst; };
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_ZN10TaskMasterILi10EE6updateEv>:

}

// Task Scheduling utility functions.
template <int N>
void TaskMaster<N>::update()
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
{
	for(int i = 0; i < N; i++)
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b09      	cmp	r3, #9
 80063fc:	dc59      	bgt.n	80064b2 <_ZN10TaskMasterILi10EE6updateEv+0xc6>
	{
		// Update task only if its still alive.
		if (_taskList[i] == nullptr) continue;
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04d      	beq.n	80064a8 <_ZN10TaskMasterILi10EE6updateEv+0xbc>

		if (_taskList[i]->getState() >= 0 )
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff ff74 	bl	8006304 <_ZN4Task8getStateEv>
 800641c:	4603      	mov	r3, r0
 800641e:	43db      	mvns	r3, r3
 8006420:	0fdb      	lsrs	r3, r3, #31
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d040      	beq.n	80064aa <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		{

			// This task has expired. Mark task as ready to run.
			if(_taskList[i]->getDelay() == 0)
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff ff80 	bl	8006338 <_ZN4Task8getDelayEv>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <_ZN10TaskMasterILi10EE6updateEv+0x94>
			{
				_taskList[i]->setState(1);						// Marked as ready to run.
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff61 	bl	800631c <_ZN4Task8setStateEi>
				_taskList[i]->setDelay(_taskList[i]->getPeriod());
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	685c      	ldr	r4, [r3, #4]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff ff7c 	bl	800636c <_ZN4Task9getPeriodEv>
 8006474:	4603      	mov	r3, r0
 8006476:	4619      	mov	r1, r3
 8006478:	4620      	mov	r0, r4
 800647a:	f7ff ff69 	bl	8006350 <_ZN4Task8setDelayEm>
 800647e:	e014      	b.n	80064aa <_ZN10TaskMasterILi10EE6updateEv+0xbe>
			} else {
				_taskList[i]->setDelay(_taskList[i]->getDelay() - 1);					// Counting down delay time.
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	685c      	ldr	r4, [r3, #4]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff4f 	bl	8006338 <_ZN4Task8getDelayEv>
 800649a:	4603      	mov	r3, r0
 800649c:	3b01      	subs	r3, #1
 800649e:	4619      	mov	r1, r3
 80064a0:	4620      	mov	r0, r4
 80064a2:	f7ff ff55 	bl	8006350 <_ZN4Task8setDelayEm>
 80064a6:	e000      	b.n	80064aa <_ZN10TaskMasterILi10EE6updateEv+0xbe>
		if (_taskList[i] == nullptr) continue;
 80064a8:	bf00      	nop
	for(int i = 0; i < N; i++)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3301      	adds	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e7a2      	b.n	80063f8 <_ZN10TaskMasterILi10EE6updateEv+0xc>
			}
		}
	}
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd90      	pop	{r4, r7, pc}
	...

080064bc <_Z41__static_initialization_and_destruction_0ii>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d129      	bne.n	8006520 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d124      	bne.n	8006520 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	4618      	mov	r0, r3
 80064dc:	f00c fc4b 	bl	8012d76 <_ZNSaIcEC1Ev>
 80064e0:	f107 0308 	add.w	r3, r7, #8
 80064e4:	461a      	mov	r2, r3
 80064e6:	4919      	ldr	r1, [pc, #100]	; (800654c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80064e8:	4819      	ldr	r0, [pc, #100]	; (8006550 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80064ea:	f00d f865 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	4618      	mov	r0, r3
 80064f4:	f00c fc40 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 80064f8:	f107 030c 	add.w	r3, r7, #12
 80064fc:	4618      	mov	r0, r3
 80064fe:	f00c fc3a 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006502:	f107 030c 	add.w	r3, r7, #12
 8006506:	461a      	mov	r2, r3
 8006508:	4912      	ldr	r1, [pc, #72]	; (8006554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800650a:	4813      	ldr	r0, [pc, #76]	; (8006558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800650c:	f00d f854 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	4618      	mov	r0, r3
 8006516:	f00c fc2f 	bl	8012d78 <_ZNSaIcED1Ev>
TaskMaster<10> scheduler;
 800651a:	4810      	ldr	r0, [pc, #64]	; (800655c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800651c:	f7ff ff4c 	bl	80063b8 <_ZN10TaskMasterILi10EEC1Ev>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10d      	bne.n	8006542 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652c:	4293      	cmp	r3, r2
 800652e:	d108      	bne.n	8006542 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8006530:	480a      	ldr	r0, [pc, #40]	; (800655c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8006532:	f000 f815 	bl	8006560 <_ZN10TaskMasterILi10EED1Ev>
const std::string wlcm =
 8006536:	4808      	ldr	r0, [pc, #32]	; (8006558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006538:	f00c fe94 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 800653c:	4804      	ldr	r0, [pc, #16]	; (8006550 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800653e:	f00c fe91 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	0801e698 	.word	0x0801e698
 8006550:	200006b0 	.word	0x200006b0
 8006554:	0801e69c 	.word	0x0801e69c
 8006558:	200006c8 	.word	0x200006c8
 800655c:	200006e0 	.word	0x200006e0

08006560 <_ZN10TaskMasterILi10EED1Ev>:
TaskMaster<N>::~TaskMaster()
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
}
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <_GLOBAL__sub_I_scheduler>:
 8006576:	b580      	push	{r7, lr}
 8006578:	af00      	add	r7, sp, #0
 800657a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800657e:	2001      	movs	r0, #1
 8006580:	f7ff ff9c 	bl	80064bc <_Z41__static_initialization_and_destruction_0ii>
 8006584:	bd80      	pop	{r7, pc}

08006586 <_GLOBAL__sub_D_scheduler>:
 8006586:	b580      	push	{r7, lr}
 8006588:	af00      	add	r7, sp, #0
 800658a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800658e:	2000      	movs	r0, #0
 8006590:	f7ff ff94 	bl	80064bc <_Z41__static_initialization_and_destruction_0ii>
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f00c ffaf 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80065a6:	4604      	mov	r4, r0
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f00c fe69 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80065ae:	4603      	mov	r3, r0
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	4621      	mov	r1, r4
 80065b8:	480a      	ldr	r0, [pc, #40]	; (80065e4 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80065ba:	f007 fcfa 	bl	800dfb2 <HAL_UART_Transmit>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 80065c2:	f640 230d 	movw	r3, #2573	; 0xa0d
 80065c6:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 80065c8:	f107 010c 	add.w	r1, r7, #12
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	2202      	movs	r2, #2
 80065d2:	4804      	ldr	r0, [pc, #16]	; (80065e4 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 80065d4:	f007 fced 	bl	800dfb2 <HAL_UART_Transmit>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd90      	pop	{r4, r7, pc}
 80065e4:	20000988 	.word	0x20000988

080065e8 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: heapr0ll
 */

#include "Telem_out.hpp"

TelemOut::TelemOut(float delay_s, float peri_s, float mstr_tick_s, char pri, std::string nm)
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b08d      	sub	sp, #52	; 0x34
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6178      	str	r0, [r7, #20]
 80065f0:	ed87 0a04 	vstr	s0, [r7, #16]
 80065f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80065f8:	ed87 1a02 	vstr	s2, [r7, #8]
 80065fc:	460b      	mov	r3, r1
 80065fe:	603a      	str	r2, [r7, #0]
 8006600:	71fb      	strb	r3, [r7, #7]
	: Task(delay_s,
		peri_s,
		mstr_tick_s,
		pri,
		nm)
 8006602:	697c      	ldr	r4, [r7, #20]
 8006604:	f107 0318 	add.w	r3, r7, #24
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f00c ffa0 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006610:	f107 0218 	add.w	r2, r7, #24
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	4619      	mov	r1, r3
 8006618:	ed97 1a02 	vldr	s2, [r7, #8]
 800661c:	edd7 0a03 	vldr	s1, [r7, #12]
 8006620:	ed97 0a04 	vldr	s0, [r7, #16]
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fdd3 	bl	80061d0 <_ZN4TaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f00c fe18 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006634:	4a08      	ldr	r2, [pc, #32]	; (8006658 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	4a07      	ldr	r2, [pc, #28]	; (800665c <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>)
 800663e:	635a      	str	r2, [r3, #52]	; 0x34
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
{
	enabled = false;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4618      	mov	r0, r3
 8006652:	3734      	adds	r7, #52	; 0x34
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	08021d60 	.word	0x08021d60
 800665c:	20000a90 	.word	0x20000a90
 8006660:	20000a74 	.word	0x20000a74

08006664 <_ZN8TelemOut12taskFunctionEv>:

}

// Callback function to execute by master scheduler
bool TelemOut::taskFunction()
{
 8006664:	b580      	push	{r7, lr}
 8006666:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 800666a:	af00      	add	r7, sp, #0
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	6018      	str	r0, [r3, #0]
	// Transmit all data out on usb port.
	if (enabled)
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8243 	beq.w	8006b04 <_ZN8TelemOut12taskFunctionEv+0x4a0>
	{
		// SOP
		std::string msg = "$";
 800667e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006682:	4618      	mov	r0, r3
 8006684:	f00c fb77 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006688:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	49e7      	ldr	r1, [pc, #924]	; (8006a30 <_ZN8TelemOut12taskFunctionEv+0x3cc>)
 8006692:	4618      	mov	r0, r3
 8006694:	f00c ff90 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800669c:	4618      	mov	r0, r3
 800669e:	f00c fb6b 	bl	8012d78 <_ZNSaIcED1Ev>

		// Publish Raw IMU data.
		if (!pntr_imu_msg->locked)
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	7e9b      	ldrb	r3, [r3, #26]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 812d 	beq.w	8006910 <_ZN8TelemOut12taskFunctionEv+0x2ac>
		{
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	edd3 7a00 	vldr	s15, [r3]
 80066c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80066c4:	eeb0 0a67 	vmov.f32	s0, s15
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fa fc1f 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
 80066ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80066d2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80066d6:	4ad7      	ldr	r2, [pc, #860]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fb fddc 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->gy) + "," +
 80066de:	1d3b      	adds	r3, r7, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80066e8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80066ec:	eeb0 0a67 	vmov.f32	s0, s15
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fa fc0b 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80066fe:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fdde 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006708:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800670c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8006710:	4ac8      	ldr	r2, [pc, #800]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006712:	4618      	mov	r0, r3
 8006714:	f7fb fdbf 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->gz) + "," +
 8006718:	1d3b      	adds	r3, r7, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006722:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006726:	eeb0 0a67 	vmov.f32	s0, s15
 800672a:	4618      	mov	r0, r3
 800672c:	f7fa fbee 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->gy) + "," +
 8006730:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006734:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8006738:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800673c:	4618      	mov	r0, r3
 800673e:	f7fb fdc1 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->gz) + "," +
 8006742:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006746:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800674a:	4aba      	ldr	r2, [pc, #744]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 800674c:	4618      	mov	r0, r3
 800674e:	f7fb fda2 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->ax) + "," +
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	edd3 7a03 	vldr	s15, [r3, #12]
 800675c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006760:	eeb0 0a67 	vmov.f32	s0, s15
 8006764:	4618      	mov	r0, r3
 8006766:	f7fa fbd1 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->gz) + "," +
 800676a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800676e:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8006772:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8006776:	4618      	mov	r0, r3
 8006778:	f7fb fda4 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->ax) + "," +
 800677c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006780:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8006784:	4aab      	ldr	r2, [pc, #684]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006786:	4618      	mov	r0, r3
 8006788:	f7fb fd85 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->ay) + "," +
 800678c:	1d3b      	adds	r3, r7, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	edd3 7a04 	vldr	s15, [r3, #16]
 8006796:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800679a:	eeb0 0a67 	vmov.f32	s0, s15
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa fbb4 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->ax) + "," +
 80067a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80067a8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80067ac:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fd87 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->ay) + "," +
 80067b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80067ba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80067be:	4a9d      	ldr	r2, [pc, #628]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fb fd68 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->az) + "," +
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80067d0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80067d4:	eeb0 0a67 	vmov.f32	s0, s15
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fa fb97 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_imu_msg->ay) + "," +
 80067de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80067e2:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80067e6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fb fd6a 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->az) + "," +
 80067f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80067f4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80067f8:	4a8e      	ldr	r2, [pc, #568]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fb fd4b 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_imu_msg->temp) + ",";
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	8b1b      	ldrh	r3, [r3, #24]
 8006808:	461a      	mov	r2, r3
 800680a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7fa fb65 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
					std::to_string(pntr_imu_msg->az) + "," +
 8006816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800681a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800681e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006822:	4618      	mov	r0, r3
 8006824:	f7fb fd4e 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_imu_msg->temp) + ",";
 8006828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800682c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006830:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006832:	4618      	mov	r0, r3
 8006834:	f7fb fd2f 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006838:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f00c fe30 	bl	80134a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8006848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800684c:	4618      	mov	r0, r3
 800684e:	f00c fd09 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006856:	4618      	mov	r0, r3
 8006858:	f00c fd04 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800685c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8006860:	4618      	mov	r0, r3
 8006862:	f00c fcff 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->az) + "," +
 8006866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800686a:	4618      	mov	r0, r3
 800686c:	f00c fcfa 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006870:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006874:	4618      	mov	r0, r3
 8006876:	f00c fcf5 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800687a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800687e:	4618      	mov	r0, r3
 8006880:	f00c fcf0 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->ay) + "," +
 8006884:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006888:	4618      	mov	r0, r3
 800688a:	f00c fceb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800688e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006892:	4618      	mov	r0, r3
 8006894:	f00c fce6 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006898:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800689c:	4618      	mov	r0, r3
 800689e:	f00c fce1 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->ax) + "," +
 80068a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068a6:	4618      	mov	r0, r3
 80068a8:	f00c fcdc 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068ac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f00c fcd7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80068ba:	4618      	mov	r0, r3
 80068bc:	f00c fcd2 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->gz) + "," +
 80068c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80068c4:	4618      	mov	r0, r3
 80068c6:	f00c fccd 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80068ce:	4618      	mov	r0, r3
 80068d0:	f00c fcc8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80068d8:	4618      	mov	r0, r3
 80068da:	f00c fcc3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_imu_msg->gy) + "," +
 80068de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80068e2:	4618      	mov	r0, r3
 80068e4:	f00c fcbe 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	4618      	mov	r0, r3
 80068ee:	f00c fcb9 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068f2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80068f6:	4618      	mov	r0, r3
 80068f8:	f00c fcb4 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			msg += std::to_string(pntr_imu_msg->gx) + "," +
 80068fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006900:	4618      	mov	r0, r3
 8006902:	f00c fcaf 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006906:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800690a:	4618      	mov	r0, r3
 800690c:	f00c fcaa 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}

		// Publish Batt data.
		if (!pntr_batt_msg->locked)
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	7d1b      	ldrb	r3, [r3, #20]
 8006918:	f083 0301 	eor.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80dc 	beq.w	8006adc <_ZN8TelemOut12taskFunctionEv+0x478>
		{
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692a:	edd3 7a00 	vldr	s15, [r3]
 800692e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006932:	eeb0 0a67 	vmov.f32	s0, s15
 8006936:	4618      	mov	r0, r3
 8006938:	f7fa fae8 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
 800693c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8006940:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8006944:	4a3b      	ldr	r2, [pc, #236]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb fca5 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell2) + "," +
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	edd3 7a01 	vldr	s15, [r3, #4]
 8006956:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800695a:	eeb0 0a67 	vmov.f32	s0, s15
 800695e:	4618      	mov	r0, r3
 8006960:	f7fa fad4 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 8006964:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8006968:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800696c:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8006970:	4618      	mov	r0, r3
 8006972:	f7fb fca7 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell2) + "," +
 8006976:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800697a:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 800697e:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 8006980:	4618      	mov	r0, r3
 8006982:	f7fb fc88 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell3) + "," +
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006990:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	4618      	mov	r0, r3
 800699a:	f7fa fab7 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell2) + "," +
 800699e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80069a2:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80069a6:	f507 7126 	add.w	r1, r7, #664	; 0x298
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fb fc8a 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell3) + "," +
 80069b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069b4:	f507 7120 	add.w	r1, r7, #640	; 0x280
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fb fc6b 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->cell4) + "," +
 80069c0:	1d3b      	adds	r3, r7, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80069ca:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80069ce:	eeb0 0a67 	vmov.f32	s0, s15
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fa fa9a 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell3) + "," +
 80069d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069dc:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80069e0:	f507 711a 	add.w	r1, r7, #616	; 0x268
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fb fc6d 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->cell4) + "," +
 80069ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80069ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069f2:	4a10      	ldr	r2, [pc, #64]	; (8006a34 <_ZN8TelemOut12taskFunctionEv+0x3d0>)
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fb fc4e 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
					std::to_string(pntr_batt_msg->pack_volt) + "*";
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a04:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8006a08:	eeb0 0a67 	vmov.f32	s0, s15
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fa fa7d 	bl	8000f0c <_ZNSt7__cxx119to_stringEf>
					std::to_string(pntr_batt_msg->cell4) + "," +
 8006a12:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006a16:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8006a1a:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fb fc50 	bl	80022c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
					std::to_string(pntr_batt_msg->pack_volt) + "*";
 8006a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a28:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8006a2c:	e004      	b.n	8006a38 <_ZN8TelemOut12taskFunctionEv+0x3d4>
 8006a2e:	bf00      	nop
 8006a30:	0801f82c 	.word	0x0801f82c
 8006a34:	0801f830 	.word	0x0801f830
 8006a38:	4a35      	ldr	r2, [pc, #212]	; (8006b10 <_ZN8TelemOut12taskFunctionEv+0x4ac>)
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fb fc2b 	bl	8002296 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8006a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a44:	f107 030c 	add.w	r3, r7, #12
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f00c fd2c 	bl	80134a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8006a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a54:	4618      	mov	r0, r3
 8006a56:	f00c fc05 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a5a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f00c fc00 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a64:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f00c fbfb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell4) + "," +
 8006a6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006a72:	4618      	mov	r0, r3
 8006a74:	f00c fbf6 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f00c fbf1 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a82:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006a86:	4618      	mov	r0, r3
 8006a88:	f00c fbec 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell3) + "," +
 8006a8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a90:	4618      	mov	r0, r3
 8006a92:	f00c fbe7 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a96:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f00c fbe2 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006aa0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f00c fbdd 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
					std::to_string(pntr_batt_msg->cell2) + "," +
 8006aaa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f00c fbd8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ab4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f00c fbd3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006abe:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f00c fbce 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			msg += std::to_string(pntr_batt_msg->cell1) + "," +
 8006ac8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8006acc:	4618      	mov	r0, r3
 8006ace:	f00c fbc9 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ad2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f00c fbc4 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}

		// EOP
		msg += "\n";
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	490c      	ldr	r1, [pc, #48]	; (8006b14 <_ZN8TelemOut12taskFunctionEv+0x4b0>)
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f00c fd0a 	bl	80134fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>

		// Transmit the data.
		printf(msg.c_str());
 8006ae8:	f107 030c 	add.w	r3, r7, #12
 8006aec:	4618      	mov	r0, r3
 8006aee:	f00c fd09 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006af2:	4603      	mov	r3, r0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f00d fc65 	bl	80143c4 <iprintf>
		std::string msg = "$";
 8006afa:	f107 030c 	add.w	r3, r7, #12
 8006afe:	4618      	mov	r0, r3
 8006b00:	f00c fbb0 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8006b04:	bf00      	nop
 8006b06:	4618      	mov	r0, r3
 8006b08:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	0801f834 	.word	0x0801f834
 8006b14:	0801f838 	.word	0x0801f838

08006b18 <_ZN8TelemOut12consoleFuncaEv>:

// Callback functions to execute on console request.
bool TelemOut::consoleFunca()
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b0ac      	sub	sp, #176	; 0xb0
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	// Print usage instructions!
	println("Description:");
 8006b20:	f107 0320 	add.w	r3, r7, #32
 8006b24:	4618      	mov	r0, r3
 8006b26:	f00c f926 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006b2a:	f107 0220 	add.w	r2, r7, #32
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	4952      	ldr	r1, [pc, #328]	; (8006c7c <_ZN8TelemOut12consoleFuncaEv+0x164>)
 8006b34:	4618      	mov	r0, r3
 8006b36:	f00c fd3f 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fd2a 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f00c fb8b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b4e:	f107 0320 	add.w	r3, r7, #32
 8006b52:	4618      	mov	r0, r3
 8006b54:	f00c f910 	bl	8012d78 <_ZNSaIcED1Ev>
	println("Start or stop the telemetry output process running @ 100Hz.");
 8006b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f00c f90a 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006b62:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b6a:	4945      	ldr	r1, [pc, #276]	; (8006c80 <_ZN8TelemOut12consoleFuncaEv+0x168>)
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f00c fd23 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7ff fd0e 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f00c fb6f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f00c f8f4 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\tArgs");
 8006b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006b94:	4618      	mov	r0, r3
 8006b96:	f00c f8ee 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006b9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ba2:	4938      	ldr	r1, [pc, #224]	; (8006c84 <_ZN8TelemOut12consoleFuncaEv+0x16c>)
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f00c fd07 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fcf2 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f00c fb53 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f00c f8d8 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* on - Turn telemetry out on.");
 8006bc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f00c f8d2 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006bd2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006bd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006bda:	492b      	ldr	r1, [pc, #172]	; (8006c88 <_ZN8TelemOut12consoleFuncaEv+0x170>)
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f00c fceb 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006be2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fcd6 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006bec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f00c fb37 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f00c f8bc 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* off - Turn telemetry out off.");
 8006c00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c04:	4618      	mov	r0, r3
 8006c06:	f00c f8b6 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006c0a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006c0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c12:	491e      	ldr	r1, [pc, #120]	; (8006c8c <_ZN8TelemOut12consoleFuncaEv+0x174>)
 8006c14:	4618      	mov	r0, r3
 8006c16:	f00c fccf 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fcba 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006c24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f00c fb1b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c32:	4618      	mov	r0, r3
 8006c34:	f00c f8a0 	bl	8012d78 <_ZNSaIcED1Ev>
	println("\t* status - Show status.");
 8006c38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f00c f89a 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006c42:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006c46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c4a:	4911      	ldr	r1, [pc, #68]	; (8006c90 <_ZN8TelemOut12consoleFuncaEv+0x178>)
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f00c fcb3 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006c52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fc9e 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006c5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c60:	4618      	mov	r0, r3
 8006c62:	f00c faff 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f00c f884 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8006c70:	2301      	movs	r3, #1
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	37b0      	adds	r7, #176	; 0xb0
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	0801f83c 	.word	0x0801f83c
 8006c80:	0801f84c 	.word	0x0801f84c
 8006c84:	0801f888 	.word	0x0801f888
 8006c88:	0801f890 	.word	0x0801f890
 8006c8c:	0801f8b0 	.word	0x0801f8b0
 8006c90:	0801f8d4 	.word	0x0801f8d4

08006c94 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
bool TelemOut::consoleFuncb(std::string& s)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b096      	sub	sp, #88	; 0x58
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	// Check argument string.
	if (s == "on")
 8006c9e:	4935      	ldr	r1, [pc, #212]	; (8006d74 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe0>)
 8006ca0:	6838      	ldr	r0, [r7, #0]
 8006ca2:	f7fb facd 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
	{
		enabled = true;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006cb4:	e058      	b.n	8006d68 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>

	}else if (s == "off") {
 8006cb6:	4930      	ldr	r1, [pc, #192]	; (8006d78 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>)
 8006cb8:	6838      	ldr	r0, [r7, #0]
 8006cba:	f7fb fac1 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
		enabled = false;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006ccc:	e04c      	b.n	8006d68 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
	}else if (s == "status")
 8006cce:	492b      	ldr	r1, [pc, #172]	; (8006d7c <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>)
 8006cd0:	6838      	ldr	r0, [r7, #0]
 8006cd2:	f7fb fab5 	bl	8002240 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d021      	beq.n	8006d20 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>
	{
		println("Telemetry Out Status - " + std::to_string(enabled));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fa f8f8 	bl	8000ee0 <_ZNSt7__cxx119to_stringEi>
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006cf8:	4921      	ldr	r1, [pc, #132]	; (8006d80 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xec>)
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fb fab3 	bl	8002266 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8006d00:	f107 030c 	add.w	r3, r7, #12
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fc47 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f00c faa8 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f00c faa3 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d1e:	e023      	b.n	8006d68 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>
	}else{
		println("Invalid parameter!");
 8006d20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d24:	4618      	mov	r0, r3
 8006d26:	f00c f826 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006d2a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d32:	4914      	ldr	r1, [pc, #80]	; (8006d84 <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 8006d34:	4618      	mov	r0, r3
 8006d36:	f00c fc3f 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006d3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fc2a 	bl	8006598 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006d44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f00c fa8b 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d52:	4618      	mov	r0, r3
 8006d54:	f00c f810 	bl	8012d78 <_ZNSaIcED1Ev>
		consoleFunca();
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
		return false;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <_ZN8TelemOut12consoleFuncbERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd6>
	}

	return true;
 8006d68:	2301      	movs	r3, #1
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3758      	adds	r7, #88	; 0x58
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	0801f8f0 	.word	0x0801f8f0
 8006d78:	0801f8f4 	.word	0x0801f8f4
 8006d7c:	0801f8f8 	.word	0x0801f8f8
 8006d80:	0801f900 	.word	0x0801f900
 8006d84:	0801f918 	.word	0x0801f918

08006d88 <_Z41__static_initialization_and_destruction_0ii>:
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d126      	bne.n	8006de6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d121      	bne.n	8006de6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
const std::string cursor = "> ";
 8006da2:	f107 0308 	add.w	r3, r7, #8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f00b ffe5 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006dac:	f107 0308 	add.w	r3, r7, #8
 8006db0:	461a      	mov	r2, r3
 8006db2:	4916      	ldr	r1, [pc, #88]	; (8006e0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006db4:	4816      	ldr	r0, [pc, #88]	; (8006e10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006db6:	f00c fbff 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f00b ffda 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f00b ffd4 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	490f      	ldr	r1, [pc, #60]	; (8006e14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006dd6:	4810      	ldr	r0, [pc, #64]	; (8006e18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006dd8:	f00c fbee 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	4618      	mov	r0, r3
 8006de2:	f00b ffc9 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d105      	bne.n	8006e02 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006df6:	4808      	ldr	r0, [pc, #32]	; (8006e18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006df8:	f00c fa34 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8006dfc:	4804      	ldr	r0, [pc, #16]	; (8006e10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006dfe:	f00c fa31 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0801f958 	.word	0x0801f958
 8006e10:	20000710 	.word	0x20000710
 8006e14:	0801f95c 	.word	0x0801f95c
 8006e18:	20000728 	.word	0x20000728

08006e1c <_GLOBAL__sub_I__ZN8TelemOutC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e24:	2001      	movs	r0, #1
 8006e26:	f7ff ffaf 	bl	8006d88 <_Z41__static_initialization_and_destruction_0ii>
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <_GLOBAL__sub_D__ZN8TelemOutC2EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e34:	2000      	movs	r0, #0
 8006e36:	f7ff ffa7 	bl	8006d88 <_Z41__static_initialization_and_destruction_0ii>
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f00c fb5d 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f00c fa17 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	480a      	ldr	r0, [pc, #40]	; (8006e88 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8006e5e:	f007 f8a8 	bl	800dfb2 <HAL_UART_Transmit>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp[2] = {'\r', '\n'};
 8006e66:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006e6a:	81bb      	strh	r3, [r7, #12]
	hstatus = HAL_UART_Transmit(&huart1, tmp, 2, HAL_MAX_DELAY);
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	2202      	movs	r2, #2
 8006e76:	4804      	ldr	r0, [pc, #16]	; (8006e88 <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8006e78:	f007 f89b 	bl	800dfb2 <HAL_UART_Transmit>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}
 8006e88:	20000988 	.word	0x20000988

08006e8c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hstatus = HAL_UART_Transmit(&huart1, (uint8_t *)s.c_str(), s.length(), HAL_MAX_DELAY);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f00c fb35 	bl	8013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f00c f9ef 	bl	8013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4804      	ldr	r0, [pc, #16]	; (8006ec0 <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 8006eae:	f007 f880 	bl	800dfb2 <HAL_UART_Transmit>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73fb      	strb	r3, [r7, #15]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000988 	.word	0x20000988

08006ec4 <_ZL5helpav>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
	return true;
 8006ec8:	2301      	movs	r3, #1
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <_ZL5helpbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	return true;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <_ZL5echoav>:
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
	println("echo: Prints a string to the terminal.");
 8006ef2:	f107 031c 	add.w	r3, r7, #28
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f00b ff3d 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006efc:	f107 021c 	add.w	r2, r7, #28
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	490b      	ldr	r1, [pc, #44]	; (8006f30 <_ZL5echoav+0x44>)
 8006f04:	4618      	mov	r0, r3
 8006f06:	f00c fb57 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff ff95 	bl	8006e3c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	4618      	mov	r0, r3
 8006f16:	f00c f9a5 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f1a:	f107 031c 	add.w	r3, r7, #28
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f00b ff2a 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8006f24:	2301      	movs	r3, #1
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	08020ac0 	.word	0x08020ac0

08006f34 <_ZL5echobRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
	println(s);
 8006f3c:	f107 0308 	add.w	r3, r7, #8
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f00c fb04 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006f48:	f107 0308 	add.w	r3, r7, #8
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff ff75 	bl	8006e3c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006f52:	f107 0308 	add.w	r3, r7, #8
 8006f56:	4618      	mov	r0, r3
 8006f58:	f00c f984 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <_ZL6clearav>:
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
	print("\x1B[2J");
 8006f6e:	f107 031c 	add.w	r3, r7, #28
 8006f72:	4618      	mov	r0, r3
 8006f74:	f00b feff 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006f78:	f107 021c 	add.w	r2, r7, #28
 8006f7c:	1d3b      	adds	r3, r7, #4
 8006f7e:	490b      	ldr	r1, [pc, #44]	; (8006fac <_ZL6clearav+0x44>)
 8006f80:	4618      	mov	r0, r3
 8006f82:	f00c fb19 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff7f 	bl	8006e8c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006f8e:	1d3b      	adds	r3, r7, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f00c f967 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f96:	f107 031c 	add.w	r3, r7, #28
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f00b feec 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8006fa0:	2301      	movs	r3, #1
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	08020ae8 	.word	0x08020ae8

08006fb0 <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	; 0x28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	print("\x1B[2J");
 8006fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f00b feda 	bl	8012d76 <_ZNSaIcEC1Ev>
 8006fc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006fc6:	f107 030c 	add.w	r3, r7, #12
 8006fca:	490c      	ldr	r1, [pc, #48]	; (8006ffc <_ZL6clearbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c>)
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f00c faf3 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff ff58 	bl	8006e8c <_ZL5printNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f00c f93f 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f00b fec4 	bl	8012d78 <_ZNSaIcED1Ev>
	return true;
 8006ff0:	2301      	movs	r3, #1
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08020ae8 	.word	0x08020ae8

08007000 <_ZL7bannerav>:
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
	println(wlcm);
 8007006:	463b      	mov	r3, r7
 8007008:	4908      	ldr	r1, [pc, #32]	; (800702c <_ZL7bannerav+0x2c>)
 800700a:	4618      	mov	r0, r3
 800700c:	f00c faa0 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007010:	463b      	mov	r3, r7
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ff12 	bl	8006e3c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007018:	463b      	mov	r3, r7
 800701a:	4618      	mov	r0, r3
 800701c:	f00c f922 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8007020:	2301      	movs	r3, #1
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000758 	.word	0x20000758

08007030 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	println(wlcm);
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	4909      	ldr	r1, [pc, #36]	; (8007064 <_ZL7bannerbRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>)
 800703e:	4618      	mov	r0, r3
 8007040:	f00c fa86 	bl	8013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007044:	f107 0308 	add.w	r3, r7, #8
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fef7 	bl	8006e3c <_ZL7printlnNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f00c f906 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return true;
 8007058:	2301      	movs	r3, #1
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000758 	.word	0x20000758

08007068 <_write>:
/* USER CODE BEGIN PFP */

void I2C_ClearBusyFlagErratum(struct I2C_Module* i2c);

// Printf() function calls will be serviced by USB interface.
extern "C" int _write(int file, char *ptr, int len) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)ptr, len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	b29b      	uxth	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	68b8      	ldr	r0, [r7, #8]
 800707c:	f00b f98a 	bl	8012394 <CDC_Transmit_FS>
    return len;
 8007080:	687b      	ldr	r3, [r7, #4]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b0ec      	sub	sp, #432	; 0x1b0
 8007090:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007092:	f001 fa5f 	bl	8008554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007096:	f000 f91b 	bl	80072d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 800709a:	f000 fbf3 	bl	8007884 <_ZL11MX_DMA_Initv>
  MX_GPIO_Init();
 800709e:	f000 fc11 	bl	80078c4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80070a2:	f000 f99b 	bl	80073dc <_ZL12MX_ADC1_Initv>
  MX_FMPI2C1_Init();
 80070a6:	f000 f9d7 	bl	8007458 <_ZL15MX_FMPI2C1_Initv>
  MX_I2C3_Init();
 80070aa:	f000 fa15 	bl	80074d8 <_ZL12MX_I2C3_Initv>
  MX_RTC_Init();
 80070ae:	f000 fa47 	bl	8007540 <_ZL11MX_RTC_Initv>
  MX_TIM4_Init();
 80070b2:	f000 fa6f 	bl	8007594 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 80070b6:	f000 fb89 	bl	80077cc <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 80070ba:	f000 fbb5 	bl	8007828 <_ZL19MX_USART3_UART_Initv>
  MX_USB_DEVICE_Init();
 80070be:	f00b f8ab 	bl	8012218 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80070c2:	f000 fb27 	bl	8007714 <_ZL12MX_TIM5_Initv>
  tmp_i2c.sclPort = GPIOA;
  I2C_ClearBusyFlagErratum(&tmp_i2c);
  */

  // Give the scheduler its timer object.
  scheduler.init(&htim5);					// Timer 5 setup to interrupt every .01ms, 100 ticks = 1ms.
 80070c6:	4974      	ldr	r1, [pc, #464]	; (8007298 <main+0x20c>)
 80070c8:	4874      	ldr	r0, [pc, #464]	; (800729c <main+0x210>)
 80070ca:	f000 fc70 	bl	80079ae <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>

  // Adding LED Blink Task...
  BlinkTask blink(0.0f, 1.0f, .00001f, 0, "status_led");	// 1Hz
 80070ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80070d2:	4618      	mov	r0, r3
 80070d4:	f00b fe4f 	bl	8012d76 <_ZNSaIcEC1Ev>
 80070d8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80070dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070e0:	496f      	ldr	r1, [pc, #444]	; (80072a0 <main+0x214>)
 80070e2:	4618      	mov	r0, r3
 80070e4:	f00c fa68 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80070e8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070f0:	2100      	movs	r1, #0
 80070f2:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 80072a4 <main+0x218>
 80070f6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80070fa:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80072a8 <main+0x21c>
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fb ffd2 	bl	80030a8 <_ZN9BlinkTaskC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007104:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007108:	4618      	mov	r0, r3
 800710a:	f00c f8ab 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800710e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007112:	4618      	mov	r0, r3
 8007114:	f00b fe30 	bl	8012d78 <_ZNSaIcED1Ev>
  scheduler.push_back( &blink );
 8007118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800711c:	4619      	mov	r1, r3
 800711e:	485f      	ldr	r0, [pc, #380]	; (800729c <main+0x210>)
 8007120:	f000 fc53 	bl	80079ca <_ZN10TaskMasterILi10EE9push_backEP4Task>

  // Adding BMI088 Driver Task...
  BMI088 bm(0.0f, 0.00125f, .00001f, 0, "imu");	// 800Hz
 8007124:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007128:	4618      	mov	r0, r3
 800712a:	f00b fe24 	bl	8012d76 <_ZNSaIcEC1Ev>
 800712e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8007132:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007136:	495d      	ldr	r1, [pc, #372]	; (80072ac <main+0x220>)
 8007138:	4618      	mov	r0, r3
 800713a:	f00c fa3d 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800713e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8007142:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007146:	2100      	movs	r1, #0
 8007148:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80072a4 <main+0x218>
 800714c:	eddf 0a58 	vldr	s1, [pc, #352]	; 80072b0 <main+0x224>
 8007150:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80072a8 <main+0x21c>
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 ffa3 	bl	80010a0 <_ZN6BMI088C1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800715a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800715e:	4618      	mov	r0, r3
 8007160:	f00c f880 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007164:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007168:	4618      	mov	r0, r3
 800716a:	f00b fe05 	bl	8012d78 <_ZNSaIcED1Ev>
  if (!bm.initialize(&hfmpi2c1))
 800716e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007172:	4950      	ldr	r1, [pc, #320]	; (80072b4 <main+0x228>)
 8007174:	4618      	mov	r0, r3
 8007176:	f7fa fc48 	bl	8001a0a <_ZN6BMI08810initializeEP22__FMPI2C_HandleTypeDef>
 800717a:	4603      	mov	r3, r0
 800717c:	f083 0301 	eor.w	r3, r3, #1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <main+0x102>
  {
	  printf("Failed to init BMI088, verify its connected!\r\n");
 8007186:	484c      	ldr	r0, [pc, #304]	; (80072b8 <main+0x22c>)
 8007188:	f00d f9a2 	bl	80144d0 <puts>
 800718c:	e005      	b.n	800719a <main+0x10e>
  }else{
	  scheduler.push_back( &bm );
 800718e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007192:	4619      	mov	r1, r3
 8007194:	4841      	ldr	r0, [pc, #260]	; (800729c <main+0x210>)
 8007196:	f000 fc18 	bl	80079ca <_ZN10TaskMasterILi10EE9push_backEP4Task>
  }

  // Adding Battery Monitoring Task...
  BattMon bmon(0.0f, 0.25f, .00001f, 0, "battmon");	// 4Hz
 800719a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800719e:	4618      	mov	r0, r3
 80071a0:	f00b fde9 	bl	8012d76 <_ZNSaIcEC1Ev>
 80071a4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80071a8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80071ac:	4943      	ldr	r1, [pc, #268]	; (80072bc <main+0x230>)
 80071ae:	4618      	mov	r0, r3
 80071b0:	f00c fa02 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80071b4:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80071b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071bc:	2100      	movs	r1, #0
 80071be:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80072a4 <main+0x218>
 80071c2:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 80071c6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80072a8 <main+0x21c>
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fb fae8 	bl	80027a0 <_ZN7BattMonC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80071d0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80071d4:	4618      	mov	r0, r3
 80071d6:	f00c f845 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80071da:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80071de:	4618      	mov	r0, r3
 80071e0:	f00b fdca 	bl	8012d78 <_ZNSaIcED1Ev>
  bmon.init(&hadc1);
 80071e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071e8:	4935      	ldr	r1, [pc, #212]	; (80072c0 <main+0x234>)
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fb fb0e 	bl	800280c <_ZN7BattMon4initEP17ADC_HandleTypeDef>
  scheduler.push_back( &bmon );
 80071f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071f4:	4619      	mov	r1, r3
 80071f6:	4829      	ldr	r0, [pc, #164]	; (800729c <main+0x210>)
 80071f8:	f000 fbe7 	bl	80079ca <_ZN10TaskMasterILi10EE9push_backEP4Task>

  // Adding Telemetry Out process...
  TelemOut to(0.0f, 0.0025f, .00001f, 0, "telem_out");	// 400Hz
 80071fc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8007200:	4618      	mov	r0, r3
 8007202:	f00b fdb8 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007206:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800720a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800720e:	492d      	ldr	r1, [pc, #180]	; (80072c4 <main+0x238>)
 8007210:	4618      	mov	r0, r3
 8007212:	f00c f9d1 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007216:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 800721a:	463b      	mov	r3, r7
 800721c:	2100      	movs	r1, #0
 800721e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80072a4 <main+0x218>
 8007222:	eddf 0a29 	vldr	s1, [pc, #164]	; 80072c8 <main+0x23c>
 8007226:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80072a8 <main+0x21c>
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff f9dc 	bl	80065e8 <_ZN8TelemOutC1EfffcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8007230:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007234:	4618      	mov	r0, r3
 8007236:	f00c f815 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800723a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800723e:	4618      	mov	r0, r3
 8007240:	f00b fd9a 	bl	8012d78 <_ZNSaIcED1Ev>
  scheduler.push_back( &to );
 8007244:	463b      	mov	r3, r7
 8007246:	4619      	mov	r1, r3
 8007248:	4814      	ldr	r0, [pc, #80]	; (800729c <main+0x210>)
 800724a:	f000 fbbe 	bl	80079ca <_ZN10TaskMasterILi10EE9push_backEP4Task>
  {
	  printf("Failed to init DPS310, verify its connected!\r\n");
  }
  */

  scheduler.start();
 800724e:	4813      	ldr	r0, [pc, #76]	; (800729c <main+0x210>)
 8007250:	f000 fbe4 	bl	8007a1c <_ZN10TaskMasterILi10EE5startEv>

  // Singleton console object used in parallel with task scheduler. This allows console to restart scheduler if needed.
  // If you want to interact with scheduler apps inside the console, make sure you do cs.addCommand() before starting the console.
  cs.addCommandByTask(&blink);
 8007254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007258:	4619      	mov	r1, r3
 800725a:	481c      	ldr	r0, [pc, #112]	; (80072cc <main+0x240>)
 800725c:	f7fd f80b 	bl	8004276 <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bm);
 8007260:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007264:	4619      	mov	r1, r3
 8007266:	4819      	ldr	r0, [pc, #100]	; (80072cc <main+0x240>)
 8007268:	f7fd f805 	bl	8004276 <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&bmon);
 800726c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007270:	4619      	mov	r1, r3
 8007272:	4816      	ldr	r0, [pc, #88]	; (80072cc <main+0x240>)
 8007274:	f7fc ffff 	bl	8004276 <_ZN7Console16addCommandByTaskEP4Task>
  cs.addCommandByTask(&to);
 8007278:	463b      	mov	r3, r7
 800727a:	4619      	mov	r1, r3
 800727c:	4813      	ldr	r0, [pc, #76]	; (80072cc <main+0x240>)
 800727e:	f7fc fffa 	bl	8004276 <_ZN7Console16addCommandByTaskEP4Task>

  // This starts the console app.
  cs.start();
 8007282:	4812      	ldr	r0, [pc, #72]	; (80072cc <main+0x240>)
 8007284:	f7fc fcac 	bl	8003be0 <_ZN7Console5startEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 8007288:	4804      	ldr	r0, [pc, #16]	; (800729c <main+0x210>)
 800728a:	f000 fbd4 	bl	8007a36 <_ZN10TaskMasterILi10EE11runNextTaskEv>
	cs.loop();							// This allows the console app to check if the user has input any new commands.
 800728e:	480f      	ldr	r0, [pc, #60]	; (80072cc <main+0x240>)
 8007290:	f7fc fbe8 	bl	8003a64 <_ZN7Console4loopEv>
	scheduler.runNextTask();			// Loops the scheduler to ensure all tasks run at there defined times.
 8007294:	e7f8      	b.n	8007288 <main+0x1fc>
 8007296:	bf00      	nop
 8007298:	20000940 	.word	0x20000940
 800729c:	200006e0 	.word	0x200006e0
 80072a0:	08020af0 	.word	0x08020af0
 80072a4:	3727c5ac 	.word	0x3727c5ac
 80072a8:	00000000 	.word	0x00000000
 80072ac:	08020afc 	.word	0x08020afc
 80072b0:	3aa3d70a 	.word	0x3aa3d70a
 80072b4:	20000838 	.word	0x20000838
 80072b8:	08020b00 	.word	0x08020b00
 80072bc:	08020b30 	.word	0x08020b30
 80072c0:	200007f0 	.word	0x200007f0
 80072c4:	08020b38 	.word	0x08020b38
 80072c8:	3b23d70a 	.word	0x3b23d70a
 80072cc:	20000650 	.word	0x20000650

080072d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b094      	sub	sp, #80	; 0x50
 80072d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	2234      	movs	r2, #52	; 0x34
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f00c fb54 	bl	801398c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80072f4:	2300      	movs	r3, #0
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <SystemClock_Config+0x104>)
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	4a35      	ldr	r2, [pc, #212]	; (80073d4 <SystemClock_Config+0x104>)
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007302:	6413      	str	r3, [r2, #64]	; 0x40
 8007304:	4b33      	ldr	r3, [pc, #204]	; (80073d4 <SystemClock_Config+0x104>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007310:	2300      	movs	r3, #0
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <SystemClock_Config+0x108>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <SystemClock_Config+0x108>)
 800731a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <SystemClock_Config+0x108>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800732c:	2309      	movs	r3, #9
 800732e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007334:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8007336:	2300      	movs	r3, #0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800733a:	2301      	movs	r3, #1
 800733c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800733e:	2302      	movs	r3, #2
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8007348:	2308      	movs	r3, #8
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800734c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8007350:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007352:	2302      	movs	r3, #2
 8007354:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8007356:	2308      	movs	r3, #8
 8007358:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800735a:	2302      	movs	r3, #2
 800735c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800735e:	f107 031c 	add.w	r3, r7, #28
 8007362:	4618      	mov	r0, r3
 8007364:	f005 fb08 	bl	800c978 <HAL_RCC_OscConfig>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf14      	ite	ne
 800736e:	2301      	movne	r3, #1
 8007370:	2300      	moveq	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <SystemClock_Config+0xac>
	{
	Error_Handler();
 8007378:	f000 fb14 	bl	80079a4 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	*/
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800737c:	f004 fcb6 	bl	800bcec <HAL_PWREx_EnableOverDrive>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf14      	ite	ne
 8007386:	2301      	movne	r3, #1
 8007388:	2300      	moveq	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <SystemClock_Config+0xc4>
	{
	Error_Handler();
 8007390:	f000 fb08 	bl	80079a4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007394:	230f      	movs	r3, #15
 8007396:	60bb      	str	r3, [r7, #8]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007398:	2302      	movs	r3, #2
 800739a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80073a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073a4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80073a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073aa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80073ac:	f107 0308 	add.w	r3, r7, #8
 80073b0:	2105      	movs	r1, #5
 80073b2:	4618      	mov	r0, r3
 80073b4:	f004 fcea 	bl	800bd8c <HAL_RCC_ClockConfig>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <SystemClock_Config+0xfc>
	{
	Error_Handler();
 80073c8:	f000 faec 	bl	80079a4 <Error_Handler>
	}
}
 80073cc:	bf00      	nop
 80073ce:	3750      	adds	r7, #80	; 0x50
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40023800 	.word	0x40023800
 80073d8:	40007000 	.word	0x40007000

080073dc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	*/
	hadc1.Instance = ADC1;
 80073e0:	4b1a      	ldr	r3, [pc, #104]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 80073e2:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <_ZL12MX_ADC1_Initv+0x74>)
 80073e4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 80073e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073ec:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80073ee:	4b17      	ldr	r3, [pc, #92]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80073f4:	4b15      	ldr	r3, [pc, #84]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80073fa:	4b14      	ldr	r3, [pc, #80]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 800740a:	2200      	movs	r2, #0
 800740c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800740e:	4b0f      	ldr	r3, [pc, #60]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 8007410:	4a10      	ldr	r2, [pc, #64]	; (8007454 <_ZL12MX_ADC1_Initv+0x78>)
 8007412:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 8007416:	2200      	movs	r2, #0
 8007418:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800741a:	4b0c      	ldr	r3, [pc, #48]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 800741c:	2201      	movs	r2, #1
 800741e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 800742a:	2201      	movs	r2, #1
 800742c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800742e:	4807      	ldr	r0, [pc, #28]	; (800744c <_ZL12MX_ADC1_Initv+0x70>)
 8007430:	f001 f926 	bl	8008680 <HAL_ADC_Init>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	bf14      	ite	ne
 800743a:	2301      	movne	r3, #1
 800743c:	2300      	moveq	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <_ZL12MX_ADC1_Initv+0x6c>
	{
	Error_Handler();
 8007444:	f000 faae 	bl	80079a4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	200007f0 	.word	0x200007f0
 8007450:	40012000 	.word	0x40012000
 8007454:	0f000001 	.word	0x0f000001

08007458 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
	/* USER CODE END FMPI2C1_Init 0 */

	/* USER CODE BEGIN FMPI2C1_Init 1 */

	/* USER CODE END FMPI2C1_Init 1 */
	hfmpi2c1.Instance = FMPI2C1;
 800745c:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 800745e:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <_ZL15MX_FMPI2C1_Initv+0x78>)
 8007460:	601a      	str	r2, [r3, #0]
	hfmpi2c1.Init.Timing = 0x00401650;
 8007462:	4b1a      	ldr	r3, [pc, #104]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 8007466:	605a      	str	r2, [r3, #4]
	hfmpi2c1.Init.OwnAddress1 = 0;
 8007468:	4b18      	ldr	r3, [pc, #96]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 800746a:	2200      	movs	r2, #0
 800746c:	609a      	str	r2, [r3, #8]
	hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800746e:	4b17      	ldr	r3, [pc, #92]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007470:	2201      	movs	r2, #1
 8007472:	60da      	str	r2, [r3, #12]
	hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8007474:	4b15      	ldr	r3, [pc, #84]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
	hfmpi2c1.Init.OwnAddress2 = 0;
 800747a:	4b14      	ldr	r3, [pc, #80]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 800747c:	2200      	movs	r2, #0
 800747e:	615a      	str	r2, [r3, #20]
	hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8007480:	4b12      	ldr	r3, [pc, #72]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
	hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8007486:	4b11      	ldr	r3, [pc, #68]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007488:	2200      	movs	r2, #0
 800748a:	61da      	str	r2, [r3, #28]
	hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800748c:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 800748e:	2200      	movs	r2, #0
 8007490:	621a      	str	r2, [r3, #32]
	if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8007492:	480e      	ldr	r0, [pc, #56]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 8007494:	f002 fa18 	bl	80098c8 <HAL_FMPI2C_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <_ZL15MX_FMPI2C1_Initv+0x54>
	{
	Error_Handler();
 80074a8:	f000 fa7c 	bl	80079a4 <Error_Handler>
	}
	/** Configure Analogue filter
	*/
	if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80074ac:	2100      	movs	r1, #0
 80074ae:	4807      	ldr	r0, [pc, #28]	; (80074cc <_ZL15MX_FMPI2C1_Initv+0x74>)
 80074b0:	f002 fef4 	bl	800a29c <HAL_FMPI2CEx_ConfigAnalogFilter>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	2300      	moveq	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <_ZL15MX_FMPI2C1_Initv+0x70>
	{
		Error_Handler();
 80074c4:	f000 fa6e 	bl	80079a4 <Error_Handler>
	}
	/* USER CODE BEGIN FMPI2C1_Init 2 */

	/* USER CODE END FMPI2C1_Init 2 */

}
 80074c8:	bf00      	nop
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000838 	.word	0x20000838
 80074d0:	40006000 	.word	0x40006000
 80074d4:	00401650 	.word	0x00401650

080074d8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80074dc:	4b15      	ldr	r3, [pc, #84]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074de:	4a16      	ldr	r2, [pc, #88]	; (8007538 <_ZL12MX_I2C3_Initv+0x60>)
 80074e0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074e4:	4a15      	ldr	r2, [pc, #84]	; (800753c <_ZL12MX_I2C3_Initv+0x64>)
 80074e6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80074ee:	4b11      	ldr	r3, [pc, #68]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074f4:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074fa:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80074fc:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 80074fe:	2200      	movs	r2, #0
 8007500:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8007502:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 8007504:	2200      	movs	r2, #0
 8007506:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 800750a:	2200      	movs	r2, #0
 800750c:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 8007510:	2280      	movs	r2, #128	; 0x80
 8007512:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007514:	4807      	ldr	r0, [pc, #28]	; (8007534 <_ZL12MX_I2C3_Initv+0x5c>)
 8007516:	f003 f8d5 	bl	800a6c4 <HAL_I2C_Init>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <_ZL12MX_I2C3_Initv+0x56>
	{
		Error_Handler();
 800752a:	f000 fa3b 	bl	80079a4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000884 	.word	0x20000884
 8007538:	40005c00 	.word	0x40005c00
 800753c:	00061a80 	.word	0x00061a80

08007540 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <_ZL11MX_RTC_Initv+0x50>)
 8007548:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 800754c:	2200      	movs	r2, #0
 800754e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8007550:	4b0e      	ldr	r3, [pc, #56]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 8007552:	227f      	movs	r2, #127	; 0x7f
 8007554:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 8007558:	22ff      	movs	r2, #255	; 0xff
 800755a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 800755e:	2200      	movs	r2, #0
 8007560:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007562:	4b0a      	ldr	r3, [pc, #40]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 8007564:	2200      	movs	r2, #0
 8007566:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 800756a:	2200      	movs	r2, #0
 800756c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800756e:	4807      	ldr	r0, [pc, #28]	; (800758c <_ZL11MX_RTC_Initv+0x4c>)
 8007570:	f005 fca0 	bl	800ceb4 <HAL_RTC_Init>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <_ZL11MX_RTC_Initv+0x48>
	{
	Error_Handler();
 8007584:	f000 fa0e 	bl	80079a4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8007588:	bf00      	nop
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200008d8 	.word	0x200008d8
 8007590:	40002800 	.word	0x40002800

08007594 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08e      	sub	sp, #56	; 0x38
 8007598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800759a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075a8:	f107 0320 	add.w	r3, r7, #32
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80075b2:	1d3b      	adds	r3, r7, #4
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	611a      	str	r2, [r3, #16]
 80075c0:	615a      	str	r2, [r3, #20]
 80075c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80075c4:	4b51      	ldr	r3, [pc, #324]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075c6:	4a52      	ldr	r2, [pc, #328]	; (8007710 <_ZL12MX_TIM4_Initv+0x17c>)
 80075c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80075ca:	4b50      	ldr	r3, [pc, #320]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075cc:	2208      	movs	r2, #8
 80075ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075d0:	4b4e      	ldr	r3, [pc, #312]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 22221;
 80075d6:	4b4d      	ldr	r3, [pc, #308]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075d8:	f245 62cd 	movw	r2, #22221	; 0x56cd
 80075dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075de:	4b4b      	ldr	r3, [pc, #300]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075e4:	4b49      	ldr	r3, [pc, #292]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80075ea:	4848      	ldr	r0, [pc, #288]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80075ec:	f005 fd47 	bl	800d07e <HAL_TIM_Base_Init>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2301      	movne	r3, #1
 80075f8:	2300      	moveq	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8007600:	f000 f9d0 	bl	80079a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800760a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800760e:	4619      	mov	r1, r3
 8007610:	483e      	ldr	r0, [pc, #248]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 8007612:	f006 f817 	bl	800d644 <HAL_TIM_ConfigClockSource>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8007626:	f000 f9bd 	bl	80079a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800762a:	4838      	ldr	r0, [pc, #224]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 800762c:	f005 fde6 	bl	800d1fc <HAL_TIM_PWM_Init>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	bf14      	ite	ne
 8007636:	2301      	movne	r3, #1
 8007638:	2300      	moveq	r3, #0
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8007640:	f000 f9b0 	bl	80079a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007644:	2300      	movs	r3, #0
 8007646:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007648:	2300      	movs	r3, #0
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800764c:	f107 0320 	add.w	r3, r7, #32
 8007650:	4619      	mov	r1, r3
 8007652:	482e      	ldr	r0, [pc, #184]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 8007654:	f006 fbd0 	bl	800ddf8 <HAL_TIMEx_MasterConfigSynchronization>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8007668:	f000 f99c 	bl	80079a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800766c:	2360      	movs	r3, #96	; 0x60
 800766e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8007670:	f242 7310 	movw	r3, #10000	; 0x2710
 8007674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	2200      	movs	r2, #0
 8007682:	4619      	mov	r1, r3
 8007684:	4821      	ldr	r0, [pc, #132]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 8007686:	f005 ff1b 	bl	800d4c0 <HAL_TIM_PWM_ConfigChannel>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800769a:	f000 f983 	bl	80079a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	2204      	movs	r2, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4819      	ldr	r0, [pc, #100]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80076a6:	f005 ff0b 	bl	800d4c0 <HAL_TIM_PWM_ConfigChannel>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf14      	ite	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2300      	moveq	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 80076ba:	f000 f973 	bl	80079a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	2208      	movs	r2, #8
 80076c2:	4619      	mov	r1, r3
 80076c4:	4811      	ldr	r0, [pc, #68]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80076c6:	f005 fefb 	bl	800d4c0 <HAL_TIM_PWM_ConfigChannel>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <_ZL12MX_TIM4_Initv+0x14a>
  {
    Error_Handler();
 80076da:	f000 f963 	bl	80079a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	220c      	movs	r2, #12
 80076e2:	4619      	mov	r1, r3
 80076e4:	4809      	ldr	r0, [pc, #36]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 80076e6:	f005 feeb 	bl	800d4c0 <HAL_TIM_PWM_ConfigChannel>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2300      	moveq	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 80076fa:	f000 f953 	bl	80079a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80076fe:	4803      	ldr	r0, [pc, #12]	; (800770c <_ZL12MX_TIM4_Initv+0x178>)
 8007700:	f000 fc9c 	bl	800803c <HAL_TIM_MspPostInit>

}
 8007704:	bf00      	nop
 8007706:	3738      	adds	r7, #56	; 0x38
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200008f8 	.word	0x200008f8
 8007710:	40000800 	.word	0x40000800

08007714 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800771a:	f107 0308 	add.w	r3, r7, #8
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007728:	463b      	mov	r3, r7
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007730:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 8007732:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <_ZL12MX_TIM5_Initv+0xb4>)
 8007734:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8;
 8007736:	4b23      	ldr	r3, [pc, #140]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 8007738:	2208      	movs	r2, #8
 800773a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800773c:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 800773e:	2200      	movs	r2, #0
 8007740:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8007742:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 8007744:	2263      	movs	r2, #99	; 0x63
 8007746:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007748:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 800774a:	2200      	movs	r2, #0
 800774c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800774e:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 8007750:	2200      	movs	r2, #0
 8007752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007754:	481b      	ldr	r0, [pc, #108]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 8007756:	f005 fc92 	bl	800d07e <HAL_TIM_Base_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf14      	ite	ne
 8007760:	2301      	movne	r3, #1
 8007762:	2300      	moveq	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <_ZL12MX_TIM5_Initv+0x5a>
  {
    Error_Handler();
 800776a:	f000 f91b 	bl	80079a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800776e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007774:	f107 0308 	add.w	r3, r7, #8
 8007778:	4619      	mov	r1, r3
 800777a:	4812      	ldr	r0, [pc, #72]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 800777c:	f005 ff62 	bl	800d644 <HAL_TIM_ConfigClockSource>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <_ZL12MX_TIM5_Initv+0x80>
  {
    Error_Handler();
 8007790:	f000 f908 	bl	80079a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007798:	2300      	movs	r3, #0
 800779a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800779c:	463b      	mov	r3, r7
 800779e:	4619      	mov	r1, r3
 80077a0:	4808      	ldr	r0, [pc, #32]	; (80077c4 <_ZL12MX_TIM5_Initv+0xb0>)
 80077a2:	f006 fb29 	bl	800ddf8 <HAL_TIMEx_MasterConfigSynchronization>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <_ZL12MX_TIM5_Initv+0xa6>
  {
    Error_Handler();
 80077b6:	f000 f8f5 	bl	80079a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000940 	.word	0x20000940
 80077c8:	40000c00 	.word	0x40000c00

080077cc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80077d0:	4b13      	ldr	r3, [pc, #76]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077d2:	4a14      	ldr	r2, [pc, #80]	; (8007824 <_ZL19MX_USART1_UART_Initv+0x58>)
 80077d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077de:	4b10      	ldr	r3, [pc, #64]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80077e4:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80077f0:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077f2:	220c      	movs	r2, #12
 80077f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077f6:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80077fc:	4b08      	ldr	r3, [pc, #32]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007802:	4807      	ldr	r0, [pc, #28]	; (8007820 <_ZL19MX_USART1_UART_Initv+0x54>)
 8007804:	f006 fb88 	bl	800df18 <HAL_UART_Init>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8007818:	f000 f8c4 	bl	80079a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800781c:	bf00      	nop
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000988 	.word	0x20000988
 8007824:	40011000 	.word	0x40011000

08007828 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800782c:	4b13      	ldr	r3, [pc, #76]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 800782e:	4a14      	ldr	r2, [pc, #80]	; (8007880 <_ZL19MX_USART3_UART_Initv+0x58>)
 8007830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007832:	4b12      	ldr	r3, [pc, #72]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800783a:	4b10      	ldr	r3, [pc, #64]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 800783c:	2200      	movs	r2, #0
 800783e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007842:	2200      	movs	r2, #0
 8007844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007848:	2200      	movs	r2, #0
 800784a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 800784e:	220c      	movs	r2, #12
 8007850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007854:	2200      	movs	r2, #0
 8007856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 800785a:	2200      	movs	r2, #0
 800785c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800785e:	4807      	ldr	r0, [pc, #28]	; (800787c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007860:	f006 fb5a 	bl	800df18 <HAL_UART_Init>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8007874:	f000 f896 	bl	80079a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007878:	bf00      	nop
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200009cc 	.word	0x200009cc
 8007880:	40004800 	.word	0x40004800

08007884 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <_ZL11MX_DMA_Initv+0x3c>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <_ZL11MX_DMA_Initv+0x3c>)
 8007894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007898:	6313      	str	r3, [r2, #48]	; 0x30
 800789a:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <_ZL11MX_DMA_Initv+0x3c>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	203a      	movs	r0, #58	; 0x3a
 80078ac:	f001 fbd3 	bl	8009056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80078b0:	203a      	movs	r0, #58	; 0x3a
 80078b2:	f001 fbec 	bl	800908e <HAL_NVIC_EnableIRQ>

}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40023800 	.word	0x40023800

080078c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	60da      	str	r2, [r3, #12]
 80078d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	4b2f      	ldr	r3, [pc, #188]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	4a2e      	ldr	r2, [pc, #184]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 80078e4:	f043 0304 	orr.w	r3, r3, #4
 80078e8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ea:	4b2c      	ldr	r3, [pc, #176]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	4b28      	ldr	r3, [pc, #160]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	4a27      	ldr	r2, [pc, #156]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007904:	6313      	str	r3, [r2, #48]	; 0x30
 8007906:	4b25      	ldr	r3, [pc, #148]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	4b21      	ldr	r3, [pc, #132]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	4a20      	ldr	r2, [pc, #128]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6313      	str	r3, [r2, #48]	; 0x30
 8007922:	4b1e      	ldr	r3, [pc, #120]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	60bb      	str	r3, [r7, #8]
 800792c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	4a19      	ldr	r2, [pc, #100]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	6313      	str	r3, [r2, #48]	; 0x30
 800793e:	4b17      	ldr	r3, [pc, #92]	; (800799c <_ZL12MX_GPIO_Initv+0xd8>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	607b      	str	r3, [r7, #4]
 8007948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_LED_Pin|USR_LED_Pin, GPIO_PIN_RESET);
 800794a:	2200      	movs	r2, #0
 800794c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8007950:	4813      	ldr	r0, [pc, #76]	; (80079a0 <_ZL12MX_GPIO_Initv+0xdc>)
 8007952:	f002 fe83 	bl	800a65c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8007956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800795a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800795c:	2301      	movs	r3, #1
 800795e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007960:	2300      	movs	r3, #0
 8007962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007964:	2300      	movs	r3, #0
 8007966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8007968:	f107 0314 	add.w	r3, r7, #20
 800796c:	4619      	mov	r1, r3
 800796e:	480c      	ldr	r0, [pc, #48]	; (80079a0 <_ZL12MX_GPIO_Initv+0xdc>)
 8007970:	f002 fce0 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8007974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800797a:	2301      	movs	r3, #1
 800797c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007982:	2302      	movs	r3, #2
 8007984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8007986:	f107 0314 	add.w	r3, r7, #20
 800798a:	4619      	mov	r1, r3
 800798c:	4804      	ldr	r0, [pc, #16]	; (80079a0 <_ZL12MX_GPIO_Initv+0xdc>)
 800798e:	f002 fcd1 	bl	800a334 <HAL_GPIO_Init>

}
 8007992:	bf00      	nop
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	40020400 	.word	0x40020400

080079a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80079a8:	b672      	cpsid	i
}
 80079aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80079ac:	e7fe      	b.n	80079ac <Error_Handler+0x8>

080079ae <_ZN10TaskMasterILi10EE4initEP17TIM_HandleTypeDef>:
void TaskMaster<N>::init(TIM_HandleTypeDef* htim)
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
	_timer_inst = htim;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <_ZN10TaskMasterILi10EE9push_backEP4Task>:
	}
}

// Adding and removing tasks.
template <int N>
bool TaskMaster<N>::push_back(Task* new_task)
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
{
	for(int i = 0; i < N; i++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b09      	cmp	r3, #9
 80079dc:	dc17      	bgt.n	8007a0e <_ZN10TaskMasterILi10EE9push_backEP4Task+0x44>
	{
		// If task pointer has not been assigned, lets use that one before trying to dereference a nullptr.
		if (_taskList[i] == nullptr)
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10c      	bne.n	8007a06 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x3c>
		{
			_taskList[i] = new_task;
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	605a      	str	r2, [r3, #4]
			_openTasks--;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1e5a      	subs	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
			return true;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e004      	b.n	8007a10 <_ZN10TaskMasterILi10EE9push_backEP4Task+0x46>
	for(int i = 0; i < N; i++)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e7e4      	b.n	80079d8 <_ZN10TaskMasterILi10EE9push_backEP4Task+0xe>
		}

	}

	// All tasks are occupied, increase number of allowable tasks in task_constructor.
	return false;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <_ZN10TaskMasterILi10EE5startEv>:
void TaskMaster<N>::start()
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(_timer_inst);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f005 fb77 	bl	800d11c <HAL_TIM_Base_Start_IT>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <_ZN10TaskMasterILi10EE11runNextTaskEv>:
void TaskMaster<N>::runNextTask()
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < N; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	dc5b      	bgt.n	8007b00 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xca>
		if (_taskList[i] == nullptr) continue;
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d04f      	beq.n	8007af6 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc0>
		if (_taskList[i]->getState() == 1 )
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fe fc4f 	bl	8006304 <_ZN4Task8getStateEv>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	bf0c      	ite	eq
 8007a6c:	2301      	moveq	r3, #1
 8007a6e:	2300      	movne	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d040      	beq.n	8007af8 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
			_taskList[i]->setState(2);							// Mark task as running.
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fc4a 	bl	800631c <_ZN4Task8setStateEi>
			_taskList[i]->taskFunction();						// Run the overloaded task function.
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4798      	blx	r3
			_taskList[i]->setState(0);							// Mark as idle.
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fc33 	bl	800631c <_ZN4Task8setStateEi>
			if (_taskList[i]->getPeriod() == 0)
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fc53 	bl	800636c <_ZN4Task9getPeriodEv>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf0c      	ite	eq
 8007acc:	2301      	moveq	r3, #1
 8007ace:	2300      	movne	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
				_taskList[i]->setState(-1);					// Mark task as dead.
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fc19 	bl	800631c <_ZN4Task8setStateEi>
				_openTasks++;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e000      	b.n	8007af8 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc2>
		if (_taskList[i] == nullptr) continue;
 8007af6:	bf00      	nop
	for(int i = 0; i < N; i++)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e7a0      	b.n	8007a42 <_ZN10TaskMasterILi10EE11runNextTaskEv+0xc>
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b0a0      	sub	sp, #128	; 0x80
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	f040 80a0 	bne.w	8007c5a <_Z41__static_initialization_and_destruction_0ii+0x152>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b20:	4293      	cmp	r3, r2
 8007b22:	f040 809a 	bne.w	8007c5a <_Z41__static_initialization_and_destruction_0ii+0x152>
const std::string cursor = "> ";
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f00b f923 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007b30:	f107 0308 	add.w	r3, r7, #8
 8007b34:	461a      	mov	r2, r3
 8007b36:	4958      	ldr	r1, [pc, #352]	; (8007c98 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8007b38:	4858      	ldr	r0, [pc, #352]	; (8007c9c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8007b3a:	f00b fd3d 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	4618      	mov	r0, r3
 8007b44:	f00b f918 	bl	8012d78 <_ZNSaIcED1Ev>
const std::string wlcm =
 8007b48:	f107 030c 	add.w	r3, r7, #12
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f00b f912 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	461a      	mov	r2, r3
 8007b58:	4951      	ldr	r1, [pc, #324]	; (8007ca0 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8007b5a:	4852      	ldr	r0, [pc, #328]	; (8007ca4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8007b5c:	f00b fd2c 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
		"\r\n";
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	4618      	mov	r0, r3
 8007b66:	f00b f907 	bl	8012d78 <_ZNSaIcED1Ev>
static command help = command("help", &helpa, &helpb);
 8007b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f00b f901 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007b74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007b78:	f107 0310 	add.w	r3, r7, #16
 8007b7c:	494a      	ldr	r1, [pc, #296]	; (8007ca8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f00b fd1a 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007b84:	f107 0110 	add.w	r1, r7, #16
 8007b88:	4b48      	ldr	r3, [pc, #288]	; (8007cac <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8007b8a:	4a49      	ldr	r2, [pc, #292]	; (8007cb0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8007b8c:	4849      	ldr	r0, [pc, #292]	; (8007cb4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8007b8e:	f7fb fb25 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8007b92:	f107 0310 	add.w	r3, r7, #16
 8007b96:	4618      	mov	r0, r3
 8007b98:	f00b fb64 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f00b f8e9 	bl	8012d78 <_ZNSaIcED1Ev>
static command echo = command("echo", &echoa, &echob);
 8007ba6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007baa:	4618      	mov	r0, r3
 8007bac:	f00b f8e3 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007bb0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bb8:	493f      	ldr	r1, [pc, #252]	; (8007cb8 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f00b fcfc 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007bc0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007bc4:	4b3d      	ldr	r3, [pc, #244]	; (8007cbc <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8007bc6:	4a3e      	ldr	r2, [pc, #248]	; (8007cc0 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8007bc8:	483e      	ldr	r0, [pc, #248]	; (8007cc4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8007bca:	f7fb fb07 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8007bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f00b fb46 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007bd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f00b f8cb 	bl	8012d78 <_ZNSaIcED1Ev>
static command clear = command("clear", &cleara, &clearb);
 8007be2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007be6:	4618      	mov	r0, r3
 8007be8:	f00b f8c5 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007bec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007bf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007bf4:	4934      	ldr	r1, [pc, #208]	; (8007cc8 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f00b fcde 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007bfc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007c00:	4b32      	ldr	r3, [pc, #200]	; (8007ccc <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8007c02:	4a33      	ldr	r2, [pc, #204]	; (8007cd0 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8007c04:	4833      	ldr	r0, [pc, #204]	; (8007cd4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8007c06:	f7fb fae9 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8007c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f00b fb28 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f00b f8ad 	bl	8012d78 <_ZNSaIcED1Ev>
static command banner = command("banner", &bannera, &bannerb);
 8007c1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007c22:	4618      	mov	r0, r3
 8007c24:	f00b f8a7 	bl	8012d76 <_ZNSaIcEC1Ev>
 8007c28:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007c30:	4929      	ldr	r1, [pc, #164]	; (8007cd8 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8007c32:	4618      	mov	r0, r3
 8007c34:	f00b fcc0 	bl	80135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c38:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8007c3c:	4b27      	ldr	r3, [pc, #156]	; (8007cdc <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8007c3e:	4a28      	ldr	r2, [pc, #160]	; (8007ce0 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8007c40:	4828      	ldr	r0, [pc, #160]	; (8007ce4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8007c42:	f7fb facb 	bl	80031dc <_ZN7commandC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbvEPFbRS5_E>
 8007c46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f00b fb0a 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007c54:	4618      	mov	r0, r3
 8007c56:	f00b f88f 	bl	8012d78 <_ZNSaIcED1Ev>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d116      	bne.n	8007c8e <_Z41__static_initialization_and_destruction_0ii+0x186>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d111      	bne.n	8007c8e <_Z41__static_initialization_and_destruction_0ii+0x186>
 8007c6a:	481e      	ldr	r0, [pc, #120]	; (8007ce4 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8007c6c:	f7fb fad3 	bl	8003216 <_ZN7commandD1Ev>
static command clear = command("clear", &cleara, &clearb);
 8007c70:	4818      	ldr	r0, [pc, #96]	; (8007cd4 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8007c72:	f7fb fad0 	bl	8003216 <_ZN7commandD1Ev>
static command echo = command("echo", &echoa, &echob);
 8007c76:	4813      	ldr	r0, [pc, #76]	; (8007cc4 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8007c78:	f7fb facd 	bl	8003216 <_ZN7commandD1Ev>
static command help = command("help", &helpa, &helpb);
 8007c7c:	480d      	ldr	r0, [pc, #52]	; (8007cb4 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8007c7e:	f7fb faca 	bl	8003216 <_ZN7commandD1Ev>
const std::string wlcm =
 8007c82:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8007c84:	f00b faee 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
const std::string cursor = "> ";
 8007c88:	4804      	ldr	r0, [pc, #16]	; (8007c9c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8007c8a:	f00b faeb 	bl	8013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007c8e:	bf00      	nop
 8007c90:	3780      	adds	r7, #128	; 0x80
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	08020b44 	.word	0x08020b44
 8007c9c:	20000740 	.word	0x20000740
 8007ca0:	08020b48 	.word	0x08020b48
 8007ca4:	20000758 	.word	0x20000758
 8007ca8:	08021ca8 	.word	0x08021ca8
 8007cac:	08006ed5 	.word	0x08006ed5
 8007cb0:	08006ec5 	.word	0x08006ec5
 8007cb4:	20000770 	.word	0x20000770
 8007cb8:	08021cb0 	.word	0x08021cb0
 8007cbc:	08006f35 	.word	0x08006f35
 8007cc0:	08006eed 	.word	0x08006eed
 8007cc4:	20000790 	.word	0x20000790
 8007cc8:	08021cb8 	.word	0x08021cb8
 8007ccc:	08006fb1 	.word	0x08006fb1
 8007cd0:	08006f69 	.word	0x08006f69
 8007cd4:	200007b0 	.word	0x200007b0
 8007cd8:	08021cc0 	.word	0x08021cc0
 8007cdc:	08007031 	.word	0x08007031
 8007ce0:	08007001 	.word	0x08007001
 8007ce4:	200007d0 	.word	0x200007d0

08007ce8 <_GLOBAL__sub_I_hadc1>:
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	f7ff ff09 	bl	8007b08 <_Z41__static_initialization_and_destruction_0ii>
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_GLOBAL__sub_D_hadc1>:
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007d00:	2000      	movs	r0, #0
 8007d02:	f7ff ff01 	bl	8007b08 <_Z41__static_initialization_and_destruction_0ii>
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d0e:	2300      	movs	r3, #0
 8007d10:	607b      	str	r3, [r7, #4]
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d16:	4a0f      	ldr	r2, [pc, #60]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	4a08      	ldr	r2, [pc, #32]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d38:	6413      	str	r3, [r2, #64]	; 0x40
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_MspInit+0x4c>)
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40023800 	.word	0x40023800

08007d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d60:	f107 0314 	add.w	r3, r7, #20
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <HAL_ADC_MspInit+0x7c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d127      	bne.n	8007dca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d88:	6453      	str	r3, [r2, #68]	; 0x44
 8007d8a:	4b13      	ldr	r3, [pc, #76]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	4a0e      	ldr	r2, [pc, #56]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007da0:	f043 0301 	orr.w	r3, r3, #1
 8007da4:	6313      	str	r3, [r2, #48]	; 0x30
 8007da6:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <HAL_ADC_MspInit+0x80>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007db2:	23f0      	movs	r3, #240	; 0xf0
 8007db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007db6:	2303      	movs	r3, #3
 8007db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4805      	ldr	r0, [pc, #20]	; (8007ddc <HAL_ADC_MspInit+0x84>)
 8007dc6:	f002 fab5 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	; 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40012000 	.word	0x40012000
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	40020000 	.word	0x40020000

08007de0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b0a0      	sub	sp, #128	; 0x80
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	605a      	str	r2, [r3, #4]
 8007df2:	609a      	str	r2, [r3, #8]
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007df8:	f107 0310 	add.w	r3, r7, #16
 8007dfc:	225c      	movs	r2, #92	; 0x5c
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f00b fdc3 	bl	801398c <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <HAL_FMPI2C_MspInit+0xac>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d139      	bne.n	8007e84 <HAL_FMPI2C_MspInit+0xa4>
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8007e14:	2300      	movs	r3, #0
 8007e16:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e18:	f107 0310 	add.w	r3, r7, #16
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f004 f8cf 	bl	800bfc0 <HAL_RCCEx_PeriphCLKConfig>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8007e28:	f7ff fdbc 	bl	80079a4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e36:	f043 0304 	orr.w	r3, r3, #4
 8007e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e48:	23c0      	movs	r3, #192	; 0xc0
 8007e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e4c:	2312      	movs	r3, #18
 8007e4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e54:	2303      	movs	r3, #3
 8007e56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8007e58:	2304      	movs	r3, #4
 8007e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e60:	4619      	mov	r1, r3
 8007e62:	480c      	ldr	r0, [pc, #48]	; (8007e94 <HAL_FMPI2C_MspInit+0xb4>)
 8007e64:	f002 fa66 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60bb      	str	r3, [r7, #8]
 8007e6c:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	4a07      	ldr	r2, [pc, #28]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e76:	6413      	str	r3, [r2, #64]	; 0x40
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <HAL_FMPI2C_MspInit+0xb0>)
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8007e84:	bf00      	nop
 8007e86:	3780      	adds	r7, #128	; 0x80
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40006000 	.word	0x40006000
 8007e90:	40023800 	.word	0x40023800
 8007e94:	40020800 	.word	0x40020800

08007e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	; 0x28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <HAL_I2C_MspInit+0xc4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d14b      	bne.n	8007f52 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	4b28      	ldr	r3, [pc, #160]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007ec4:	f043 0304 	orr.w	r3, r3, #4
 8007ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eca:	4b25      	ldr	r3, [pc, #148]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	4b21      	ldr	r3, [pc, #132]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ef8:	2312      	movs	r3, #18
 8007efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f00:	2303      	movs	r3, #3
 8007f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007f04:	2304      	movs	r3, #4
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4815      	ldr	r0, [pc, #84]	; (8007f64 <HAL_I2C_MspInit+0xcc>)
 8007f10:	f002 fa10 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f1a:	2312      	movs	r3, #18
 8007f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f22:	2303      	movs	r3, #3
 8007f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007f26:	2304      	movs	r3, #4
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	4619      	mov	r1, r3
 8007f30:	480d      	ldr	r0, [pc, #52]	; (8007f68 <HAL_I2C_MspInit+0xd0>)
 8007f32:	f002 f9ff 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	4b09      	ldr	r3, [pc, #36]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f44:	6413      	str	r3, [r2, #64]	; 0x40
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <HAL_I2C_MspInit+0xc8>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007f52:	bf00      	nop
 8007f54:	3728      	adds	r7, #40	; 0x28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40005c00 	.word	0x40005c00
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40020800 	.word	0x40020800
 8007f68:	40020000 	.word	0x40020000

08007f6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b09a      	sub	sp, #104	; 0x68
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f74:	f107 030c 	add.w	r3, r7, #12
 8007f78:	225c      	movs	r2, #92	; 0x5c
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f00b fd05 	bl	801398c <memset>
  if(hrtc->Instance==RTC)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a0c      	ldr	r2, [pc, #48]	; (8007fb8 <HAL_RTC_MspInit+0x4c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d111      	bne.n	8007fb0 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f94:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f96:	f107 030c 	add.w	r3, r7, #12
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f004 f810 	bl	800bfc0 <HAL_RCCEx_PeriphCLKConfig>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007fa6:	f7ff fcfd 	bl	80079a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <HAL_RTC_MspInit+0x50>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007fb0:	bf00      	nop
 8007fb2:	3768      	adds	r7, #104	; 0x68
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	40002800 	.word	0x40002800
 8007fbc:	42470e3c 	.word	0x42470e3c

08007fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_TIM_Base_MspInit+0x70>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10e      	bne.n	8007ff0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	4b17      	ldr	r3, [pc, #92]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 8007fdc:	f043 0304 	orr.w	r3, r3, #4
 8007fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fe2:	4b14      	ldr	r3, [pc, #80]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007fee:	e01a      	b.n	8008026 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a10      	ldr	r2, [pc, #64]	; (8008038 <HAL_TIM_Base_MspInit+0x78>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d115      	bne.n	8008026 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 8008004:	f043 0308 	orr.w	r3, r3, #8
 8008008:	6413      	str	r3, [r2, #64]	; 0x40
 800800a:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <HAL_TIM_Base_MspInit+0x74>)
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	2032      	movs	r0, #50	; 0x32
 800801c:	f001 f81b 	bl	8009056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008020:	2032      	movs	r0, #50	; 0x32
 8008022:	f001 f834 	bl	800908e <HAL_NVIC_EnableIRQ>
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	40000800 	.word	0x40000800
 8008034:	40023800 	.word	0x40023800
 8008038:	40000c00 	.word	0x40000c00

0800803c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	605a      	str	r2, [r3, #4]
 800804e:	609a      	str	r2, [r3, #8]
 8008050:	60da      	str	r2, [r3, #12]
 8008052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <HAL_TIM_MspPostInit+0x68>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d11e      	bne.n	800809c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <HAL_TIM_MspPostInit+0x6c>)
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <HAL_TIM_MspPostInit+0x6c>)
 8008068:	f043 0302 	orr.w	r3, r3, #2
 800806c:	6313      	str	r3, [r2, #48]	; 0x30
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <HAL_TIM_MspPostInit+0x6c>)
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	60bb      	str	r3, [r7, #8]
 8008078:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800807a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800807e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008080:	2302      	movs	r3, #2
 8008082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800808c:	2302      	movs	r3, #2
 800808e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008090:	f107 030c 	add.w	r3, r7, #12
 8008094:	4619      	mov	r1, r3
 8008096:	4805      	ldr	r0, [pc, #20]	; (80080ac <HAL_TIM_MspPostInit+0x70>)
 8008098:	f002 f94c 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800809c:	bf00      	nop
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40020400 	.word	0x40020400

080080b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b8:	f107 031c 	add.w	r3, r7, #28
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a5d      	ldr	r2, [pc, #372]	; (8008244 <HAL_UART_MspInit+0x194>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d163      	bne.n	800819a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	4b5c      	ldr	r3, [pc, #368]	; (8008248 <HAL_UART_MspInit+0x198>)
 80080d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080da:	4a5b      	ldr	r2, [pc, #364]	; (8008248 <HAL_UART_MspInit+0x198>)
 80080dc:	f043 0310 	orr.w	r3, r3, #16
 80080e0:	6453      	str	r3, [r2, #68]	; 0x44
 80080e2:	4b59      	ldr	r3, [pc, #356]	; (8008248 <HAL_UART_MspInit+0x198>)
 80080e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	4b55      	ldr	r3, [pc, #340]	; (8008248 <HAL_UART_MspInit+0x198>)
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	4a54      	ldr	r2, [pc, #336]	; (8008248 <HAL_UART_MspInit+0x198>)
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	6313      	str	r3, [r2, #48]	; 0x30
 80080fe:	4b52      	ldr	r3, [pc, #328]	; (8008248 <HAL_UART_MspInit+0x198>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800810a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800810e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008110:	2302      	movs	r3, #2
 8008112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008118:	2303      	movs	r3, #3
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800811c:	2307      	movs	r3, #7
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008120:	f107 031c 	add.w	r3, r7, #28
 8008124:	4619      	mov	r1, r3
 8008126:	4849      	ldr	r0, [pc, #292]	; (800824c <HAL_UART_MspInit+0x19c>)
 8008128:	f002 f904 	bl	800a334 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800812c:	4b48      	ldr	r3, [pc, #288]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 800812e:	4a49      	ldr	r2, [pc, #292]	; (8008254 <HAL_UART_MspInit+0x1a4>)
 8008130:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008132:	4b47      	ldr	r3, [pc, #284]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008134:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008138:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800813a:	4b45      	ldr	r3, [pc, #276]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 800813c:	2200      	movs	r2, #0
 800813e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008140:	4b43      	ldr	r3, [pc, #268]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008142:	2200      	movs	r2, #0
 8008144:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008146:	4b42      	ldr	r3, [pc, #264]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800814c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800814e:	4b40      	ldr	r3, [pc, #256]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008150:	2200      	movs	r2, #0
 8008152:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008154:	4b3e      	ldr	r3, [pc, #248]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008156:	2200      	movs	r2, #0
 8008158:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800815a:	4b3d      	ldr	r3, [pc, #244]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 800815c:	2200      	movs	r2, #0
 800815e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008160:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008162:	2200      	movs	r2, #0
 8008164:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008166:	4b3a      	ldr	r3, [pc, #232]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008168:	2200      	movs	r2, #0
 800816a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800816c:	4838      	ldr	r0, [pc, #224]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 800816e:	f000 ffa9 	bl	80090c4 <HAL_DMA_Init>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008178:	f7ff fc14 	bl	80079a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a34      	ldr	r2, [pc, #208]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008180:	639a      	str	r2, [r3, #56]	; 0x38
 8008182:	4a33      	ldr	r2, [pc, #204]	; (8008250 <HAL_UART_MspInit+0x1a0>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008188:	2200      	movs	r2, #0
 800818a:	2100      	movs	r1, #0
 800818c:	2025      	movs	r0, #37	; 0x25
 800818e:	f000 ff62 	bl	8009056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008192:	2025      	movs	r0, #37	; 0x25
 8008194:	f000 ff7b 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008198:	e04f      	b.n	800823a <HAL_UART_MspInit+0x18a>
  else if(huart->Instance==USART3)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <HAL_UART_MspInit+0x1a8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d14a      	bne.n	800823a <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	4b27      	ldr	r3, [pc, #156]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	4a26      	ldr	r2, [pc, #152]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b2:	6413      	str	r3, [r2, #64]	; 0x40
 80081b4:	4b24      	ldr	r3, [pc, #144]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	4b20      	ldr	r3, [pc, #128]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081ca:	f043 0304 	orr.w	r3, r3, #4
 80081ce:	6313      	str	r3, [r2, #48]	; 0x30
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081dc:	2300      	movs	r3, #0
 80081de:	60bb      	str	r3, [r7, #8]
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	4a18      	ldr	r2, [pc, #96]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081e6:	f043 0302 	orr.w	r3, r3, #2
 80081ea:	6313      	str	r3, [r2, #48]	; 0x30
 80081ec:	4b16      	ldr	r3, [pc, #88]	; (8008248 <HAL_UART_MspInit+0x198>)
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	60bb      	str	r3, [r7, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80081f8:	2320      	movs	r3, #32
 80081fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fc:	2302      	movs	r3, #2
 80081fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008200:	2300      	movs	r3, #0
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008204:	2303      	movs	r3, #3
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008208:	2307      	movs	r3, #7
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800820c:	f107 031c 	add.w	r3, r7, #28
 8008210:	4619      	mov	r1, r3
 8008212:	4812      	ldr	r0, [pc, #72]	; (800825c <HAL_UART_MspInit+0x1ac>)
 8008214:	f002 f88e 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800821e:	2302      	movs	r3, #2
 8008220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008222:	2300      	movs	r3, #0
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008226:	2303      	movs	r3, #3
 8008228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800822a:	2307      	movs	r3, #7
 800822c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800822e:	f107 031c 	add.w	r3, r7, #28
 8008232:	4619      	mov	r1, r3
 8008234:	480a      	ldr	r0, [pc, #40]	; (8008260 <HAL_UART_MspInit+0x1b0>)
 8008236:	f002 f87d 	bl	800a334 <HAL_GPIO_Init>
}
 800823a:	bf00      	nop
 800823c:	3730      	adds	r7, #48	; 0x30
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40011000 	.word	0x40011000
 8008248:	40023800 	.word	0x40023800
 800824c:	40020000 	.word	0x40020000
 8008250:	20000a10 	.word	0x20000a10
 8008254:	40026440 	.word	0x40026440
 8008258:	40004800 	.word	0x40004800
 800825c:	40020800 	.word	0x40020800
 8008260:	40020400 	.word	0x40020400

08008264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008268:	e7fe      	b.n	8008268 <NMI_Handler+0x4>

0800826a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800826a:	b480      	push	{r7}
 800826c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800826e:	e7fe      	b.n	800826e <HardFault_Handler+0x4>

08008270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008274:	e7fe      	b.n	8008274 <MemManage_Handler+0x4>

08008276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008276:	b480      	push	{r7}
 8008278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800827a:	e7fe      	b.n	800827a <BusFault_Handler+0x4>

0800827c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008280:	e7fe      	b.n	8008280 <UsageFault_Handler+0x4>

08008282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008282:	b480      	push	{r7}
 8008284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008286:	bf00      	nop
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800829e:	b480      	push	{r7}
 80082a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082b0:	f000 f9a2 	bl	80085f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082b4:	bf00      	nop
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80082bc:	4802      	ldr	r0, [pc, #8]	; (80082c8 <USART1_IRQHandler+0x10>)
 80082be:	f005 ff3b 	bl	800e138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000988 	.word	0x20000988

080082cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80082d0:	4802      	ldr	r0, [pc, #8]	; (80082dc <TIM5_IRQHandler+0x10>)
 80082d2:	f004 ffec 	bl	800d2ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80082d6:	bf00      	nop
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000940 	.word	0x20000940

080082e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80082e4:	4802      	ldr	r0, [pc, #8]	; (80082f0 <DMA2_Stream2_IRQHandler+0x10>)
 80082e6:	f001 f885 	bl	80093f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000a10 	.word	0x20000a10

080082f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80082f8:	4802      	ldr	r0, [pc, #8]	; (8008304 <OTG_FS_IRQHandler+0x10>)
 80082fa:	f002 fc7e 	bl	800abfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80082fe:	bf00      	nop
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	200021ac 	.word	0x200021ac

08008308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	return 1;
 800830c:	2301      	movs	r3, #1
}
 800830e:	4618      	mov	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <_kill>:

int _kill(int pid, int sig)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008322:	f00b fac3 	bl	80138ac <__errno>
 8008326:	4603      	mov	r3, r0
 8008328:	2216      	movs	r2, #22
 800832a:	601a      	str	r2, [r3, #0]
	return -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <_exit>:

void _exit (int status)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008340:	f04f 31ff 	mov.w	r1, #4294967295
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ffe7 	bl	8008318 <_kill>
	while (1) {}		/* Make sure we hang here */
 800834a:	e7fe      	b.n	800834a <_exit+0x12>

0800834c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	e00a      	b.n	8008374 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800835e:	f3af 8000 	nop.w
 8008362:	4601      	mov	r1, r0
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	60ba      	str	r2, [r7, #8]
 800836a:	b2ca      	uxtb	r2, r1
 800836c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3301      	adds	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	429a      	cmp	r2, r3
 800837a:	dbf0      	blt.n	800835e <_read+0x12>
	}

return len;
 800837c:	687b      	ldr	r3, [r7, #4]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
	return -1;
 800838e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008392:	4618      	mov	r0, r3
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083ae:	605a      	str	r2, [r3, #4]
	return 0;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <_isatty>:

int _isatty(int file)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	return 1;
 80083c6:	2301      	movs	r3, #1
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
	return 0;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083f8:	4a14      	ldr	r2, [pc, #80]	; (800844c <_sbrk+0x5c>)
 80083fa:	4b15      	ldr	r3, [pc, #84]	; (8008450 <_sbrk+0x60>)
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <_sbrk+0x64>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <_sbrk+0x64>)
 800840e:	4a12      	ldr	r2, [pc, #72]	; (8008458 <_sbrk+0x68>)
 8008410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <_sbrk+0x64>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	d207      	bcs.n	8008430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008420:	f00b fa44 	bl	80138ac <__errno>
 8008424:	4603      	mov	r3, r0
 8008426:	220c      	movs	r2, #12
 8008428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	e009      	b.n	8008444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <_sbrk+0x64>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <_sbrk+0x64>)
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	4a05      	ldr	r2, [pc, #20]	; (8008454 <_sbrk+0x64>)
 8008440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20020000 	.word	0x20020000
 8008450:	00000400 	.word	0x00000400
 8008454:	20000a70 	.word	0x20000a70
 8008458:	200025c8 	.word	0x200025c8

0800845c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <SystemInit+0x20>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	4a05      	ldr	r2, [pc, #20]	; (800847c <SystemInit+0x20>)
 8008468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800846c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008470:	bf00      	nop
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	e000ed00 	.word	0xe000ed00

08008480 <_ZN7imu_msgC1Ev>:

#include "main.h"

// Define IMU topic
typedef struct imu_msg imu_msg_struct;
struct imu_msg
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	769a      	strb	r2, [r3, #26]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <_ZN8batt_msgC1Ev>:
};
extern imu_msg_struct sys_imu_topic;

// Define Battery Mon topic
typedef struct batt_msg batt_msg_struct;
struct batt_msg
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	751a      	strb	r2, [r3, #20]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <_Z41__static_initialization_and_destruction_0ii>:
 */

#include "uTopics.hpp"

imu_msg_struct sys_imu_topic;
batt_msg_struct sys_batt_topic;
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10a      	bne.n	80084de <_Z41__static_initialization_and_destruction_0ii+0x26>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d105      	bne.n	80084de <_Z41__static_initialization_and_destruction_0ii+0x26>
imu_msg_struct sys_imu_topic;
 80084d2:	4805      	ldr	r0, [pc, #20]	; (80084e8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80084d4:	f7ff ffd4 	bl	8008480 <_ZN7imu_msgC1Ev>
batt_msg_struct sys_batt_topic;
 80084d8:	4804      	ldr	r0, [pc, #16]	; (80084ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80084da:	f7ff ffdf 	bl	800849c <_ZN8batt_msgC1Ev>
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000a74 	.word	0x20000a74
 80084ec:	20000a90 	.word	0x20000a90

080084f0 <_GLOBAL__sub_I_sys_imu_topic>:
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80084f8:	2001      	movs	r0, #1
 80084fa:	f7ff ffdd 	bl	80084b8 <_Z41__static_initialization_and_destruction_0ii>
 80084fe:	bd80      	pop	{r7, pc}

08008500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008504:	480d      	ldr	r0, [pc, #52]	; (800853c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008506:	490e      	ldr	r1, [pc, #56]	; (8008540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008508:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800850a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800850c:	e002      	b.n	8008514 <LoopCopyDataInit>

0800850e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800850e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008512:	3304      	adds	r3, #4

08008514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008518:	d3f9      	bcc.n	800850e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800851a:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800851c:	4c0b      	ldr	r4, [pc, #44]	; (800854c <LoopFillZerobss+0x26>)
  movs r3, #0
 800851e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008520:	e001      	b.n	8008526 <LoopFillZerobss>

08008522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008524:	3204      	adds	r2, #4

08008526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008528:	d3fb      	bcc.n	8008522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800852a:	f7ff ff97 	bl	800845c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800852e:	f00b f9c3 	bl	80138b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008532:	f7fe fdab 	bl	800708c <main>
  bx  lr    
 8008536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800853c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008540:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8008544:	08022350 	.word	0x08022350
  ldr r2, =_sbss
 8008548:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 800854c:	200025c4 	.word	0x200025c4

08008550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008550:	e7fe      	b.n	8008550 <ADC_IRQHandler>
	...

08008554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008558:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <HAL_Init+0x40>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0d      	ldr	r2, [pc, #52]	; (8008594 <HAL_Init+0x40>)
 800855e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008564:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <HAL_Init+0x40>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a0a      	ldr	r2, [pc, #40]	; (8008594 <HAL_Init+0x40>)
 800856a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800856e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008570:	4b08      	ldr	r3, [pc, #32]	; (8008594 <HAL_Init+0x40>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a07      	ldr	r2, [pc, #28]	; (8008594 <HAL_Init+0x40>)
 8008576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800857c:	2003      	movs	r0, #3
 800857e:	f000 fd5f 	bl	8009040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008582:	200f      	movs	r0, #15
 8008584:	f000 f808 	bl	8008598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008588:	f7ff fbbe 	bl	8007d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40023c00 	.word	0x40023c00

08008598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <HAL_InitTick+0x54>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_InitTick+0x58>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4619      	mov	r1, r3
 80085aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80085b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fd77 	bl	80090aa <HAL_SYSTICK_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e00e      	b.n	80085e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b0f      	cmp	r3, #15
 80085ca:	d80a      	bhi.n	80085e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085cc:	2200      	movs	r2, #0
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	f000 fd3f 	bl	8009056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085d8:	4a06      	ldr	r2, [pc, #24]	; (80085f4 <HAL_InitTick+0x5c>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000000 	.word	0x20000000
 80085f0:	20000008 	.word	0x20000008
 80085f4:	20000004 	.word	0x20000004

080085f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <HAL_IncTick+0x20>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	4b06      	ldr	r3, [pc, #24]	; (800861c <HAL_IncTick+0x24>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4413      	add	r3, r2
 8008608:	4a04      	ldr	r2, [pc, #16]	; (800861c <HAL_IncTick+0x24>)
 800860a:	6013      	str	r3, [r2, #0]
}
 800860c:	bf00      	nop
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000008 	.word	0x20000008
 800861c:	20000cd8 	.word	0x20000cd8

08008620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  return uwTick;
 8008624:	4b03      	ldr	r3, [pc, #12]	; (8008634 <HAL_GetTick+0x14>)
 8008626:	681b      	ldr	r3, [r3, #0]
}
 8008628:	4618      	mov	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000cd8 	.word	0x20000cd8

08008638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008640:	f7ff ffee 	bl	8008620 <HAL_GetTick>
 8008644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d005      	beq.n	800865e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <HAL_Delay+0x44>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800865e:	bf00      	nop
 8008660:	f7ff ffde 	bl	8008620 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d8f7      	bhi.n	8008660 <HAL_Delay+0x28>
  {
  }
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000008 	.word	0x20000008

08008680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e033      	b.n	80086fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fb5a 	bl	8007d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d118      	bne.n	80086f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80086c6:	f023 0302 	bic.w	r3, r3, #2
 80086ca:	f043 0202 	orr.w	r2, r3, #2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fae8 	bl	8008ca8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
 80086ee:	e001      	b.n	80086f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_ADC_Start+0x1a>
 800871e:	2302      	movs	r3, #2
 8008720:	e0b2      	b.n	8008888 <HAL_ADC_Start+0x180>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d018      	beq.n	800876a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008748:	4b52      	ldr	r3, [pc, #328]	; (8008894 <HAL_ADC_Start+0x18c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a52      	ldr	r2, [pc, #328]	; (8008898 <HAL_ADC_Start+0x190>)
 800874e:	fba2 2303 	umull	r2, r3, r2, r3
 8008752:	0c9a      	lsrs	r2, r3, #18
 8008754:	4613      	mov	r3, r2
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4413      	add	r3, r2
 800875a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800875c:	e002      	b.n	8008764 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	3b01      	subs	r3, #1
 8008762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f9      	bne.n	800875e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b01      	cmp	r3, #1
 8008776:	d17a      	bne.n	800886e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b6:	d106      	bne.n	80087c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087bc:	f023 0206 	bic.w	r2, r3, #6
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
 80087c4:	e002      	b.n	80087cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80087d4:	4b31      	ldr	r3, [pc, #196]	; (800889c <HAL_ADC_Start+0x194>)
 80087d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80087e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f003 031f 	and.w	r3, r3, #31
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d12a      	bne.n	8008844 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a2b      	ldr	r2, [pc, #172]	; (80088a0 <HAL_ADC_Start+0x198>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d015      	beq.n	8008824 <HAL_ADC_Start+0x11c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a29      	ldr	r2, [pc, #164]	; (80088a4 <HAL_ADC_Start+0x19c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d105      	bne.n	800880e <HAL_ADC_Start+0x106>
 8008802:	4b26      	ldr	r3, [pc, #152]	; (800889c <HAL_ADC_Start+0x194>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f003 031f 	and.w	r3, r3, #31
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a25      	ldr	r2, [pc, #148]	; (80088a8 <HAL_ADC_Start+0x1a0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d136      	bne.n	8008886 <HAL_ADC_Start+0x17e>
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <HAL_ADC_Start+0x194>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b00      	cmp	r3, #0
 8008822:	d130      	bne.n	8008886 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d129      	bne.n	8008886 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	e020      	b.n	8008886 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_ADC_Start+0x198>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d11b      	bne.n	8008886 <HAL_ADC_Start+0x17e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d114      	bne.n	8008886 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800886a:	609a      	str	r2, [r3, #8]
 800886c:	e00b      	b.n	8008886 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f043 0210 	orr.w	r2, r3, #16
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887e:	f043 0201 	orr.w	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	20000000 	.word	0x20000000
 8008898:	431bde83 	.word	0x431bde83
 800889c:	40012300 	.word	0x40012300
 80088a0:	40012000 	.word	0x40012000
 80088a4:	40012100 	.word	0x40012100
 80088a8:	40012200 	.word	0x40012200

080088ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_ADC_Stop+0x16>
 80088be:	2302      	movs	r3, #2
 80088c0:	e021      	b.n	8008906 <HAL_ADC_Stop+0x5a>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	f043 0201 	orr.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892e:	d113      	bne.n	8008958 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800893a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800893e:	d10b      	bne.n	8008958 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e063      	b.n	8008a20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008958:	f7ff fe62 	bl	8008620 <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800895e:	e021      	b.n	80089a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008966:	d01d      	beq.n	80089a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <HAL_ADC_PollForConversion+0x6c>
 800896e:	f7ff fe57 	bl	8008620 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d212      	bcs.n	80089a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b02      	cmp	r3, #2
 800898a:	d00b      	beq.n	80089a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	f043 0204 	orr.w	r2, r3, #4
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e03d      	b.n	8008a20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d1d6      	bne.n	8008960 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f06f 0212 	mvn.w	r2, #18
 80089ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d123      	bne.n	8008a1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11f      	bne.n	8008a1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d006      	beq.n	80089fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d111      	bne.n	8008a1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f043 0201 	orr.w	r2, r3, #1
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_ADC_ConfigChannel+0x1c>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e113      	b.n	8008c88 <HAL_ADC_ConfigChannel+0x244>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b09      	cmp	r3, #9
 8008a6e:	d925      	bls.n	8008abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68d9      	ldr	r1, [r3, #12]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4613      	mov	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	3b1e      	subs	r3, #30
 8008a86:	2207      	movs	r2, #7
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	43da      	mvns	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	400a      	ands	r2, r1
 8008a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68d9      	ldr	r1, [r3, #12]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4403      	add	r3, r0
 8008aae:	3b1e      	subs	r3, #30
 8008ab0:	409a      	lsls	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	60da      	str	r2, [r3, #12]
 8008aba:	e022      	b.n	8008b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6919      	ldr	r1, [r3, #16]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	4613      	mov	r3, r2
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	4413      	add	r3, r2
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	43da      	mvns	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	400a      	ands	r2, r1
 8008ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6919      	ldr	r1, [r3, #16]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4618      	mov	r0, r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4403      	add	r3, r0
 8008af8:	409a      	lsls	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b06      	cmp	r3, #6
 8008b08:	d824      	bhi.n	8008b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	3b05      	subs	r3, #5
 8008b1c:	221f      	movs	r2, #31
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	43da      	mvns	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	400a      	ands	r2, r1
 8008b2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4618      	mov	r0, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	3b05      	subs	r3, #5
 8008b46:	fa00 f203 	lsl.w	r2, r0, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	635a      	str	r2, [r3, #52]	; 0x34
 8008b52:	e04c      	b.n	8008bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b0c      	cmp	r3, #12
 8008b5a:	d824      	bhi.n	8008ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3b23      	subs	r3, #35	; 0x23
 8008b6e:	221f      	movs	r2, #31
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43da      	mvns	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	400a      	ands	r2, r1
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	3b23      	subs	r3, #35	; 0x23
 8008b98:	fa00 f203 	lsl.w	r2, r0, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba4:	e023      	b.n	8008bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	3b41      	subs	r3, #65	; 0x41
 8008bb8:	221f      	movs	r2, #31
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43da      	mvns	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	400a      	ands	r2, r1
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	3b41      	subs	r3, #65	; 0x41
 8008be2:	fa00 f203 	lsl.w	r2, r0, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008bee:	4b29      	ldr	r3, [pc, #164]	; (8008c94 <HAL_ADC_ConfigChannel+0x250>)
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a28      	ldr	r2, [pc, #160]	; (8008c98 <HAL_ADC_ConfigChannel+0x254>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d10f      	bne.n	8008c1c <HAL_ADC_ConfigChannel+0x1d8>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b12      	cmp	r3, #18
 8008c02:	d10b      	bne.n	8008c1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1d      	ldr	r2, [pc, #116]	; (8008c98 <HAL_ADC_ConfigChannel+0x254>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d12b      	bne.n	8008c7e <HAL_ADC_ConfigChannel+0x23a>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1c      	ldr	r2, [pc, #112]	; (8008c9c <HAL_ADC_ConfigChannel+0x258>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <HAL_ADC_ConfigChannel+0x1f4>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b11      	cmp	r3, #17
 8008c36:	d122      	bne.n	8008c7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <HAL_ADC_ConfigChannel+0x258>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d111      	bne.n	8008c7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <HAL_ADC_ConfigChannel+0x25c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a11      	ldr	r2, [pc, #68]	; (8008ca4 <HAL_ADC_ConfigChannel+0x260>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	0c9a      	lsrs	r2, r3, #18
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c70:	e002      	b.n	8008c78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f9      	bne.n	8008c72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	40012300 	.word	0x40012300
 8008c98:	40012000 	.word	0x40012000
 8008c9c:	10000012 	.word	0x10000012
 8008ca0:	20000000 	.word	0x20000000
 8008ca4:	431bde83 	.word	0x431bde83

08008ca8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008cb0:	4b79      	ldr	r3, [pc, #484]	; (8008e98 <ADC_Init+0x1f0>)
 8008cb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6859      	ldr	r1, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	021a      	lsls	r2, r3, #8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6859      	ldr	r1, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6899      	ldr	r1, [r3, #8]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	4a58      	ldr	r2, [pc, #352]	; (8008e9c <ADC_Init+0x1f4>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d022      	beq.n	8008d86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6899      	ldr	r1, [r3, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	e00f      	b.n	8008da6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0202 	bic.w	r2, r2, #2
 8008db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6899      	ldr	r1, [r3, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7e1b      	ldrb	r3, [r3, #24]
 8008dc0:	005a      	lsls	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01b      	beq.n	8008e0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6859      	ldr	r1, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	035a      	lsls	r2, r3, #13
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	605a      	str	r2, [r3, #4]
 8008e0a:	e007      	b.n	8008e1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	051a      	lsls	r2, r3, #20
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6899      	ldr	r1, [r3, #8]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e5e:	025a      	lsls	r2, r3, #9
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6899      	ldr	r1, [r3, #8]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	029a      	lsls	r2, r3, #10
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	609a      	str	r2, [r3, #8]
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40012300 	.word	0x40012300
 8008e9c:	0f000001 	.word	0x0f000001

08008ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	60d3      	str	r3, [r2, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	e000ed00 	.word	0xe000ed00

08008ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008eec:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <__NVIC_GetPriorityGrouping+0x18>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	0a1b      	lsrs	r3, r3, #8
 8008ef2:	f003 0307 	and.w	r3, r3, #7
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	e000ed00 	.word	0xe000ed00

08008f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	db0b      	blt.n	8008f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	f003 021f 	and.w	r2, r3, #31
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <__NVIC_EnableIRQ+0x38>)
 8008f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	2001      	movs	r0, #1
 8008f26:	fa00 f202 	lsl.w	r2, r0, r2
 8008f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008f2e:	bf00      	nop
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	e000e100 	.word	0xe000e100

08008f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	db0a      	blt.n	8008f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	490c      	ldr	r1, [pc, #48]	; (8008f8c <__NVIC_SetPriority+0x4c>)
 8008f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5e:	0112      	lsls	r2, r2, #4
 8008f60:	b2d2      	uxtb	r2, r2
 8008f62:	440b      	add	r3, r1
 8008f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f68:	e00a      	b.n	8008f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	4908      	ldr	r1, [pc, #32]	; (8008f90 <__NVIC_SetPriority+0x50>)
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	3b04      	subs	r3, #4
 8008f78:	0112      	lsls	r2, r2, #4
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	761a      	strb	r2, [r3, #24]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	e000e100 	.word	0xe000e100
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b089      	sub	sp, #36	; 0x24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	f1c3 0307 	rsb	r3, r3, #7
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	bf28      	it	cs
 8008fb2:	2304      	movcs	r3, #4
 8008fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	2b06      	cmp	r3, #6
 8008fbc:	d902      	bls.n	8008fc4 <NVIC_EncodePriority+0x30>
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	3b03      	subs	r3, #3
 8008fc2:	e000      	b.n	8008fc6 <NVIC_EncodePriority+0x32>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	43da      	mvns	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	401a      	ands	r2, r3
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe6:	43d9      	mvns	r1, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fec:	4313      	orrs	r3, r2
         );
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3724      	adds	r7, #36	; 0x24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3b01      	subs	r3, #1
 8009008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800900c:	d301      	bcc.n	8009012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800900e:	2301      	movs	r3, #1
 8009010:	e00f      	b.n	8009032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009012:	4a0a      	ldr	r2, [pc, #40]	; (800903c <SysTick_Config+0x40>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3b01      	subs	r3, #1
 8009018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800901a:	210f      	movs	r1, #15
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	f7ff ff8e 	bl	8008f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <SysTick_Config+0x40>)
 8009026:	2200      	movs	r2, #0
 8009028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800902a:	4b04      	ldr	r3, [pc, #16]	; (800903c <SysTick_Config+0x40>)
 800902c:	2207      	movs	r2, #7
 800902e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	e000e010 	.word	0xe000e010

08009040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ff29 	bl	8008ea0 <__NVIC_SetPriorityGrouping>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009056:	b580      	push	{r7, lr}
 8009058:	b086      	sub	sp, #24
 800905a:	af00      	add	r7, sp, #0
 800905c:	4603      	mov	r3, r0
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009068:	f7ff ff3e 	bl	8008ee8 <__NVIC_GetPriorityGrouping>
 800906c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f7ff ff8e 	bl	8008f94 <NVIC_EncodePriority>
 8009078:	4602      	mov	r2, r0
 800907a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff ff5d 	bl	8008f40 <__NVIC_SetPriority>
}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	4603      	mov	r3, r0
 8009096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff31 	bl	8008f04 <__NVIC_EnableIRQ>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff ffa2 	bl	8008ffc <SysTick_Config>
 80090b8:	4603      	mov	r3, r0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80090d0:	f7ff faa6 	bl	8008620 <HAL_GetTick>
 80090d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e099      	b.n	8009214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0201 	bic.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009100:	e00f      	b.n	8009122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009102:	f7ff fa8d 	bl	8008620 <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b05      	cmp	r3, #5
 800910e:	d908      	bls.n	8009122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e078      	b.n	8009214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e8      	bne.n	8009102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4b38      	ldr	r3, [pc, #224]	; (800921c <HAL_DMA_Init+0x158>)
 800913c:	4013      	ands	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800914e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800915a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b04      	cmp	r3, #4
 800917a:	d107      	bne.n	800918c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	4313      	orrs	r3, r2
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d117      	bne.n	80091e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	4313      	orrs	r3, r2
 80091be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00e      	beq.n	80091e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fb01 	bl	80097d0 <DMA_CheckFifoParam>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d008      	beq.n	80091e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2240      	movs	r2, #64	; 0x40
 80091d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80091e2:	2301      	movs	r3, #1
 80091e4:	e016      	b.n	8009214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fab8 	bl	8009764 <DMA_CalcBaseAndBitshift>
 80091f4:	4603      	mov	r3, r0
 80091f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fc:	223f      	movs	r2, #63	; 0x3f
 80091fe:	409a      	lsls	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	f010803f 	.word	0xf010803f

08009220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009236:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_DMA_Start_IT+0x26>
 8009242:	2302      	movs	r3, #2
 8009244:	e040      	b.n	80092c8 <HAL_DMA_Start_IT+0xa8>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b01      	cmp	r3, #1
 8009258:	d12f      	bne.n	80092ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 fa4a 	bl	8009708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009278:	223f      	movs	r2, #63	; 0x3f
 800927a:	409a      	lsls	r2, r3
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0216 	orr.w	r2, r2, #22
 800928e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e005      	b.n	80092c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80092c2:	2302      	movs	r3, #2
 80092c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80092de:	f7ff f99f 	bl	8008620 <HAL_GetTick>
 80092e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d008      	beq.n	8009302 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2280      	movs	r2, #128	; 0x80
 80092f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e052      	b.n	80093a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0216 	bic.w	r2, r2, #22
 8009310:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009320:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <HAL_DMA_Abort+0x62>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0208 	bic.w	r2, r2, #8
 8009340:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009352:	e013      	b.n	800937c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009354:	f7ff f964 	bl	8008620 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b05      	cmp	r3, #5
 8009360:	d90c      	bls.n	800937c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2203      	movs	r2, #3
 800936c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e015      	b.n	80093a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e4      	bne.n	8009354 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938e:	223f      	movs	r2, #63	; 0x3f
 8009390:	409a      	lsls	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d004      	beq.n	80093ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2280      	movs	r2, #128	; 0x80
 80093c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e00c      	b.n	80093e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2205      	movs	r2, #5
 80093d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009400:	4b92      	ldr	r3, [pc, #584]	; (800964c <HAL_DMA_IRQHandler+0x258>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a92      	ldr	r2, [pc, #584]	; (8009650 <HAL_DMA_IRQHandler+0x25c>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	0a9b      	lsrs	r3, r3, #10
 800940c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941e:	2208      	movs	r2, #8
 8009420:	409a      	lsls	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4013      	ands	r3, r2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01a      	beq.n	8009460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d013      	beq.n	8009460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0204 	bic.w	r2, r2, #4
 8009446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944c:	2208      	movs	r2, #8
 800944e:	409a      	lsls	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009458:	f043 0201 	orr.w	r2, r3, #1
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009464:	2201      	movs	r2, #1
 8009466:	409a      	lsls	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4013      	ands	r3, r2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d012      	beq.n	8009496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009482:	2201      	movs	r2, #1
 8009484:	409a      	lsls	r2, r3
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948e:	f043 0202 	orr.w	r2, r3, #2
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949a:	2204      	movs	r2, #4
 800949c:	409a      	lsls	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d012      	beq.n	80094cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b8:	2204      	movs	r2, #4
 80094ba:	409a      	lsls	r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c4:	f043 0204 	orr.w	r2, r3, #4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d0:	2210      	movs	r2, #16
 80094d2:	409a      	lsls	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d043      	beq.n	8009564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0308 	and.w	r3, r3, #8
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d03c      	beq.n	8009564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	2210      	movs	r2, #16
 80094f0:	409a      	lsls	r2, r3
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d018      	beq.n	8009536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d108      	bne.n	8009524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	d024      	beq.n	8009564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	e01f      	b.n	8009564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01b      	beq.n	8009564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	4798      	blx	r3
 8009534:	e016      	b.n	8009564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009540:	2b00      	cmp	r3, #0
 8009542:	d107      	bne.n	8009554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0208 	bic.w	r2, r2, #8
 8009552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	2220      	movs	r2, #32
 800956a:	409a      	lsls	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 808e 	beq.w	8009692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8086 	beq.w	8009692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958a:	2220      	movs	r2, #32
 800958c:	409a      	lsls	r2, r3
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b05      	cmp	r3, #5
 800959c:	d136      	bne.n	800960c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0216 	bic.w	r2, r2, #22
 80095ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695a      	ldr	r2, [r3, #20]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <HAL_DMA_IRQHandler+0x1da>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f022 0208 	bic.w	r2, r2, #8
 80095dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e2:	223f      	movs	r2, #63	; 0x3f
 80095e4:	409a      	lsls	r2, r3
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d07d      	beq.n	80096fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
        }
        return;
 800960a:	e078      	b.n	80096fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01c      	beq.n	8009654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d108      	bne.n	800963a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800962c:	2b00      	cmp	r3, #0
 800962e:	d030      	beq.n	8009692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
 8009638:	e02b      	b.n	8009692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d027      	beq.n	8009692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
 800964a:	e022      	b.n	8009692 <HAL_DMA_IRQHandler+0x29e>
 800964c:	20000000 	.word	0x20000000
 8009650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10f      	bne.n	8009682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0210 	bic.w	r2, r2, #16
 8009670:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009696:	2b00      	cmp	r3, #0
 8009698:	d032      	beq.n	8009700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d022      	beq.n	80096ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2205      	movs	r2, #5
 80096aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f022 0201 	bic.w	r2, r2, #1
 80096bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60bb      	str	r3, [r7, #8]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d307      	bcc.n	80096da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f2      	bne.n	80096be <HAL_DMA_IRQHandler+0x2ca>
 80096d8:	e000      	b.n	80096dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80096da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	4798      	blx	r3
 80096fc:	e000      	b.n	8009700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80096fe:	bf00      	nop
    }
  }
}
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop

08009708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d108      	bne.n	8009748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009746:	e007      	b.n	8009758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	60da      	str	r2, [r3, #12]
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	3b10      	subs	r3, #16
 8009774:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <DMA_CalcBaseAndBitshift+0x64>)
 8009776:	fba2 2303 	umull	r2, r3, r2, r3
 800977a:	091b      	lsrs	r3, r3, #4
 800977c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800977e:	4a13      	ldr	r2, [pc, #76]	; (80097cc <DMA_CalcBaseAndBitshift+0x68>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b03      	cmp	r3, #3
 8009790:	d909      	bls.n	80097a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	659a      	str	r2, [r3, #88]	; 0x58
 80097a4:	e007      	b.n	80097b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	aaaaaaab 	.word	0xaaaaaaab
 80097cc:	08021d84 	.word	0x08021d84

080097d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d11f      	bne.n	800982a <DMA_CheckFifoParam+0x5a>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d856      	bhi.n	800989e <DMA_CheckFifoParam+0xce>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <DMA_CheckFifoParam+0x28>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009809 	.word	0x08009809
 80097fc:	0800981b 	.word	0x0800981b
 8009800:	08009809 	.word	0x08009809
 8009804:	0800989f 	.word	0x0800989f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d046      	beq.n	80098a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009818:	e043      	b.n	80098a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009822:	d140      	bne.n	80098a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009828:	e03d      	b.n	80098a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009832:	d121      	bne.n	8009878 <DMA_CheckFifoParam+0xa8>
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d837      	bhi.n	80098aa <DMA_CheckFifoParam+0xda>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <DMA_CheckFifoParam+0x70>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009851 	.word	0x08009851
 8009844:	08009857 	.word	0x08009857
 8009848:	08009851 	.word	0x08009851
 800984c:	08009869 	.word	0x08009869
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]
      break;
 8009854:	e030      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d025      	beq.n	80098ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009866:	e022      	b.n	80098ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009870:	d11f      	bne.n	80098b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009876:	e01c      	b.n	80098b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b02      	cmp	r3, #2
 800987c:	d903      	bls.n	8009886 <DMA_CheckFifoParam+0xb6>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d003      	beq.n	800988c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009884:	e018      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	73fb      	strb	r3, [r7, #15]
      break;
 800988a:	e015      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00e      	beq.n	80098b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	73fb      	strb	r3, [r7, #15]
      break;
 800989c:	e00b      	b.n	80098b6 <DMA_CheckFifoParam+0xe6>
      break;
 800989e:	bf00      	nop
 80098a0:	e00a      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;
 80098a2:	bf00      	nop
 80098a4:	e008      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;
 80098a6:	bf00      	nop
 80098a8:	e006      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;
 80098aa:	bf00      	nop
 80098ac:	e004      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;
 80098ae:	bf00      	nop
 80098b0:	e002      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80098b2:	bf00      	nop
 80098b4:	e000      	b.n	80098b8 <DMA_CheckFifoParam+0xe8>
      break;
 80098b6:	bf00      	nop
    }
  } 
  
  return status; 
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop

080098c8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e081      	b.n	80099de <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fe fa76 	bl	8007de0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2224      	movs	r2, #36	; 0x24
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0201 	bic.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009918:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009928:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d107      	bne.n	8009942 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800993e:	609a      	str	r2, [r3, #8]
 8009940:	e006      	b.n	8009950 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800994e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d104      	bne.n	8009962 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009974:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009984:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69d9      	ldr	r1, [r3, #28]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1a      	ldr	r2, [r3, #32]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f042 0201 	orr.w	r2, r2, #1
 80099be:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <HAL_FMPI2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Write(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	817b      	strh	r3, [r7, #10]
 80099fa:	460b      	mov	r3, r1
 80099fc:	813b      	strh	r3, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	f040 80f9 	bne.w	8009c02 <HAL_FMPI2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_FMPI2C_Mem_Write+0x34>
 8009a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <HAL_FMPI2C_Mem_Write+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0ed      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <HAL_FMPI2C_Mem_Write+0x4e>
 8009a32:	2302      	movs	r3, #2
 8009a34:	e0e6      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a3e:	f7fe fdef 	bl	8008620 <HAL_GetTick>
 8009a42:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	2319      	movs	r3, #25
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fac3 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_FMPI2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0d1      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_TX;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2221      	movs	r2, #33	; 0x21
 8009a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2240      	movs	r2, #64	; 0x40
 8009a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a3a      	ldr	r2, [r7, #32]
 8009a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryWrite(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a88:	88f8      	ldrh	r0, [r7, #6]
 8009a8a:	893a      	ldrh	r2, [r7, #8]
 8009a8c:	8979      	ldrh	r1, [r7, #10]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4603      	mov	r3, r0
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 f9d3 	bl	8009e44 <FMPI2C_RequestMemoryWrite>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <HAL_FMPI2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0a9      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2bff      	cmp	r3, #255	; 0xff
 8009ab8:	d90e      	bls.n	8009ad8 <HAL_FMPI2C_Mem_Write+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	22ff      	movs	r2, #255	; 0xff
 8009abe:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE, FMPI2C_NO_STARTSTOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	8979      	ldrh	r1, [r7, #10]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 fbb5 	bl	800a240 <FMPI2C_TransferConfig>
 8009ad6:	e00f      	b.n	8009af8 <HAL_FMPI2C_Mem_Write+0x110>
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE, FMPI2C_NO_STARTSTOP);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	8979      	ldrh	r1, [r7, #10]
 8009aea:	2300      	movs	r3, #0
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fba4 	bl	800a240 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 faad 	bl	800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_FMPI2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e07b      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hfmpi2c->Instance->TXDR = *hfmpi2c->pBuffPtr;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferCount--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hfmpi2c->XferSize--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d034      	beq.n	8009bb0 <HAL_FMPI2C_Mem_Write+0x1c8>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d130      	bne.n	8009bb0 <HAL_FMPI2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	2200      	movs	r2, #0
 8009b56:	2180      	movs	r1, #128	; 0x80
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fa3f 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <HAL_FMPI2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e04d      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2bff      	cmp	r3, #255	; 0xff
 8009b70:	d90e      	bls.n	8009b90 <HAL_FMPI2C_Mem_Write+0x1a8>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	22ff      	movs	r2, #255	; 0xff
 8009b76:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	8979      	ldrh	r1, [r7, #10]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 fb59 	bl	800a240 <FMPI2C_TransferConfig>
 8009b8e:	e00f      	b.n	8009bb0 <HAL_FMPI2C_Mem_Write+0x1c8>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	8979      	ldrh	r1, [r7, #10]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 fb48 	bl	800a240 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }

    } while (hfmpi2c->XferCount > 0U);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d19e      	bne.n	8009af8 <HAL_FMPI2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fa8c 	bl	800a0dc <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <HAL_FMPI2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e01a      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6859      	ldr	r1, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <HAL_FMPI2C_Mem_Write+0x224>)
 8009be2:	400b      	ands	r3, r1
 8009be4:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e000      	b.n	8009c04 <HAL_FMPI2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009c02:	2302      	movs	r3, #2
  }
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	fe00e800 	.word	0xfe00e800

08009c10 <HAL_FMPI2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Mem_Read(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	817b      	strh	r3, [r7, #10]
 8009c22:	460b      	mov	r3, r1
 8009c24:	813b      	strh	r3, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_FMPI2C_MEMADD_SIZE(MemAddSize));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	f040 80fd 	bne.w	8009e32 <HAL_FMPI2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_FMPI2C_Mem_Read+0x34>
 8009c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <HAL_FMPI2C_Mem_Read+0x40>
    {
      hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_INVALID_PARAM;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0f1      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_FMPI2C_Mem_Read+0x4e>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e0ea      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009c66:	f7fe fcdb 	bl	8008620 <HAL_GetTick>
 8009c6a:	6178      	str	r0, [r7, #20]

    if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_BUSY, SET, FMPI2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2319      	movs	r3, #25
 8009c72:	2201      	movs	r2, #1
 8009c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f9af 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_FMPI2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e0d5      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
    }

    hfmpi2c->State     = HAL_FMPI2C_STATE_BUSY_RX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2222      	movs	r2, #34	; 0x22
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode      = HAL_FMPI2C_MODE_MEM;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2240      	movs	r2, #64	; 0x40
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hfmpi2c->pBuffPtr  = pData;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hfmpi2c->XferCount = Size;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hfmpi2c->XferISR   = NULL;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (FMPI2C_RequestMemoryRead(hfmpi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cb0:	88f8      	ldrh	r0, [r7, #6]
 8009cb2:	893a      	ldrh	r2, [r7, #8]
 8009cb4:	8979      	ldrh	r1, [r7, #10]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f913 	bl	8009eec <FMPI2C_RequestMemoryRead>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_FMPI2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e0ad      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hfmpi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	2bff      	cmp	r3, #255	; 0xff
 8009ce0:	d90e      	bls.n	8009d00 <HAL_FMPI2C_Mem_Read+0xf0>
    {
      hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	8979      	ldrh	r1, [r7, #10]
 8009cf0:	4b52      	ldr	r3, [pc, #328]	; (8009e3c <HAL_FMPI2C_Mem_Read+0x22c>)
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 faa1 	bl	800a240 <FMPI2C_TransferConfig>
 8009cfe:	e00f      	b.n	8009d20 <HAL_FMPI2C_Mem_Read+0x110>
                            FMPI2C_GENERATE_START_READ);
    }
    else
    {
      hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
      FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	8979      	ldrh	r1, [r7, #10]
 8009d12:	4b4a      	ldr	r3, [pc, #296]	; (8009e3c <HAL_FMPI2C_Mem_Read+0x22c>)
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fa90 	bl	800a240 <FMPI2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	2200      	movs	r2, #0
 8009d28:	2104      	movs	r1, #4
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f956 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <HAL_FMPI2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e07c      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hfmpi2c->pBuffPtr = (uint8_t)hfmpi2c->Instance->RXDR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	b2d2      	uxtb	r2, r2
 8009d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hfmpi2c->pBuffPtr++;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	625a      	str	r2, [r3, #36]	; 0x24

      hfmpi2c->XferSize--;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hfmpi2c->XferCount--;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hfmpi2c->XferCount != 0U) && (hfmpi2c->XferSize == 0U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d034      	beq.n	8009de0 <HAL_FMPI2C_Mem_Read+0x1d0>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d130      	bne.n	8009de0 <HAL_FMPI2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	2200      	movs	r2, #0
 8009d86:	2180      	movs	r1, #128	; 0x80
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f927 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <HAL_FMPI2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e04d      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
        }

        if (hfmpi2c->XferCount > MAX_NBYTE_SIZE)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	d90e      	bls.n	8009dc0 <HAL_FMPI2C_Mem_Read+0x1b0>
        {
          hfmpi2c->XferSize = MAX_NBYTE_SIZE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t) hfmpi2c->XferSize, FMPI2C_RELOAD_MODE,
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	8979      	ldrh	r1, [r7, #10]
 8009db0:	2300      	movs	r3, #0
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fa41 	bl	800a240 <FMPI2C_TransferConfig>
 8009dbe:	e00f      	b.n	8009de0 <HAL_FMPI2C_Mem_Read+0x1d0>
                                FMPI2C_NO_STARTSTOP);
        }
        else
        {
          hfmpi2c->XferSize = hfmpi2c->XferCount;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)hfmpi2c->XferSize, FMPI2C_AUTOEND_MODE,
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	8979      	ldrh	r1, [r7, #10]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 fa30 	bl	800a240 <FMPI2C_TransferConfig>
                                FMPI2C_NO_STARTSTOP);
        }
      }
    } while (hfmpi2c->XferCount > 0U);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d19a      	bne.n	8009d20 <HAL_FMPI2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (FMPI2C_WaitOnSTOPFlagUntilTimeout(hfmpi2c, Timeout, tickstart) != HAL_OK)
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f974 	bl	800a0dc <FMPI2C_WaitOnSTOPFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <HAL_FMPI2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e01a      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2220      	movs	r2, #32
 8009e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6859      	ldr	r1, [r3, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <HAL_FMPI2C_Mem_Read+0x230>)
 8009e12:	400b      	ands	r3, r1
 8009e14:	6053      	str	r3, [r2, #4]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode  = HAL_FMPI2C_MODE_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e000      	b.n	8009e34 <HAL_FMPI2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009e32:	2302      	movs	r3, #2
  }
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	80002400 	.word	0x80002400
 8009e40:	fe00e800 	.word	0xfe00e800

08009e44 <FMPI2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryWrite(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	817b      	strh	r3, [r7, #10]
 8009e56:	460b      	mov	r3, r1
 8009e58:	813b      	strh	r3, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_RELOAD_MODE, FMPI2C_GENERATE_START_WRITE);
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	8979      	ldrh	r1, [r7, #10]
 8009e64:	4b20      	ldr	r3, [pc, #128]	; (8009ee8 <FMPI2C_RequestMemoryWrite+0xa4>)
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f9e7 	bl	800a240 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f8f0 	bl	800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <FMPI2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e02c      	b.n	8009ee0 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d105      	bne.n	8009e98 <FMPI2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8009e8c:	893b      	ldrh	r3, [r7, #8]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	629a      	str	r2, [r3, #40]	; 0x28
 8009e96:	e015      	b.n	8009ec4 <FMPI2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 8009e98:	893b      	ldrh	r3, [r7, #8]
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 f8d6 	bl	800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <FMPI2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e012      	b.n	8009ee0 <FMPI2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2180      	movs	r1, #128	; 0x80
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f884 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <FMPI2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <FMPI2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	80002000 	.word	0x80002000

08009eec <FMPI2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_RequestMemoryRead(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress,
                                                  uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                  uint32_t Tickstart)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4603      	mov	r3, r0
 8009efc:	817b      	strh	r3, [r7, #10]
 8009efe:	460b      	mov	r3, r1
 8009f00:	813b      	strh	r3, [r7, #8]
 8009f02:	4613      	mov	r3, r2
 8009f04:	80fb      	strh	r3, [r7, #6]
  FMPI2C_TransferConfig(hfmpi2c, DevAddress, (uint8_t)MemAddSize, FMPI2C_SOFTEND_MODE, FMPI2C_GENERATE_START_WRITE);
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	8979      	ldrh	r1, [r7, #10]
 8009f0c:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <FMPI2C_RequestMemoryRead+0xa4>)
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	2300      	movs	r3, #0
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f994 	bl	800a240 <FMPI2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009f18:	69fa      	ldr	r2, [r7, #28]
 8009f1a:	69b9      	ldr	r1, [r7, #24]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f89d 	bl	800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <FMPI2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e02c      	b.n	8009f86 <FMPI2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == FMPI2C_MEMADD_SIZE_8BIT)
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d105      	bne.n	8009f3e <FMPI2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8009f32:	893b      	ldrh	r3, [r7, #8]
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009f3c:	e015      	b.n	8009f6a <FMPI2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_MSB(MemAddress);
 8009f3e:	893b      	ldrh	r3, [r7, #8]
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (FMPI2C_WaitOnTXISFlagUntilTimeout(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	69b9      	ldr	r1, [r7, #24]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f883 	bl	800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <FMPI2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e012      	b.n	8009f86 <FMPI2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hfmpi2c->Instance->TXDR = FMPI2C_MEM_ADD_LSB(MemAddress);
 8009f60:	893b      	ldrh	r3, [r7, #8]
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (FMPI2C_WaitOnFlagUntilTimeout(hfmpi2c, FMPI2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2200      	movs	r2, #0
 8009f72:	2140      	movs	r1, #64	; 0x40
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f831 	bl	8009fdc <FMPI2C_WaitOnFlagUntilTimeout>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <FMPI2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <FMPI2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	80002000 	.word	0x80002000

08009f94 <FMPI2C_Flush_TXDR>:
  * @brief  FMPI2C Tx data register flush process.
  * @param  hfmpi2c FMPI2C handle.
  * @retval None
  */
static void FMPI2C_Flush_TXDR(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d103      	bne.n	8009fb2 <FMPI2C_Flush_TXDR+0x1e>
  {
    hfmpi2c->Instance->TXDR = 0x00U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXE) == RESET)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d007      	beq.n	8009fd0 <FMPI2C_Flush_TXDR+0x3c>
  {
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_TXE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	619a      	str	r2, [r3, #24]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <FMPI2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 8009fec:	e022      	b.n	800a034 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d01e      	beq.n	800a034 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff6:	f7fe fb13 	bl	8008620 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d302      	bcc.n	800a00c <FMPI2C_WaitOnFlagUntilTimeout+0x30>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d113      	bne.n	800a034 <FMPI2C_WaitOnFlagUntilTimeout+0x58>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a010:	f043 0220 	orr.w	r2, r3, #32
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e00f      	b.n	800a054 <FMPI2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, Flag) == Status)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4013      	ands	r3, r2
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	429a      	cmp	r2, r3
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d0cd      	beq.n	8009fee <FMPI2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <FMPI2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnTXISFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 800a068:	e02c      	b.n	800a0c4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f870 	bl	800a154 <FMPI2C_IsAcknowledgeFailed>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <FMPI2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e02a      	b.n	800a0d4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a084:	d01e      	beq.n	800a0c4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a086:	f7fe facb 	bl	8008620 <HAL_GetTick>
 800a08a:	4602      	mov	r2, r0
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d302      	bcc.n	800a09c <FMPI2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d113      	bne.n	800a0c4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a0:	f043 0220 	orr.w	r2, r3, #32
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	645a      	str	r2, [r3, #68]	; 0x44
        hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hfmpi2c);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e007      	b.n	800a0d4 <FMPI2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_TXIS) == RESET)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d1cb      	bne.n	800a06a <FMPI2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <FMPI2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_WaitOnSTOPFlagUntilTimeout(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800a0e8:	e028      	b.n	800a13c <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (FMPI2C_IsAcknowledgeFailed(hfmpi2c, Timeout, Tickstart) != HAL_OK)
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f830 	bl	800a154 <FMPI2C_IsAcknowledgeFailed>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e026      	b.n	800a14c <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fe:	f7fe fa8f 	bl	8008620 <HAL_GetTick>
 800a102:	4602      	mov	r2, r0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d113      	bne.n	800a13c <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a118:	f043 0220 	orr.w	r2, r3, #32
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	645a      	str	r2, [r3, #68]	; 0x44
      hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2220      	movs	r2, #32
 800a124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hfmpi2c);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e007      	b.n	800a14c <FMPI2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b20      	cmp	r3, #32
 800a148:	d1cf      	bne.n	800a0ea <FMPI2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <FMPI2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef FMPI2C_IsAcknowledgeFailed(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  if (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_AF) == SET)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	2b10      	cmp	r3, #16
 800a16c:	d161      	bne.n	800a232 <FMPI2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (FMPI2C_GET_STOP_MODE(hfmpi2c) != FMPI2C_AUTOEND_MODE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a17c:	d02b      	beq.n	800a1d6 <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hfmpi2c->Instance->CR2 |= FMPI2C_CR2_STOP;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a18c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800a18e:	e022      	b.n	800a1d6 <FMPI2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a196:	d01e      	beq.n	800a1d6 <FMPI2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a198:	f7fe fa42 	bl	8008620 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d302      	bcc.n	800a1ae <FMPI2C_IsAcknowledgeFailed+0x5a>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d113      	bne.n	800a1d6 <FMPI2C_IsAcknowledgeFailed+0x82>
        {
          hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_TIMEOUT;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f043 0220 	orr.w	r2, r3, #32
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	645a      	str	r2, [r3, #68]	; 0x44
          hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hfmpi2c);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e02e      	b.n	800a234 <FMPI2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_FMPI2C_GET_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF) == RESET)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	d1d5      	bne.n	800a190 <FMPI2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_AF);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_FMPI2C_CLEAR_FLAG(hfmpi2c, FMPI2C_FLAG_STOPF);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    FMPI2C_Flush_TXDR(hfmpi2c);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff fecd 	bl	8009f94 <FMPI2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    FMPI2C_RESET_CR2(hfmpi2c);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6859      	ldr	r1, [r3, #4]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <FMPI2C_IsAcknowledgeFailed+0xe8>)
 800a206:	400b      	ands	r3, r1
 800a208:	6053      	str	r3, [r2, #4]

    hfmpi2c->ErrorCode |= HAL_FMPI2C_ERROR_AF;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	f043 0204 	orr.w	r2, r3, #4
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	645a      	str	r2, [r3, #68]	; 0x44
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <FMPI2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	fe00e800 	.word	0xfe00e800

0800a240 <FMPI2C_TransferConfig>:
  *     @arg @ref FMPI2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void FMPI2C_TransferConfig(FMPI2C_HandleTypeDef *hfmpi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	817b      	strh	r3, [r7, #10]
 800a24e:	4613      	mov	r3, r2
 800a250:	727b      	strb	r3, [r7, #9]
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hfmpi2c->Instance->CR2,
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	0d5b      	lsrs	r3, r3, #21
 800a25c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <FMPI2C_TransferConfig+0x58>)
 800a262:	430b      	orrs	r3, r1
 800a264:	43db      	mvns	r3, r3
 800a266:	ea02 0103 	and.w	r1, r2, r3
 800a26a:	897b      	ldrh	r3, [r7, #10]
 800a26c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a270:	7a7b      	ldrb	r3, [r7, #9]
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	431a      	orrs	r2, r3
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	431a      	orrs	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
               (FMPI2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - FMPI2C_CR2_RD_WRN_Pos))) | \
                 FMPI2C_CR2_START | FMPI2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & FMPI2C_CR2_SADD) | \
                        (((uint32_t)Size << FMPI2C_CR2_NBYTES_Pos) & FMPI2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	03ff63ff 	.word	0x03ff63ff

0800a29c <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	d138      	bne.n	800a324 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e032      	b.n	800a326 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2224      	movs	r2, #36	; 0x24
 800a2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0201 	bic.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6819      	ldr	r1, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e000      	b.n	800a326 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a324:	2302      	movs	r3, #2
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a334:	b480      	push	{r7}
 800a336:	b089      	sub	sp, #36	; 0x24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a342:	2300      	movs	r3, #0
 800a344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a34a:	2300      	movs	r3, #0
 800a34c:	61fb      	str	r3, [r7, #28]
 800a34e:	e165      	b.n	800a61c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a350:	2201      	movs	r2, #1
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4013      	ands	r3, r2
 800a362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	429a      	cmp	r2, r3
 800a36a:	f040 8154 	bne.w	800a616 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b01      	cmp	r3, #1
 800a378:	d005      	beq.n	800a386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a382:	2b02      	cmp	r3, #2
 800a384:	d130      	bne.n	800a3e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	2203      	movs	r2, #3
 800a392:	fa02 f303 	lsl.w	r3, r2, r3
 800a396:	43db      	mvns	r3, r3
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	4013      	ands	r3, r2
 800a39c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a3bc:	2201      	movs	r2, #1
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	091b      	lsrs	r3, r3, #4
 800a3d2:	f003 0201 	and.w	r2, r3, #1
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f003 0303 	and.w	r3, r3, #3
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d017      	beq.n	800a424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	2203      	movs	r2, #3
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	4013      	ands	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f003 0303 	and.w	r3, r3, #3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d123      	bne.n	800a478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	08da      	lsrs	r2, r3, #3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3208      	adds	r2, #8
 800a438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	220f      	movs	r2, #15
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	43db      	mvns	r3, r3
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	4013      	ands	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	fa02 f303 	lsl.w	r3, r2, r3
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	4313      	orrs	r3, r2
 800a468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	08da      	lsrs	r2, r3, #3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3208      	adds	r2, #8
 800a472:	69b9      	ldr	r1, [r7, #24]
 800a474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	2203      	movs	r2, #3
 800a484:	fa02 f303 	lsl.w	r3, r2, r3
 800a488:	43db      	mvns	r3, r3
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	4013      	ands	r3, r2
 800a48e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f003 0203 	and.w	r2, r3, #3
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	005b      	lsls	r3, r3, #1
 800a49c:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80ae 	beq.w	800a616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	4b5d      	ldr	r3, [pc, #372]	; (800a634 <HAL_GPIO_Init+0x300>)
 800a4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c2:	4a5c      	ldr	r2, [pc, #368]	; (800a634 <HAL_GPIO_Init+0x300>)
 800a4c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4c8:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ca:	4b5a      	ldr	r3, [pc, #360]	; (800a634 <HAL_GPIO_Init+0x300>)
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4d6:	4a58      	ldr	r2, [pc, #352]	; (800a638 <HAL_GPIO_Init+0x304>)
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	089b      	lsrs	r3, r3, #2
 800a4dc:	3302      	adds	r3, #2
 800a4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f003 0303 	and.w	r3, r3, #3
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	220f      	movs	r2, #15
 800a4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f2:	43db      	mvns	r3, r3
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a4f      	ldr	r2, [pc, #316]	; (800a63c <HAL_GPIO_Init+0x308>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d025      	beq.n	800a54e <HAL_GPIO_Init+0x21a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a4e      	ldr	r2, [pc, #312]	; (800a640 <HAL_GPIO_Init+0x30c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d01f      	beq.n	800a54a <HAL_GPIO_Init+0x216>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a4d      	ldr	r2, [pc, #308]	; (800a644 <HAL_GPIO_Init+0x310>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d019      	beq.n	800a546 <HAL_GPIO_Init+0x212>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a4c      	ldr	r2, [pc, #304]	; (800a648 <HAL_GPIO_Init+0x314>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d013      	beq.n	800a542 <HAL_GPIO_Init+0x20e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a4b      	ldr	r2, [pc, #300]	; (800a64c <HAL_GPIO_Init+0x318>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00d      	beq.n	800a53e <HAL_GPIO_Init+0x20a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a4a      	ldr	r2, [pc, #296]	; (800a650 <HAL_GPIO_Init+0x31c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <HAL_GPIO_Init+0x206>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a49      	ldr	r2, [pc, #292]	; (800a654 <HAL_GPIO_Init+0x320>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d101      	bne.n	800a536 <HAL_GPIO_Init+0x202>
 800a532:	2306      	movs	r3, #6
 800a534:	e00c      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a536:	2307      	movs	r3, #7
 800a538:	e00a      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a53a:	2305      	movs	r3, #5
 800a53c:	e008      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a53e:	2304      	movs	r3, #4
 800a540:	e006      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a542:	2303      	movs	r3, #3
 800a544:	e004      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a546:	2302      	movs	r3, #2
 800a548:	e002      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e000      	b.n	800a550 <HAL_GPIO_Init+0x21c>
 800a54e:	2300      	movs	r3, #0
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	f002 0203 	and.w	r2, r2, #3
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	4093      	lsls	r3, r2
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a560:	4935      	ldr	r1, [pc, #212]	; (800a638 <HAL_GPIO_Init+0x304>)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	089b      	lsrs	r3, r3, #2
 800a566:	3302      	adds	r3, #2
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a56e:	4b3a      	ldr	r3, [pc, #232]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	43db      	mvns	r3, r3
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	4013      	ands	r3, r2
 800a57c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a592:	4a31      	ldr	r2, [pc, #196]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a598:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a5bc:	4a26      	ldr	r2, [pc, #152]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	43db      	mvns	r3, r3
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a5e6:	4a1c      	ldr	r2, [pc, #112]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a5ec:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a610:	4a11      	ldr	r2, [pc, #68]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	3301      	adds	r3, #1
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	2b0f      	cmp	r3, #15
 800a620:	f67f ae96 	bls.w	800a350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	3724      	adds	r7, #36	; 0x24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40023800 	.word	0x40023800
 800a638:	40013800 	.word	0x40013800
 800a63c:	40020000 	.word	0x40020000
 800a640:	40020400 	.word	0x40020400
 800a644:	40020800 	.word	0x40020800
 800a648:	40020c00 	.word	0x40020c00
 800a64c:	40021000 	.word	0x40021000
 800a650:	40021400 	.word	0x40021400
 800a654:	40021800 	.word	0x40021800
 800a658:	40013c00 	.word	0x40013c00

0800a65c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	807b      	strh	r3, [r7, #2]
 800a668:	4613      	mov	r3, r2
 800a66a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a66c:	787b      	ldrb	r3, [r7, #1]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a672:	887a      	ldrh	r2, [r7, #2]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a678:	e003      	b.n	800a682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a67a:	887b      	ldrh	r3, [r7, #2]
 800a67c:	041a      	lsls	r2, r3, #16
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	619a      	str	r2, [r3, #24]
}
 800a682:	bf00      	nop
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a68e:	b480      	push	{r7}
 800a690:	b085      	sub	sp, #20
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6a0:	887a      	ldrh	r2, [r7, #2]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	041a      	lsls	r2, r3, #16
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	43d9      	mvns	r1, r3
 800a6ac:	887b      	ldrh	r3, [r7, #2]
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	619a      	str	r2, [r3, #24]
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e12b      	b.n	800a92e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7fd fbd4 	bl	8007e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2224      	movs	r2, #36	; 0x24
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0201 	bic.w	r2, r2, #1
 800a706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a728:	f001 fc22 	bl	800bf70 <HAL_RCC_GetPCLK1Freq>
 800a72c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	4a81      	ldr	r2, [pc, #516]	; (800a938 <HAL_I2C_Init+0x274>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d807      	bhi.n	800a748 <HAL_I2C_Init+0x84>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4a80      	ldr	r2, [pc, #512]	; (800a93c <HAL_I2C_Init+0x278>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	bf94      	ite	ls
 800a740:	2301      	movls	r3, #1
 800a742:	2300      	movhi	r3, #0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	e006      	b.n	800a756 <HAL_I2C_Init+0x92>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4a7d      	ldr	r2, [pc, #500]	; (800a940 <HAL_I2C_Init+0x27c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	bf94      	ite	ls
 800a750:	2301      	movls	r3, #1
 800a752:	2300      	movhi	r3, #0
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e0e7      	b.n	800a92e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a78      	ldr	r2, [pc, #480]	; (800a944 <HAL_I2C_Init+0x280>)
 800a762:	fba2 2303 	umull	r2, r3, r2, r3
 800a766:	0c9b      	lsrs	r3, r3, #18
 800a768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	4a6a      	ldr	r2, [pc, #424]	; (800a938 <HAL_I2C_Init+0x274>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d802      	bhi.n	800a798 <HAL_I2C_Init+0xd4>
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	3301      	adds	r3, #1
 800a796:	e009      	b.n	800a7ac <HAL_I2C_Init+0xe8>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a79e:	fb02 f303 	mul.w	r3, r2, r3
 800a7a2:	4a69      	ldr	r2, [pc, #420]	; (800a948 <HAL_I2C_Init+0x284>)
 800a7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a8:	099b      	lsrs	r3, r3, #6
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	6812      	ldr	r2, [r2, #0]
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a7be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	495c      	ldr	r1, [pc, #368]	; (800a938 <HAL_I2C_Init+0x274>)
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	d819      	bhi.n	800a800 <HAL_I2C_Init+0x13c>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	1e59      	subs	r1, r3, #1
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a7e0:	400b      	ands	r3, r1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <HAL_I2C_Init+0x138>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	1e59      	subs	r1, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7fa:	e051      	b.n	800a8a0 <HAL_I2C_Init+0x1dc>
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	e04f      	b.n	800a8a0 <HAL_I2C_Init+0x1dc>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d111      	bne.n	800a82c <HAL_I2C_Init+0x168>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	1e58      	subs	r0, r3, #1
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6859      	ldr	r1, [r3, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	440b      	add	r3, r1
 800a816:	fbb0 f3f3 	udiv	r3, r0, r3
 800a81a:	3301      	adds	r3, #1
 800a81c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf0c      	ite	eq
 800a824:	2301      	moveq	r3, #1
 800a826:	2300      	movne	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	e012      	b.n	800a852 <HAL_I2C_Init+0x18e>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	1e58      	subs	r0, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6859      	ldr	r1, [r3, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	0099      	lsls	r1, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a842:	3301      	adds	r3, #1
 800a844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bf0c      	ite	eq
 800a84c:	2301      	moveq	r3, #1
 800a84e:	2300      	movne	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <HAL_I2C_Init+0x196>
 800a856:	2301      	movs	r3, #1
 800a858:	e022      	b.n	800a8a0 <HAL_I2C_Init+0x1dc>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10e      	bne.n	800a880 <HAL_I2C_Init+0x1bc>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1e58      	subs	r0, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6859      	ldr	r1, [r3, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	440b      	add	r3, r1
 800a870:	fbb0 f3f3 	udiv	r3, r0, r3
 800a874:	3301      	adds	r3, #1
 800a876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a87e:	e00f      	b.n	800a8a0 <HAL_I2C_Init+0x1dc>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	1e58      	subs	r0, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6859      	ldr	r1, [r3, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	0099      	lsls	r1, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	fbb0 f3f3 	udiv	r3, r0, r3
 800a896:	3301      	adds	r3, #1
 800a898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a89c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8a0:	6879      	ldr	r1, [r7, #4]
 800a8a2:	6809      	ldr	r1, [r1, #0]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	69da      	ldr	r2, [r3, #28]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a8ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6911      	ldr	r1, [r2, #16]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	68d2      	ldr	r2, [r2, #12]
 800a8da:	4311      	orrs	r1, r2
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6812      	ldr	r2, [r2, #0]
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695a      	ldr	r2, [r3, #20]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0201 	orr.w	r2, r2, #1
 800a90e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2220      	movs	r2, #32
 800a91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	000186a0 	.word	0x000186a0
 800a93c:	001e847f 	.word	0x001e847f
 800a940:	003d08ff 	.word	0x003d08ff
 800a944:	431bde83 	.word	0x431bde83
 800a948:	10624dd3 	.word	0x10624dd3

0800a94c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	b08f      	sub	sp, #60	; 0x3c
 800a950:	af0a      	add	r7, sp, #40	; 0x28
 800a952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e116      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f007 fe65 	bl	8012648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2203      	movs	r2, #3
 800a982:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d102      	bne.n	800a998 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f004 fd22 	bl	800f3e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	687e      	ldr	r6, [r7, #4]
 800a9aa:	466d      	mov	r5, sp
 800a9ac:	f106 0410 	add.w	r4, r6, #16
 800a9b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a9bc:	e885 0003 	stmia.w	r5, {r0, r1}
 800a9c0:	1d33      	adds	r3, r6, #4
 800a9c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9c4:	6838      	ldr	r0, [r7, #0]
 800a9c6:	f004 fbf9 	bl	800f1bc <USB_CoreInit>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e0d7      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f004 fd10 	bl	800f408 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	e04a      	b.n	800aa84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a9ee:	7bfa      	ldrb	r2, [r7, #15]
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	333d      	adds	r3, #61	; 0x3d
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa02:	7bfa      	ldrb	r2, [r7, #15]
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	1a9b      	subs	r3, r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	440b      	add	r3, r1
 800aa10:	333c      	adds	r3, #60	; 0x3c
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa16:	7bfa      	ldrb	r2, [r7, #15]
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	b298      	uxth	r0, r3
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	3342      	adds	r3, #66	; 0x42
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa2e:	7bfa      	ldrb	r2, [r7, #15]
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	1a9b      	subs	r3, r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	333f      	adds	r3, #63	; 0x3f
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aa42:	7bfa      	ldrb	r2, [r7, #15]
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	3344      	adds	r3, #68	; 0x44
 800aa52:	2200      	movs	r2, #0
 800aa54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aa56:	7bfa      	ldrb	r2, [r7, #15]
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	3348      	adds	r3, #72	; 0x48
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3350      	adds	r3, #80	; 0x50
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	3301      	adds	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	7bfa      	ldrb	r2, [r7, #15]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d3af      	bcc.n	800a9ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	e044      	b.n	800ab1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aa94:	7bfa      	ldrb	r2, [r7, #15]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aaaa:	7bfa      	ldrb	r2, [r7, #15]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	1a9b      	subs	r3, r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800aabc:	7bfa      	ldrb	r2, [r7, #15]
 800aabe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aac0:	7bfa      	ldrb	r2, [r7, #15]
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4613      	mov	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	1a9b      	subs	r3, r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aad6:	7bfa      	ldrb	r2, [r7, #15]
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aaec:	7bfa      	ldrb	r2, [r7, #15]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab02:	7bfa      	ldrb	r2, [r7, #15]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	00db      	lsls	r3, r3, #3
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	7bfa      	ldrb	r2, [r7, #15]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d3b5      	bcc.n	800aa94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	687e      	ldr	r6, [r7, #4]
 800ab30:	466d      	mov	r5, sp
 800ab32:	f106 0410 	add.w	r4, r6, #16
 800ab36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab42:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab46:	1d33      	adds	r3, r6, #4
 800ab48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab4a:	6838      	ldr	r0, [r7, #0]
 800ab4c:	f004 fca8 	bl	800f4a0 <USB_DevInit>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d005      	beq.n	800ab62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e014      	b.n	800ab8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d102      	bne.n	800ab80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 f892 	bl	800bca4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f005 fd17 	bl	80105b8 <USB_DevDisconnect>

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_PCD_Start+0x1c>
 800abac:	2302      	movs	r3, #2
 800abae:	e020      	b.n	800abf2 <HAL_PCD_Start+0x5e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d109      	bne.n	800abd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d005      	beq.n	800abd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f004 fbf3 	bl	800f3c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f005 fcc7 	bl	8010576 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800abfa:	b590      	push	{r4, r7, lr}
 800abfc:	b08d      	sub	sp, #52	; 0x34
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f005 fd85 	bl	8010720 <USB_GetMode>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 83ca 	bne.w	800b3b2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f005 fce9 	bl	80105fa <USB_ReadInterrupts>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 83c0 	beq.w	800b3b0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f005 fce0 	bl	80105fa <USB_ReadInterrupts>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f003 0302 	and.w	r3, r3, #2
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d107      	bne.n	800ac54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	695a      	ldr	r2, [r3, #20]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f002 0202 	and.w	r2, r2, #2
 800ac52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f005 fcce 	bl	80105fa <USB_ReadInterrupts>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d161      	bne.n	800ad2c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 0210 	bic.w	r2, r2, #16
 800ac76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f003 020f 	and.w	r2, r3, #15
 800ac84:	4613      	mov	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	1a9b      	subs	r3, r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	4413      	add	r3, r2
 800ac94:	3304      	adds	r3, #4
 800ac96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	0c5b      	lsrs	r3, r3, #17
 800ac9c:	f003 030f 	and.w	r3, r3, #15
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d124      	bne.n	800acee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800acaa:	4013      	ands	r3, r2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d035      	beq.n	800ad1c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	091b      	lsrs	r3, r3, #4
 800acb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800acba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	461a      	mov	r2, r3
 800acc2:	6a38      	ldr	r0, [r7, #32]
 800acc4:	f005 fb05 	bl	80102d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acd4:	441a      	add	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	699a      	ldr	r2, [r3, #24]
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	091b      	lsrs	r3, r3, #4
 800ace2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ace6:	441a      	add	r2, r3
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	619a      	str	r2, [r3, #24]
 800acec:	e016      	b.n	800ad1c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	0c5b      	lsrs	r3, r3, #17
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	2b06      	cmp	r3, #6
 800acf8:	d110      	bne.n	800ad1c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad00:	2208      	movs	r2, #8
 800ad02:	4619      	mov	r1, r3
 800ad04:	6a38      	ldr	r0, [r7, #32]
 800ad06:	f005 fae4 	bl	80102d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	091b      	lsrs	r3, r3, #4
 800ad12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad16:	441a      	add	r2, r3
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0210 	orr.w	r2, r2, #16
 800ad2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f005 fc62 	bl	80105fa <USB_ReadInterrupts>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ad40:	d16e      	bne.n	800ae20 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f005 fc68 	bl	8010620 <USB_ReadDevAllOutEpInterrupt>
 800ad50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ad52:	e062      	b.n	800ae1a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d057      	beq.n	800ae0e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	4611      	mov	r1, r2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f005 fc8d 	bl	8010688 <USB_ReadDevOutEPInterrupt>
 800ad6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00c      	beq.n	800ad94 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad86:	461a      	mov	r2, r3
 800ad88:	2301      	movs	r3, #1
 800ad8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ad8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fdde 	bl	800b950 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f003 0308 	and.w	r3, r3, #8
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	461a      	mov	r2, r3
 800adac:	2308      	movs	r3, #8
 800adae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800adb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fed8 	bl	800bb68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f003 0310 	and.w	r3, r3, #16
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d008      	beq.n	800add4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adce:	461a      	mov	r2, r3
 800add0:	2310      	movs	r3, #16
 800add2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adea:	461a      	mov	r2, r3
 800adec:	2320      	movs	r3, #32
 800adee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d009      	beq.n	800ae0e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae06:	461a      	mov	r2, r3
 800ae08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	3301      	adds	r3, #1
 800ae12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d199      	bne.n	800ad54 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f005 fbe8 	bl	80105fa <USB_ReadInterrupts>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae34:	f040 80c0 	bne.w	800afb8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f005 fc09 	bl	8010654 <USB_ReadDevAllInEpInterrupt>
 800ae42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ae48:	e0b2      	b.n	800afb0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 80a7 	beq.w	800afa4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	4611      	mov	r1, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f005 fc2f 	bl	80106c4 <USB_ReadDevInEPInterrupt>
 800ae66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d057      	beq.n	800af22 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	f003 030f 	and.w	r3, r3, #15
 800ae78:	2201      	movs	r2, #1
 800ae7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	43db      	mvns	r3, r3
 800ae8c:	69f9      	ldr	r1, [r7, #28]
 800ae8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae92:	4013      	ands	r3, r2
 800ae94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea2:	461a      	mov	r2, r3
 800aea4:	2301      	movs	r3, #1
 800aea6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d132      	bne.n	800af16 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	3348      	adds	r3, #72	; 0x48
 800aec0:	6819      	ldr	r1, [r3, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec6:	4613      	mov	r3, r2
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4403      	add	r3, r0
 800aed0:	3344      	adds	r3, #68	; 0x44
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4419      	add	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	4613      	mov	r3, r2
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	1a9b      	subs	r3, r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4403      	add	r3, r0
 800aee4:	3348      	adds	r3, #72	; 0x48
 800aee6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d113      	bne.n	800af16 <HAL_PCD_IRQHandler+0x31c>
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef2:	4613      	mov	r3, r2
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	3350      	adds	r3, #80	; 0x50
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d108      	bne.n	800af16 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6818      	ldr	r0, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af0e:	461a      	mov	r2, r3
 800af10:	2101      	movs	r1, #1
 800af12:	f005 fc37 	bl	8010784 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f007 fc36 	bl	801278e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f003 0308 	and.w	r3, r3, #8
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d008      	beq.n	800af3e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af38:	461a      	mov	r2, r3
 800af3a:	2308      	movs	r3, #8
 800af3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	2b00      	cmp	r3, #0
 800af46:	d008      	beq.n	800af5a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af54:	461a      	mov	r2, r3
 800af56:	2310      	movs	r3, #16
 800af58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	015a      	lsls	r2, r3, #5
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	4413      	add	r3, r2
 800af6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af70:	461a      	mov	r2, r3
 800af72:	2340      	movs	r3, #64	; 0x40
 800af74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d008      	beq.n	800af92 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8c:	461a      	mov	r2, r3
 800af8e:	2302      	movs	r3, #2
 800af90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800af9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fc48 	bl	800b834 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	3301      	adds	r3, #1
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	085b      	lsrs	r3, r3, #1
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f47f af49 	bne.w	800ae4a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f005 fb1c 	bl	80105fa <USB_ReadInterrupts>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afcc:	d122      	bne.n	800b014 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	69fa      	ldr	r2, [r7, #28]
 800afd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afdc:	f023 0301 	bic.w	r3, r3, #1
 800afe0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d108      	bne.n	800affe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800aff4:	2100      	movs	r1, #0
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f007 fe18 	bl	8012c2c <HAL_PCDEx_LPM_Callback>
 800affc:	e002      	b.n	800b004 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f007 fc3c 	bl	801287c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	695a      	ldr	r2, [r3, #20]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f005 faee 	bl	80105fa <USB_ReadInterrupts>
 800b01e:	4603      	mov	r3, r0
 800b020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b028:	d112      	bne.n	800b050 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b01      	cmp	r3, #1
 800b038:	d102      	bne.n	800b040 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f007 fbf8 	bl	8012830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	695a      	ldr	r2, [r3, #20]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b04e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4618      	mov	r0, r3
 800b056:	f005 fad0 	bl	80105fa <USB_ReadInterrupts>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b064:	d121      	bne.n	800b0aa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	695a      	ldr	r2, [r3, #20]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b074:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d111      	bne.n	800b0a4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08e:	089b      	lsrs	r3, r3, #2
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b09a:	2101      	movs	r1, #1
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f007 fdc5 	bl	8012c2c <HAL_PCDEx_LPM_Callback>
 800b0a2:	e002      	b.n	800b0aa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f007 fbc3 	bl	8012830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f005 faa3 	bl	80105fa <USB_ReadInterrupts>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0be:	f040 80c7 	bne.w	800b250 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0d0:	f023 0301 	bic.w	r3, r3, #1
 800b0d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2110      	movs	r1, #16
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f004 fb3d 	bl	800f75c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e6:	e056      	b.n	800b196 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b10c:	0151      	lsls	r1, r2, #5
 800b10e:	69fa      	ldr	r2, [r7, #28]
 800b110:	440a      	add	r2, r1
 800b112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b11a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b13a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b148:	461a      	mov	r2, r3
 800b14a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b14e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	440a      	add	r2, r1
 800b166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b16a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b16e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b180:	0151      	lsls	r1, r2, #5
 800b182:	69fa      	ldr	r2, [r7, #28]
 800b184:	440a      	add	r2, r1
 800b186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b18a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b18e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	3301      	adds	r3, #1
 800b194:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3a3      	bcc.n	800b0e8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b1b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d016      	beq.n	800b1ea <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1cc:	f043 030b 	orr.w	r3, r3, #11
 800b1d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1dc:	69fa      	ldr	r2, [r7, #28]
 800b1de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1e2:	f043 030b 	orr.w	r3, r3, #11
 800b1e6:	6453      	str	r3, [r2, #68]	; 0x44
 800b1e8:	e015      	b.n	800b216 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b1fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b200:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b210:	f043 030b 	orr.w	r3, r3, #11
 800b214:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b224:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b228:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b23a:	461a      	mov	r2, r3
 800b23c:	f005 faa2 	bl	8010784 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695a      	ldr	r2, [r3, #20]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b24e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f005 f9d0 	bl	80105fa <USB_ReadInterrupts>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b264:	d124      	bne.n	800b2b0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f005 fa66 	bl	801073c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f004 face 	bl	800f816 <USB_GetDevSpeed>
 800b27a:	4603      	mov	r3, r0
 800b27c:	461a      	mov	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681c      	ldr	r4, [r3, #0]
 800b286:	f000 fe67 	bl	800bf58 <HAL_RCC_GetHCLKFreq>
 800b28a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b290:	b2db      	uxtb	r3, r3
 800b292:	461a      	mov	r2, r3
 800b294:	4620      	mov	r0, r4
 800b296:	f003 fff3 	bl	800f280 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f007 fa9f 	bl	80127de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	695a      	ldr	r2, [r3, #20]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b2ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f005 f9a0 	bl	80105fa <USB_ReadInterrupts>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d10a      	bne.n	800b2da <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f007 fa7c 	bl	80127c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f002 0208 	and.w	r2, r2, #8
 800b2d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f005 f98b 	bl	80105fa <USB_ReadInterrupts>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ee:	d10f      	bne.n	800b310 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f007 fade 	bl	80128bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695a      	ldr	r2, [r3, #20]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b30e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f005 f970 	bl	80105fa <USB_ReadInterrupts>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b324:	d10f      	bne.n	800b346 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f007 fab1 	bl	8012898 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695a      	ldr	r2, [r3, #20]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f005 f955 	bl	80105fa <USB_ReadInterrupts>
 800b350:	4603      	mov	r3, r0
 800b352:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35a:	d10a      	bne.n	800b372 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f007 fabf 	bl	80128e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	695a      	ldr	r2, [r3, #20]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f005 f93f 	bl	80105fa <USB_ReadInterrupts>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b04      	cmp	r3, #4
 800b384:	d115      	bne.n	800b3b2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f007 faaf 	bl	80128fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6859      	ldr	r1, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	430a      	orrs	r2, r1
 800b3ac:	605a      	str	r2, [r3, #4]
 800b3ae:	e000      	b.n	800b3b2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800b3b0:	bf00      	nop
    }
  }
}
 800b3b2:	3734      	adds	r7, #52	; 0x34
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}

0800b3b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d101      	bne.n	800b3d2 <HAL_PCD_SetAddress+0x1a>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e013      	b.n	800b3fa <HAL_PCD_SetAddress+0x42>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	78fa      	ldrb	r2, [r7, #3]
 800b3de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	78fa      	ldrb	r2, [r7, #3]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f005 f89d 	bl	801052a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	461a      	mov	r2, r3
 800b410:	4603      	mov	r3, r0
 800b412:	70fb      	strb	r3, [r7, #3]
 800b414:	460b      	mov	r3, r1
 800b416:	803b      	strh	r3, [r7, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b424:	2b00      	cmp	r3, #0
 800b426:	da0f      	bge.n	800b448 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	f003 020f 	and.w	r2, r3, #15
 800b42e:	4613      	mov	r3, r2
 800b430:	00db      	lsls	r3, r3, #3
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	3338      	adds	r3, #56	; 0x38
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4413      	add	r3, r2
 800b43c:	3304      	adds	r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	705a      	strb	r2, [r3, #1]
 800b446:	e00f      	b.n	800b468 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	f003 020f 	and.w	r2, r3, #15
 800b44e:	4613      	mov	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	1a9b      	subs	r3, r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	4413      	add	r3, r2
 800b45e:	3304      	adds	r3, #4
 800b460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b474:	883a      	ldrh	r2, [r7, #0]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	78ba      	ldrb	r2, [r7, #2]
 800b47e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d004      	beq.n	800b492 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b492:	78bb      	ldrb	r3, [r7, #2]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d102      	bne.n	800b49e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_PCD_EP_Open+0xaa>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e00e      	b.n	800b4ca <HAL_PCD_EP_Open+0xc8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68f9      	ldr	r1, [r7, #12]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f004 f9d0 	bl	800f860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b4de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	da0f      	bge.n	800b506 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	f003 020f 	and.w	r2, r3, #15
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	3338      	adds	r3, #56	; 0x38
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	705a      	strb	r2, [r3, #1]
 800b504:	e00f      	b.n	800b526 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b506:	78fb      	ldrb	r3, [r7, #3]
 800b508:	f003 020f 	and.w	r2, r3, #15
 800b50c:	4613      	mov	r3, r2
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	1a9b      	subs	r3, r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	4413      	add	r3, r2
 800b51c:	3304      	adds	r3, #4
 800b51e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b526:	78fb      	ldrb	r3, [r7, #3]
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d101      	bne.n	800b540 <HAL_PCD_EP_Close+0x6e>
 800b53c:	2302      	movs	r3, #2
 800b53e:	e00e      	b.n	800b55e <HAL_PCD_EP_Close+0x8c>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68f9      	ldr	r1, [r7, #12]
 800b54e:	4618      	mov	r0, r3
 800b550:	f004 fa0e 	bl	800f970 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b086      	sub	sp, #24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
 800b572:	460b      	mov	r3, r1
 800b574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	f003 020f 	and.w	r2, r3, #15
 800b57c:	4613      	mov	r3, r2
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	1a9b      	subs	r3, r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4413      	add	r3, r2
 800b58c:	3304      	adds	r3, #4
 800b58e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5a8:	7afb      	ldrb	r3, [r7, #11]
 800b5aa:	f003 030f 	and.w	r3, r3, #15
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d102      	bne.n	800b5c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6979      	ldr	r1, [r7, #20]
 800b5da:	f004 fce9 	bl	800ffb0 <USB_EP0StartXfer>
 800b5de:	e008      	b.n	800b5f2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6818      	ldr	r0, [r3, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6979      	ldr	r1, [r7, #20]
 800b5ee:	f004 fa9b 	bl	800fb28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	f003 020f 	and.w	r2, r3, #15
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	1a9b      	subs	r3, r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b61e:	681b      	ldr	r3, [r3, #0]
}
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	460b      	mov	r3, r1
 800b63a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	f003 020f 	and.w	r2, r3, #15
 800b642:	4613      	mov	r3, r2
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	3338      	adds	r3, #56	; 0x38
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4413      	add	r3, r2
 800b650:	3304      	adds	r3, #4
 800b652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2200      	movs	r2, #0
 800b664:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2201      	movs	r2, #1
 800b66a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b66c:	7afb      	ldrb	r3, [r7, #11]
 800b66e:	f003 030f 	and.w	r3, r3, #15
 800b672:	b2da      	uxtb	r2, r3
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d102      	bne.n	800b686 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	f003 030f 	and.w	r3, r3, #15
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d109      	bne.n	800b6a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6818      	ldr	r0, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	461a      	mov	r2, r3
 800b69c:	6979      	ldr	r1, [r7, #20]
 800b69e:	f004 fc87 	bl	800ffb0 <USB_EP0StartXfer>
 800b6a2:	e008      	b.n	800b6b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6979      	ldr	r1, [r7, #20]
 800b6b2:	f004 fa39 	bl	800fb28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b6cc:	78fb      	ldrb	r3, [r7, #3]
 800b6ce:	f003 020f 	and.w	r2, r3, #15
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d901      	bls.n	800b6de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e050      	b.n	800b780 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b6de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	da0f      	bge.n	800b706 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6e6:	78fb      	ldrb	r3, [r7, #3]
 800b6e8:	f003 020f 	and.w	r2, r3, #15
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	1a9b      	subs	r3, r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	3338      	adds	r3, #56	; 0x38
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2201      	movs	r2, #1
 800b702:	705a      	strb	r2, [r3, #1]
 800b704:	e00d      	b.n	800b722 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b706:	78fa      	ldrb	r2, [r7, #3]
 800b708:	4613      	mov	r3, r2
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4413      	add	r3, r2
 800b718:	3304      	adds	r3, #4
 800b71a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b728:	78fb      	ldrb	r3, [r7, #3]
 800b72a:	f003 030f 	and.w	r3, r3, #15
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d101      	bne.n	800b742 <HAL_PCD_EP_SetStall+0x82>
 800b73e:	2302      	movs	r3, #2
 800b740:	e01e      	b.n	800b780 <HAL_PCD_EP_SetStall+0xc0>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68f9      	ldr	r1, [r7, #12]
 800b750:	4618      	mov	r0, r3
 800b752:	f004 fe16 	bl	8010382 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10a      	bne.n	800b776 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	691b      	ldr	r3, [r3, #16]
 800b768:	b2d9      	uxtb	r1, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b770:	461a      	mov	r2, r3
 800b772:	f005 f807 	bl	8010784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	f003 020f 	and.w	r2, r3, #15
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d901      	bls.n	800b7a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e042      	b.n	800b82c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b7a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	da0f      	bge.n	800b7ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7ae:	78fb      	ldrb	r3, [r7, #3]
 800b7b0:	f003 020f 	and.w	r2, r3, #15
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	1a9b      	subs	r3, r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	3338      	adds	r3, #56	; 0x38
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	705a      	strb	r2, [r3, #1]
 800b7cc:	e00f      	b.n	800b7ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	f003 020f 	and.w	r2, r3, #15
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b806:	2b01      	cmp	r3, #1
 800b808:	d101      	bne.n	800b80e <HAL_PCD_EP_ClrStall+0x86>
 800b80a:	2302      	movs	r3, #2
 800b80c:	e00e      	b.n	800b82c <HAL_PCD_EP_ClrStall+0xa4>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68f9      	ldr	r1, [r7, #12]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f004 fe1e 	bl	801045e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08a      	sub	sp, #40	; 0x28
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	4613      	mov	r3, r2
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	3338      	adds	r3, #56	; 0x38
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	4413      	add	r3, r2
 800b858:	3304      	adds	r3, #4
 800b85a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	699a      	ldr	r2, [r3, #24]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	429a      	cmp	r2, r3
 800b866:	d901      	bls.n	800b86c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e06c      	b.n	800b946 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	695a      	ldr	r2, [r3, #20]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d902      	bls.n	800b888 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	3303      	adds	r3, #3
 800b88c:	089b      	lsrs	r3, r3, #2
 800b88e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b890:	e02b      	b.n	800b8ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	695a      	ldr	r2, [r3, #20]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d902      	bls.n	800b8ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	3303      	adds	r3, #3
 800b8b2:	089b      	lsrs	r3, r3, #2
 800b8b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68d9      	ldr	r1, [r3, #12]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6978      	ldr	r0, [r7, #20]
 800b8ce:	f004 fcc2 	bl	8010256 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	441a      	add	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	699a      	ldr	r2, [r3, #24]
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d809      	bhi.n	800b914 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	699a      	ldr	r2, [r3, #24]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b908:	429a      	cmp	r2, r3
 800b90a:	d203      	bcs.n	800b914 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1be      	bne.n	800b892 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	695a      	ldr	r2, [r3, #20]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d811      	bhi.n	800b944 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	f003 030f 	and.w	r3, r3, #15
 800b926:	2201      	movs	r2, #1
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	43db      	mvns	r3, r3
 800b93a:	6939      	ldr	r1, [r7, #16]
 800b93c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b940:	4013      	ands	r3, r2
 800b942:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	333c      	adds	r3, #60	; 0x3c
 800b968:	3304      	adds	r3, #4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	015a      	lsls	r2, r3, #5
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	4413      	add	r3, r2
 800b976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	2b01      	cmp	r3, #1
 800b984:	f040 80a0 	bne.w	800bac8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f003 0308 	and.w	r3, r3, #8
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d015      	beq.n	800b9be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4a72      	ldr	r2, [pc, #456]	; (800bb60 <PCD_EP_OutXfrComplete_int+0x210>)
 800b996:	4293      	cmp	r3, r2
 800b998:	f240 80dd 	bls.w	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 80d7 	beq.w	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9ba:	6093      	str	r3, [r2, #8]
 800b9bc:	e0cb      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f003 0320 	and.w	r3, r3, #32
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	2320      	movs	r3, #32
 800b9d8:	6093      	str	r3, [r2, #8]
 800b9da:	e0bc      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f040 80b7 	bne.w	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4a5d      	ldr	r2, [pc, #372]	; (800bb60 <PCD_EP_OutXfrComplete_int+0x210>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d90f      	bls.n	800ba10 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	461a      	mov	r2, r3
 800ba08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0c:	6093      	str	r3, [r2, #8]
 800ba0e:	e0a2      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4613      	mov	r3, r2
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	1a9b      	subs	r3, r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	440b      	add	r3, r1
 800ba1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ba22:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	0159      	lsls	r1, r3, #5
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	440b      	add	r3, r1
 800ba2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ba36:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	1a9b      	subs	r3, r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4403      	add	r3, r0
 800ba46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ba4a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4613      	mov	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ba5e:	6819      	ldr	r1, [r3, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	4613      	mov	r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4403      	add	r3, r0
 800ba6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4419      	add	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4403      	add	r3, r0
 800ba84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ba88:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d114      	bne.n	800baba <PCD_EP_OutXfrComplete_int+0x16a>
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	1a9b      	subs	r3, r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	440b      	add	r3, r1
 800ba9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d108      	bne.n	800baba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6818      	ldr	r0, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bab2:	461a      	mov	r2, r3
 800bab4:	2101      	movs	r1, #1
 800bab6:	f004 fe65 	bl	8010784 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f006 fe49 	bl	8012758 <HAL_PCD_DataOutStageCallback>
 800bac6:	e046      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4a26      	ldr	r2, [pc, #152]	; (800bb64 <PCD_EP_OutXfrComplete_int+0x214>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d124      	bne.n	800bb1a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	015a      	lsls	r2, r3, #5
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae6:	461a      	mov	r2, r3
 800bae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baec:	6093      	str	r3, [r2, #8]
 800baee:	e032      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f003 0320 	and.w	r3, r3, #32
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d008      	beq.n	800bb0c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	015a      	lsls	r2, r3, #5
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	4413      	add	r3, r2
 800bb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb06:	461a      	mov	r2, r3
 800bb08:	2320      	movs	r3, #32
 800bb0a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f006 fe20 	bl	8012758 <HAL_PCD_DataOutStageCallback>
 800bb18:	e01d      	b.n	800bb56 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d114      	bne.n	800bb4a <PCD_EP_OutXfrComplete_int+0x1fa>
 800bb20:	6879      	ldr	r1, [r7, #4]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	1a9b      	subs	r3, r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	440b      	add	r3, r1
 800bb2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d108      	bne.n	800bb4a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bb42:	461a      	mov	r2, r3
 800bb44:	2100      	movs	r1, #0
 800bb46:	f004 fe1d 	bl	8010784 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f006 fe01 	bl	8012758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	4f54300a 	.word	0x4f54300a
 800bb64:	4f54310a 	.word	0x4f54310a

0800bb68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	333c      	adds	r3, #60	; 0x3c
 800bb80:	3304      	adds	r3, #4
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d90e      	bls.n	800bbbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d009      	beq.n	800bbbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f006 fdb9 	bl	8012734 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4a0a      	ldr	r2, [pc, #40]	; (800bbf0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d90c      	bls.n	800bbe4 <PCD_EP_OutSetupPacket_int+0x7c>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d108      	bne.n	800bbe4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bbdc:	461a      	mov	r2, r3
 800bbde:	2101      	movs	r1, #1
 800bbe0:	f004 fdd0 	bl	8010784 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	4f54300a 	.word	0x4f54300a

0800bbf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
 800bc00:	4613      	mov	r3, r2
 800bc02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d107      	bne.n	800bc22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bc12:	883b      	ldrh	r3, [r7, #0]
 800bc14:	0419      	lsls	r1, r3, #16
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	629a      	str	r2, [r3, #40]	; 0x28
 800bc20:	e028      	b.n	800bc74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc28:	0c1b      	lsrs	r3, r3, #16
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
 800bc34:	e00d      	b.n	800bc52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	3340      	adds	r3, #64	; 0x40
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	4413      	add	r3, r2
 800bc4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
 800bc52:	7bfa      	ldrb	r2, [r7, #15]
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d3ec      	bcc.n	800bc36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bc5c:	883b      	ldrh	r3, [r7, #0]
 800bc5e:	0418      	lsls	r0, r3, #16
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	4302      	orrs	r2, r0
 800bc6c:	3340      	adds	r3, #64	; 0x40
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	887a      	ldrh	r2, [r7, #2]
 800bc94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcd6:	f043 0303 	orr.w	r3, r3, #3
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	603b      	str	r3, [r7, #0]
 800bcfa:	4b20      	ldr	r3, [pc, #128]	; (800bd7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	4a1f      	ldr	r2, [pc, #124]	; (800bd7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bd00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd04:	6413      	str	r3, [r2, #64]	; 0x40
 800bd06:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd0e:	603b      	str	r3, [r7, #0]
 800bd10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bd12:	4b1b      	ldr	r3, [pc, #108]	; (800bd80 <HAL_PWREx_EnableOverDrive+0x94>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bd18:	f7fc fc82 	bl	8008620 <HAL_GetTick>
 800bd1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bd1e:	e009      	b.n	800bd34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bd20:	f7fc fc7e 	bl	8008620 <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd2e:	d901      	bls.n	800bd34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bd30:	2303      	movs	r3, #3
 800bd32:	e01f      	b.n	800bd74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bd34:	4b13      	ldr	r3, [pc, #76]	; (800bd84 <HAL_PWREx_EnableOverDrive+0x98>)
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd40:	d1ee      	bne.n	800bd20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bd42:	4b11      	ldr	r3, [pc, #68]	; (800bd88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bd44:	2201      	movs	r2, #1
 800bd46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bd48:	f7fc fc6a 	bl	8008620 <HAL_GetTick>
 800bd4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd4e:	e009      	b.n	800bd64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bd50:	f7fc fc66 	bl	8008620 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd5e:	d901      	bls.n	800bd64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e007      	b.n	800bd74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd64:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <HAL_PWREx_EnableOverDrive+0x98>)
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd70:	d1ee      	bne.n	800bd50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	40023800 	.word	0x40023800
 800bd80:	420e0040 	.word	0x420e0040
 800bd84:	40007000 	.word	0x40007000
 800bd88:	420e0044 	.word	0x420e0044

0800bd8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e0cc      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bda0:	4b68      	ldr	r3, [pc, #416]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d90c      	bls.n	800bdc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdae:	4b65      	ldr	r3, [pc, #404]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdb6:	4b63      	ldr	r3, [pc, #396]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d001      	beq.n	800bdc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e0b8      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d020      	beq.n	800be16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d005      	beq.n	800bdec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bde0:	4b59      	ldr	r3, [pc, #356]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	4a58      	ldr	r2, [pc, #352]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bde6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bdea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 0308 	and.w	r3, r3, #8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d005      	beq.n	800be04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdf8:	4b53      	ldr	r3, [pc, #332]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	4a52      	ldr	r2, [pc, #328]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bdfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800be02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be04:	4b50      	ldr	r3, [pc, #320]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	494d      	ldr	r1, [pc, #308]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be12:	4313      	orrs	r3, r2
 800be14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d044      	beq.n	800beac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d107      	bne.n	800be3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be2a:	4b47      	ldr	r3, [pc, #284]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d119      	bne.n	800be6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e07f      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d003      	beq.n	800be4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be46:	2b03      	cmp	r3, #3
 800be48:	d107      	bne.n	800be5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be4a:	4b3f      	ldr	r3, [pc, #252]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be52:	2b00      	cmp	r3, #0
 800be54:	d109      	bne.n	800be6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e06f      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be5a:	4b3b      	ldr	r3, [pc, #236]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e067      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be6a:	4b37      	ldr	r3, [pc, #220]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f023 0203 	bic.w	r2, r3, #3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	4934      	ldr	r1, [pc, #208]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be7c:	f7fc fbd0 	bl	8008620 <HAL_GetTick>
 800be80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be82:	e00a      	b.n	800be9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be84:	f7fc fbcc 	bl	8008620 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be92:	4293      	cmp	r3, r2
 800be94:	d901      	bls.n	800be9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e04f      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be9a:	4b2b      	ldr	r3, [pc, #172]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	f003 020c 	and.w	r2, r3, #12
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d1eb      	bne.n	800be84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800beac:	4b25      	ldr	r3, [pc, #148]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d20c      	bcs.n	800bed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beba:	4b22      	ldr	r3, [pc, #136]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	b2d2      	uxtb	r2, r2
 800bec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bec2:	4b20      	ldr	r3, [pc, #128]	; (800bf44 <HAL_RCC_ClockConfig+0x1b8>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 030f 	and.w	r3, r3, #15
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d001      	beq.n	800bed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e032      	b.n	800bf3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0304 	and.w	r3, r3, #4
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d008      	beq.n	800bef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bee0:	4b19      	ldr	r3, [pc, #100]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	4916      	ldr	r1, [pc, #88]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800beee:	4313      	orrs	r3, r2
 800bef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0308 	and.w	r3, r3, #8
 800befa:	2b00      	cmp	r3, #0
 800befc:	d009      	beq.n	800bf12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800befe:	4b12      	ldr	r3, [pc, #72]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	490e      	ldr	r1, [pc, #56]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bf12:	f000 fb7f 	bl	800c614 <HAL_RCC_GetSysClockFreq>
 800bf16:	4602      	mov	r2, r0
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	091b      	lsrs	r3, r3, #4
 800bf1e:	f003 030f 	and.w	r3, r3, #15
 800bf22:	490a      	ldr	r1, [pc, #40]	; (800bf4c <HAL_RCC_ClockConfig+0x1c0>)
 800bf24:	5ccb      	ldrb	r3, [r1, r3]
 800bf26:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2a:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <HAL_RCC_ClockConfig+0x1c4>)
 800bf2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <HAL_RCC_ClockConfig+0x1c8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fc fb30 	bl	8008598 <HAL_InitTick>

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	40023c00 	.word	0x40023c00
 800bf48:	40023800 	.word	0x40023800
 800bf4c:	08021d6c 	.word	0x08021d6c
 800bf50:	20000000 	.word	0x20000000
 800bf54:	20000004 	.word	0x20000004

0800bf58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf5c:	4b03      	ldr	r3, [pc, #12]	; (800bf6c <HAL_RCC_GetHCLKFreq+0x14>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	20000000 	.word	0x20000000

0800bf70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bf74:	f7ff fff0 	bl	800bf58 <HAL_RCC_GetHCLKFreq>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	0a9b      	lsrs	r3, r3, #10
 800bf80:	f003 0307 	and.w	r3, r3, #7
 800bf84:	4903      	ldr	r1, [pc, #12]	; (800bf94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf86:	5ccb      	ldrb	r3, [r1, r3]
 800bf88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	40023800 	.word	0x40023800
 800bf94:	08021d7c 	.word	0x08021d7c

0800bf98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bf9c:	f7ff ffdc 	bl	800bf58 <HAL_RCC_GetHCLKFreq>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	0b5b      	lsrs	r3, r3, #13
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	4903      	ldr	r1, [pc, #12]	; (800bfbc <HAL_RCC_GetPCLK2Freq+0x24>)
 800bfae:	5ccb      	ldrb	r3, [r1, r3]
 800bfb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	08021d7c 	.word	0x08021d7c

0800bfc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08c      	sub	sp, #48	; 0x30
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d010      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800bff8:	4b6f      	ldr	r3, [pc, #444]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bffe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c006:	496c      	ldr	r1, [pc, #432]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c008:	4313      	orrs	r3, r2
 800c00a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800c016:	2301      	movs	r3, #1
 800c018:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d010      	beq.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800c026:	4b64      	ldr	r3, [pc, #400]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c034:	4960      	ldr	r1, [pc, #384]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c036:	4313      	orrs	r3, r2
 800c038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800c044:	2301      	movs	r3, #1
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 0304 	and.w	r3, r3, #4
 800c050:	2b00      	cmp	r3, #0
 800c052:	d017      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c054:	4b58      	ldr	r3, [pc, #352]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	4955      	ldr	r1, [pc, #340]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c064:	4313      	orrs	r3, r2
 800c066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c072:	d101      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800c074:	2301      	movs	r3, #1
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800c080:	2301      	movs	r3, #1
 800c082:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d017      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c090:	4b49      	ldr	r3, [pc, #292]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09e:	4946      	ldr	r1, [pc, #280]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0ae:	d101      	bne.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 808a 	beq.w	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	60bb      	str	r3, [r7, #8]
 800c0d2:	4b39      	ldr	r3, [pc, #228]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d6:	4a38      	ldr	r2, [pc, #224]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c0d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0dc:	6413      	str	r3, [r2, #64]	; 0x40
 800c0de:	4b36      	ldr	r3, [pc, #216]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0e6:	60bb      	str	r3, [r7, #8]
 800c0e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c0ea:	4b34      	ldr	r3, [pc, #208]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a33      	ldr	r2, [pc, #204]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800c0f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c0f6:	f7fc fa93 	bl	8008620 <HAL_GetTick>
 800c0fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c0fc:	e008      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c0fe:	f7fc fa8f 	bl	8008620 <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	2b02      	cmp	r3, #2
 800c10a:	d901      	bls.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e278      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c110:	4b2a      	ldr	r3, [pc, #168]	; (800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0f0      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c11c:	4b26      	ldr	r3, [pc, #152]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c124:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d02f      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c134:	6a3a      	ldr	r2, [r7, #32]
 800c136:	429a      	cmp	r2, r3
 800c138:	d028      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c13a:	4b1f      	ldr	r3, [pc, #124]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c13e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c142:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c144:	4b1e      	ldr	r3, [pc, #120]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800c146:	2201      	movs	r2, #1
 800c148:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c14a:	4b1d      	ldr	r3, [pc, #116]	; (800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c150:	4a19      	ldr	r2, [pc, #100]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c156:	4b18      	ldr	r3, [pc, #96]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d114      	bne.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c162:	f7fc fa5d 	bl	8008620 <HAL_GetTick>
 800c166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c168:	e00a      	b.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c16a:	f7fc fa59 	bl	8008620 <HAL_GetTick>
 800c16e:	4602      	mov	r2, r0
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	f241 3288 	movw	r2, #5000	; 0x1388
 800c178:	4293      	cmp	r3, r2
 800c17a:	d901      	bls.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e240      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c184:	f003 0302 	and.w	r3, r3, #2
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0ee      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c198:	d114      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800c19a:	4b07      	ldr	r3, [pc, #28]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1ae:	4902      	ldr	r1, [pc, #8]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	608b      	str	r3, [r1, #8]
 800c1b4:	e00c      	b.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800c1b6:	bf00      	nop
 800c1b8:	40023800 	.word	0x40023800
 800c1bc:	40007000 	.word	0x40007000
 800c1c0:	42470e40 	.word	0x42470e40
 800c1c4:	4b4a      	ldr	r3, [pc, #296]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	4a49      	ldr	r2, [pc, #292]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c1ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c1ce:	6093      	str	r3, [r2, #8]
 800c1d0:	4b47      	ldr	r3, [pc, #284]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c1d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1dc:	4944      	ldr	r1, [pc, #272]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0310 	and.w	r3, r3, #16
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800c1f4:	4b3f      	ldr	r3, [pc, #252]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800c1f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00a      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800c204:	4b3a      	ldr	r3, [pc, #232]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c20a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c212:	4937      	ldr	r1, [pc, #220]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c214:	4313      	orrs	r3, r2
 800c216:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c226:	4b32      	ldr	r3, [pc, #200]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c22c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c234:	492e      	ldr	r1, [pc, #184]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c236:	4313      	orrs	r3, r2
 800c238:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c244:	2b00      	cmp	r3, #0
 800c246:	d011      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c248:	4b29      	ldr	r3, [pc, #164]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c24e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c256:	4926      	ldr	r1, [pc, #152]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c258:	4313      	orrs	r3, r2
 800c25a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c266:	d101      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800c268:	2301      	movs	r3, #1
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00a      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c278:	4b1d      	ldr	r3, [pc, #116]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c27a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c27e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c286:	491a      	ldr	r1, [pc, #104]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c296:	2b00      	cmp	r3, #0
 800c298:	d011      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800c29a:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c29c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a8:	4911      	ldr	r1, [pc, #68]	; (800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2b8:	d101      	bne.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d005      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2cc:	f040 80ff 	bne.w	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c2d0:	4b09      	ldr	r3, [pc, #36]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c2d6:	f7fc f9a3 	bl	8008620 <HAL_GetTick>
 800c2da:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2dc:	e00e      	b.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c2de:	f7fc f99f 	bl	8008620 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d907      	bls.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e188      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c2f0:	40023800 	.word	0x40023800
 800c2f4:	424711e0 	.word	0x424711e0
 800c2f8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2fc:	4b7e      	ldr	r3, [pc, #504]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1ea      	bne.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0301 	and.w	r3, r3, #1
 800c310:	2b00      	cmp	r3, #0
 800c312:	d003      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d009      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800c324:	2b00      	cmp	r3, #0
 800c326:	d028      	beq.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d124      	bne.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800c330:	4b71      	ldr	r3, [pc, #452]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c336:	0c1b      	lsrs	r3, r3, #16
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	3301      	adds	r3, #1
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c342:	4b6d      	ldr	r3, [pc, #436]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c348:	0e1b      	lsrs	r3, r3, #24
 800c34a:	f003 030f 	and.w	r3, r3, #15
 800c34e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	019b      	lsls	r3, r3, #6
 800c35a:	431a      	orrs	r2, r3
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	085b      	lsrs	r3, r3, #1
 800c360:	3b01      	subs	r3, #1
 800c362:	041b      	lsls	r3, r3, #16
 800c364:	431a      	orrs	r2, r3
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	061b      	lsls	r3, r3, #24
 800c36a:	431a      	orrs	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	071b      	lsls	r3, r3, #28
 800c372:	4961      	ldr	r1, [pc, #388]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c374:	4313      	orrs	r3, r2
 800c376:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f003 0304 	and.w	r3, r3, #4
 800c382:	2b00      	cmp	r3, #0
 800c384:	d004      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c38e:	d00a      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d035      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a4:	d130      	bne.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800c3a6:	4b54      	ldr	r3, [pc, #336]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ac:	0c1b      	lsrs	r3, r3, #16
 800c3ae:	f003 0303 	and.w	r3, r3, #3
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c3b8:	4b4f      	ldr	r3, [pc, #316]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3be:	0f1b      	lsrs	r3, r3, #28
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	019b      	lsls	r3, r3, #6
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	085b      	lsrs	r3, r3, #1
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	041b      	lsls	r3, r3, #16
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	061b      	lsls	r3, r3, #24
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	071b      	lsls	r3, r3, #28
 800c3e8:	4943      	ldr	r1, [pc, #268]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c3f0:	4b41      	ldr	r3, [pc, #260]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c3f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f6:	f023 021f 	bic.w	r2, r3, #31
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fe:	3b01      	subs	r3, #1
 800c400:	493d      	ldr	r1, [pc, #244]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c402:	4313      	orrs	r3, r2
 800c404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c410:	2b00      	cmp	r3, #0
 800c412:	d029      	beq.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41c:	d124      	bne.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800c41e:	4b36      	ldr	r3, [pc, #216]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c424:	0c1b      	lsrs	r3, r3, #16
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	3301      	adds	r3, #1
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c430:	4b31      	ldr	r3, [pc, #196]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c436:	0f1b      	lsrs	r3, r3, #28
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	019b      	lsls	r3, r3, #6
 800c448:	431a      	orrs	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	085b      	lsrs	r3, r3, #1
 800c450:	3b01      	subs	r3, #1
 800c452:	041b      	lsls	r3, r3, #16
 800c454:	431a      	orrs	r2, r3
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	061b      	lsls	r3, r3, #24
 800c45a:	431a      	orrs	r2, r3
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	071b      	lsls	r3, r3, #28
 800c460:	4925      	ldr	r1, [pc, #148]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c462:	4313      	orrs	r3, r2
 800c464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c470:	2b00      	cmp	r3, #0
 800c472:	d016      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	019b      	lsls	r3, r3, #6
 800c47e:	431a      	orrs	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	085b      	lsrs	r3, r3, #1
 800c486:	3b01      	subs	r3, #1
 800c488:	041b      	lsls	r3, r3, #16
 800c48a:	431a      	orrs	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	061b      	lsls	r3, r3, #24
 800c492:	431a      	orrs	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	071b      	lsls	r3, r3, #28
 800c49a:	4917      	ldr	r1, [pc, #92]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c4a2:	4b16      	ldr	r3, [pc, #88]	; (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4a8:	f7fc f8ba 	bl	8008620 <HAL_GetTick>
 800c4ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4ae:	e008      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c4b0:	f7fc f8b6 	bl	8008620 <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d901      	bls.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e09f      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c4c2:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0f0      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	f040 8095 	bne.w	800c600 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4dc:	f7fc f8a0 	bl	8008620 <HAL_GetTick>
 800c4e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4e2:	e00f      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c4e4:	f7fc f89c 	bl	8008620 <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d908      	bls.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e085      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800c4f6:	bf00      	nop
 800c4f8:	40023800 	.word	0x40023800
 800c4fc:	42470068 	.word	0x42470068
 800c500:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c504:	4b41      	ldr	r3, [pc, #260]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c510:	d0e8      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0304 	and.w	r3, r3, #4
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c522:	2b00      	cmp	r3, #0
 800c524:	d009      	beq.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d02b      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c536:	2b00      	cmp	r3, #0
 800c538:	d127      	bne.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c53a:	4b34      	ldr	r3, [pc, #208]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c540:	0c1b      	lsrs	r3, r3, #16
 800c542:	f003 0303 	and.w	r3, r3, #3
 800c546:	3301      	adds	r3, #1
 800c548:	005b      	lsls	r3, r3, #1
 800c54a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	699a      	ldr	r2, [r3, #24]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	019b      	lsls	r3, r3, #6
 800c556:	431a      	orrs	r2, r3
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	085b      	lsrs	r3, r3, #1
 800c55c:	3b01      	subs	r3, #1
 800c55e:	041b      	lsls	r3, r3, #16
 800c560:	431a      	orrs	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c566:	061b      	lsls	r3, r3, #24
 800c568:	4928      	ldr	r1, [pc, #160]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c570:	4b26      	ldr	r3, [pc, #152]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57e:	3b01      	subs	r3, #1
 800c580:	021b      	lsls	r3, r3, #8
 800c582:	4922      	ldr	r1, [pc, #136]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c584:	4313      	orrs	r3, r2
 800c586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c592:	2b00      	cmp	r3, #0
 800c594:	d01d      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c59a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c59e:	d118      	bne.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5a6:	0e1b      	lsrs	r3, r3, #24
 800c5a8:	f003 030f 	and.w	r3, r3, #15
 800c5ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	019b      	lsls	r3, r3, #6
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	085b      	lsrs	r3, r3, #1
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	041b      	lsls	r3, r3, #16
 800c5c4:	431a      	orrs	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	061b      	lsls	r3, r3, #24
 800c5ca:	4910      	ldr	r1, [pc, #64]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c5d2:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5d8:	f7fc f822 	bl	8008620 <HAL_GetTick>
 800c5dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5de:	e008      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c5e0:	f7fc f81e 	bl	8008620 <HAL_GetTick>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d901      	bls.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	e007      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5f2:	4b06      	ldr	r3, [pc, #24]	; (800c60c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5fe:	d1ef      	bne.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3730      	adds	r7, #48	; 0x30
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	40023800 	.word	0x40023800
 800c610:	42470070 	.word	0x42470070

0800c614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c618:	b088      	sub	sp, #32
 800c61a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c61c:	2300      	movs	r3, #0
 800c61e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c630:	4bce      	ldr	r3, [pc, #824]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 030c 	and.w	r3, r3, #12
 800c638:	2b0c      	cmp	r3, #12
 800c63a:	f200 818d 	bhi.w	800c958 <HAL_RCC_GetSysClockFreq+0x344>
 800c63e:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <HAL_RCC_GetSysClockFreq+0x30>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c679 	.word	0x0800c679
 800c648:	0800c959 	.word	0x0800c959
 800c64c:	0800c959 	.word	0x0800c959
 800c650:	0800c959 	.word	0x0800c959
 800c654:	0800c67f 	.word	0x0800c67f
 800c658:	0800c959 	.word	0x0800c959
 800c65c:	0800c959 	.word	0x0800c959
 800c660:	0800c959 	.word	0x0800c959
 800c664:	0800c685 	.word	0x0800c685
 800c668:	0800c959 	.word	0x0800c959
 800c66c:	0800c959 	.word	0x0800c959
 800c670:	0800c959 	.word	0x0800c959
 800c674:	0800c7f9 	.word	0x0800c7f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c678:	4bbd      	ldr	r3, [pc, #756]	; (800c970 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c67a:	61bb      	str	r3, [r7, #24]
       break;
 800c67c:	e16f      	b.n	800c95e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c67e:	4bbd      	ldr	r3, [pc, #756]	; (800c974 <HAL_RCC_GetSysClockFreq+0x360>)
 800c680:	61bb      	str	r3, [r7, #24]
      break;
 800c682:	e16c      	b.n	800c95e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c684:	4bb9      	ldr	r3, [pc, #740]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c68c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c68e:	4bb7      	ldr	r3, [pc, #732]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c696:	2b00      	cmp	r3, #0
 800c698:	d053      	beq.n	800c742 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c69a:	4bb4      	ldr	r3, [pc, #720]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	099b      	lsrs	r3, r3, #6
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c6aa:	f04f 0100 	mov.w	r1, #0
 800c6ae:	ea02 0400 	and.w	r4, r2, r0
 800c6b2:	603c      	str	r4, [r7, #0]
 800c6b4:	400b      	ands	r3, r1
 800c6b6:	607b      	str	r3, [r7, #4]
 800c6b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f04f 0200 	mov.w	r2, #0
 800c6c4:	f04f 0300 	mov.w	r3, #0
 800c6c8:	014b      	lsls	r3, r1, #5
 800c6ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c6ce:	0142      	lsls	r2, r0, #5
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	1ac0      	subs	r0, r0, r3
 800c6d8:	462b      	mov	r3, r5
 800c6da:	eb61 0103 	sbc.w	r1, r1, r3
 800c6de:	f04f 0200 	mov.w	r2, #0
 800c6e2:	f04f 0300 	mov.w	r3, #0
 800c6e6:	018b      	lsls	r3, r1, #6
 800c6e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c6ec:	0182      	lsls	r2, r0, #6
 800c6ee:	1a12      	subs	r2, r2, r0
 800c6f0:	eb63 0301 	sbc.w	r3, r3, r1
 800c6f4:	f04f 0000 	mov.w	r0, #0
 800c6f8:	f04f 0100 	mov.w	r1, #0
 800c6fc:	00d9      	lsls	r1, r3, #3
 800c6fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c702:	00d0      	lsls	r0, r2, #3
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4621      	mov	r1, r4
 800c70a:	1852      	adds	r2, r2, r1
 800c70c:	4629      	mov	r1, r5
 800c70e:	eb43 0101 	adc.w	r1, r3, r1
 800c712:	460b      	mov	r3, r1
 800c714:	f04f 0000 	mov.w	r0, #0
 800c718:	f04f 0100 	mov.w	r1, #0
 800c71c:	0259      	lsls	r1, r3, #9
 800c71e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c722:	0250      	lsls	r0, r2, #9
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4610      	mov	r0, r2
 800c72a:	4619      	mov	r1, r3
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	461a      	mov	r2, r3
 800c730:	f04f 0300 	mov.w	r3, #0
 800c734:	f7f4 fa58 	bl	8000be8 <__aeabi_uldivmod>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4613      	mov	r3, r2
 800c73e:	61fb      	str	r3, [r7, #28]
 800c740:	e04c      	b.n	800c7dc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c742:	4b8a      	ldr	r3, [pc, #552]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	099b      	lsrs	r3, r3, #6
 800c748:	461a      	mov	r2, r3
 800c74a:	f04f 0300 	mov.w	r3, #0
 800c74e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c752:	f04f 0100 	mov.w	r1, #0
 800c756:	ea02 0a00 	and.w	sl, r2, r0
 800c75a:	ea03 0b01 	and.w	fp, r3, r1
 800c75e:	4650      	mov	r0, sl
 800c760:	4659      	mov	r1, fp
 800c762:	f04f 0200 	mov.w	r2, #0
 800c766:	f04f 0300 	mov.w	r3, #0
 800c76a:	014b      	lsls	r3, r1, #5
 800c76c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c770:	0142      	lsls	r2, r0, #5
 800c772:	4610      	mov	r0, r2
 800c774:	4619      	mov	r1, r3
 800c776:	ebb0 000a 	subs.w	r0, r0, sl
 800c77a:	eb61 010b 	sbc.w	r1, r1, fp
 800c77e:	f04f 0200 	mov.w	r2, #0
 800c782:	f04f 0300 	mov.w	r3, #0
 800c786:	018b      	lsls	r3, r1, #6
 800c788:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c78c:	0182      	lsls	r2, r0, #6
 800c78e:	1a12      	subs	r2, r2, r0
 800c790:	eb63 0301 	sbc.w	r3, r3, r1
 800c794:	f04f 0000 	mov.w	r0, #0
 800c798:	f04f 0100 	mov.w	r1, #0
 800c79c:	00d9      	lsls	r1, r3, #3
 800c79e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c7a2:	00d0      	lsls	r0, r2, #3
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	eb12 020a 	adds.w	r2, r2, sl
 800c7ac:	eb43 030b 	adc.w	r3, r3, fp
 800c7b0:	f04f 0000 	mov.w	r0, #0
 800c7b4:	f04f 0100 	mov.w	r1, #0
 800c7b8:	0299      	lsls	r1, r3, #10
 800c7ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c7be:	0290      	lsls	r0, r2, #10
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f04f 0300 	mov.w	r3, #0
 800c7d0:	f7f4 fa0a 	bl	8000be8 <__aeabi_uldivmod>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4613      	mov	r3, r2
 800c7da:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c7dc:	4b63      	ldr	r3, [pc, #396]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	0c1b      	lsrs	r3, r3, #16
 800c7e2:	f003 0303 	and.w	r3, r3, #3
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f4:	61bb      	str	r3, [r7, #24]
      break;
 800c7f6:	e0b2      	b.n	800c95e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c7f8:	4b5c      	ldr	r3, [pc, #368]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c800:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c802:	4b5a      	ldr	r3, [pc, #360]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d04d      	beq.n	800c8aa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c80e:	4b57      	ldr	r3, [pc, #348]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	099b      	lsrs	r3, r3, #6
 800c814:	461a      	mov	r2, r3
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c81e:	f04f 0100 	mov.w	r1, #0
 800c822:	ea02 0800 	and.w	r8, r2, r0
 800c826:	ea03 0901 	and.w	r9, r3, r1
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f04f 0200 	mov.w	r2, #0
 800c832:	f04f 0300 	mov.w	r3, #0
 800c836:	014b      	lsls	r3, r1, #5
 800c838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c83c:	0142      	lsls	r2, r0, #5
 800c83e:	4610      	mov	r0, r2
 800c840:	4619      	mov	r1, r3
 800c842:	ebb0 0008 	subs.w	r0, r0, r8
 800c846:	eb61 0109 	sbc.w	r1, r1, r9
 800c84a:	f04f 0200 	mov.w	r2, #0
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	018b      	lsls	r3, r1, #6
 800c854:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c858:	0182      	lsls	r2, r0, #6
 800c85a:	1a12      	subs	r2, r2, r0
 800c85c:	eb63 0301 	sbc.w	r3, r3, r1
 800c860:	f04f 0000 	mov.w	r0, #0
 800c864:	f04f 0100 	mov.w	r1, #0
 800c868:	00d9      	lsls	r1, r3, #3
 800c86a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c86e:	00d0      	lsls	r0, r2, #3
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	eb12 0208 	adds.w	r2, r2, r8
 800c878:	eb43 0309 	adc.w	r3, r3, r9
 800c87c:	f04f 0000 	mov.w	r0, #0
 800c880:	f04f 0100 	mov.w	r1, #0
 800c884:	0259      	lsls	r1, r3, #9
 800c886:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c88a:	0250      	lsls	r0, r2, #9
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4610      	mov	r0, r2
 800c892:	4619      	mov	r1, r3
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	461a      	mov	r2, r3
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	f7f4 f9a4 	bl	8000be8 <__aeabi_uldivmod>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	61fb      	str	r3, [r7, #28]
 800c8a8:	e04a      	b.n	800c940 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8aa:	4b30      	ldr	r3, [pc, #192]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	099b      	lsrs	r3, r3, #6
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c8ba:	f04f 0100 	mov.w	r1, #0
 800c8be:	ea02 0400 	and.w	r4, r2, r0
 800c8c2:	ea03 0501 	and.w	r5, r3, r1
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f04f 0200 	mov.w	r2, #0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	014b      	lsls	r3, r1, #5
 800c8d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c8d8:	0142      	lsls	r2, r0, #5
 800c8da:	4610      	mov	r0, r2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	1b00      	subs	r0, r0, r4
 800c8e0:	eb61 0105 	sbc.w	r1, r1, r5
 800c8e4:	f04f 0200 	mov.w	r2, #0
 800c8e8:	f04f 0300 	mov.w	r3, #0
 800c8ec:	018b      	lsls	r3, r1, #6
 800c8ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c8f2:	0182      	lsls	r2, r0, #6
 800c8f4:	1a12      	subs	r2, r2, r0
 800c8f6:	eb63 0301 	sbc.w	r3, r3, r1
 800c8fa:	f04f 0000 	mov.w	r0, #0
 800c8fe:	f04f 0100 	mov.w	r1, #0
 800c902:	00d9      	lsls	r1, r3, #3
 800c904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c908:	00d0      	lsls	r0, r2, #3
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	1912      	adds	r2, r2, r4
 800c910:	eb45 0303 	adc.w	r3, r5, r3
 800c914:	f04f 0000 	mov.w	r0, #0
 800c918:	f04f 0100 	mov.w	r1, #0
 800c91c:	0299      	lsls	r1, r3, #10
 800c91e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c922:	0290      	lsls	r0, r2, #10
 800c924:	4602      	mov	r2, r0
 800c926:	460b      	mov	r3, r1
 800c928:	4610      	mov	r0, r2
 800c92a:	4619      	mov	r1, r3
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	461a      	mov	r2, r3
 800c930:	f04f 0300 	mov.w	r3, #0
 800c934:	f7f4 f958 	bl	8000be8 <__aeabi_uldivmod>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4613      	mov	r3, r2
 800c93e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c940:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <HAL_RCC_GetSysClockFreq+0x358>)
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	0f1b      	lsrs	r3, r3, #28
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	fbb2 f3f3 	udiv	r3, r2, r3
 800c954:	61bb      	str	r3, [r7, #24]
      break;
 800c956:	e002      	b.n	800c95e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c95a:	61bb      	str	r3, [r7, #24]
      break;
 800c95c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c95e:	69bb      	ldr	r3, [r7, #24]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c96a:	bf00      	nop
 800c96c:	40023800 	.word	0x40023800
 800c970:	00f42400 	.word	0x00f42400
 800c974:	007a1200 	.word	0x007a1200

0800c978 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e28d      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 0301 	and.w	r3, r3, #1
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 8083 	beq.w	800ca9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c998:	4b94      	ldr	r3, [pc, #592]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f003 030c 	and.w	r3, r3, #12
 800c9a0:	2b04      	cmp	r3, #4
 800c9a2:	d019      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c9a4:	4b91      	ldr	r3, [pc, #580]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d106      	bne.n	800c9be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c9b0:	4b8e      	ldr	r3, [pc, #568]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9bc:	d00c      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9be:	4b8b      	ldr	r3, [pc, #556]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c9c6:	2b0c      	cmp	r3, #12
 800c9c8:	d112      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9ca:	4b88      	ldr	r3, [pc, #544]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9d6:	d10b      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9d8:	4b84      	ldr	r3, [pc, #528]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d05b      	beq.n	800ca9c <HAL_RCC_OscConfig+0x124>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d157      	bne.n	800ca9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e25a      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f8:	d106      	bne.n	800ca08 <HAL_RCC_OscConfig+0x90>
 800c9fa:	4b7c      	ldr	r3, [pc, #496]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a7b      	ldr	r2, [pc, #492]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	e01d      	b.n	800ca44 <HAL_RCC_OscConfig+0xcc>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca10:	d10c      	bne.n	800ca2c <HAL_RCC_OscConfig+0xb4>
 800ca12:	4b76      	ldr	r3, [pc, #472]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a75      	ldr	r2, [pc, #468]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	4b73      	ldr	r3, [pc, #460]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a72      	ldr	r2, [pc, #456]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	e00b      	b.n	800ca44 <HAL_RCC_OscConfig+0xcc>
 800ca2c:	4b6f      	ldr	r3, [pc, #444]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a6e      	ldr	r2, [pc, #440]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	4b6c      	ldr	r3, [pc, #432]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a6b      	ldr	r2, [pc, #428]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d013      	beq.n	800ca74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4c:	f7fb fde8 	bl	8008620 <HAL_GetTick>
 800ca50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca52:	e008      	b.n	800ca66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca54:	f7fb fde4 	bl	8008620 <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b64      	cmp	r3, #100	; 0x64
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e21f      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca66:	4b61      	ldr	r3, [pc, #388]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0f0      	beq.n	800ca54 <HAL_RCC_OscConfig+0xdc>
 800ca72:	e014      	b.n	800ca9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca74:	f7fb fdd4 	bl	8008620 <HAL_GetTick>
 800ca78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca7a:	e008      	b.n	800ca8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca7c:	f7fb fdd0 	bl	8008620 <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	2b64      	cmp	r3, #100	; 0x64
 800ca88:	d901      	bls.n	800ca8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e20b      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca8e:	4b57      	ldr	r3, [pc, #348]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1f0      	bne.n	800ca7c <HAL_RCC_OscConfig+0x104>
 800ca9a:	e000      	b.n	800ca9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0302 	and.w	r3, r3, #2
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d06f      	beq.n	800cb8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800caaa:	4b50      	ldr	r3, [pc, #320]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f003 030c 	and.w	r3, r3, #12
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d017      	beq.n	800cae6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cab6:	4b4d      	ldr	r3, [pc, #308]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cabe:	2b08      	cmp	r3, #8
 800cac0:	d105      	bne.n	800cace <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cac2:	4b4a      	ldr	r3, [pc, #296]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00b      	beq.n	800cae6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cace:	4b47      	ldr	r3, [pc, #284]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800cad6:	2b0c      	cmp	r3, #12
 800cad8:	d11c      	bne.n	800cb14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cada:	4b44      	ldr	r3, [pc, #272]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d116      	bne.n	800cb14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cae6:	4b41      	ldr	r3, [pc, #260]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0302 	and.w	r3, r3, #2
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d005      	beq.n	800cafe <HAL_RCC_OscConfig+0x186>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d001      	beq.n	800cafe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e1d3      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cafe:	4b3b      	ldr	r3, [pc, #236]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	4937      	ldr	r1, [pc, #220]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb12:	e03a      	b.n	800cb8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d020      	beq.n	800cb5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb1c:	4b34      	ldr	r3, [pc, #208]	; (800cbf0 <HAL_RCC_OscConfig+0x278>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb22:	f7fb fd7d 	bl	8008620 <HAL_GetTick>
 800cb26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb28:	e008      	b.n	800cb3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb2a:	f7fb fd79 	bl	8008620 <HAL_GetTick>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d901      	bls.n	800cb3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e1b4      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb3c:	4b2b      	ldr	r3, [pc, #172]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0302 	and.w	r3, r3, #2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0f0      	beq.n	800cb2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb48:	4b28      	ldr	r3, [pc, #160]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	4925      	ldr	r1, [pc, #148]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	600b      	str	r3, [r1, #0]
 800cb5c:	e015      	b.n	800cb8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb5e:	4b24      	ldr	r3, [pc, #144]	; (800cbf0 <HAL_RCC_OscConfig+0x278>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb64:	f7fb fd5c 	bl	8008620 <HAL_GetTick>
 800cb68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb6a:	e008      	b.n	800cb7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb6c:	f7fb fd58 	bl	8008620 <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d901      	bls.n	800cb7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e193      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb7e:	4b1b      	ldr	r3, [pc, #108]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1f0      	bne.n	800cb6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d036      	beq.n	800cc04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d016      	beq.n	800cbcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb9e:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <HAL_RCC_OscConfig+0x27c>)
 800cba0:	2201      	movs	r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cba4:	f7fb fd3c 	bl	8008620 <HAL_GetTick>
 800cba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbaa:	e008      	b.n	800cbbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbac:	f7fb fd38 	bl	8008620 <HAL_GetTick>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d901      	bls.n	800cbbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e173      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cbbe:	4b0b      	ldr	r3, [pc, #44]	; (800cbec <HAL_RCC_OscConfig+0x274>)
 800cbc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc2:	f003 0302 	and.w	r3, r3, #2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0f0      	beq.n	800cbac <HAL_RCC_OscConfig+0x234>
 800cbca:	e01b      	b.n	800cc04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbcc:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <HAL_RCC_OscConfig+0x27c>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd2:	f7fb fd25 	bl	8008620 <HAL_GetTick>
 800cbd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbd8:	e00e      	b.n	800cbf8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbda:	f7fb fd21 	bl	8008620 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d907      	bls.n	800cbf8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e15c      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
 800cbec:	40023800 	.word	0x40023800
 800cbf0:	42470000 	.word	0x42470000
 800cbf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbf8:	4b8a      	ldr	r3, [pc, #552]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbfc:	f003 0302 	and.w	r3, r3, #2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1ea      	bne.n	800cbda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8097 	beq.w	800cd40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc16:	4b83      	ldr	r3, [pc, #524]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10f      	bne.n	800cc42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc22:	2300      	movs	r3, #0
 800cc24:	60bb      	str	r3, [r7, #8]
 800cc26:	4b7f      	ldr	r3, [pc, #508]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2a:	4a7e      	ldr	r2, [pc, #504]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc30:	6413      	str	r3, [r2, #64]	; 0x40
 800cc32:	4b7c      	ldr	r3, [pc, #496]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc3a:	60bb      	str	r3, [r7, #8]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc42:	4b79      	ldr	r3, [pc, #484]	; (800ce28 <HAL_RCC_OscConfig+0x4b0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d118      	bne.n	800cc80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc4e:	4b76      	ldr	r3, [pc, #472]	; (800ce28 <HAL_RCC_OscConfig+0x4b0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a75      	ldr	r2, [pc, #468]	; (800ce28 <HAL_RCC_OscConfig+0x4b0>)
 800cc54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc5a:	f7fb fce1 	bl	8008620 <HAL_GetTick>
 800cc5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc60:	e008      	b.n	800cc74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc62:	f7fb fcdd 	bl	8008620 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d901      	bls.n	800cc74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e118      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc74:	4b6c      	ldr	r3, [pc, #432]	; (800ce28 <HAL_RCC_OscConfig+0x4b0>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0f0      	beq.n	800cc62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d106      	bne.n	800cc96 <HAL_RCC_OscConfig+0x31e>
 800cc88:	4b66      	ldr	r3, [pc, #408]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8c:	4a65      	ldr	r2, [pc, #404]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cc8e:	f043 0301 	orr.w	r3, r3, #1
 800cc92:	6713      	str	r3, [r2, #112]	; 0x70
 800cc94:	e01c      	b.n	800ccd0 <HAL_RCC_OscConfig+0x358>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	2b05      	cmp	r3, #5
 800cc9c:	d10c      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x340>
 800cc9e:	4b61      	ldr	r3, [pc, #388]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca2:	4a60      	ldr	r2, [pc, #384]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cca4:	f043 0304 	orr.w	r3, r3, #4
 800cca8:	6713      	str	r3, [r2, #112]	; 0x70
 800ccaa:	4b5e      	ldr	r3, [pc, #376]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccae:	4a5d      	ldr	r2, [pc, #372]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccb0:	f043 0301 	orr.w	r3, r3, #1
 800ccb4:	6713      	str	r3, [r2, #112]	; 0x70
 800ccb6:	e00b      	b.n	800ccd0 <HAL_RCC_OscConfig+0x358>
 800ccb8:	4b5a      	ldr	r3, [pc, #360]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccbc:	4a59      	ldr	r2, [pc, #356]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccbe:	f023 0301 	bic.w	r3, r3, #1
 800ccc2:	6713      	str	r3, [r2, #112]	; 0x70
 800ccc4:	4b57      	ldr	r3, [pc, #348]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc8:	4a56      	ldr	r2, [pc, #344]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccca:	f023 0304 	bic.w	r3, r3, #4
 800ccce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d015      	beq.n	800cd04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccd8:	f7fb fca2 	bl	8008620 <HAL_GetTick>
 800ccdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccde:	e00a      	b.n	800ccf6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cce0:	f7fb fc9e 	bl	8008620 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e0d7      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccf6:	4b4b      	ldr	r3, [pc, #300]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ccf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccfa:	f003 0302 	and.w	r3, r3, #2
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0ee      	beq.n	800cce0 <HAL_RCC_OscConfig+0x368>
 800cd02:	e014      	b.n	800cd2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd04:	f7fb fc8c 	bl	8008620 <HAL_GetTick>
 800cd08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd0a:	e00a      	b.n	800cd22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd0c:	f7fb fc88 	bl	8008620 <HAL_GetTick>
 800cd10:	4602      	mov	r2, r0
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d901      	bls.n	800cd22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e0c1      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd22:	4b40      	ldr	r3, [pc, #256]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd26:	f003 0302 	and.w	r3, r3, #2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1ee      	bne.n	800cd0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d105      	bne.n	800cd40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd34:	4b3b      	ldr	r3, [pc, #236]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd38:	4a3a      	ldr	r2, [pc, #232]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cd3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80ad 	beq.w	800cea4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd4a:	4b36      	ldr	r3, [pc, #216]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f003 030c 	and.w	r3, r3, #12
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d060      	beq.n	800ce18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d145      	bne.n	800cdea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd5e:	4b33      	ldr	r3, [pc, #204]	; (800ce2c <HAL_RCC_OscConfig+0x4b4>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd64:	f7fb fc5c 	bl	8008620 <HAL_GetTick>
 800cd68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd6a:	e008      	b.n	800cd7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd6c:	f7fb fc58 	bl	8008620 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d901      	bls.n	800cd7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	e093      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd7e:	4b29      	ldr	r3, [pc, #164]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1f0      	bne.n	800cd6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	69da      	ldr	r2, [r3, #28]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	019b      	lsls	r3, r3, #6
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	085b      	lsrs	r3, r3, #1
 800cda2:	3b01      	subs	r3, #1
 800cda4:	041b      	lsls	r3, r3, #16
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	061b      	lsls	r3, r3, #24
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb4:	071b      	lsls	r3, r3, #28
 800cdb6:	491b      	ldr	r1, [pc, #108]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdbc:	4b1b      	ldr	r3, [pc, #108]	; (800ce2c <HAL_RCC_OscConfig+0x4b4>)
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdc2:	f7fb fc2d 	bl	8008620 <HAL_GetTick>
 800cdc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdc8:	e008      	b.n	800cddc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdca:	f7fb fc29 	bl	8008620 <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d901      	bls.n	800cddc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e064      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cddc:	4b11      	ldr	r3, [pc, #68]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0f0      	beq.n	800cdca <HAL_RCC_OscConfig+0x452>
 800cde8:	e05c      	b.n	800cea4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdea:	4b10      	ldr	r3, [pc, #64]	; (800ce2c <HAL_RCC_OscConfig+0x4b4>)
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdf0:	f7fb fc16 	bl	8008620 <HAL_GetTick>
 800cdf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdf6:	e008      	b.n	800ce0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdf8:	f7fb fc12 	bl	8008620 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d901      	bls.n	800ce0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e04d      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce0a:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <HAL_RCC_OscConfig+0x4ac>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f0      	bne.n	800cdf8 <HAL_RCC_OscConfig+0x480>
 800ce16:	e045      	b.n	800cea4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	699b      	ldr	r3, [r3, #24]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d107      	bne.n	800ce30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e040      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
 800ce24:	40023800 	.word	0x40023800
 800ce28:	40007000 	.word	0x40007000
 800ce2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ce30:	4b1f      	ldr	r3, [pc, #124]	; (800ceb0 <HAL_RCC_OscConfig+0x538>)
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	699b      	ldr	r3, [r3, #24]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d030      	beq.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d129      	bne.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d122      	bne.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ce60:	4013      	ands	r3, r2
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ce66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d119      	bne.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce76:	085b      	lsrs	r3, r3, #1
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d10f      	bne.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d107      	bne.n	800cea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d001      	beq.n	800cea4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	40023800 	.word	0x40023800

0800ceb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e083      	b.n	800cfce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	7f5b      	ldrb	r3, [r3, #29]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d105      	bne.n	800cedc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7fb f848 	bl	8007f6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2202      	movs	r2, #2
 800cee0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	22ca      	movs	r2, #202	; 0xca
 800cee8:	625a      	str	r2, [r3, #36]	; 0x24
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2253      	movs	r2, #83	; 0x53
 800cef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f897 	bl	800d026 <RTC_EnterInitMode>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d008      	beq.n	800cf10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	22ff      	movs	r2, #255	; 0xff
 800cf04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2204      	movs	r2, #4
 800cf0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e05e      	b.n	800cfce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6812      	ldr	r2, [r2, #0]
 800cf1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6899      	ldr	r1, [r3, #8]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	431a      	orrs	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	68d2      	ldr	r2, [r2, #12]
 800cf4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6919      	ldr	r1, [r3, #16]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	041a      	lsls	r2, r3, #16
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10e      	bne.n	800cf9c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f829 	bl	800cfd6 <HAL_RTC_WaitForSynchro>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d008      	beq.n	800cf9c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	22ff      	movs	r2, #255	; 0xff
 800cf90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2204      	movs	r2, #4
 800cf96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e018      	b.n	800cfce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cfaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	699a      	ldr	r2, [r3, #24]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	22ff      	movs	r2, #255	; 0xff
 800cfc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
  }
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b084      	sub	sp, #16
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68da      	ldr	r2, [r3, #12]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cff0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cff2:	f7fb fb15 	bl	8008620 <HAL_GetTick>
 800cff6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800cff8:	e009      	b.n	800d00e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cffa:	f7fb fb11 	bl	8008620 <HAL_GetTick>
 800cffe:	4602      	mov	r2, r0
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d008:	d901      	bls.n	800d00e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e007      	b.n	800d01e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	f003 0320 	and.w	r3, r3, #32
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0ee      	beq.n	800cffa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d119      	bne.n	800d074 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f04f 32ff 	mov.w	r2, #4294967295
 800d048:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d04a:	f7fb fae9 	bl	8008620 <HAL_GetTick>
 800d04e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d050:	e009      	b.n	800d066 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d052:	f7fb fae5 	bl	8008620 <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d060:	d901      	bls.n	800d066 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e007      	b.n	800d076 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d0ee      	beq.n	800d052 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e041      	b.n	800d114 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fa ff8b 	bl	8007fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f000 fbb1 	bl	800d824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d001      	beq.n	800d134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e04e      	b.n	800d1d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68da      	ldr	r2, [r3, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f042 0201 	orr.w	r2, r2, #1
 800d14a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a23      	ldr	r2, [pc, #140]	; (800d1e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d022      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d15e:	d01d      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a1f      	ldr	r2, [pc, #124]	; (800d1e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d018      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a1e      	ldr	r2, [pc, #120]	; (800d1e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d013      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1c      	ldr	r2, [pc, #112]	; (800d1ec <HAL_TIM_Base_Start_IT+0xd0>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d00e      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a1b      	ldr	r2, [pc, #108]	; (800d1f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d009      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a19      	ldr	r2, [pc, #100]	; (800d1f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d004      	beq.n	800d19c <HAL_TIM_Base_Start_IT+0x80>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d111      	bne.n	800d1c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f003 0307 	and.w	r3, r3, #7
 800d1a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2b06      	cmp	r3, #6
 800d1ac:	d010      	beq.n	800d1d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f042 0201 	orr.w	r2, r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1be:	e007      	b.n	800d1d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f042 0201 	orr.w	r2, r2, #1
 800d1ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40000400 	.word	0x40000400
 800d1e8:	40000800 	.word	0x40000800
 800d1ec:	40000c00 	.word	0x40000c00
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	40014000 	.word	0x40014000
 800d1f8:	40001800 	.word	0x40001800

0800d1fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e041      	b.n	800d292 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d214:	b2db      	uxtb	r3, r3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d106      	bne.n	800d228 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f839 	bl	800d29a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f000 faf2 	bl	800d824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d29a:	b480      	push	{r7}
 800d29c:	b083      	sub	sp, #12
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d122      	bne.n	800d30a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	f003 0302 	and.w	r3, r3, #2
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d11b      	bne.n	800d30a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f06f 0202 	mvn.w	r2, #2
 800d2da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	f003 0303 	and.w	r3, r3, #3
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fa78 	bl	800d7e6 <HAL_TIM_IC_CaptureCallback>
 800d2f6:	e005      	b.n	800d304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 fa6a 	bl	800d7d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fa7b 	bl	800d7fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b04      	cmp	r3, #4
 800d316:	d122      	bne.n	800d35e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	f003 0304 	and.w	r3, r3, #4
 800d322:	2b04      	cmp	r3, #4
 800d324:	d11b      	bne.n	800d35e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f06f 0204 	mvn.w	r2, #4
 800d32e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d340:	2b00      	cmp	r3, #0
 800d342:	d003      	beq.n	800d34c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 fa4e 	bl	800d7e6 <HAL_TIM_IC_CaptureCallback>
 800d34a:	e005      	b.n	800d358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa40 	bl	800d7d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fa51 	bl	800d7fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	f003 0308 	and.w	r3, r3, #8
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d122      	bne.n	800d3b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	f003 0308 	and.w	r3, r3, #8
 800d376:	2b08      	cmp	r3, #8
 800d378:	d11b      	bne.n	800d3b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f06f 0208 	mvn.w	r2, #8
 800d382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2204      	movs	r2, #4
 800d388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	f003 0303 	and.w	r3, r3, #3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fa24 	bl	800d7e6 <HAL_TIM_IC_CaptureCallback>
 800d39e:	e005      	b.n	800d3ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fa16 	bl	800d7d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fa27 	bl	800d7fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	f003 0310 	and.w	r3, r3, #16
 800d3bc:	2b10      	cmp	r3, #16
 800d3be:	d122      	bne.n	800d406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	f003 0310 	and.w	r3, r3, #16
 800d3ca:	2b10      	cmp	r3, #16
 800d3cc:	d11b      	bne.n	800d406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f06f 0210 	mvn.w	r2, #16
 800d3d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2208      	movs	r2, #8
 800d3dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f9fa 	bl	800d7e6 <HAL_TIM_IC_CaptureCallback>
 800d3f2:	e005      	b.n	800d400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f9ec 	bl	800d7d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f9fd 	bl	800d7fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b01      	cmp	r3, #1
 800d412:	d10e      	bne.n	800d432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d107      	bne.n	800d432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f06f 0201 	mvn.w	r2, #1
 800d42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7f8 ffa9 	bl	8006384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d43c:	2b80      	cmp	r3, #128	; 0x80
 800d43e:	d10e      	bne.n	800d45e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44a:	2b80      	cmp	r3, #128	; 0x80
 800d44c:	d107      	bne.n	800d45e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fd53 	bl	800df04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d468:	2b40      	cmp	r3, #64	; 0x40
 800d46a:	d10e      	bne.n	800d48a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d476:	2b40      	cmp	r3, #64	; 0x40
 800d478:	d107      	bne.n	800d48a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f9c2 	bl	800d80e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b20      	cmp	r3, #32
 800d496:	d10e      	bne.n	800d4b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b20      	cmp	r3, #32
 800d4a4:	d107      	bne.n	800d4b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f06f 0220 	mvn.w	r2, #32
 800d4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fd1d 	bl	800def0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d101      	bne.n	800d4de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4da:	2302      	movs	r3, #2
 800d4dc:	e0ae      	b.n	800d63c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b0c      	cmp	r3, #12
 800d4ea:	f200 809f 	bhi.w	800d62c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d4ee:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f4:	0800d529 	.word	0x0800d529
 800d4f8:	0800d62d 	.word	0x0800d62d
 800d4fc:	0800d62d 	.word	0x0800d62d
 800d500:	0800d62d 	.word	0x0800d62d
 800d504:	0800d569 	.word	0x0800d569
 800d508:	0800d62d 	.word	0x0800d62d
 800d50c:	0800d62d 	.word	0x0800d62d
 800d510:	0800d62d 	.word	0x0800d62d
 800d514:	0800d5ab 	.word	0x0800d5ab
 800d518:	0800d62d 	.word	0x0800d62d
 800d51c:	0800d62d 	.word	0x0800d62d
 800d520:	0800d62d 	.word	0x0800d62d
 800d524:	0800d5eb 	.word	0x0800d5eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fa18 	bl	800d964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	699a      	ldr	r2, [r3, #24]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f042 0208 	orr.w	r2, r2, #8
 800d542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 0204 	bic.w	r2, r2, #4
 800d552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6999      	ldr	r1, [r3, #24]
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	691a      	ldr	r2, [r3, #16]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	430a      	orrs	r2, r1
 800d564:	619a      	str	r2, [r3, #24]
      break;
 800d566:	e064      	b.n	800d632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fa68 	bl	800da44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699a      	ldr	r2, [r3, #24]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	699a      	ldr	r2, [r3, #24]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6999      	ldr	r1, [r3, #24]
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	021a      	lsls	r2, r3, #8
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	619a      	str	r2, [r3, #24]
      break;
 800d5a8:	e043      	b.n	800d632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 fabd 	bl	800db30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	69da      	ldr	r2, [r3, #28]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f042 0208 	orr.w	r2, r2, #8
 800d5c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	69da      	ldr	r2, [r3, #28]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f022 0204 	bic.w	r2, r2, #4
 800d5d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	69d9      	ldr	r1, [r3, #28]
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	691a      	ldr	r2, [r3, #16]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	61da      	str	r2, [r3, #28]
      break;
 800d5e8:	e023      	b.n	800d632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 fb11 	bl	800dc18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	69da      	ldr	r2, [r3, #28]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	69da      	ldr	r2, [r3, #28]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	69d9      	ldr	r1, [r3, #28]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	021a      	lsls	r2, r3, #8
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	430a      	orrs	r2, r1
 800d628:	61da      	str	r2, [r3, #28]
      break;
 800d62a:	e002      	b.n	800d632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	75fb      	strb	r3, [r7, #23]
      break;
 800d630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d101      	bne.n	800d660 <HAL_TIM_ConfigClockSource+0x1c>
 800d65c:	2302      	movs	r3, #2
 800d65e:	e0b4      	b.n	800d7ca <HAL_TIM_ConfigClockSource+0x186>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d67e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d698:	d03e      	beq.n	800d718 <HAL_TIM_ConfigClockSource+0xd4>
 800d69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d69e:	f200 8087 	bhi.w	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6a6:	f000 8086 	beq.w	800d7b6 <HAL_TIM_ConfigClockSource+0x172>
 800d6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ae:	d87f      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6b0:	2b70      	cmp	r3, #112	; 0x70
 800d6b2:	d01a      	beq.n	800d6ea <HAL_TIM_ConfigClockSource+0xa6>
 800d6b4:	2b70      	cmp	r3, #112	; 0x70
 800d6b6:	d87b      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6b8:	2b60      	cmp	r3, #96	; 0x60
 800d6ba:	d050      	beq.n	800d75e <HAL_TIM_ConfigClockSource+0x11a>
 800d6bc:	2b60      	cmp	r3, #96	; 0x60
 800d6be:	d877      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6c0:	2b50      	cmp	r3, #80	; 0x50
 800d6c2:	d03c      	beq.n	800d73e <HAL_TIM_ConfigClockSource+0xfa>
 800d6c4:	2b50      	cmp	r3, #80	; 0x50
 800d6c6:	d873      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6c8:	2b40      	cmp	r3, #64	; 0x40
 800d6ca:	d058      	beq.n	800d77e <HAL_TIM_ConfigClockSource+0x13a>
 800d6cc:	2b40      	cmp	r3, #64	; 0x40
 800d6ce:	d86f      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6d0:	2b30      	cmp	r3, #48	; 0x30
 800d6d2:	d064      	beq.n	800d79e <HAL_TIM_ConfigClockSource+0x15a>
 800d6d4:	2b30      	cmp	r3, #48	; 0x30
 800d6d6:	d86b      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6d8:	2b20      	cmp	r3, #32
 800d6da:	d060      	beq.n	800d79e <HAL_TIM_ConfigClockSource+0x15a>
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d867      	bhi.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d05c      	beq.n	800d79e <HAL_TIM_ConfigClockSource+0x15a>
 800d6e4:	2b10      	cmp	r3, #16
 800d6e6:	d05a      	beq.n	800d79e <HAL_TIM_ConfigClockSource+0x15a>
 800d6e8:	e062      	b.n	800d7b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	6899      	ldr	r1, [r3, #8]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	f000 fb5d 	bl	800ddb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d70c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	609a      	str	r2, [r3, #8]
      break;
 800d716:	e04f      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	6899      	ldr	r1, [r3, #8]
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	f000 fb46 	bl	800ddb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689a      	ldr	r2, [r3, #8]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d73a:	609a      	str	r2, [r3, #8]
      break;
 800d73c:	e03c      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6818      	ldr	r0, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	6859      	ldr	r1, [r3, #4]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	461a      	mov	r2, r3
 800d74c:	f000 faba 	bl	800dcc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2150      	movs	r1, #80	; 0x50
 800d756:	4618      	mov	r0, r3
 800d758:	f000 fb13 	bl	800dd82 <TIM_ITRx_SetConfig>
      break;
 800d75c:	e02c      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	6859      	ldr	r1, [r3, #4]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	461a      	mov	r2, r3
 800d76c:	f000 fad9 	bl	800dd22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2160      	movs	r1, #96	; 0x60
 800d776:	4618      	mov	r0, r3
 800d778:	f000 fb03 	bl	800dd82 <TIM_ITRx_SetConfig>
      break;
 800d77c:	e01c      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	6859      	ldr	r1, [r3, #4]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	461a      	mov	r2, r3
 800d78c:	f000 fa9a 	bl	800dcc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2140      	movs	r1, #64	; 0x40
 800d796:	4618      	mov	r0, r3
 800d798:	f000 faf3 	bl	800dd82 <TIM_ITRx_SetConfig>
      break;
 800d79c:	e00c      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f000 faea 	bl	800dd82 <TIM_ITRx_SetConfig>
      break;
 800d7ae:	e003      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7b4:	e000      	b.n	800d7b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d7b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b083      	sub	sp, #12
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7da:	bf00      	nop
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7ee:	bf00      	nop
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d802:	bf00      	nop
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d816:	bf00      	nop
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a40      	ldr	r2, [pc, #256]	; (800d938 <TIM_Base_SetConfig+0x114>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d013      	beq.n	800d864 <TIM_Base_SetConfig+0x40>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d842:	d00f      	beq.n	800d864 <TIM_Base_SetConfig+0x40>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a3d      	ldr	r2, [pc, #244]	; (800d93c <TIM_Base_SetConfig+0x118>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d00b      	beq.n	800d864 <TIM_Base_SetConfig+0x40>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a3c      	ldr	r2, [pc, #240]	; (800d940 <TIM_Base_SetConfig+0x11c>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d007      	beq.n	800d864 <TIM_Base_SetConfig+0x40>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a3b      	ldr	r2, [pc, #236]	; (800d944 <TIM_Base_SetConfig+0x120>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d003      	beq.n	800d864 <TIM_Base_SetConfig+0x40>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a3a      	ldr	r2, [pc, #232]	; (800d948 <TIM_Base_SetConfig+0x124>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d108      	bne.n	800d876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d86a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a2f      	ldr	r2, [pc, #188]	; (800d938 <TIM_Base_SetConfig+0x114>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d02b      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d884:	d027      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a2c      	ldr	r2, [pc, #176]	; (800d93c <TIM_Base_SetConfig+0x118>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d023      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a2b      	ldr	r2, [pc, #172]	; (800d940 <TIM_Base_SetConfig+0x11c>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d01f      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a2a      	ldr	r2, [pc, #168]	; (800d944 <TIM_Base_SetConfig+0x120>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d01b      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a29      	ldr	r2, [pc, #164]	; (800d948 <TIM_Base_SetConfig+0x124>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d017      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a28      	ldr	r2, [pc, #160]	; (800d94c <TIM_Base_SetConfig+0x128>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d013      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a27      	ldr	r2, [pc, #156]	; (800d950 <TIM_Base_SetConfig+0x12c>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d00f      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a26      	ldr	r2, [pc, #152]	; (800d954 <TIM_Base_SetConfig+0x130>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d00b      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4a25      	ldr	r2, [pc, #148]	; (800d958 <TIM_Base_SetConfig+0x134>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d007      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a24      	ldr	r2, [pc, #144]	; (800d95c <TIM_Base_SetConfig+0x138>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d003      	beq.n	800d8d6 <TIM_Base_SetConfig+0xb2>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4a23      	ldr	r2, [pc, #140]	; (800d960 <TIM_Base_SetConfig+0x13c>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d108      	bne.n	800d8e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	68fa      	ldr	r2, [r7, #12]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	695b      	ldr	r3, [r3, #20]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	689a      	ldr	r2, [r3, #8]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a0a      	ldr	r2, [pc, #40]	; (800d938 <TIM_Base_SetConfig+0x114>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d003      	beq.n	800d91c <TIM_Base_SetConfig+0xf8>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4a0c      	ldr	r2, [pc, #48]	; (800d948 <TIM_Base_SetConfig+0x124>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d103      	bne.n	800d924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	691a      	ldr	r2, [r3, #16]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	615a      	str	r2, [r3, #20]
}
 800d92a:	bf00      	nop
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40010000 	.word	0x40010000
 800d93c:	40000400 	.word	0x40000400
 800d940:	40000800 	.word	0x40000800
 800d944:	40000c00 	.word	0x40000c00
 800d948:	40010400 	.word	0x40010400
 800d94c:	40014000 	.word	0x40014000
 800d950:	40014400 	.word	0x40014400
 800d954:	40014800 	.word	0x40014800
 800d958:	40001800 	.word	0x40001800
 800d95c:	40001c00 	.word	0x40001c00
 800d960:	40002000 	.word	0x40002000

0800d964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d964:	b480      	push	{r7}
 800d966:	b087      	sub	sp, #28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	f023 0201 	bic.w	r2, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f023 0303 	bic.w	r3, r3, #3
 800d99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f023 0302 	bic.w	r3, r3, #2
 800d9ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a20      	ldr	r2, [pc, #128]	; (800da3c <TIM_OC1_SetConfig+0xd8>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d003      	beq.n	800d9c8 <TIM_OC1_SetConfig+0x64>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a1f      	ldr	r2, [pc, #124]	; (800da40 <TIM_OC1_SetConfig+0xdc>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d10c      	bne.n	800d9e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	f023 0308 	bic.w	r3, r3, #8
 800d9ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f023 0304 	bic.w	r3, r3, #4
 800d9e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a15      	ldr	r2, [pc, #84]	; (800da3c <TIM_OC1_SetConfig+0xd8>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d003      	beq.n	800d9f2 <TIM_OC1_SetConfig+0x8e>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a14      	ldr	r2, [pc, #80]	; (800da40 <TIM_OC1_SetConfig+0xdc>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d111      	bne.n	800da16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	693a      	ldr	r2, [r7, #16]
 800da08:	4313      	orrs	r3, r2
 800da0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	4313      	orrs	r3, r2
 800da14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	621a      	str	r2, [r3, #32]
}
 800da30:	bf00      	nop
 800da32:	371c      	adds	r7, #28
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	40010000 	.word	0x40010000
 800da40:	40010400 	.word	0x40010400

0800da44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da44:	b480      	push	{r7}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	f023 0210 	bic.w	r2, r3, #16
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	021b      	lsls	r3, r3, #8
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	4313      	orrs	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	f023 0320 	bic.w	r3, r3, #32
 800da8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	4313      	orrs	r3, r2
 800da9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a22      	ldr	r2, [pc, #136]	; (800db28 <TIM_OC2_SetConfig+0xe4>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d003      	beq.n	800daac <TIM_OC2_SetConfig+0x68>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a21      	ldr	r2, [pc, #132]	; (800db2c <TIM_OC2_SetConfig+0xe8>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d10d      	bne.n	800dac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	011b      	lsls	r3, r3, #4
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4a17      	ldr	r2, [pc, #92]	; (800db28 <TIM_OC2_SetConfig+0xe4>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d003      	beq.n	800dad8 <TIM_OC2_SetConfig+0x94>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a16      	ldr	r2, [pc, #88]	; (800db2c <TIM_OC2_SetConfig+0xe8>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d113      	bne.n	800db00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	697a      	ldr	r2, [r7, #20]
 800db18:	621a      	str	r2, [r3, #32]
}
 800db1a:	bf00      	nop
 800db1c:	371c      	adds	r7, #28
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	40010000 	.word	0x40010000
 800db2c:	40010400 	.word	0x40010400

0800db30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db30:	b480      	push	{r7}
 800db32:	b087      	sub	sp, #28
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a1b      	ldr	r3, [r3, #32]
 800db3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a1b      	ldr	r3, [r3, #32]
 800db4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f023 0303 	bic.w	r3, r3, #3
 800db66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4313      	orrs	r3, r2
 800db70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	4313      	orrs	r3, r2
 800db84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a21      	ldr	r2, [pc, #132]	; (800dc10 <TIM_OC3_SetConfig+0xe0>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d003      	beq.n	800db96 <TIM_OC3_SetConfig+0x66>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a20      	ldr	r2, [pc, #128]	; (800dc14 <TIM_OC3_SetConfig+0xe4>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d10d      	bne.n	800dbb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	021b      	lsls	r3, r3, #8
 800dba4:	697a      	ldr	r2, [r7, #20]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4a16      	ldr	r2, [pc, #88]	; (800dc10 <TIM_OC3_SetConfig+0xe0>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d003      	beq.n	800dbc2 <TIM_OC3_SetConfig+0x92>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a15      	ldr	r2, [pc, #84]	; (800dc14 <TIM_OC3_SetConfig+0xe4>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d113      	bne.n	800dbea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	011b      	lsls	r3, r3, #4
 800dbd8:	693a      	ldr	r2, [r7, #16]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	011b      	lsls	r3, r3, #4
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68fa      	ldr	r2, [r7, #12]
 800dbf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	685a      	ldr	r2, [r3, #4]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	621a      	str	r2, [r3, #32]
}
 800dc04:	bf00      	nop
 800dc06:	371c      	adds	r7, #28
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400

0800dc18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	021b      	lsls	r3, r3, #8
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	031b      	lsls	r3, r3, #12
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4a12      	ldr	r2, [pc, #72]	; (800dcbc <TIM_OC4_SetConfig+0xa4>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d003      	beq.n	800dc80 <TIM_OC4_SetConfig+0x68>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4a11      	ldr	r2, [pc, #68]	; (800dcc0 <TIM_OC4_SetConfig+0xa8>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d109      	bne.n	800dc94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	695b      	ldr	r3, [r3, #20]
 800dc8c:	019b      	lsls	r3, r3, #6
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	621a      	str	r2, [r3, #32]
}
 800dcae:	bf00      	nop
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	40010000 	.word	0x40010000
 800dcc0:	40010400 	.word	0x40010400

0800dcc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	f023 0201 	bic.w	r2, r3, #1
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dcee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	011b      	lsls	r3, r3, #4
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f023 030a 	bic.w	r3, r3, #10
 800dd00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	621a      	str	r2, [r3, #32]
}
 800dd16:	bf00      	nop
 800dd18:	371c      	adds	r7, #28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd22:	b480      	push	{r7}
 800dd24:	b087      	sub	sp, #28
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	60f8      	str	r0, [r7, #12]
 800dd2a:	60b9      	str	r1, [r7, #8]
 800dd2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	f023 0210 	bic.w	r2, r3, #16
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	031b      	lsls	r3, r3, #12
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	4313      	orrs	r3, r2
 800dd56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	011b      	lsls	r3, r3, #4
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	697a      	ldr	r2, [r7, #20]
 800dd6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	621a      	str	r2, [r3, #32]
}
 800dd76:	bf00      	nop
 800dd78:	371c      	adds	r7, #28
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd82:	b480      	push	{r7}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	f043 0307 	orr.w	r3, r3, #7
 800dda4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	609a      	str	r2, [r3, #8]
}
 800ddac:	bf00      	nop
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	021a      	lsls	r2, r3, #8
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	431a      	orrs	r2, r3
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	609a      	str	r2, [r3, #8]
}
 800ddec:	bf00      	nop
 800ddee:	371c      	adds	r7, #28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de0c:	2302      	movs	r3, #2
 800de0e:	e05a      	b.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2202      	movs	r2, #2
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	685b      	ldr	r3, [r3, #4]
 800de26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	4313      	orrs	r3, r2
 800de40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68fa      	ldr	r2, [r7, #12]
 800de48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4a21      	ldr	r2, [pc, #132]	; (800ded4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d022      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5c:	d01d      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d018      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a1b      	ldr	r2, [pc, #108]	; (800dedc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d013      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a1a      	ldr	r2, [pc, #104]	; (800dee0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d00e      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a18      	ldr	r2, [pc, #96]	; (800dee4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d009      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d004      	beq.n	800de9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a15      	ldr	r2, [pc, #84]	; (800deec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d10c      	bne.n	800deb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	40010000 	.word	0x40010000
 800ded8:	40000400 	.word	0x40000400
 800dedc:	40000800 	.word	0x40000800
 800dee0:	40000c00 	.word	0x40000c00
 800dee4:	40010400 	.word	0x40010400
 800dee8:	40014000 	.word	0x40014000
 800deec:	40001800 	.word	0x40001800

0800def0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	e03f      	b.n	800dfaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7fa f8b6 	bl	80080b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2224      	movs	r2, #36	; 0x24
 800df48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68da      	ldr	r2, [r3, #12]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 ff65 	bl	800ee2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	691a      	ldr	r2, [r3, #16]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	695a      	ldr	r2, [r3, #20]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68da      	ldr	r2, [r3, #12]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2220      	movs	r2, #32
 800df9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b08a      	sub	sp, #40	; 0x28
 800dfb6:	af02      	add	r7, sp, #8
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	603b      	str	r3, [r7, #0]
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	2b20      	cmp	r3, #32
 800dfd0:	d17c      	bne.n	800e0cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <HAL_UART_Transmit+0x2c>
 800dfd8:	88fb      	ldrh	r3, [r7, #6]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e075      	b.n	800e0ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d101      	bne.n	800dff0 <HAL_UART_Transmit+0x3e>
 800dfec:	2302      	movs	r3, #2
 800dfee:	e06e      	b.n	800e0ce <HAL_UART_Transmit+0x11c>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2221      	movs	r2, #33	; 0x21
 800e002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e006:	f7fa fb0b 	bl	8008620 <HAL_GetTick>
 800e00a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	88fa      	ldrh	r2, [r7, #6]
 800e010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	88fa      	ldrh	r2, [r7, #6]
 800e016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e020:	d108      	bne.n	800e034 <HAL_UART_Transmit+0x82>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d104      	bne.n	800e034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	61bb      	str	r3, [r7, #24]
 800e032:	e003      	b.n	800e03c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e044:	e02a      	b.n	800e09c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2200      	movs	r2, #0
 800e04e:	2180      	movs	r1, #128	; 0x80
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 fc21 	bl	800e898 <UART_WaitOnFlagUntilTimeout>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e036      	b.n	800e0ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d10b      	bne.n	800e07e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	461a      	mov	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	3302      	adds	r3, #2
 800e07a:	61bb      	str	r3, [r7, #24]
 800e07c:	e007      	b.n	800e08e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	781a      	ldrb	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	3301      	adds	r3, #1
 800e08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e092:	b29b      	uxth	r3, r3
 800e094:	3b01      	subs	r3, #1
 800e096:	b29a      	uxth	r2, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1cf      	bne.n	800e046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2140      	movs	r1, #64	; 0x40
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f000 fbf1 	bl	800e898 <UART_WaitOnFlagUntilTimeout>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e006      	b.n	800e0ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2220      	movs	r2, #32
 800e0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e000      	b.n	800e0ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e0cc:	2302      	movs	r3, #2
  }
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3720      	adds	r7, #32
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	60f8      	str	r0, [r7, #12]
 800e0de:	60b9      	str	r1, [r7, #8]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b20      	cmp	r3, #32
 800e0ee:	d11d      	bne.n	800e12c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d002      	beq.n	800e0fc <HAL_UART_Receive_DMA+0x26>
 800e0f6:	88fb      	ldrh	r3, [r7, #6]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d101      	bne.n	800e100 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e016      	b.n	800e12e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e106:	2b01      	cmp	r3, #1
 800e108:	d101      	bne.n	800e10e <HAL_UART_Receive_DMA+0x38>
 800e10a:	2302      	movs	r3, #2
 800e10c:	e00f      	b.n	800e12e <HAL_UART_Receive_DMA+0x58>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e11c:	88fb      	ldrh	r3, [r7, #6]
 800e11e:	461a      	mov	r2, r3
 800e120:	68b9      	ldr	r1, [r7, #8]
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f000 fc26 	bl	800e974 <UART_Start_Receive_DMA>
 800e128:	4603      	mov	r3, r0
 800e12a:	e000      	b.n	800e12e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800e12c:	2302      	movs	r3, #2
  }
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
	...

0800e138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b0ba      	sub	sp, #232	; 0xe8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	695b      	ldr	r3, [r3, #20]
 800e15a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e15e:	2300      	movs	r3, #0
 800e160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e164:	2300      	movs	r3, #0
 800e166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e16e:	f003 030f 	and.w	r3, r3, #15
 800e172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10f      	bne.n	800e19e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e182:	f003 0320 	and.w	r3, r3, #32
 800e186:	2b00      	cmp	r3, #0
 800e188:	d009      	beq.n	800e19e <HAL_UART_IRQHandler+0x66>
 800e18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e18e:	f003 0320 	and.w	r3, r3, #32
 800e192:	2b00      	cmp	r3, #0
 800e194:	d003      	beq.n	800e19e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fd8d 	bl	800ecb6 <UART_Receive_IT>
      return;
 800e19c:	e256      	b.n	800e64c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e19e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 80de 	beq.w	800e364 <HAL_UART_IRQHandler+0x22c>
 800e1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1ac:	f003 0301 	and.w	r3, r3, #1
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d106      	bne.n	800e1c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f000 80d1 	beq.w	800e364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00b      	beq.n	800e1e6 <HAL_UART_IRQHandler+0xae>
 800e1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d005      	beq.n	800e1e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1de:	f043 0201 	orr.w	r2, r3, #1
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1ea:	f003 0304 	and.w	r3, r3, #4
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00b      	beq.n	800e20a <HAL_UART_IRQHandler+0xd2>
 800e1f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d005      	beq.n	800e20a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e202:	f043 0202 	orr.w	r2, r3, #2
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00b      	beq.n	800e22e <HAL_UART_IRQHandler+0xf6>
 800e216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d005      	beq.n	800e22e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e226:	f043 0204 	orr.w	r2, r3, #4
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e232:	f003 0308 	and.w	r3, r3, #8
 800e236:	2b00      	cmp	r3, #0
 800e238:	d011      	beq.n	800e25e <HAL_UART_IRQHandler+0x126>
 800e23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d105      	bne.n	800e252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d005      	beq.n	800e25e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e256:	f043 0208 	orr.w	r2, r3, #8
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e262:	2b00      	cmp	r3, #0
 800e264:	f000 81ed 	beq.w	800e642 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e26c:	f003 0320 	and.w	r3, r3, #32
 800e270:	2b00      	cmp	r3, #0
 800e272:	d008      	beq.n	800e286 <HAL_UART_IRQHandler+0x14e>
 800e274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e278:	f003 0320 	and.w	r3, r3, #32
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fd18 	bl	800ecb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e290:	2b40      	cmp	r3, #64	; 0x40
 800e292:	bf0c      	ite	eq
 800e294:	2301      	moveq	r3, #1
 800e296:	2300      	movne	r3, #0
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	f003 0308 	and.w	r3, r3, #8
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <HAL_UART_IRQHandler+0x17a>
 800e2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d04f      	beq.n	800e352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fc20 	bl	800eaf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c2:	2b40      	cmp	r3, #64	; 0x40
 800e2c4:	d141      	bne.n	800e34a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3314      	adds	r3, #20
 800e2cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2d4:	e853 3f00 	ldrex	r3, [r3]
 800e2d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e2dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3314      	adds	r3, #20
 800e2ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e2f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e2f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e2fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e302:	e841 2300 	strex	r3, r2, [r1]
 800e306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e30a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1d9      	bne.n	800e2c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e316:	2b00      	cmp	r3, #0
 800e318:	d013      	beq.n	800e342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31e:	4a7d      	ldr	r2, [pc, #500]	; (800e514 <HAL_UART_IRQHandler+0x3dc>)
 800e320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e326:	4618      	mov	r0, r3
 800e328:	f7fb f842 	bl	80093b0 <HAL_DMA_Abort_IT>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d016      	beq.n	800e360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e340:	e00e      	b.n	800e360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f99a 	bl	800e67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e348:	e00a      	b.n	800e360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f996 	bl	800e67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e350:	e006      	b.n	800e360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f992 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800e35e:	e170      	b.n	800e642 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e360:	bf00      	nop
    return;
 800e362:	e16e      	b.n	800e642 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e368:	2b01      	cmp	r3, #1
 800e36a:	f040 814a 	bne.w	800e602 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e372:	f003 0310 	and.w	r3, r3, #16
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 8143 	beq.w	800e602 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 813c 	beq.w	800e602 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e38a:	2300      	movs	r3, #0
 800e38c:	60bb      	str	r3, [r7, #8]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	60bb      	str	r3, [r7, #8]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	60bb      	str	r3, [r7, #8]
 800e39e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	695b      	ldr	r3, [r3, #20]
 800e3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3aa:	2b40      	cmp	r3, #64	; 0x40
 800e3ac:	f040 80b4 	bne.w	800e518 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 8140 	beq.w	800e646 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e3ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	f080 8139 	bcs.w	800e646 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e0:	69db      	ldr	r3, [r3, #28]
 800e3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e6:	f000 8088 	beq.w	800e4fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	330c      	adds	r3, #12
 800e3f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3f8:	e853 3f00 	ldrex	r3, [r3]
 800e3fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	330c      	adds	r3, #12
 800e412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e41a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e42e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1d9      	bne.n	800e3ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3314      	adds	r3, #20
 800e43c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e440:	e853 3f00 	ldrex	r3, [r3]
 800e444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e448:	f023 0301 	bic.w	r3, r3, #1
 800e44c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3314      	adds	r3, #20
 800e456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e45a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e45e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e466:	e841 2300 	strex	r3, r2, [r1]
 800e46a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e46c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1e1      	bne.n	800e436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	3314      	adds	r3, #20
 800e478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3314      	adds	r3, #20
 800e492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e496:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e49c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e49e:	e841 2300 	strex	r3, r2, [r1]
 800e4a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e4a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1e3      	bne.n	800e472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2220      	movs	r2, #32
 800e4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	330c      	adds	r3, #12
 800e4be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c2:	e853 3f00 	ldrex	r3, [r3]
 800e4c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ca:	f023 0310 	bic.w	r3, r3, #16
 800e4ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	330c      	adds	r3, #12
 800e4d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e4dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800e4de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e4ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e3      	bne.n	800e4b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fa feeb 	bl	80092d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e502:	b29b      	uxth	r3, r3
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	b29b      	uxth	r3, r3
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f8c0 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e510:	e099      	b.n	800e646 <HAL_UART_IRQHandler+0x50e>
 800e512:	bf00      	nop
 800e514:	0800ebbf 	.word	0x0800ebbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e520:	b29b      	uxth	r3, r3
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 808b 	beq.w	800e64a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800e534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 8086 	beq.w	800e64a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	330c      	adds	r3, #12
 800e544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	330c      	adds	r3, #12
 800e55e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e562:	647a      	str	r2, [r7, #68]	; 0x44
 800e564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e56a:	e841 2300 	strex	r3, r2, [r1]
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e3      	bne.n	800e53e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3314      	adds	r3, #20
 800e57c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	e853 3f00 	ldrex	r3, [r3]
 800e584:	623b      	str	r3, [r7, #32]
   return(result);
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	f023 0301 	bic.w	r3, r3, #1
 800e58c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3314      	adds	r3, #20
 800e596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e59a:	633a      	str	r2, [r7, #48]	; 0x30
 800e59c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a2:	e841 2300 	strex	r3, r2, [r1]
 800e5a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1e3      	bne.n	800e576 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	e853 3f00 	ldrex	r3, [r3]
 800e5ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f023 0310 	bic.w	r3, r3, #16
 800e5d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	330c      	adds	r3, #12
 800e5dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e5e0:	61fa      	str	r2, [r7, #28]
 800e5e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e4:	69b9      	ldr	r1, [r7, #24]
 800e5e6:	69fa      	ldr	r2, [r7, #28]
 800e5e8:	e841 2300 	strex	r3, r2, [r1]
 800e5ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e3      	bne.n	800e5bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f848 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e600:	e023      	b.n	800e64a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d009      	beq.n	800e622 <HAL_UART_IRQHandler+0x4ea>
 800e60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 fae3 	bl	800ebe6 <UART_Transmit_IT>
    return;
 800e620:	e014      	b.n	800e64c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00e      	beq.n	800e64c <HAL_UART_IRQHandler+0x514>
 800e62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e636:	2b00      	cmp	r3, #0
 800e638:	d008      	beq.n	800e64c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fb23 	bl	800ec86 <UART_EndTransmit_IT>
    return;
 800e640:	e004      	b.n	800e64c <HAL_UART_IRQHandler+0x514>
    return;
 800e642:	bf00      	nop
 800e644:	e002      	b.n	800e64c <HAL_UART_IRQHandler+0x514>
      return;
 800e646:	bf00      	nop
 800e648:	e000      	b.n	800e64c <HAL_UART_IRQHandler+0x514>
      return;
 800e64a:	bf00      	nop
  }
}
 800e64c:	37e8      	adds	r7, #232	; 0xe8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop

0800e654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr

0800e690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b09c      	sub	sp, #112	; 0x70
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d172      	bne.n	800e7aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	330c      	adds	r3, #12
 800e6d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6e0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	330c      	adds	r3, #12
 800e6e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800e6ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e5      	bne.n	800e6ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3314      	adds	r3, #20
 800e704:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e708:	e853 3f00 	ldrex	r3, [r3]
 800e70c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e710:	f023 0301 	bic.w	r3, r3, #1
 800e714:	667b      	str	r3, [r7, #100]	; 0x64
 800e716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3314      	adds	r3, #20
 800e71c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e71e:	647a      	str	r2, [r7, #68]	; 0x44
 800e720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e5      	bne.n	800e6fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3314      	adds	r3, #20
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	e853 3f00 	ldrex	r3, [r3]
 800e740:	623b      	str	r3, [r7, #32]
   return(result);
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e748:	663b      	str	r3, [r7, #96]	; 0x60
 800e74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	3314      	adds	r3, #20
 800e750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e752:	633a      	str	r2, [r7, #48]	; 0x30
 800e754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e75a:	e841 2300 	strex	r3, r2, [r1]
 800e75e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1e5      	bne.n	800e732 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e768:	2220      	movs	r2, #32
 800e76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e772:	2b01      	cmp	r3, #1
 800e774:	d119      	bne.n	800e7aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	330c      	adds	r3, #12
 800e77c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	e853 3f00 	ldrex	r3, [r3]
 800e784:	60fb      	str	r3, [r7, #12]
   return(result);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f023 0310 	bic.w	r3, r3, #16
 800e78c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	330c      	adds	r3, #12
 800e794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e796:	61fa      	str	r2, [r7, #28]
 800e798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79a:	69b9      	ldr	r1, [r7, #24]
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	e841 2300 	strex	r3, r2, [r1]
 800e7a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1e5      	bne.n	800e776 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d106      	bne.n	800e7c0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7ba:	f7ff ff69 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7be:	e002      	b.n	800e7c6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e7c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7c2:	f7f4 ffdd 	bl	8003780 <HAL_UART_RxCpltCallback>
}
 800e7c6:	bf00      	nop
 800e7c8:	3770      	adds	r7, #112	; 0x70
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7da:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d108      	bne.n	800e7f6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e7e8:	085b      	lsrs	r3, r3, #1
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f7ff ff4e 	bl	800e690 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7f4:	e002      	b.n	800e7fc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff ff36 	bl	800e668 <HAL_UART_RxHalfCpltCallback>
}
 800e7fc:	bf00      	nop
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e820:	2b80      	cmp	r3, #128	; 0x80
 800e822:	bf0c      	ite	eq
 800e824:	2301      	moveq	r3, #1
 800e826:	2300      	movne	r3, #0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b21      	cmp	r3, #33	; 0x21
 800e836:	d108      	bne.n	800e84a <UART_DMAError+0x46>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d005      	beq.n	800e84a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2200      	movs	r2, #0
 800e842:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e844:	68b8      	ldr	r0, [r7, #8]
 800e846:	f000 f92f 	bl	800eaa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	695b      	ldr	r3, [r3, #20]
 800e850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e854:	2b40      	cmp	r3, #64	; 0x40
 800e856:	bf0c      	ite	eq
 800e858:	2301      	moveq	r3, #1
 800e85a:	2300      	movne	r3, #0
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e866:	b2db      	uxtb	r3, r3
 800e868:	2b22      	cmp	r3, #34	; 0x22
 800e86a:	d108      	bne.n	800e87e <UART_DMAError+0x7a>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d005      	beq.n	800e87e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	2200      	movs	r2, #0
 800e876:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f000 f93d 	bl	800eaf8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	f043 0210 	orr.w	r2, r3, #16
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e88a:	68b8      	ldr	r0, [r7, #8]
 800e88c:	f7ff fef6 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e890:	bf00      	nop
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b090      	sub	sp, #64	; 0x40
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	603b      	str	r3, [r7, #0]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8a8:	e050      	b.n	800e94c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b0:	d04c      	beq.n	800e94c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d007      	beq.n	800e8c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e8b8:	f7f9 feb2 	bl	8008620 <HAL_GetTick>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d241      	bcs.n	800e94c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	330c      	adds	r3, #12
 800e8ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	e853 3f00 	ldrex	r3, [r3]
 800e8d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	330c      	adds	r3, #12
 800e8e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8e8:	637a      	str	r2, [r7, #52]	; 0x34
 800e8ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8f0:	e841 2300 	strex	r3, r2, [r1]
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1e5      	bne.n	800e8c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3314      	adds	r3, #20
 800e902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	e853 3f00 	ldrex	r3, [r3]
 800e90a:	613b      	str	r3, [r7, #16]
   return(result);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	f023 0301 	bic.w	r3, r3, #1
 800e912:	63bb      	str	r3, [r7, #56]	; 0x38
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3314      	adds	r3, #20
 800e91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e91c:	623a      	str	r2, [r7, #32]
 800e91e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e920:	69f9      	ldr	r1, [r7, #28]
 800e922:	6a3a      	ldr	r2, [r7, #32]
 800e924:	e841 2300 	strex	r3, r2, [r1]
 800e928:	61bb      	str	r3, [r7, #24]
   return(result);
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1e5      	bne.n	800e8fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2220      	movs	r2, #32
 800e934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2220      	movs	r2, #32
 800e93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2200      	movs	r2, #0
 800e944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e948:	2303      	movs	r3, #3
 800e94a:	e00f      	b.n	800e96c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	4013      	ands	r3, r2
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	429a      	cmp	r2, r3
 800e95a:	bf0c      	ite	eq
 800e95c:	2301      	moveq	r3, #1
 800e95e:	2300      	movne	r3, #0
 800e960:	b2db      	uxtb	r3, r3
 800e962:	461a      	mov	r2, r3
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	429a      	cmp	r2, r3
 800e968:	d09f      	beq.n	800e8aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3740      	adds	r7, #64	; 0x40
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b098      	sub	sp, #96	; 0x60
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	4613      	mov	r3, r2
 800e980:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	88fa      	ldrh	r2, [r7, #6]
 800e98c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2222      	movs	r2, #34	; 0x22
 800e998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a0:	4a3e      	ldr	r2, [pc, #248]	; (800ea9c <UART_Start_Receive_DMA+0x128>)
 800e9a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a8:	4a3d      	ldr	r2, [pc, #244]	; (800eaa0 <UART_Start_Receive_DMA+0x12c>)
 800e9aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b0:	4a3c      	ldr	r2, [pc, #240]	; (800eaa4 <UART_Start_Receive_DMA+0x130>)
 800e9b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e9bc:	f107 0308 	add.w	r3, r7, #8
 800e9c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	88fb      	ldrh	r3, [r7, #6]
 800e9d4:	f7fa fc24 	bl	8009220 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e9d8:	2300      	movs	r3, #0
 800e9da:	613b      	str	r3, [r7, #16]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	613b      	str	r3, [r7, #16]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	613b      	str	r3, [r7, #16]
 800e9ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	330c      	adds	r3, #12
 800e9fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea00:	e853 3f00 	ldrex	r3, [r3]
 800ea04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	330c      	adds	r3, #12
 800ea14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea16:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ea18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea1e:	e841 2300 	strex	r3, r2, [r1]
 800ea22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ea24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1e5      	bne.n	800e9f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3314      	adds	r3, #20
 800ea30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea34:	e853 3f00 	ldrex	r3, [r3]
 800ea38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3c:	f043 0301 	orr.w	r3, r3, #1
 800ea40:	657b      	str	r3, [r7, #84]	; 0x54
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3314      	adds	r3, #20
 800ea48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ea4a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea52:	e841 2300 	strex	r3, r2, [r1]
 800ea56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1e5      	bne.n	800ea2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3314      	adds	r3, #20
 800ea64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	e853 3f00 	ldrex	r3, [r3]
 800ea6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea74:	653b      	str	r3, [r7, #80]	; 0x50
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea7e:	627a      	str	r2, [r7, #36]	; 0x24
 800ea80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea82:	6a39      	ldr	r1, [r7, #32]
 800ea84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea86:	e841 2300 	strex	r3, r2, [r1]
 800ea8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1e5      	bne.n	800ea5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3760      	adds	r7, #96	; 0x60
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	0800e6a9 	.word	0x0800e6a9
 800eaa0:	0800e7cf 	.word	0x0800e7cf
 800eaa4:	0800e805 	.word	0x0800e805

0800eaa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b089      	sub	sp, #36	; 0x24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	330c      	adds	r3, #12
 800eab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	e853 3f00 	ldrex	r3, [r3]
 800eabe:	60bb      	str	r3, [r7, #8]
   return(result);
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	330c      	adds	r3, #12
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	61ba      	str	r2, [r7, #24]
 800ead2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead4:	6979      	ldr	r1, [r7, #20]
 800ead6:	69ba      	ldr	r2, [r7, #24]
 800ead8:	e841 2300 	strex	r3, r2, [r1]
 800eadc:	613b      	str	r3, [r7, #16]
   return(result);
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e5      	bne.n	800eab0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800eaec:	bf00      	nop
 800eaee:	3724      	adds	r7, #36	; 0x24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b095      	sub	sp, #84	; 0x54
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	330c      	adds	r3, #12
 800eb06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0a:	e853 3f00 	ldrex	r3, [r3]
 800eb0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	330c      	adds	r3, #12
 800eb1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb20:	643a      	str	r2, [r7, #64]	; 0x40
 800eb22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb28:	e841 2300 	strex	r3, r2, [r1]
 800eb2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1e5      	bne.n	800eb00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3314      	adds	r3, #20
 800eb3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	e853 3f00 	ldrex	r3, [r3]
 800eb42:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	f023 0301 	bic.w	r3, r3, #1
 800eb4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	3314      	adds	r3, #20
 800eb52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb5c:	e841 2300 	strex	r3, r2, [r1]
 800eb60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1e5      	bne.n	800eb34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d119      	bne.n	800eba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	330c      	adds	r3, #12
 800eb76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	e853 3f00 	ldrex	r3, [r3]
 800eb7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f023 0310 	bic.w	r3, r3, #16
 800eb86:	647b      	str	r3, [r7, #68]	; 0x44
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	330c      	adds	r3, #12
 800eb8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb90:	61ba      	str	r2, [r7, #24]
 800eb92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb94:	6979      	ldr	r1, [r7, #20]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	e841 2300 	strex	r3, r2, [r1]
 800eb9c:	613b      	str	r3, [r7, #16]
   return(result);
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d1e5      	bne.n	800eb70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2220      	movs	r2, #32
 800eba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ebb2:	bf00      	nop
 800ebb4:	3754      	adds	r7, #84	; 0x54
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b084      	sub	sp, #16
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f7ff fd4f 	bl	800e67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebde:	bf00      	nop
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b085      	sub	sp, #20
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b21      	cmp	r3, #33	; 0x21
 800ebf8:	d13e      	bne.n	800ec78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec02:	d114      	bne.n	800ec2e <UART_Transmit_IT+0x48>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d110      	bne.n	800ec2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a1b      	ldr	r3, [r3, #32]
 800ec10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	1c9a      	adds	r2, r3, #2
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	621a      	str	r2, [r3, #32]
 800ec2c:	e008      	b.n	800ec40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	1c59      	adds	r1, r3, #1
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	6211      	str	r1, [r2, #32]
 800ec38:	781a      	ldrb	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	3b01      	subs	r3, #1
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10f      	bne.n	800ec74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	68da      	ldr	r2, [r3, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	e000      	b.n	800ec7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ec78:	2302      	movs	r3, #2
  }
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr

0800ec86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	68da      	ldr	r2, [r3, #12]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2220      	movs	r2, #32
 800eca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff fcd4 	bl	800e654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b08c      	sub	sp, #48	; 0x30
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b22      	cmp	r3, #34	; 0x22
 800ecc8:	f040 80ab 	bne.w	800ee22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecd4:	d117      	bne.n	800ed06 <UART_Receive_IT+0x50>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d113      	bne.n	800ed06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ecde:	2300      	movs	r3, #0
 800ece0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfe:	1c9a      	adds	r2, r3, #2
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	629a      	str	r2, [r3, #40]	; 0x28
 800ed04:	e026      	b.n	800ed54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed18:	d007      	beq.n	800ed2a <UART_Receive_IT+0x74>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10a      	bne.n	800ed38 <UART_Receive_IT+0x82>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	b2da      	uxtb	r2, r3
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	e008      	b.n	800ed4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed44:	b2da      	uxtb	r2, r3
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4e:	1c5a      	adds	r2, r3, #1
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4619      	mov	r1, r3
 800ed62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d15a      	bne.n	800ee1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68da      	ldr	r2, [r3, #12]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f022 0220 	bic.w	r2, r2, #32
 800ed76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	695a      	ldr	r2, [r3, #20]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f022 0201 	bic.w	r2, r2, #1
 800ed96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2220      	movs	r2, #32
 800ed9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d135      	bne.n	800ee14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	330c      	adds	r3, #12
 800edb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	e853 3f00 	ldrex	r3, [r3]
 800edbc:	613b      	str	r3, [r7, #16]
   return(result);
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	f023 0310 	bic.w	r3, r3, #16
 800edc4:	627b      	str	r3, [r7, #36]	; 0x24
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	330c      	adds	r3, #12
 800edcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edce:	623a      	str	r2, [r7, #32]
 800edd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	69f9      	ldr	r1, [r7, #28]
 800edd4:	6a3a      	ldr	r2, [r7, #32]
 800edd6:	e841 2300 	strex	r3, r2, [r1]
 800edda:	61bb      	str	r3, [r7, #24]
   return(result);
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1e5      	bne.n	800edae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f003 0310 	and.w	r3, r3, #16
 800edec:	2b10      	cmp	r3, #16
 800edee:	d10a      	bne.n	800ee06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800edf0:	2300      	movs	r3, #0
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	60fb      	str	r3, [r7, #12]
 800ee04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7ff fc3f 	bl	800e690 <HAL_UARTEx_RxEventCallback>
 800ee12:	e002      	b.n	800ee1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7f4 fcb3 	bl	8003780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	e002      	b.n	800ee24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	e000      	b.n	800ee24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ee22:	2302      	movs	r3, #2
  }
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3730      	adds	r7, #48	; 0x30
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee30:	b09f      	sub	sp, #124	; 0x7c
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	691b      	ldr	r3, [r3, #16]
 800ee3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ee40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee42:	68d9      	ldr	r1, [r3, #12]
 800ee44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	ea40 0301 	orr.w	r3, r0, r1
 800ee4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ee4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee50:	689a      	ldr	r2, [r3, #8]
 800ee52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	431a      	orrs	r2, r3
 800ee58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee5a:	695b      	ldr	r3, [r3, #20]
 800ee5c:	431a      	orrs	r2, r3
 800ee5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee60:	69db      	ldr	r3, [r3, #28]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ee66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ee70:	f021 010c 	bic.w	r1, r1, #12
 800ee74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee7a:	430b      	orrs	r3, r1
 800ee7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	695b      	ldr	r3, [r3, #20]
 800ee84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ee88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee8a:	6999      	ldr	r1, [r3, #24]
 800ee8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	ea40 0301 	orr.w	r3, r0, r1
 800ee94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	4bc5      	ldr	r3, [pc, #788]	; (800f1b0 <UART_SetConfig+0x384>)
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d004      	beq.n	800eeaa <UART_SetConfig+0x7e>
 800eea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	4bc3      	ldr	r3, [pc, #780]	; (800f1b4 <UART_SetConfig+0x388>)
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d103      	bne.n	800eeb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eeaa:	f7fd f875 	bl	800bf98 <HAL_RCC_GetPCLK2Freq>
 800eeae:	6778      	str	r0, [r7, #116]	; 0x74
 800eeb0:	e002      	b.n	800eeb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eeb2:	f7fd f85d 	bl	800bf70 <HAL_RCC_GetPCLK1Freq>
 800eeb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eeb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeba:	69db      	ldr	r3, [r3, #28]
 800eebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eec0:	f040 80b6 	bne.w	800f030 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eec6:	461c      	mov	r4, r3
 800eec8:	f04f 0500 	mov.w	r5, #0
 800eecc:	4622      	mov	r2, r4
 800eece:	462b      	mov	r3, r5
 800eed0:	1891      	adds	r1, r2, r2
 800eed2:	6439      	str	r1, [r7, #64]	; 0x40
 800eed4:	415b      	adcs	r3, r3
 800eed6:	647b      	str	r3, [r7, #68]	; 0x44
 800eed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eedc:	1912      	adds	r2, r2, r4
 800eede:	eb45 0303 	adc.w	r3, r5, r3
 800eee2:	f04f 0000 	mov.w	r0, #0
 800eee6:	f04f 0100 	mov.w	r1, #0
 800eeea:	00d9      	lsls	r1, r3, #3
 800eeec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800eef0:	00d0      	lsls	r0, r2, #3
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	1911      	adds	r1, r2, r4
 800eef8:	6639      	str	r1, [r7, #96]	; 0x60
 800eefa:	416b      	adcs	r3, r5
 800eefc:	667b      	str	r3, [r7, #100]	; 0x64
 800eefe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	461a      	mov	r2, r3
 800ef04:	f04f 0300 	mov.w	r3, #0
 800ef08:	1891      	adds	r1, r2, r2
 800ef0a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ef0c:	415b      	adcs	r3, r3
 800ef0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ef14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ef18:	f7f1 fe66 	bl	8000be8 <__aeabi_uldivmod>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4ba5      	ldr	r3, [pc, #660]	; (800f1b8 <UART_SetConfig+0x38c>)
 800ef22:	fba3 2302 	umull	r2, r3, r3, r2
 800ef26:	095b      	lsrs	r3, r3, #5
 800ef28:	011e      	lsls	r6, r3, #4
 800ef2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef2c:	461c      	mov	r4, r3
 800ef2e:	f04f 0500 	mov.w	r5, #0
 800ef32:	4622      	mov	r2, r4
 800ef34:	462b      	mov	r3, r5
 800ef36:	1891      	adds	r1, r2, r2
 800ef38:	6339      	str	r1, [r7, #48]	; 0x30
 800ef3a:	415b      	adcs	r3, r3
 800ef3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ef42:	1912      	adds	r2, r2, r4
 800ef44:	eb45 0303 	adc.w	r3, r5, r3
 800ef48:	f04f 0000 	mov.w	r0, #0
 800ef4c:	f04f 0100 	mov.w	r1, #0
 800ef50:	00d9      	lsls	r1, r3, #3
 800ef52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ef56:	00d0      	lsls	r0, r2, #3
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	1911      	adds	r1, r2, r4
 800ef5e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ef60:	416b      	adcs	r3, r5
 800ef62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	1891      	adds	r1, r2, r2
 800ef70:	62b9      	str	r1, [r7, #40]	; 0x28
 800ef72:	415b      	adcs	r3, r3
 800ef74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ef7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ef7e:	f7f1 fe33 	bl	8000be8 <__aeabi_uldivmod>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4b8c      	ldr	r3, [pc, #560]	; (800f1b8 <UART_SetConfig+0x38c>)
 800ef88:	fba3 1302 	umull	r1, r3, r3, r2
 800ef8c:	095b      	lsrs	r3, r3, #5
 800ef8e:	2164      	movs	r1, #100	; 0x64
 800ef90:	fb01 f303 	mul.w	r3, r1, r3
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	3332      	adds	r3, #50	; 0x32
 800ef9a:	4a87      	ldr	r2, [pc, #540]	; (800f1b8 <UART_SetConfig+0x38c>)
 800ef9c:	fba2 2303 	umull	r2, r3, r2, r3
 800efa0:	095b      	lsrs	r3, r3, #5
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800efa8:	441e      	add	r6, r3
 800efaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efac:	4618      	mov	r0, r3
 800efae:	f04f 0100 	mov.w	r1, #0
 800efb2:	4602      	mov	r2, r0
 800efb4:	460b      	mov	r3, r1
 800efb6:	1894      	adds	r4, r2, r2
 800efb8:	623c      	str	r4, [r7, #32]
 800efba:	415b      	adcs	r3, r3
 800efbc:	627b      	str	r3, [r7, #36]	; 0x24
 800efbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800efc2:	1812      	adds	r2, r2, r0
 800efc4:	eb41 0303 	adc.w	r3, r1, r3
 800efc8:	f04f 0400 	mov.w	r4, #0
 800efcc:	f04f 0500 	mov.w	r5, #0
 800efd0:	00dd      	lsls	r5, r3, #3
 800efd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800efd6:	00d4      	lsls	r4, r2, #3
 800efd8:	4622      	mov	r2, r4
 800efda:	462b      	mov	r3, r5
 800efdc:	1814      	adds	r4, r2, r0
 800efde:	653c      	str	r4, [r7, #80]	; 0x50
 800efe0:	414b      	adcs	r3, r1
 800efe2:	657b      	str	r3, [r7, #84]	; 0x54
 800efe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	461a      	mov	r2, r3
 800efea:	f04f 0300 	mov.w	r3, #0
 800efee:	1891      	adds	r1, r2, r2
 800eff0:	61b9      	str	r1, [r7, #24]
 800eff2:	415b      	adcs	r3, r3
 800eff4:	61fb      	str	r3, [r7, #28]
 800eff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800effa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800effe:	f7f1 fdf3 	bl	8000be8 <__aeabi_uldivmod>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4b6c      	ldr	r3, [pc, #432]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f008:	fba3 1302 	umull	r1, r3, r3, r2
 800f00c:	095b      	lsrs	r3, r3, #5
 800f00e:	2164      	movs	r1, #100	; 0x64
 800f010:	fb01 f303 	mul.w	r3, r1, r3
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	3332      	adds	r3, #50	; 0x32
 800f01a:	4a67      	ldr	r2, [pc, #412]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f01c:	fba2 2303 	umull	r2, r3, r2, r3
 800f020:	095b      	lsrs	r3, r3, #5
 800f022:	f003 0207 	and.w	r2, r3, #7
 800f026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4432      	add	r2, r6
 800f02c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f02e:	e0b9      	b.n	800f1a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f032:	461c      	mov	r4, r3
 800f034:	f04f 0500 	mov.w	r5, #0
 800f038:	4622      	mov	r2, r4
 800f03a:	462b      	mov	r3, r5
 800f03c:	1891      	adds	r1, r2, r2
 800f03e:	6139      	str	r1, [r7, #16]
 800f040:	415b      	adcs	r3, r3
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f048:	1912      	adds	r2, r2, r4
 800f04a:	eb45 0303 	adc.w	r3, r5, r3
 800f04e:	f04f 0000 	mov.w	r0, #0
 800f052:	f04f 0100 	mov.w	r1, #0
 800f056:	00d9      	lsls	r1, r3, #3
 800f058:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f05c:	00d0      	lsls	r0, r2, #3
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	eb12 0804 	adds.w	r8, r2, r4
 800f066:	eb43 0905 	adc.w	r9, r3, r5
 800f06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f04f 0100 	mov.w	r1, #0
 800f074:	f04f 0200 	mov.w	r2, #0
 800f078:	f04f 0300 	mov.w	r3, #0
 800f07c:	008b      	lsls	r3, r1, #2
 800f07e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f082:	0082      	lsls	r2, r0, #2
 800f084:	4640      	mov	r0, r8
 800f086:	4649      	mov	r1, r9
 800f088:	f7f1 fdae 	bl	8000be8 <__aeabi_uldivmod>
 800f08c:	4602      	mov	r2, r0
 800f08e:	460b      	mov	r3, r1
 800f090:	4b49      	ldr	r3, [pc, #292]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f092:	fba3 2302 	umull	r2, r3, r3, r2
 800f096:	095b      	lsrs	r3, r3, #5
 800f098:	011e      	lsls	r6, r3, #4
 800f09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f09c:	4618      	mov	r0, r3
 800f09e:	f04f 0100 	mov.w	r1, #0
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	1894      	adds	r4, r2, r2
 800f0a8:	60bc      	str	r4, [r7, #8]
 800f0aa:	415b      	adcs	r3, r3
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f0b2:	1812      	adds	r2, r2, r0
 800f0b4:	eb41 0303 	adc.w	r3, r1, r3
 800f0b8:	f04f 0400 	mov.w	r4, #0
 800f0bc:	f04f 0500 	mov.w	r5, #0
 800f0c0:	00dd      	lsls	r5, r3, #3
 800f0c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f0c6:	00d4      	lsls	r4, r2, #3
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	462b      	mov	r3, r5
 800f0cc:	1814      	adds	r4, r2, r0
 800f0ce:	64bc      	str	r4, [r7, #72]	; 0x48
 800f0d0:	414b      	adcs	r3, r1
 800f0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f04f 0100 	mov.w	r1, #0
 800f0de:	f04f 0200 	mov.w	r2, #0
 800f0e2:	f04f 0300 	mov.w	r3, #0
 800f0e6:	008b      	lsls	r3, r1, #2
 800f0e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f0ec:	0082      	lsls	r2, r0, #2
 800f0ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f0f2:	f7f1 fd79 	bl	8000be8 <__aeabi_uldivmod>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	4b2f      	ldr	r3, [pc, #188]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f0fc:	fba3 1302 	umull	r1, r3, r3, r2
 800f100:	095b      	lsrs	r3, r3, #5
 800f102:	2164      	movs	r1, #100	; 0x64
 800f104:	fb01 f303 	mul.w	r3, r1, r3
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	011b      	lsls	r3, r3, #4
 800f10c:	3332      	adds	r3, #50	; 0x32
 800f10e:	4a2a      	ldr	r2, [pc, #168]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f110:	fba2 2303 	umull	r2, r3, r2, r3
 800f114:	095b      	lsrs	r3, r3, #5
 800f116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f11a:	441e      	add	r6, r3
 800f11c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f11e:	4618      	mov	r0, r3
 800f120:	f04f 0100 	mov.w	r1, #0
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	1894      	adds	r4, r2, r2
 800f12a:	603c      	str	r4, [r7, #0]
 800f12c:	415b      	adcs	r3, r3
 800f12e:	607b      	str	r3, [r7, #4]
 800f130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f134:	1812      	adds	r2, r2, r0
 800f136:	eb41 0303 	adc.w	r3, r1, r3
 800f13a:	f04f 0400 	mov.w	r4, #0
 800f13e:	f04f 0500 	mov.w	r5, #0
 800f142:	00dd      	lsls	r5, r3, #3
 800f144:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f148:	00d4      	lsls	r4, r2, #3
 800f14a:	4622      	mov	r2, r4
 800f14c:	462b      	mov	r3, r5
 800f14e:	eb12 0a00 	adds.w	sl, r2, r0
 800f152:	eb43 0b01 	adc.w	fp, r3, r1
 800f156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f04f 0100 	mov.w	r1, #0
 800f160:	f04f 0200 	mov.w	r2, #0
 800f164:	f04f 0300 	mov.w	r3, #0
 800f168:	008b      	lsls	r3, r1, #2
 800f16a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f16e:	0082      	lsls	r2, r0, #2
 800f170:	4650      	mov	r0, sl
 800f172:	4659      	mov	r1, fp
 800f174:	f7f1 fd38 	bl	8000be8 <__aeabi_uldivmod>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4b0e      	ldr	r3, [pc, #56]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f17e:	fba3 1302 	umull	r1, r3, r3, r2
 800f182:	095b      	lsrs	r3, r3, #5
 800f184:	2164      	movs	r1, #100	; 0x64
 800f186:	fb01 f303 	mul.w	r3, r1, r3
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	011b      	lsls	r3, r3, #4
 800f18e:	3332      	adds	r3, #50	; 0x32
 800f190:	4a09      	ldr	r2, [pc, #36]	; (800f1b8 <UART_SetConfig+0x38c>)
 800f192:	fba2 2303 	umull	r2, r3, r2, r3
 800f196:	095b      	lsrs	r3, r3, #5
 800f198:	f003 020f 	and.w	r2, r3, #15
 800f19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4432      	add	r2, r6
 800f1a2:	609a      	str	r2, [r3, #8]
}
 800f1a4:	bf00      	nop
 800f1a6:	377c      	adds	r7, #124	; 0x7c
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ae:	bf00      	nop
 800f1b0:	40011000 	.word	0x40011000
 800f1b4:	40011400 	.word	0x40011400
 800f1b8:	51eb851f 	.word	0x51eb851f

0800f1bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f1bc:	b084      	sub	sp, #16
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b084      	sub	sp, #16
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	f107 001c 	add.w	r0, r7, #28
 800f1ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d122      	bne.n	800f21a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d105      	bne.n	800f20e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f001 fb16 	bl	8010840 <USB_CoreReset>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
 800f218:	e01a      	b.n	800f250 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f001 fb0a 	bl	8010840 <USB_CoreReset>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	639a      	str	r2, [r3, #56]	; 0x38
 800f242:	e005      	b.n	800f250 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f248:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	2b01      	cmp	r3, #1
 800f254:	d10b      	bne.n	800f26e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f043 0206 	orr.w	r2, r3, #6
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f043 0220 	orr.w	r2, r3, #32
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f27a:	b004      	add	sp, #16
 800f27c:	4770      	bx	lr
	...

0800f280 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	4613      	mov	r3, r2
 800f28c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	2b02      	cmp	r3, #2
 800f292:	d165      	bne.n	800f360 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	4a41      	ldr	r2, [pc, #260]	; (800f39c <USB_SetTurnaroundTime+0x11c>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d906      	bls.n	800f2aa <USB_SetTurnaroundTime+0x2a>
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	4a40      	ldr	r2, [pc, #256]	; (800f3a0 <USB_SetTurnaroundTime+0x120>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d202      	bcs.n	800f2aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f2a4:	230f      	movs	r3, #15
 800f2a6:	617b      	str	r3, [r7, #20]
 800f2a8:	e062      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	4a3c      	ldr	r2, [pc, #240]	; (800f3a0 <USB_SetTurnaroundTime+0x120>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d306      	bcc.n	800f2c0 <USB_SetTurnaroundTime+0x40>
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	4a3b      	ldr	r2, [pc, #236]	; (800f3a4 <USB_SetTurnaroundTime+0x124>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d202      	bcs.n	800f2c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f2ba:	230e      	movs	r3, #14
 800f2bc:	617b      	str	r3, [r7, #20]
 800f2be:	e057      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	4a38      	ldr	r2, [pc, #224]	; (800f3a4 <USB_SetTurnaroundTime+0x124>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d306      	bcc.n	800f2d6 <USB_SetTurnaroundTime+0x56>
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	4a37      	ldr	r2, [pc, #220]	; (800f3a8 <USB_SetTurnaroundTime+0x128>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d202      	bcs.n	800f2d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f2d0:	230d      	movs	r3, #13
 800f2d2:	617b      	str	r3, [r7, #20]
 800f2d4:	e04c      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	4a33      	ldr	r2, [pc, #204]	; (800f3a8 <USB_SetTurnaroundTime+0x128>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d306      	bcc.n	800f2ec <USB_SetTurnaroundTime+0x6c>
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	4a32      	ldr	r2, [pc, #200]	; (800f3ac <USB_SetTurnaroundTime+0x12c>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d802      	bhi.n	800f2ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f2e6:	230c      	movs	r3, #12
 800f2e8:	617b      	str	r3, [r7, #20]
 800f2ea:	e041      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	4a2f      	ldr	r2, [pc, #188]	; (800f3ac <USB_SetTurnaroundTime+0x12c>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d906      	bls.n	800f302 <USB_SetTurnaroundTime+0x82>
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	4a2e      	ldr	r2, [pc, #184]	; (800f3b0 <USB_SetTurnaroundTime+0x130>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d802      	bhi.n	800f302 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f2fc:	230b      	movs	r3, #11
 800f2fe:	617b      	str	r3, [r7, #20]
 800f300:	e036      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	4a2a      	ldr	r2, [pc, #168]	; (800f3b0 <USB_SetTurnaroundTime+0x130>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d906      	bls.n	800f318 <USB_SetTurnaroundTime+0x98>
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	4a29      	ldr	r2, [pc, #164]	; (800f3b4 <USB_SetTurnaroundTime+0x134>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d802      	bhi.n	800f318 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f312:	230a      	movs	r3, #10
 800f314:	617b      	str	r3, [r7, #20]
 800f316:	e02b      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	4a26      	ldr	r2, [pc, #152]	; (800f3b4 <USB_SetTurnaroundTime+0x134>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d906      	bls.n	800f32e <USB_SetTurnaroundTime+0xae>
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	4a25      	ldr	r2, [pc, #148]	; (800f3b8 <USB_SetTurnaroundTime+0x138>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d202      	bcs.n	800f32e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f328:	2309      	movs	r3, #9
 800f32a:	617b      	str	r3, [r7, #20]
 800f32c:	e020      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	4a21      	ldr	r2, [pc, #132]	; (800f3b8 <USB_SetTurnaroundTime+0x138>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d306      	bcc.n	800f344 <USB_SetTurnaroundTime+0xc4>
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	4a20      	ldr	r2, [pc, #128]	; (800f3bc <USB_SetTurnaroundTime+0x13c>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d802      	bhi.n	800f344 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f33e:	2308      	movs	r3, #8
 800f340:	617b      	str	r3, [r7, #20]
 800f342:	e015      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	4a1d      	ldr	r2, [pc, #116]	; (800f3bc <USB_SetTurnaroundTime+0x13c>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d906      	bls.n	800f35a <USB_SetTurnaroundTime+0xda>
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	4a1c      	ldr	r2, [pc, #112]	; (800f3c0 <USB_SetTurnaroundTime+0x140>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d202      	bcs.n	800f35a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f354:	2307      	movs	r3, #7
 800f356:	617b      	str	r3, [r7, #20]
 800f358:	e00a      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f35a:	2306      	movs	r3, #6
 800f35c:	617b      	str	r3, [r7, #20]
 800f35e:	e007      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d102      	bne.n	800f36c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f366:	2309      	movs	r3, #9
 800f368:	617b      	str	r3, [r7, #20]
 800f36a:	e001      	b.n	800f370 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f36c:	2309      	movs	r3, #9
 800f36e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	68da      	ldr	r2, [r3, #12]
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	029b      	lsls	r3, r3, #10
 800f384:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f388:	431a      	orrs	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	371c      	adds	r7, #28
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	00d8acbf 	.word	0x00d8acbf
 800f3a0:	00e4e1c0 	.word	0x00e4e1c0
 800f3a4:	00f42400 	.word	0x00f42400
 800f3a8:	01067380 	.word	0x01067380
 800f3ac:	011a499f 	.word	0x011a499f
 800f3b0:	01312cff 	.word	0x01312cff
 800f3b4:	014ca43f 	.word	0x014ca43f
 800f3b8:	016e3600 	.word	0x016e3600
 800f3bc:	01a6ab1f 	.word	0x01a6ab1f
 800f3c0:	01e84800 	.word	0x01e84800

0800f3c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	f043 0201 	orr.w	r2, r3, #1
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b083      	sub	sp, #12
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f023 0201 	bic.w	r2, r3, #1
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3fa:	2300      	movs	r3, #0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f414:	2300      	movs	r3, #0
 800f416:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f424:	78fb      	ldrb	r3, [r7, #3]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d115      	bne.n	800f456 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f436:	2001      	movs	r0, #1
 800f438:	f7f9 f8fe 	bl	8008638 <HAL_Delay>
      ms++;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	3301      	adds	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f001 f96c 	bl	8010720 <USB_GetMode>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d01e      	beq.n	800f48c <USB_SetCurrentMode+0x84>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b31      	cmp	r3, #49	; 0x31
 800f452:	d9f0      	bls.n	800f436 <USB_SetCurrentMode+0x2e>
 800f454:	e01a      	b.n	800f48c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d115      	bne.n	800f488 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f468:	2001      	movs	r0, #1
 800f46a:	f7f9 f8e5 	bl	8008638 <HAL_Delay>
      ms++;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3301      	adds	r3, #1
 800f472:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f001 f953 	bl	8010720 <USB_GetMode>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d005      	beq.n	800f48c <USB_SetCurrentMode+0x84>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b31      	cmp	r3, #49	; 0x31
 800f484:	d9f0      	bls.n	800f468 <USB_SetCurrentMode+0x60>
 800f486:	e001      	b.n	800f48c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f488:	2301      	movs	r3, #1
 800f48a:	e005      	b.n	800f498 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b32      	cmp	r3, #50	; 0x32
 800f490:	d101      	bne.n	800f496 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	e000      	b.n	800f498 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f4a0:	b084      	sub	sp, #16
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b086      	sub	sp, #24
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f4ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	613b      	str	r3, [r7, #16]
 800f4be:	e009      	b.n	800f4d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	3340      	adds	r3, #64	; 0x40
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	3301      	adds	r3, #1
 800f4d2:	613b      	str	r3, [r7, #16]
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	2b0e      	cmp	r3, #14
 800f4d8:	d9f2      	bls.n	800f4c0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d11c      	bne.n	800f51a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4ee:	f043 0302 	orr.w	r3, r3, #2
 800f4f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	e005      	b.n	800f526 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f51e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f52c:	461a      	mov	r2, r3
 800f52e:	2300      	movs	r3, #0
 800f530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f538:	4619      	mov	r1, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f540:	461a      	mov	r2, r3
 800f542:	680b      	ldr	r3, [r1, #0]
 800f544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d10c      	bne.n	800f566 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d104      	bne.n	800f55c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f552:	2100      	movs	r1, #0
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 f945 	bl	800f7e4 <USB_SetDevSpeed>
 800f55a:	e008      	b.n	800f56e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f55c:	2101      	movs	r1, #1
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 f940 	bl	800f7e4 <USB_SetDevSpeed>
 800f564:	e003      	b.n	800f56e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f566:	2103      	movs	r1, #3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f93b 	bl	800f7e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f56e:	2110      	movs	r1, #16
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f8f3 	bl	800f75c <USB_FlushTxFifo>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d001      	beq.n	800f580 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f90f 	bl	800f7a4 <USB_FlushRxFifo>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f58c:	2301      	movs	r3, #1
 800f58e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f596:	461a      	mov	r2, r3
 800f598:	2300      	movs	r3, #0
 800f59a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	613b      	str	r3, [r7, #16]
 800f5b8:	e043      	b.n	800f642 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f5d0:	d118      	bne.n	800f604 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10a      	bne.n	800f5ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	015a      	lsls	r2, r3, #5
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	4413      	add	r3, r2
 800f5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f5ea:	6013      	str	r3, [r2, #0]
 800f5ec:	e013      	b.n	800f616 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	015a      	lsls	r2, r3, #5
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f600:	6013      	str	r3, [r2, #0]
 800f602:	e008      	b.n	800f616 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	015a      	lsls	r2, r3, #5
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	4413      	add	r3, r2
 800f60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f610:	461a      	mov	r2, r3
 800f612:	2300      	movs	r3, #0
 800f614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	015a      	lsls	r2, r3, #5
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	4413      	add	r3, r2
 800f61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f622:	461a      	mov	r2, r3
 800f624:	2300      	movs	r3, #0
 800f626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	015a      	lsls	r2, r3, #5
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f634:	461a      	mov	r2, r3
 800f636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f63a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	3301      	adds	r3, #1
 800f640:	613b      	str	r3, [r7, #16]
 800f642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f644:	693a      	ldr	r2, [r7, #16]
 800f646:	429a      	cmp	r2, r3
 800f648:	d3b7      	bcc.n	800f5ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f64a:	2300      	movs	r3, #0
 800f64c:	613b      	str	r3, [r7, #16]
 800f64e:	e043      	b.n	800f6d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	015a      	lsls	r2, r3, #5
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	4413      	add	r3, r2
 800f658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f666:	d118      	bne.n	800f69a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10a      	bne.n	800f684 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	015a      	lsls	r2, r3, #5
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f67a:	461a      	mov	r2, r3
 800f67c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e013      	b.n	800f6ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f690:	461a      	mov	r2, r3
 800f692:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	e008      	b.n	800f6ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	015a      	lsls	r2, r3, #5
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	015a      	lsls	r2, r3, #5
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f6d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	613b      	str	r3, [r7, #16]
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d3b7      	bcc.n	800f650 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	2b00      	cmp	r3, #0
 800f706:	d105      	bne.n	800f714 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	699b      	ldr	r3, [r3, #24]
 800f70c:	f043 0210 	orr.w	r2, r3, #16
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	699a      	ldr	r2, [r3, #24]
 800f718:	4b0f      	ldr	r3, [pc, #60]	; (800f758 <USB_DevInit+0x2b8>)
 800f71a:	4313      	orrs	r3, r2
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f722:	2b00      	cmp	r3, #0
 800f724:	d005      	beq.n	800f732 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	f043 0208 	orr.w	r2, r3, #8
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f734:	2b01      	cmp	r3, #1
 800f736:	d107      	bne.n	800f748 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f740:	f043 0304 	orr.w	r3, r3, #4
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f748:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3718      	adds	r7, #24
 800f74e:	46bd      	mov	sp, r7
 800f750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f754:	b004      	add	sp, #16
 800f756:	4770      	bx	lr
 800f758:	803c3800 	.word	0x803c3800

0800f75c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f766:	2300      	movs	r3, #0
 800f768:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	019b      	lsls	r3, r3, #6
 800f76e:	f043 0220 	orr.w	r2, r3, #32
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3301      	adds	r3, #1
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	4a08      	ldr	r2, [pc, #32]	; (800f7a0 <USB_FlushTxFifo+0x44>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d901      	bls.n	800f786 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f782:	2303      	movs	r3, #3
 800f784:	e006      	b.n	800f794 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	f003 0320 	and.w	r3, r3, #32
 800f78e:	2b20      	cmp	r3, #32
 800f790:	d0f1      	beq.n	800f776 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	00030d40 	.word	0x00030d40

0800f7a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2210      	movs	r2, #16
 800f7b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	60fb      	str	r3, [r7, #12]
 800f7bc:	4a08      	ldr	r2, [pc, #32]	; (800f7e0 <USB_FlushRxFifo+0x3c>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d901      	bls.n	800f7c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f7c2:	2303      	movs	r3, #3
 800f7c4:	e006      	b.n	800f7d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	f003 0310 	and.w	r3, r3, #16
 800f7ce:	2b10      	cmp	r3, #16
 800f7d0:	d0f1      	beq.n	800f7b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f7d2:	2300      	movs	r3, #0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3714      	adds	r7, #20
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	00030d40 	.word	0x00030d40

0800f7e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	78fb      	ldrb	r3, [r7, #3]
 800f7fe:	68f9      	ldr	r1, [r7, #12]
 800f800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f804:	4313      	orrs	r3, r2
 800f806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f808:	2300      	movs	r3, #0
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f816:	b480      	push	{r7}
 800f818:	b087      	sub	sp, #28
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	f003 0306 	and.w	r3, r3, #6
 800f82e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d102      	bne.n	800f83c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f836:	2300      	movs	r3, #0
 800f838:	75fb      	strb	r3, [r7, #23]
 800f83a:	e00a      	b.n	800f852 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d002      	beq.n	800f848 <USB_GetDevSpeed+0x32>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2b06      	cmp	r3, #6
 800f846:	d102      	bne.n	800f84e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f848:	2302      	movs	r3, #2
 800f84a:	75fb      	strb	r3, [r7, #23]
 800f84c:	e001      	b.n	800f852 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f84e:	230f      	movs	r3, #15
 800f850:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f852:	7dfb      	ldrb	r3, [r7, #23]
}
 800f854:	4618      	mov	r0, r3
 800f856:	371c      	adds	r7, #28
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	785b      	ldrb	r3, [r3, #1]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d13a      	bne.n	800f8f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f882:	69da      	ldr	r2, [r3, #28]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 030f 	and.w	r3, r3, #15
 800f88c:	2101      	movs	r1, #1
 800f88e:	fa01 f303 	lsl.w	r3, r1, r3
 800f892:	b29b      	uxth	r3, r3
 800f894:	68f9      	ldr	r1, [r7, #12]
 800f896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f89a:	4313      	orrs	r3, r2
 800f89c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	015a      	lsls	r2, r3, #5
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d155      	bne.n	800f960 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	015a      	lsls	r2, r3, #5
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	78db      	ldrb	r3, [r3, #3]
 800f8ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	059b      	lsls	r3, r3, #22
 800f8d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	68ba      	ldr	r2, [r7, #8]
 800f8dc:	0151      	lsls	r1, r2, #5
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	440a      	add	r2, r1
 800f8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	e036      	b.n	800f960 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8f8:	69da      	ldr	r2, [r3, #28]
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	f003 030f 	and.w	r3, r3, #15
 800f902:	2101      	movs	r1, #1
 800f904:	fa01 f303 	lsl.w	r3, r1, r3
 800f908:	041b      	lsls	r3, r3, #16
 800f90a:	68f9      	ldr	r1, [r7, #12]
 800f90c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f910:	4313      	orrs	r3, r2
 800f912:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f926:	2b00      	cmp	r3, #0
 800f928:	d11a      	bne.n	800f960 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	015a      	lsls	r2, r3, #5
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	4413      	add	r3, r2
 800f932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	78db      	ldrb	r3, [r3, #3]
 800f944:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f946:	430b      	orrs	r3, r1
 800f948:	4313      	orrs	r3, r2
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	0151      	lsls	r1, r2, #5
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	440a      	add	r2, r1
 800f952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f95a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f95e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
	...

0800f970 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	785b      	ldrb	r3, [r3, #1]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d161      	bne.n	800fa50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	015a      	lsls	r2, r3, #5
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f99e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9a2:	d11f      	bne.n	800f9e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	015a      	lsls	r2, r3, #5
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	0151      	lsls	r1, r2, #5
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f9c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	015a      	lsls	r2, r3, #5
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	68ba      	ldr	r2, [r7, #8]
 800f9d4:	0151      	lsls	r1, r2, #5
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	440a      	add	r2, r1
 800f9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f9e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	43db      	mvns	r3, r3
 800f9fe:	68f9      	ldr	r1, [r7, #12]
 800fa00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa04:	4013      	ands	r3, r2
 800fa06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa0e:	69da      	ldr	r2, [r3, #28]
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f003 030f 	and.w	r3, r3, #15
 800fa18:	2101      	movs	r1, #1
 800fa1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	43db      	mvns	r3, r3
 800fa22:	68f9      	ldr	r1, [r7, #12]
 800fa24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa28:	4013      	ands	r3, r2
 800fa2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	015a      	lsls	r2, r3, #5
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	4413      	add	r3, r2
 800fa34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	0159      	lsls	r1, r3, #5
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	440b      	add	r3, r1
 800fa42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa46:	4619      	mov	r1, r3
 800fa48:	4b35      	ldr	r3, [pc, #212]	; (800fb20 <USB_DeactivateEndpoint+0x1b0>)
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	600b      	str	r3, [r1, #0]
 800fa4e:	e060      	b.n	800fb12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	015a      	lsls	r2, r3, #5
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	4413      	add	r3, r2
 800fa58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa66:	d11f      	bne.n	800faa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	0151      	lsls	r1, r2, #5
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	440a      	add	r2, r1
 800fa7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fa86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	015a      	lsls	r2, r3, #5
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	0151      	lsls	r1, r2, #5
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	440a      	add	r2, r1
 800fa9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800faa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	f003 030f 	and.w	r3, r3, #15
 800fab8:	2101      	movs	r1, #1
 800faba:	fa01 f303 	lsl.w	r3, r1, r3
 800fabe:	041b      	lsls	r3, r3, #16
 800fac0:	43db      	mvns	r3, r3
 800fac2:	68f9      	ldr	r1, [r7, #12]
 800fac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fac8:	4013      	ands	r3, r2
 800faca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fad2:	69da      	ldr	r2, [r3, #28]
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 030f 	and.w	r3, r3, #15
 800fadc:	2101      	movs	r1, #1
 800fade:	fa01 f303 	lsl.w	r3, r1, r3
 800fae2:	041b      	lsls	r3, r3, #16
 800fae4:	43db      	mvns	r3, r3
 800fae6:	68f9      	ldr	r1, [r7, #12]
 800fae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faec:	4013      	ands	r3, r2
 800faee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	0159      	lsls	r1, r3, #5
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	440b      	add	r3, r1
 800fb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <USB_DeactivateEndpoint+0x1b4>)
 800fb0e:	4013      	ands	r3, r2
 800fb10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	ec337800 	.word	0xec337800
 800fb24:	eff37800 	.word	0xeff37800

0800fb28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	4613      	mov	r3, r2
 800fb34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	785b      	ldrb	r3, [r3, #1]
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	f040 815c 	bne.w	800fe02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	695b      	ldr	r3, [r3, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d132      	bne.n	800fbb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	015a      	lsls	r2, r3, #5
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	4413      	add	r3, r2
 800fb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb5e:	691b      	ldr	r3, [r3, #16]
 800fb60:	69ba      	ldr	r2, [r7, #24]
 800fb62:	0151      	lsls	r1, r2, #5
 800fb64:	69fa      	ldr	r2, [r7, #28]
 800fb66:	440a      	add	r2, r1
 800fb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	015a      	lsls	r2, r3, #5
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	69ba      	ldr	r2, [r7, #24]
 800fb86:	0151      	lsls	r1, r2, #5
 800fb88:	69fa      	ldr	r2, [r7, #28]
 800fb8a:	440a      	add	r2, r1
 800fb8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	015a      	lsls	r2, r3, #5
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	69ba      	ldr	r2, [r7, #24]
 800fba6:	0151      	lsls	r1, r2, #5
 800fba8:	69fa      	ldr	r2, [r7, #28]
 800fbaa:	440a      	add	r2, r1
 800fbac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb0:	0cdb      	lsrs	r3, r3, #19
 800fbb2:	04db      	lsls	r3, r3, #19
 800fbb4:	6113      	str	r3, [r2, #16]
 800fbb6:	e074      	b.n	800fca2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	69ba      	ldr	r2, [r7, #24]
 800fbc8:	0151      	lsls	r1, r2, #5
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	440a      	add	r2, r1
 800fbce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbd2:	0cdb      	lsrs	r3, r3, #19
 800fbd4:	04db      	lsls	r3, r3, #19
 800fbd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	015a      	lsls	r2, r3, #5
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	4413      	add	r3, r2
 800fbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	69ba      	ldr	r2, [r7, #24]
 800fbe8:	0151      	lsls	r1, r2, #5
 800fbea:	69fa      	ldr	r2, [r7, #28]
 800fbec:	440a      	add	r2, r1
 800fbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fbf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fbfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	6959      	ldr	r1, [r3, #20]
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	440b      	add	r3, r1
 800fc14:	1e59      	subs	r1, r3, #1
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800fc1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fc20:	4b9d      	ldr	r3, [pc, #628]	; (800fe98 <USB_EPStartXfer+0x370>)
 800fc22:	400b      	ands	r3, r1
 800fc24:	69b9      	ldr	r1, [r7, #24]
 800fc26:	0148      	lsls	r0, r1, #5
 800fc28:	69f9      	ldr	r1, [r7, #28]
 800fc2a:	4401      	add	r1, r0
 800fc2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fc30:	4313      	orrs	r3, r2
 800fc32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	015a      	lsls	r2, r3, #5
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc40:	691a      	ldr	r2, [r3, #16]
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	695b      	ldr	r3, [r3, #20]
 800fc46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc4a:	69b9      	ldr	r1, [r7, #24]
 800fc4c:	0148      	lsls	r0, r1, #5
 800fc4e:	69f9      	ldr	r1, [r7, #28]
 800fc50:	4401      	add	r1, r0
 800fc52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fc56:	4313      	orrs	r3, r2
 800fc58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	78db      	ldrb	r3, [r3, #3]
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d11f      	bne.n	800fca2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	69fb      	ldr	r3, [r7, #28]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	0151      	lsls	r1, r2, #5
 800fc74:	69fa      	ldr	r2, [r7, #28]
 800fc76:	440a      	add	r2, r1
 800fc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fc80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	015a      	lsls	r2, r3, #5
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	4413      	add	r3, r2
 800fc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	69ba      	ldr	r2, [r7, #24]
 800fc92:	0151      	lsls	r1, r2, #5
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	440a      	add	r2, r1
 800fc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d14b      	bne.n	800fd40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d009      	beq.n	800fcc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	78db      	ldrb	r3, [r3, #3]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d128      	bne.n	800fd1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd2:	689b      	ldr	r3, [r3, #8]
 800fcd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d110      	bne.n	800fcfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	69ba      	ldr	r2, [r7, #24]
 800fcec:	0151      	lsls	r1, r2, #5
 800fcee:	69fa      	ldr	r2, [r7, #28]
 800fcf0:	440a      	add	r2, r1
 800fcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fcfa:	6013      	str	r3, [r2, #0]
 800fcfc:	e00f      	b.n	800fd1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	69ba      	ldr	r2, [r7, #24]
 800fd0e:	0151      	lsls	r1, r2, #5
 800fd10:	69fa      	ldr	r2, [r7, #28]
 800fd12:	440a      	add	r2, r1
 800fd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	015a      	lsls	r2, r3, #5
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	4413      	add	r3, r2
 800fd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	69ba      	ldr	r2, [r7, #24]
 800fd2e:	0151      	lsls	r1, r2, #5
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	440a      	add	r2, r1
 800fd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	e12f      	b.n	800ffa0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	015a      	lsls	r2, r3, #5
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	4413      	add	r3, r2
 800fd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	69ba      	ldr	r2, [r7, #24]
 800fd50:	0151      	lsls	r1, r2, #5
 800fd52:	69fa      	ldr	r2, [r7, #28]
 800fd54:	440a      	add	r2, r1
 800fd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	78db      	ldrb	r3, [r3, #3]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d015      	beq.n	800fd94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	695b      	ldr	r3, [r3, #20]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 8117 	beq.w	800ffa0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	2101      	movs	r1, #1
 800fd84:	fa01 f303 	lsl.w	r3, r1, r3
 800fd88:	69f9      	ldr	r1, [r7, #28]
 800fd8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	634b      	str	r3, [r1, #52]	; 0x34
 800fd92:	e105      	b.n	800ffa0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d110      	bne.n	800fdc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	015a      	lsls	r2, r3, #5
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	4413      	add	r3, r2
 800fdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	69ba      	ldr	r2, [r7, #24]
 800fdb4:	0151      	lsls	r1, r2, #5
 800fdb6:	69fa      	ldr	r2, [r7, #28]
 800fdb8:	440a      	add	r2, r1
 800fdba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fdc2:	6013      	str	r3, [r2, #0]
 800fdc4:	e00f      	b.n	800fde6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	015a      	lsls	r2, r3, #5
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	4413      	add	r3, r2
 800fdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	69ba      	ldr	r2, [r7, #24]
 800fdd6:	0151      	lsls	r1, r2, #5
 800fdd8:	69fa      	ldr	r2, [r7, #28]
 800fdda:	440a      	add	r2, r1
 800fddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fde0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fde4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	68d9      	ldr	r1, [r3, #12]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	781a      	ldrb	r2, [r3, #0]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	695b      	ldr	r3, [r3, #20]
 800fdf2:	b298      	uxth	r0, r3
 800fdf4:	79fb      	ldrb	r3, [r7, #7]
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 fa2b 	bl	8010256 <USB_WritePacket>
 800fe00:	e0ce      	b.n	800ffa0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	0151      	lsls	r1, r2, #5
 800fe14:	69fa      	ldr	r2, [r7, #28]
 800fe16:	440a      	add	r2, r1
 800fe18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe1c:	0cdb      	lsrs	r3, r3, #19
 800fe1e:	04db      	lsls	r3, r3, #19
 800fe20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	015a      	lsls	r2, r3, #5
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	4413      	add	r3, r2
 800fe2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	69ba      	ldr	r2, [r7, #24]
 800fe32:	0151      	lsls	r1, r2, #5
 800fe34:	69fa      	ldr	r2, [r7, #28]
 800fe36:	440a      	add	r2, r1
 800fe38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d126      	bne.n	800fe9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	015a      	lsls	r2, r3, #5
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	4413      	add	r3, r2
 800fe56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe5a:	691a      	ldr	r2, [r3, #16]
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe64:	69b9      	ldr	r1, [r7, #24]
 800fe66:	0148      	lsls	r0, r1, #5
 800fe68:	69f9      	ldr	r1, [r7, #28]
 800fe6a:	4401      	add	r1, r0
 800fe6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe70:	4313      	orrs	r3, r2
 800fe72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	69ba      	ldr	r2, [r7, #24]
 800fe84:	0151      	lsls	r1, r2, #5
 800fe86:	69fa      	ldr	r2, [r7, #28]
 800fe88:	440a      	add	r2, r1
 800fe8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe92:	6113      	str	r3, [r2, #16]
 800fe94:	e036      	b.n	800ff04 <USB_EPStartXfer+0x3dc>
 800fe96:	bf00      	nop
 800fe98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	695a      	ldr	r2, [r3, #20]
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	4413      	add	r3, r2
 800fea6:	1e5a      	subs	r2, r3, #1
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	fbb2 f3f3 	udiv	r3, r2, r3
 800feb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	015a      	lsls	r2, r3, #5
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	4413      	add	r3, r2
 800feba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800febe:	691a      	ldr	r2, [r3, #16]
 800fec0:	8afb      	ldrh	r3, [r7, #22]
 800fec2:	04d9      	lsls	r1, r3, #19
 800fec4:	4b39      	ldr	r3, [pc, #228]	; (800ffac <USB_EPStartXfer+0x484>)
 800fec6:	400b      	ands	r3, r1
 800fec8:	69b9      	ldr	r1, [r7, #24]
 800feca:	0148      	lsls	r0, r1, #5
 800fecc:	69f9      	ldr	r1, [r7, #28]
 800fece:	4401      	add	r1, r0
 800fed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fed4:	4313      	orrs	r3, r2
 800fed6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	015a      	lsls	r2, r3, #5
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	4413      	add	r3, r2
 800fee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee4:	691a      	ldr	r2, [r3, #16]
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	8af9      	ldrh	r1, [r7, #22]
 800feec:	fb01 f303 	mul.w	r3, r1, r3
 800fef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fef4:	69b9      	ldr	r1, [r7, #24]
 800fef6:	0148      	lsls	r0, r1, #5
 800fef8:	69f9      	ldr	r1, [r7, #28]
 800fefa:	4401      	add	r1, r0
 800fefc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ff00:	4313      	orrs	r3, r2
 800ff02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ff04:	79fb      	ldrb	r3, [r7, #7]
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d10d      	bne.n	800ff26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d009      	beq.n	800ff26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	68d9      	ldr	r1, [r3, #12]
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	015a      	lsls	r2, r3, #5
 800ff1a:	69fb      	ldr	r3, [r7, #28]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff22:	460a      	mov	r2, r1
 800ff24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	78db      	ldrb	r3, [r3, #3]
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d128      	bne.n	800ff80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d110      	bne.n	800ff60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	015a      	lsls	r2, r3, #5
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	4413      	add	r3, r2
 800ff46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	69ba      	ldr	r2, [r7, #24]
 800ff4e:	0151      	lsls	r1, r2, #5
 800ff50:	69fa      	ldr	r2, [r7, #28]
 800ff52:	440a      	add	r2, r1
 800ff54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	e00f      	b.n	800ff80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	015a      	lsls	r2, r3, #5
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	4413      	add	r3, r2
 800ff68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	69ba      	ldr	r2, [r7, #24]
 800ff70:	0151      	lsls	r1, r2, #5
 800ff72:	69fa      	ldr	r2, [r7, #28]
 800ff74:	440a      	add	r2, r1
 800ff76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	69ba      	ldr	r2, [r7, #24]
 800ff90:	0151      	lsls	r1, r2, #5
 800ff92:	69fa      	ldr	r2, [r7, #28]
 800ff94:	440a      	add	r2, r1
 800ff96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3720      	adds	r7, #32
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	1ff80000 	.word	0x1ff80000

0800ffb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	785b      	ldrb	r3, [r3, #1]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	f040 80cd 	bne.w	801016c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	695b      	ldr	r3, [r3, #20]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d132      	bne.n	8010040 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	015a      	lsls	r2, r3, #5
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	0151      	lsls	r1, r2, #5
 800ffec:	697a      	ldr	r2, [r7, #20]
 800ffee:	440a      	add	r2, r1
 800fff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	693a      	ldr	r2, [r7, #16]
 801000e:	0151      	lsls	r1, r2, #5
 8010010:	697a      	ldr	r2, [r7, #20]
 8010012:	440a      	add	r2, r1
 8010014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801001c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	015a      	lsls	r2, r3, #5
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	4413      	add	r3, r2
 8010026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	693a      	ldr	r2, [r7, #16]
 801002e:	0151      	lsls	r1, r2, #5
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	440a      	add	r2, r1
 8010034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010038:	0cdb      	lsrs	r3, r3, #19
 801003a:	04db      	lsls	r3, r3, #19
 801003c:	6113      	str	r3, [r2, #16]
 801003e:	e04e      	b.n	80100de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	015a      	lsls	r2, r3, #5
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	4413      	add	r3, r2
 8010048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	693a      	ldr	r2, [r7, #16]
 8010050:	0151      	lsls	r1, r2, #5
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	440a      	add	r2, r1
 8010056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801005a:	0cdb      	lsrs	r3, r3, #19
 801005c:	04db      	lsls	r3, r3, #19
 801005e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	693a      	ldr	r2, [r7, #16]
 8010070:	0151      	lsls	r1, r2, #5
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	440a      	add	r2, r1
 8010076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801007a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801007e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010082:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	695a      	ldr	r2, [r3, #20]
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	429a      	cmp	r2, r3
 801008e:	d903      	bls.n	8010098 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	689a      	ldr	r2, [r3, #8]
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	0151      	lsls	r1, r2, #5
 80100aa:	697a      	ldr	r2, [r7, #20]
 80100ac:	440a      	add	r2, r1
 80100ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	015a      	lsls	r2, r3, #5
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	4413      	add	r3, r2
 80100c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c4:	691a      	ldr	r2, [r3, #16]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	695b      	ldr	r3, [r3, #20]
 80100ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100ce:	6939      	ldr	r1, [r7, #16]
 80100d0:	0148      	lsls	r0, r1, #5
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	4401      	add	r1, r0
 80100d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100da:	4313      	orrs	r3, r2
 80100dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d11e      	bne.n	8010122 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	691b      	ldr	r3, [r3, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d009      	beq.n	8010100 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	015a      	lsls	r2, r3, #5
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	4413      	add	r3, r2
 80100f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f8:	461a      	mov	r2, r3
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	015a      	lsls	r2, r3, #5
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	4413      	add	r3, r2
 8010108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	0151      	lsls	r1, r2, #5
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	440a      	add	r2, r1
 8010116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801011a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	e092      	b.n	8010248 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	015a      	lsls	r2, r3, #5
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	4413      	add	r3, r2
 801012a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	0151      	lsls	r1, r2, #5
 8010134:	697a      	ldr	r2, [r7, #20]
 8010136:	440a      	add	r2, r1
 8010138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801013c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010140:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d07e      	beq.n	8010248 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	f003 030f 	and.w	r3, r3, #15
 801015a:	2101      	movs	r1, #1
 801015c:	fa01 f303 	lsl.w	r3, r1, r3
 8010160:	6979      	ldr	r1, [r7, #20]
 8010162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010166:	4313      	orrs	r3, r2
 8010168:	634b      	str	r3, [r1, #52]	; 0x34
 801016a:	e06d      	b.n	8010248 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	015a      	lsls	r2, r3, #5
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	4413      	add	r3, r2
 8010174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010178:	691b      	ldr	r3, [r3, #16]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	0151      	lsls	r1, r2, #5
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	440a      	add	r2, r1
 8010182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010186:	0cdb      	lsrs	r3, r3, #19
 8010188:	04db      	lsls	r3, r3, #19
 801018a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	015a      	lsls	r2, r3, #5
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	4413      	add	r3, r2
 8010194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	0151      	lsls	r1, r2, #5
 801019e:	697a      	ldr	r2, [r7, #20]
 80101a0:	440a      	add	r2, r1
 80101a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d003      	beq.n	80101c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	689a      	ldr	r2, [r3, #8]
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	015a      	lsls	r2, r3, #5
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	4413      	add	r3, r2
 80101c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101cc:	691b      	ldr	r3, [r3, #16]
 80101ce:	693a      	ldr	r2, [r7, #16]
 80101d0:	0151      	lsls	r1, r2, #5
 80101d2:	697a      	ldr	r2, [r7, #20]
 80101d4:	440a      	add	r2, r1
 80101d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80101de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	015a      	lsls	r2, r3, #5
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ec:	691a      	ldr	r2, [r3, #16]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101f6:	6939      	ldr	r1, [r7, #16]
 80101f8:	0148      	lsls	r0, r1, #5
 80101fa:	6979      	ldr	r1, [r7, #20]
 80101fc:	4401      	add	r1, r0
 80101fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010202:	4313      	orrs	r3, r2
 8010204:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010206:	79fb      	ldrb	r3, [r7, #7]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d10d      	bne.n	8010228 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d009      	beq.n	8010228 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	68d9      	ldr	r1, [r3, #12]
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	015a      	lsls	r2, r3, #5
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	4413      	add	r3, r2
 8010220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010224:	460a      	mov	r2, r1
 8010226:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	4413      	add	r3, r2
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	693a      	ldr	r2, [r7, #16]
 8010238:	0151      	lsls	r1, r2, #5
 801023a:	697a      	ldr	r2, [r7, #20]
 801023c:	440a      	add	r2, r1
 801023e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	371c      	adds	r7, #28
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010256:	b480      	push	{r7}
 8010258:	b089      	sub	sp, #36	; 0x24
 801025a:	af00      	add	r7, sp, #0
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	4611      	mov	r1, r2
 8010262:	461a      	mov	r2, r3
 8010264:	460b      	mov	r3, r1
 8010266:	71fb      	strb	r3, [r7, #7]
 8010268:	4613      	mov	r3, r2
 801026a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010274:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010278:	2b00      	cmp	r3, #0
 801027a:	d123      	bne.n	80102c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801027c:	88bb      	ldrh	r3, [r7, #4]
 801027e:	3303      	adds	r3, #3
 8010280:	089b      	lsrs	r3, r3, #2
 8010282:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010284:	2300      	movs	r3, #0
 8010286:	61bb      	str	r3, [r7, #24]
 8010288:	e018      	b.n	80102bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	031a      	lsls	r2, r3, #12
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	4413      	add	r3, r2
 8010292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010296:	461a      	mov	r2, r3
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6013      	str	r3, [r2, #0]
      pSrc++;
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	3301      	adds	r3, #1
 80102a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	3301      	adds	r3, #1
 80102a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	3301      	adds	r3, #1
 80102ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	3301      	adds	r3, #1
 80102b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	3301      	adds	r3, #1
 80102ba:	61bb      	str	r3, [r7, #24]
 80102bc:	69ba      	ldr	r2, [r7, #24]
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d3e2      	bcc.n	801028a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80102c4:	2300      	movs	r3, #0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3724      	adds	r7, #36	; 0x24
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80102d2:	b480      	push	{r7}
 80102d4:	b08b      	sub	sp, #44	; 0x2c
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	60f8      	str	r0, [r7, #12]
 80102da:	60b9      	str	r1, [r7, #8]
 80102dc:	4613      	mov	r3, r2
 80102de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80102e8:	88fb      	ldrh	r3, [r7, #6]
 80102ea:	089b      	lsrs	r3, r3, #2
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80102f0:	88fb      	ldrh	r3, [r7, #6]
 80102f2:	f003 0303 	and.w	r3, r3, #3
 80102f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80102f8:	2300      	movs	r3, #0
 80102fa:	623b      	str	r3, [r7, #32]
 80102fc:	e014      	b.n	8010328 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	601a      	str	r2, [r3, #0]
    pDest++;
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	3301      	adds	r3, #1
 801030e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	3301      	adds	r3, #1
 8010314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	3301      	adds	r3, #1
 801031a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031e:	3301      	adds	r3, #1
 8010320:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010322:	6a3b      	ldr	r3, [r7, #32]
 8010324:	3301      	adds	r3, #1
 8010326:	623b      	str	r3, [r7, #32]
 8010328:	6a3a      	ldr	r2, [r7, #32]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	429a      	cmp	r2, r3
 801032e:	d3e6      	bcc.n	80102fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010330:	8bfb      	ldrh	r3, [r7, #30]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d01e      	beq.n	8010374 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010336:	2300      	movs	r3, #0
 8010338:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010340:	461a      	mov	r2, r3
 8010342:	f107 0310 	add.w	r3, r7, #16
 8010346:	6812      	ldr	r2, [r2, #0]
 8010348:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	6a3b      	ldr	r3, [r7, #32]
 801034e:	b2db      	uxtb	r3, r3
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	fa22 f303 	lsr.w	r3, r2, r3
 8010356:	b2da      	uxtb	r2, r3
 8010358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035a:	701a      	strb	r2, [r3, #0]
      i++;
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	3301      	adds	r3, #1
 8010360:	623b      	str	r3, [r7, #32]
      pDest++;
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	3301      	adds	r3, #1
 8010366:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010368:	8bfb      	ldrh	r3, [r7, #30]
 801036a:	3b01      	subs	r3, #1
 801036c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801036e:	8bfb      	ldrh	r3, [r7, #30]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1ea      	bne.n	801034a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010376:	4618      	mov	r0, r3
 8010378:	372c      	adds	r7, #44	; 0x2c
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr

08010382 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010382:	b480      	push	{r7}
 8010384:	b085      	sub	sp, #20
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	785b      	ldrb	r3, [r3, #1]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d12c      	bne.n	80103f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	015a      	lsls	r2, r3, #5
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4413      	add	r3, r2
 80103a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	db12      	blt.n	80103d6 <USB_EPSetStall+0x54>
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00f      	beq.n	80103d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	015a      	lsls	r2, r3, #5
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	4413      	add	r3, r2
 80103be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	0151      	lsls	r1, r2, #5
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	440a      	add	r2, r1
 80103cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80103d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	015a      	lsls	r2, r3, #5
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	4413      	add	r3, r2
 80103de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	68ba      	ldr	r2, [r7, #8]
 80103e6:	0151      	lsls	r1, r2, #5
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	440a      	add	r2, r1
 80103ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	e02b      	b.n	8010450 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	015a      	lsls	r2, r3, #5
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4413      	add	r3, r2
 8010400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	db12      	blt.n	8010430 <USB_EPSetStall+0xae>
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d00f      	beq.n	8010430 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	015a      	lsls	r2, r3, #5
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	4413      	add	r3, r2
 8010418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	0151      	lsls	r1, r2, #5
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	440a      	add	r2, r1
 8010426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801042a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801042e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	0151      	lsls	r1, r2, #5
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	440a      	add	r2, r1
 8010446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801044a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801044e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010450:	2300      	movs	r3, #0
}
 8010452:	4618      	mov	r0, r3
 8010454:	3714      	adds	r7, #20
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr

0801045e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801045e:	b480      	push	{r7}
 8010460:	b085      	sub	sp, #20
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	785b      	ldrb	r3, [r3, #1]
 8010476:	2b01      	cmp	r3, #1
 8010478:	d128      	bne.n	80104cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	015a      	lsls	r2, r3, #5
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	4413      	add	r3, r2
 8010482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	0151      	lsls	r1, r2, #5
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	440a      	add	r2, r1
 8010490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	78db      	ldrb	r3, [r3, #3]
 801049e:	2b03      	cmp	r3, #3
 80104a0:	d003      	beq.n	80104aa <USB_EPClearStall+0x4c>
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	78db      	ldrb	r3, [r3, #3]
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	d138      	bne.n	801051c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	015a      	lsls	r2, r3, #5
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	4413      	add	r3, r2
 80104b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	0151      	lsls	r1, r2, #5
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	440a      	add	r2, r1
 80104c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	e027      	b.n	801051c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	015a      	lsls	r2, r3, #5
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4413      	add	r3, r2
 80104d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	0151      	lsls	r1, r2, #5
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	440a      	add	r2, r1
 80104e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80104ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	78db      	ldrb	r3, [r3, #3]
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d003      	beq.n	80104fc <USB_EPClearStall+0x9e>
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	78db      	ldrb	r3, [r3, #3]
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d10f      	bne.n	801051c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	015a      	lsls	r2, r3, #5
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	4413      	add	r3, r2
 8010504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	0151      	lsls	r1, r2, #5
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	440a      	add	r2, r1
 8010512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801051a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	460b      	mov	r3, r1
 8010534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010548:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801054c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	78fb      	ldrb	r3, [r7, #3]
 8010558:	011b      	lsls	r3, r3, #4
 801055a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801055e:	68f9      	ldr	r1, [r7, #12]
 8010560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010564:	4313      	orrs	r3, r2
 8010566:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3714      	adds	r7, #20
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr

08010576 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010576:	b480      	push	{r7}
 8010578:	b085      	sub	sp, #20
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010590:	f023 0303 	bic.w	r3, r3, #3
 8010594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105a4:	f023 0302 	bic.w	r3, r3, #2
 80105a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105aa:	2300      	movs	r3, #0
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b085      	sub	sp, #20
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80105d2:	f023 0303 	bic.w	r3, r3, #3
 80105d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80105e6:	f043 0302 	orr.w	r3, r3, #2
 80105ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	4013      	ands	r3, r2
 8010610:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010612:	68fb      	ldr	r3, [r7, #12]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801063c:	69db      	ldr	r3, [r3, #28]
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	4013      	ands	r3, r2
 8010642:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	0c1b      	lsrs	r3, r3, #16
}
 8010648:	4618      	mov	r0, r3
 801064a:	3714      	adds	r7, #20
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010666:	699b      	ldr	r3, [r3, #24]
 8010668:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010670:	69db      	ldr	r3, [r3, #28]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	4013      	ands	r3, r2
 8010676:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	b29b      	uxth	r3, r3
}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010698:	78fb      	ldrb	r3, [r7, #3]
 801069a:	015a      	lsls	r2, r3, #5
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4413      	add	r3, r2
 80106a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ae:	695b      	ldr	r3, [r3, #20]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	4013      	ands	r3, r2
 80106b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80106b6:	68bb      	ldr	r3, [r7, #8]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3714      	adds	r7, #20
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b087      	sub	sp, #28
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80106e8:	78fb      	ldrb	r3, [r7, #3]
 80106ea:	f003 030f 	and.w	r3, r3, #15
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	fa22 f303 	lsr.w	r3, r2, r3
 80106f4:	01db      	lsls	r3, r3, #7
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80106fe:	78fb      	ldrb	r3, [r7, #3]
 8010700:	015a      	lsls	r2, r3, #5
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	4413      	add	r3, r2
 8010706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801070a:	689b      	ldr	r3, [r3, #8]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	4013      	ands	r3, r2
 8010710:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010712:	68bb      	ldr	r3, [r7, #8]
}
 8010714:	4618      	mov	r0, r3
 8010716:	371c      	adds	r7, #28
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	695b      	ldr	r3, [r3, #20]
 801072c:	f003 0301 	and.w	r3, r3, #1
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010756:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801075a:	f023 0307 	bic.w	r3, r3, #7
 801075e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3714      	adds	r7, #20
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr
	...

08010784 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010784:	b480      	push	{r7}
 8010786:	b087      	sub	sp, #28
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	460b      	mov	r3, r1
 801078e:	607a      	str	r2, [r7, #4]
 8010790:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	333c      	adds	r3, #60	; 0x3c
 801079a:	3304      	adds	r3, #4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	4a26      	ldr	r2, [pc, #152]	; (801083c <USB_EP0_OutStart+0xb8>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d90a      	bls.n	80107be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107b8:	d101      	bne.n	80107be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80107ba:	2300      	movs	r3, #0
 80107bc:	e037      	b.n	801082e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c4:	461a      	mov	r2, r3
 80107c6:	2300      	movs	r3, #0
 80107c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	697a      	ldr	r2, [r7, #20]
 80107e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ec:	f043 0318 	orr.w	r3, r3, #24
 80107f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f8:	691b      	ldr	r3, [r3, #16]
 80107fa:	697a      	ldr	r2, [r7, #20]
 80107fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010800:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010804:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010806:	7afb      	ldrb	r3, [r7, #11]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d10f      	bne.n	801082c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010812:	461a      	mov	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	697a      	ldr	r2, [r7, #20]
 8010822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010826:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801082a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	371c      	adds	r7, #28
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	4f54300a 	.word	0x4f54300a

08010840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010848:	2300      	movs	r3, #0
 801084a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	3301      	adds	r3, #1
 8010850:	60fb      	str	r3, [r7, #12]
 8010852:	4a13      	ldr	r2, [pc, #76]	; (80108a0 <USB_CoreReset+0x60>)
 8010854:	4293      	cmp	r3, r2
 8010856:	d901      	bls.n	801085c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010858:	2303      	movs	r3, #3
 801085a:	e01a      	b.n	8010892 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	daf3      	bge.n	801084c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010864:	2300      	movs	r3, #0
 8010866:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	691b      	ldr	r3, [r3, #16]
 801086c:	f043 0201 	orr.w	r2, r3, #1
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	3301      	adds	r3, #1
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	4a09      	ldr	r2, [pc, #36]	; (80108a0 <USB_CoreReset+0x60>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d901      	bls.n	8010884 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010880:	2303      	movs	r3, #3
 8010882:	e006      	b.n	8010892 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	f003 0301 	and.w	r3, r3, #1
 801088c:	2b01      	cmp	r3, #1
 801088e:	d0f1      	beq.n	8010874 <USB_CoreReset+0x34>

  return HAL_OK;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	00030d40 	.word	0x00030d40

080108a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80108b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80108b4:	f002 fa08 	bl	8012cc8 <USBD_static_malloc>
 80108b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d105      	bne.n	80108cc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80108c8:	2302      	movs	r3, #2
 80108ca:	e066      	b.n	801099a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7c1b      	ldrb	r3, [r3, #16]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d119      	bne.n	8010910 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80108dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108e0:	2202      	movs	r2, #2
 80108e2:	2181      	movs	r1, #129	; 0x81
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f002 f87e 	bl	80129e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2201      	movs	r2, #1
 80108ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80108f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108f4:	2202      	movs	r2, #2
 80108f6:	2101      	movs	r1, #1
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f002 f874 	bl	80129e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2201      	movs	r2, #1
 8010902:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2210      	movs	r2, #16
 801090a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801090e:	e016      	b.n	801093e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010910:	2340      	movs	r3, #64	; 0x40
 8010912:	2202      	movs	r2, #2
 8010914:	2181      	movs	r1, #129	; 0x81
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f002 f865 	bl	80129e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010922:	2340      	movs	r3, #64	; 0x40
 8010924:	2202      	movs	r2, #2
 8010926:	2101      	movs	r1, #1
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f002 f85c 	bl	80129e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2210      	movs	r2, #16
 801093a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801093e:	2308      	movs	r3, #8
 8010940:	2203      	movs	r2, #3
 8010942:	2182      	movs	r1, #130	; 0x82
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f002 f84e 	bl	80129e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2201      	movs	r2, #1
 801094e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2200      	movs	r2, #0
 8010960:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2200      	movs	r2, #0
 8010968:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	7c1b      	ldrb	r3, [r3, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801097e:	2101      	movs	r1, #1
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f002 f91f 	bl	8012bc4 <USBD_LL_PrepareReceive>
 8010986:	e007      	b.n	8010998 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801098e:	2340      	movs	r3, #64	; 0x40
 8010990:	2101      	movs	r1, #1
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f002 f916 	bl	8012bc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3710      	adds	r7, #16
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
 80109aa:	460b      	mov	r3, r1
 80109ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80109ae:	2181      	movs	r1, #129	; 0x81
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f002 f83e 	bl	8012a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80109bc:	2101      	movs	r1, #1
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f002 f837 	bl	8012a32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80109cc:	2182      	movs	r1, #130	; 0x82
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f002 f82f 	bl	8012a32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00e      	beq.n	8010a0c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109fe:	4618      	mov	r0, r3
 8010a00:	f002 f970 	bl	8012ce4 <USBD_static_free>
    pdev->pClassData = NULL;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
	...

08010a18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a32:	2300      	movs	r3, #0
 8010a34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010a3c:	2303      	movs	r3, #3
 8010a3e:	e0af      	b.n	8010ba0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d03f      	beq.n	8010acc <USBD_CDC_Setup+0xb4>
 8010a4c:	2b20      	cmp	r3, #32
 8010a4e:	f040 809f 	bne.w	8010b90 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	88db      	ldrh	r3, [r3, #6]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d02e      	beq.n	8010ab8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	b25b      	sxtb	r3, r3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	da16      	bge.n	8010a92 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010a70:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a72:	683a      	ldr	r2, [r7, #0]
 8010a74:	88d2      	ldrh	r2, [r2, #6]
 8010a76:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	88db      	ldrh	r3, [r3, #6]
 8010a7c:	2b07      	cmp	r3, #7
 8010a7e:	bf28      	it	cs
 8010a80:	2307      	movcs	r3, #7
 8010a82:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	89fa      	ldrh	r2, [r7, #14]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f001 fb43 	bl	8012116 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010a90:	e085      	b.n	8010b9e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	785a      	ldrb	r2, [r3, #1]
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	88db      	ldrh	r3, [r3, #6]
 8010aa0:	b2da      	uxtb	r2, r3
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010aa8:	6939      	ldr	r1, [r7, #16]
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	88db      	ldrh	r3, [r3, #6]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f001 fb5c 	bl	801216e <USBD_CtlPrepareRx>
      break;
 8010ab6:	e072      	b.n	8010b9e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010abe:	689b      	ldr	r3, [r3, #8]
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	7850      	ldrb	r0, [r2, #1]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	6839      	ldr	r1, [r7, #0]
 8010ac8:	4798      	blx	r3
      break;
 8010aca:	e068      	b.n	8010b9e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	785b      	ldrb	r3, [r3, #1]
 8010ad0:	2b0b      	cmp	r3, #11
 8010ad2:	d852      	bhi.n	8010b7a <USBD_CDC_Setup+0x162>
 8010ad4:	a201      	add	r2, pc, #4	; (adr r2, 8010adc <USBD_CDC_Setup+0xc4>)
 8010ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ada:	bf00      	nop
 8010adc:	08010b0d 	.word	0x08010b0d
 8010ae0:	08010b89 	.word	0x08010b89
 8010ae4:	08010b7b 	.word	0x08010b7b
 8010ae8:	08010b7b 	.word	0x08010b7b
 8010aec:	08010b7b 	.word	0x08010b7b
 8010af0:	08010b7b 	.word	0x08010b7b
 8010af4:	08010b7b 	.word	0x08010b7b
 8010af8:	08010b7b 	.word	0x08010b7b
 8010afc:	08010b7b 	.word	0x08010b7b
 8010b00:	08010b7b 	.word	0x08010b7b
 8010b04:	08010b37 	.word	0x08010b37
 8010b08:	08010b61 	.word	0x08010b61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d107      	bne.n	8010b28 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010b18:	f107 030a 	add.w	r3, r7, #10
 8010b1c:	2202      	movs	r2, #2
 8010b1e:	4619      	mov	r1, r3
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f001 faf8 	bl	8012116 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b26:	e032      	b.n	8010b8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f001 fa82 	bl	8012034 <USBD_CtlError>
            ret = USBD_FAIL;
 8010b30:	2303      	movs	r3, #3
 8010b32:	75fb      	strb	r3, [r7, #23]
          break;
 8010b34:	e02b      	b.n	8010b8e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b03      	cmp	r3, #3
 8010b40:	d107      	bne.n	8010b52 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010b42:	f107 030d 	add.w	r3, r7, #13
 8010b46:	2201      	movs	r2, #1
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f001 fae3 	bl	8012116 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b50:	e01d      	b.n	8010b8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010b52:	6839      	ldr	r1, [r7, #0]
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f001 fa6d 	bl	8012034 <USBD_CtlError>
            ret = USBD_FAIL;
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8010b5e:	e016      	b.n	8010b8e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d00f      	beq.n	8010b8c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8010b6c:	6839      	ldr	r1, [r7, #0]
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f001 fa60 	bl	8012034 <USBD_CtlError>
            ret = USBD_FAIL;
 8010b74:	2303      	movs	r3, #3
 8010b76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010b78:	e008      	b.n	8010b8c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010b7a:	6839      	ldr	r1, [r7, #0]
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f001 fa59 	bl	8012034 <USBD_CtlError>
          ret = USBD_FAIL;
 8010b82:	2303      	movs	r3, #3
 8010b84:	75fb      	strb	r3, [r7, #23]
          break;
 8010b86:	e002      	b.n	8010b8e <USBD_CDC_Setup+0x176>
          break;
 8010b88:	bf00      	nop
 8010b8a:	e008      	b.n	8010b9e <USBD_CDC_Setup+0x186>
          break;
 8010b8c:	bf00      	nop
      }
      break;
 8010b8e:	e006      	b.n	8010b9e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010b90:	6839      	ldr	r1, [r7, #0]
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f001 fa4e 	bl	8012034 <USBD_CtlError>
      ret = USBD_FAIL;
 8010b98:	2303      	movs	r3, #3
 8010b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8010b9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3718      	adds	r7, #24
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010bc6:	2303      	movs	r3, #3
 8010bc8:	e04f      	b.n	8010c6a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	6879      	ldr	r1, [r7, #4]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	4413      	add	r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	440b      	add	r3, r1
 8010be0:	3318      	adds	r3, #24
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d029      	beq.n	8010c3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010be8:	78fa      	ldrb	r2, [r7, #3]
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	4613      	mov	r3, r2
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	4413      	add	r3, r2
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	440b      	add	r3, r1
 8010bf6:	3318      	adds	r3, #24
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	78f9      	ldrb	r1, [r7, #3]
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	1a5b      	subs	r3, r3, r1
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4403      	add	r3, r0
 8010c08:	3344      	adds	r3, #68	; 0x44
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010c10:	fb03 f301 	mul.w	r3, r3, r1
 8010c14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d110      	bne.n	8010c3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010c1a:	78fa      	ldrb	r2, [r7, #3]
 8010c1c:	6879      	ldr	r1, [r7, #4]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	4413      	add	r3, r2
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	440b      	add	r3, r1
 8010c28:	3318      	adds	r3, #24
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010c2e:	78f9      	ldrb	r1, [r7, #3]
 8010c30:	2300      	movs	r3, #0
 8010c32:	2200      	movs	r2, #0
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f001 ffa4 	bl	8012b82 <USBD_LL_Transmit>
 8010c3a:	e015      	b.n	8010c68 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c56:	691b      	ldr	r3, [r3, #16]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010c64:	78fa      	ldrb	r2, [r7, #3]
 8010c66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b084      	sub	sp, #16
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d101      	bne.n	8010c94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010c90:	2303      	movs	r3, #3
 8010c92:	e015      	b.n	8010cc0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010c94:	78fb      	ldrb	r3, [r7, #3]
 8010c96:	4619      	mov	r1, r3
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f001 ffb4 	bl	8012c06 <USBD_LL_GetRxDataSize>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010cba:	4611      	mov	r1, r2
 8010cbc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010cbe:	2300      	movs	r3, #0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3710      	adds	r7, #16
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010cde:	2303      	movs	r3, #3
 8010ce0:	e01b      	b.n	8010d1a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d015      	beq.n	8010d18 <USBD_CDC_EP0_RxReady+0x50>
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010cf2:	2bff      	cmp	r3, #255	; 0xff
 8010cf4:	d010      	beq.n	8010d18 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cfc:	689b      	ldr	r3, [r3, #8]
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010d04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010d06:	68fa      	ldr	r2, [r7, #12]
 8010d08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010d0c:	b292      	uxth	r2, r2
 8010d0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	22ff      	movs	r2, #255	; 0xff
 8010d14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010d18:	2300      	movs	r3, #0
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
	...

08010d24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b083      	sub	sp, #12
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2243      	movs	r2, #67	; 0x43
 8010d30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010d32:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	20000094 	.word	0x20000094

08010d44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2243      	movs	r2, #67	; 0x43
 8010d50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010d52:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	20000050 	.word	0x20000050

08010d64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2243      	movs	r2, #67	; 0x43
 8010d70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010d72:	4b03      	ldr	r3, [pc, #12]	; (8010d80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr
 8010d80:	200000d8 	.word	0x200000d8

08010d84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	220a      	movs	r2, #10
 8010d90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010d92:	4b03      	ldr	r3, [pc, #12]	; (8010da0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr
 8010da0:	2000000c 	.word	0x2000000c

08010da4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d101      	bne.n	8010db8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010db4:	2303      	movs	r3, #3
 8010db6:	e004      	b.n	8010dc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b087      	sub	sp, #28
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	60b9      	str	r1, [r7, #8]
 8010dd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010de0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d101      	bne.n	8010dec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010de8:	2303      	movs	r3, #3
 8010dea:	e008      	b.n	8010dfe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010dfc:	2300      	movs	r3, #0
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	371c      	adds	r7, #28
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr

08010e0a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010e0a:	b480      	push	{r7}
 8010e0c:	b085      	sub	sp, #20
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d101      	bne.n	8010e26 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010e22:	2303      	movs	r3, #3
 8010e24:	e004      	b.n	8010e30 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010e2e:	2300      	movs	r3, #0
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d101      	bne.n	8010e5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e01a      	b.n	8010e94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d114      	bne.n	8010e92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010e86:	2181      	movs	r1, #129	; 0x81
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f001 fe7a 	bl	8012b82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3710      	adds	r7, #16
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d101      	bne.n	8010eba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e016      	b.n	8010ee8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	7c1b      	ldrb	r3, [r3, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d109      	bne.n	8010ed6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ecc:	2101      	movs	r1, #1
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f001 fe78 	bl	8012bc4 <USBD_LL_PrepareReceive>
 8010ed4:	e007      	b.n	8010ee6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010edc:	2340      	movs	r3, #64	; 0x40
 8010ede:	2101      	movs	r1, #1
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f001 fe6f 	bl	8012bc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3710      	adds	r7, #16
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	4613      	mov	r3, r2
 8010efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d101      	bne.n	8010f08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010f04:	2303      	movs	r3, #3
 8010f06:	e01f      	b.n	8010f48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d003      	beq.n	8010f2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	79fa      	ldrb	r2, [r7, #7]
 8010f3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f001 fceb 	bl	8012918 <USBD_LL_Init>
 8010f42:	4603      	mov	r3, r0
 8010f44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3718      	adds	r7, #24
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d101      	bne.n	8010f68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010f64:	2303      	movs	r3, #3
 8010f66:	e016      	b.n	8010f96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00b      	beq.n	8010f94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f84:	f107 020e 	add.w	r2, r7, #14
 8010f88:	4610      	mov	r0, r2
 8010f8a:	4798      	blx	r3
 8010f8c:	4602      	mov	r2, r0
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010f94:	2300      	movs	r3, #0
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f001 fd02 	bl	80129b0 <USBD_LL_Start>
 8010fac:	4603      	mov	r3, r0
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010fb6:	b480      	push	{r7}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr

08010fcc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d009      	beq.n	8010ffa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	78fa      	ldrb	r2, [r7, #3]
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	4798      	blx	r3
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3710      	adds	r7, #16
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	460b      	mov	r3, r1
 801100e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011016:	2b00      	cmp	r3, #0
 8011018:	d007      	beq.n	801102a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	78fa      	ldrb	r2, [r7, #3]
 8011024:	4611      	mov	r1, r2
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	4798      	blx	r3
  }

  return USBD_OK;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	3708      	adds	r7, #8
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	4618      	mov	r0, r3
 8011048:	f000 ffba 	bl	8011fc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801105a:	461a      	mov	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011068:	f003 031f 	and.w	r3, r3, #31
 801106c:	2b02      	cmp	r3, #2
 801106e:	d01a      	beq.n	80110a6 <USBD_LL_SetupStage+0x72>
 8011070:	2b02      	cmp	r3, #2
 8011072:	d822      	bhi.n	80110ba <USBD_LL_SetupStage+0x86>
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <USBD_LL_SetupStage+0x4a>
 8011078:	2b01      	cmp	r3, #1
 801107a:	d00a      	beq.n	8011092 <USBD_LL_SetupStage+0x5e>
 801107c:	e01d      	b.n	80110ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011084:	4619      	mov	r1, r3
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fa62 	bl	8011550 <USBD_StdDevReq>
 801108c:	4603      	mov	r3, r0
 801108e:	73fb      	strb	r3, [r7, #15]
      break;
 8011090:	e020      	b.n	80110d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fac6 	bl	801162c <USBD_StdItfReq>
 80110a0:	4603      	mov	r3, r0
 80110a2:	73fb      	strb	r3, [r7, #15]
      break;
 80110a4:	e016      	b.n	80110d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80110ac:	4619      	mov	r1, r3
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 fb05 	bl	80116be <USBD_StdEPReq>
 80110b4:	4603      	mov	r3, r0
 80110b6:	73fb      	strb	r3, [r7, #15]
      break;
 80110b8:	e00c      	b.n	80110d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80110c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	4619      	mov	r1, r3
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f001 fcd1 	bl	8012a70 <USBD_LL_StallEP>
 80110ce:	4603      	mov	r3, r0
 80110d0:	73fb      	strb	r3, [r7, #15]
      break;
 80110d2:	bf00      	nop
  }

  return ret;
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b086      	sub	sp, #24
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	460b      	mov	r3, r1
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80110ec:	7afb      	ldrb	r3, [r7, #11]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d138      	bne.n	8011164 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80110f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011100:	2b03      	cmp	r3, #3
 8011102:	d14a      	bne.n	801119a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	689a      	ldr	r2, [r3, #8]
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	429a      	cmp	r2, r3
 801110e:	d913      	bls.n	8011138 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	689a      	ldr	r2, [r3, #8]
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	1ad2      	subs	r2, r2, r3
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	68da      	ldr	r2, [r3, #12]
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	4293      	cmp	r3, r2
 8011128:	bf28      	it	cs
 801112a:	4613      	movcs	r3, r2
 801112c:	461a      	mov	r2, r3
 801112e:	6879      	ldr	r1, [r7, #4]
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f001 f839 	bl	80121a8 <USBD_CtlContinueRx>
 8011136:	e030      	b.n	801119a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b03      	cmp	r3, #3
 8011142:	d10b      	bne.n	801115c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d005      	beq.n	801115c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f001 f834 	bl	80121ca <USBD_CtlSendStatus>
 8011162:	e01a      	b.n	801119a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801116a:	b2db      	uxtb	r3, r3
 801116c:	2b03      	cmp	r3, #3
 801116e:	d114      	bne.n	801119a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011176:	699b      	ldr	r3, [r3, #24]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00e      	beq.n	801119a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011182:	699b      	ldr	r3, [r3, #24]
 8011184:	7afa      	ldrb	r2, [r7, #11]
 8011186:	4611      	mov	r1, r2
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	4798      	blx	r3
 801118c:	4603      	mov	r3, r0
 801118e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011190:	7dfb      	ldrb	r3, [r7, #23]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d001      	beq.n	801119a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	e000      	b.n	801119c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3718      	adds	r7, #24
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	460b      	mov	r3, r1
 80111ae:	607a      	str	r2, [r7, #4]
 80111b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80111b2:	7afb      	ldrb	r3, [r7, #11]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d16b      	bne.n	8011290 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	3314      	adds	r3, #20
 80111bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111c4:	2b02      	cmp	r3, #2
 80111c6:	d156      	bne.n	8011276 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	689a      	ldr	r2, [r3, #8]
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d914      	bls.n	80111fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	689a      	ldr	r2, [r3, #8]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	1ad2      	subs	r2, r2, r3
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	461a      	mov	r2, r3
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f000 ffae 	bl	801214c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111f0:	2300      	movs	r3, #0
 80111f2:	2200      	movs	r2, #0
 80111f4:	2100      	movs	r1, #0
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f001 fce4 	bl	8012bc4 <USBD_LL_PrepareReceive>
 80111fc:	e03b      	b.n	8011276 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	68da      	ldr	r2, [r3, #12]
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	429a      	cmp	r2, r3
 8011208:	d11c      	bne.n	8011244 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	685a      	ldr	r2, [r3, #4]
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011212:	429a      	cmp	r2, r3
 8011214:	d316      	bcc.n	8011244 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	685a      	ldr	r2, [r3, #4]
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011220:	429a      	cmp	r2, r3
 8011222:	d20f      	bcs.n	8011244 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011224:	2200      	movs	r2, #0
 8011226:	2100      	movs	r1, #0
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f000 ff8f 	bl	801214c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2200      	movs	r2, #0
 8011232:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011236:	2300      	movs	r3, #0
 8011238:	2200      	movs	r2, #0
 801123a:	2100      	movs	r1, #0
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	f001 fcc1 	bl	8012bc4 <USBD_LL_PrepareReceive>
 8011242:	e018      	b.n	8011276 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801124a:	b2db      	uxtb	r3, r3
 801124c:	2b03      	cmp	r3, #3
 801124e:	d10b      	bne.n	8011268 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011268:	2180      	movs	r1, #128	; 0x80
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f001 fc00 	bl	8012a70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f000 ffbd 	bl	80121f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801127c:	2b01      	cmp	r3, #1
 801127e:	d122      	bne.n	80112c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f7ff fe98 	bl	8010fb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2200      	movs	r2, #0
 801128a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801128e:	e01a      	b.n	80112c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011296:	b2db      	uxtb	r3, r3
 8011298:	2b03      	cmp	r3, #3
 801129a:	d114      	bne.n	80112c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112a2:	695b      	ldr	r3, [r3, #20]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00e      	beq.n	80112c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112ae:	695b      	ldr	r3, [r3, #20]
 80112b0:	7afa      	ldrb	r2, [r7, #11]
 80112b2:	4611      	mov	r1, r2
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	4798      	blx	r3
 80112b8:	4603      	mov	r3, r0
 80112ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80112bc:	7dfb      	ldrb	r3, [r7, #23]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	e000      	b.n	80112c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80112c6:	2300      	movs	r3, #0
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3718      	adds	r7, #24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2201      	movs	r2, #1
 80112dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d101      	bne.n	8011304 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011300:	2303      	movs	r3, #3
 8011302:	e02f      	b.n	8011364 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00f      	beq.n	801132e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d009      	beq.n	801132e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6852      	ldr	r2, [r2, #4]
 8011326:	b2d2      	uxtb	r2, r2
 8011328:	4611      	mov	r1, r2
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801132e:	2340      	movs	r3, #64	; 0x40
 8011330:	2200      	movs	r2, #0
 8011332:	2100      	movs	r1, #0
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f001 fb56 	bl	80129e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2201      	movs	r2, #1
 801133e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2240      	movs	r2, #64	; 0x40
 8011346:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801134a:	2340      	movs	r3, #64	; 0x40
 801134c:	2200      	movs	r2, #0
 801134e:	2180      	movs	r1, #128	; 0x80
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f001 fb48 	bl	80129e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2201      	movs	r2, #1
 801135a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2240      	movs	r2, #64	; 0x40
 8011360:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	78fa      	ldrb	r2, [r7, #3]
 801137c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr

0801138c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801139a:	b2da      	uxtb	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2204      	movs	r2, #4
 80113a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	370c      	adds	r7, #12
 80113b0:	46bd      	mov	sp, r7
 80113b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b6:	4770      	bx	lr

080113b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b04      	cmp	r3, #4
 80113ca:	d106      	bne.n	80113da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	370c      	adds	r7, #12
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80113fa:	2303      	movs	r3, #3
 80113fc:	e012      	b.n	8011424 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011404:	b2db      	uxtb	r3, r3
 8011406:	2b03      	cmp	r3, #3
 8011408:	d10b      	bne.n	8011422 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011410:	69db      	ldr	r3, [r3, #28]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d005      	beq.n	8011422 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801141c:	69db      	ldr	r3, [r3, #28]
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	460b      	mov	r3, r1
 8011436:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011442:	2303      	movs	r3, #3
 8011444:	e014      	b.n	8011470 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b03      	cmp	r3, #3
 8011450:	d10d      	bne.n	801146e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011458:	6a1b      	ldr	r3, [r3, #32]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d007      	beq.n	801146e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	78fa      	ldrb	r2, [r7, #3]
 8011468:	4611      	mov	r1, r2
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	460b      	mov	r3, r1
 8011482:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801148a:	2b00      	cmp	r3, #0
 801148c:	d101      	bne.n	8011492 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801148e:	2303      	movs	r3, #3
 8011490:	e014      	b.n	80114bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011498:	b2db      	uxtb	r3, r3
 801149a:	2b03      	cmp	r3, #3
 801149c:	d10d      	bne.n	80114ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d007      	beq.n	80114ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	4611      	mov	r1, r2
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80114cc:	2300      	movs	r3, #0
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	370c      	adds	r7, #12
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2201      	movs	r2, #1
 80114e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d009      	beq.n	8011508 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	6852      	ldr	r2, [r2, #4]
 8011500:	b2d2      	uxtb	r2, r2
 8011502:	4611      	mov	r1, r2
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	4798      	blx	r3
  }

  return USBD_OK;
 8011508:	2300      	movs	r3, #0
}
 801150a:	4618      	mov	r0, r3
 801150c:	3708      	adds	r7, #8
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011512:	b480      	push	{r7}
 8011514:	b087      	sub	sp, #28
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801151e:	697b      	ldr	r3, [r7, #20]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	3301      	adds	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011530:	8a3b      	ldrh	r3, [r7, #16]
 8011532:	021b      	lsls	r3, r3, #8
 8011534:	b21a      	sxth	r2, r3
 8011536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801153a:	4313      	orrs	r3, r2
 801153c:	b21b      	sxth	r3, r3
 801153e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011540:	89fb      	ldrh	r3, [r7, #14]
}
 8011542:	4618      	mov	r0, r3
 8011544:	371c      	adds	r7, #28
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
	...

08011550 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b084      	sub	sp, #16
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011566:	2b40      	cmp	r3, #64	; 0x40
 8011568:	d005      	beq.n	8011576 <USBD_StdDevReq+0x26>
 801156a:	2b40      	cmp	r3, #64	; 0x40
 801156c:	d853      	bhi.n	8011616 <USBD_StdDevReq+0xc6>
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00b      	beq.n	801158a <USBD_StdDevReq+0x3a>
 8011572:	2b20      	cmp	r3, #32
 8011574:	d14f      	bne.n	8011616 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801157c:	689b      	ldr	r3, [r3, #8]
 801157e:	6839      	ldr	r1, [r7, #0]
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	4798      	blx	r3
 8011584:	4603      	mov	r3, r0
 8011586:	73fb      	strb	r3, [r7, #15]
      break;
 8011588:	e04a      	b.n	8011620 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	785b      	ldrb	r3, [r3, #1]
 801158e:	2b09      	cmp	r3, #9
 8011590:	d83b      	bhi.n	801160a <USBD_StdDevReq+0xba>
 8011592:	a201      	add	r2, pc, #4	; (adr r2, 8011598 <USBD_StdDevReq+0x48>)
 8011594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011598:	080115ed 	.word	0x080115ed
 801159c:	08011601 	.word	0x08011601
 80115a0:	0801160b 	.word	0x0801160b
 80115a4:	080115f7 	.word	0x080115f7
 80115a8:	0801160b 	.word	0x0801160b
 80115ac:	080115cb 	.word	0x080115cb
 80115b0:	080115c1 	.word	0x080115c1
 80115b4:	0801160b 	.word	0x0801160b
 80115b8:	080115e3 	.word	0x080115e3
 80115bc:	080115d5 	.word	0x080115d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 f9de 	bl	8011984 <USBD_GetDescriptor>
          break;
 80115c8:	e024      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80115ca:	6839      	ldr	r1, [r7, #0]
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f000 fb6d 	bl	8011cac <USBD_SetAddress>
          break;
 80115d2:	e01f      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 fbac 	bl	8011d34 <USBD_SetConfig>
 80115dc:	4603      	mov	r3, r0
 80115de:	73fb      	strb	r3, [r7, #15]
          break;
 80115e0:	e018      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80115e2:	6839      	ldr	r1, [r7, #0]
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 fc4b 	bl	8011e80 <USBD_GetConfig>
          break;
 80115ea:	e013      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80115ec:	6839      	ldr	r1, [r7, #0]
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 fc7c 	bl	8011eec <USBD_GetStatus>
          break;
 80115f4:	e00e      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80115f6:	6839      	ldr	r1, [r7, #0]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 fcab 	bl	8011f54 <USBD_SetFeature>
          break;
 80115fe:	e009      	b.n	8011614 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fcba 	bl	8011f7c <USBD_ClrFeature>
          break;
 8011608:	e004      	b.n	8011614 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 fd11 	bl	8012034 <USBD_CtlError>
          break;
 8011612:	bf00      	nop
      }
      break;
 8011614:	e004      	b.n	8011620 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011616:	6839      	ldr	r1, [r7, #0]
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 fd0b 	bl	8012034 <USBD_CtlError>
      break;
 801161e:	bf00      	nop
  }

  return ret;
 8011620:	7bfb      	ldrb	r3, [r7, #15]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop

0801162c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011642:	2b40      	cmp	r3, #64	; 0x40
 8011644:	d005      	beq.n	8011652 <USBD_StdItfReq+0x26>
 8011646:	2b40      	cmp	r3, #64	; 0x40
 8011648:	d82f      	bhi.n	80116aa <USBD_StdItfReq+0x7e>
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <USBD_StdItfReq+0x26>
 801164e:	2b20      	cmp	r3, #32
 8011650:	d12b      	bne.n	80116aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011658:	b2db      	uxtb	r3, r3
 801165a:	3b01      	subs	r3, #1
 801165c:	2b02      	cmp	r3, #2
 801165e:	d81d      	bhi.n	801169c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	889b      	ldrh	r3, [r3, #4]
 8011664:	b2db      	uxtb	r3, r3
 8011666:	2b01      	cmp	r3, #1
 8011668:	d813      	bhi.n	8011692 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	6839      	ldr	r1, [r7, #0]
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	4798      	blx	r3
 8011678:	4603      	mov	r3, r0
 801167a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	88db      	ldrh	r3, [r3, #6]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d110      	bne.n	80116a6 <USBD_StdItfReq+0x7a>
 8011684:	7bfb      	ldrb	r3, [r7, #15]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d10d      	bne.n	80116a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f000 fd9d 	bl	80121ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011690:	e009      	b.n	80116a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 fccd 	bl	8012034 <USBD_CtlError>
          break;
 801169a:	e004      	b.n	80116a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801169c:	6839      	ldr	r1, [r7, #0]
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 fcc8 	bl	8012034 <USBD_CtlError>
          break;
 80116a4:	e000      	b.n	80116a8 <USBD_StdItfReq+0x7c>
          break;
 80116a6:	bf00      	nop
      }
      break;
 80116a8:	e004      	b.n	80116b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80116aa:	6839      	ldr	r1, [r7, #0]
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 fcc1 	bl	8012034 <USBD_CtlError>
      break;
 80116b2:	bf00      	nop
  }

  return ret;
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b084      	sub	sp, #16
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80116c8:	2300      	movs	r3, #0
 80116ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	889b      	ldrh	r3, [r3, #4]
 80116d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116da:	2b40      	cmp	r3, #64	; 0x40
 80116dc:	d007      	beq.n	80116ee <USBD_StdEPReq+0x30>
 80116de:	2b40      	cmp	r3, #64	; 0x40
 80116e0:	f200 8145 	bhi.w	801196e <USBD_StdEPReq+0x2b0>
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00c      	beq.n	8011702 <USBD_StdEPReq+0x44>
 80116e8:	2b20      	cmp	r3, #32
 80116ea:	f040 8140 	bne.w	801196e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116f4:	689b      	ldr	r3, [r3, #8]
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	4798      	blx	r3
 80116fc:	4603      	mov	r3, r0
 80116fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011700:	e13a      	b.n	8011978 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	785b      	ldrb	r3, [r3, #1]
 8011706:	2b03      	cmp	r3, #3
 8011708:	d007      	beq.n	801171a <USBD_StdEPReq+0x5c>
 801170a:	2b03      	cmp	r3, #3
 801170c:	f300 8129 	bgt.w	8011962 <USBD_StdEPReq+0x2a4>
 8011710:	2b00      	cmp	r3, #0
 8011712:	d07f      	beq.n	8011814 <USBD_StdEPReq+0x156>
 8011714:	2b01      	cmp	r3, #1
 8011716:	d03c      	beq.n	8011792 <USBD_StdEPReq+0xd4>
 8011718:	e123      	b.n	8011962 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b02      	cmp	r3, #2
 8011724:	d002      	beq.n	801172c <USBD_StdEPReq+0x6e>
 8011726:	2b03      	cmp	r3, #3
 8011728:	d016      	beq.n	8011758 <USBD_StdEPReq+0x9a>
 801172a:	e02c      	b.n	8011786 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801172c:	7bbb      	ldrb	r3, [r7, #14]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00d      	beq.n	801174e <USBD_StdEPReq+0x90>
 8011732:	7bbb      	ldrb	r3, [r7, #14]
 8011734:	2b80      	cmp	r3, #128	; 0x80
 8011736:	d00a      	beq.n	801174e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011738:	7bbb      	ldrb	r3, [r7, #14]
 801173a:	4619      	mov	r1, r3
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f001 f997 	bl	8012a70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011742:	2180      	movs	r1, #128	; 0x80
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f001 f993 	bl	8012a70 <USBD_LL_StallEP>
 801174a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801174c:	e020      	b.n	8011790 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801174e:	6839      	ldr	r1, [r7, #0]
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f000 fc6f 	bl	8012034 <USBD_CtlError>
              break;
 8011756:	e01b      	b.n	8011790 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	885b      	ldrh	r3, [r3, #2]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d10e      	bne.n	801177e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011760:	7bbb      	ldrb	r3, [r7, #14]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00b      	beq.n	801177e <USBD_StdEPReq+0xc0>
 8011766:	7bbb      	ldrb	r3, [r7, #14]
 8011768:	2b80      	cmp	r3, #128	; 0x80
 801176a:	d008      	beq.n	801177e <USBD_StdEPReq+0xc0>
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	88db      	ldrh	r3, [r3, #6]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d104      	bne.n	801177e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011774:	7bbb      	ldrb	r3, [r7, #14]
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f001 f979 	bl	8012a70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 fd23 	bl	80121ca <USBD_CtlSendStatus>

              break;
 8011784:	e004      	b.n	8011790 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 fc53 	bl	8012034 <USBD_CtlError>
              break;
 801178e:	bf00      	nop
          }
          break;
 8011790:	e0ec      	b.n	801196c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011798:	b2db      	uxtb	r3, r3
 801179a:	2b02      	cmp	r3, #2
 801179c:	d002      	beq.n	80117a4 <USBD_StdEPReq+0xe6>
 801179e:	2b03      	cmp	r3, #3
 80117a0:	d016      	beq.n	80117d0 <USBD_StdEPReq+0x112>
 80117a2:	e030      	b.n	8011806 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117a4:	7bbb      	ldrb	r3, [r7, #14]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00d      	beq.n	80117c6 <USBD_StdEPReq+0x108>
 80117aa:	7bbb      	ldrb	r3, [r7, #14]
 80117ac:	2b80      	cmp	r3, #128	; 0x80
 80117ae:	d00a      	beq.n	80117c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80117b0:	7bbb      	ldrb	r3, [r7, #14]
 80117b2:	4619      	mov	r1, r3
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f001 f95b 	bl	8012a70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80117ba:	2180      	movs	r1, #128	; 0x80
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f001 f957 	bl	8012a70 <USBD_LL_StallEP>
 80117c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80117c4:	e025      	b.n	8011812 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 fc33 	bl	8012034 <USBD_CtlError>
              break;
 80117ce:	e020      	b.n	8011812 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	885b      	ldrh	r3, [r3, #2]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d11b      	bne.n	8011810 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80117d8:	7bbb      	ldrb	r3, [r7, #14]
 80117da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d004      	beq.n	80117ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80117e2:	7bbb      	ldrb	r3, [r7, #14]
 80117e4:	4619      	mov	r1, r3
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f001 f961 	bl	8012aae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f000 fcec 	bl	80121ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	6839      	ldr	r1, [r7, #0]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	4798      	blx	r3
 8011800:	4603      	mov	r3, r0
 8011802:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011804:	e004      	b.n	8011810 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011806:	6839      	ldr	r1, [r7, #0]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f000 fc13 	bl	8012034 <USBD_CtlError>
              break;
 801180e:	e000      	b.n	8011812 <USBD_StdEPReq+0x154>
              break;
 8011810:	bf00      	nop
          }
          break;
 8011812:	e0ab      	b.n	801196c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801181a:	b2db      	uxtb	r3, r3
 801181c:	2b02      	cmp	r3, #2
 801181e:	d002      	beq.n	8011826 <USBD_StdEPReq+0x168>
 8011820:	2b03      	cmp	r3, #3
 8011822:	d032      	beq.n	801188a <USBD_StdEPReq+0x1cc>
 8011824:	e097      	b.n	8011956 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011826:	7bbb      	ldrb	r3, [r7, #14]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d007      	beq.n	801183c <USBD_StdEPReq+0x17e>
 801182c:	7bbb      	ldrb	r3, [r7, #14]
 801182e:	2b80      	cmp	r3, #128	; 0x80
 8011830:	d004      	beq.n	801183c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 fbfd 	bl	8012034 <USBD_CtlError>
                break;
 801183a:	e091      	b.n	8011960 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801183c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011840:	2b00      	cmp	r3, #0
 8011842:	da0b      	bge.n	801185c <USBD_StdEPReq+0x19e>
 8011844:	7bbb      	ldrb	r3, [r7, #14]
 8011846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801184a:	4613      	mov	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	3310      	adds	r3, #16
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	4413      	add	r3, r2
 8011858:	3304      	adds	r3, #4
 801185a:	e00b      	b.n	8011874 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801185c:	7bbb      	ldrb	r3, [r7, #14]
 801185e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011862:	4613      	mov	r3, r2
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	4413      	add	r3, r2
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	4413      	add	r3, r2
 8011872:	3304      	adds	r3, #4
 8011874:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	2200      	movs	r2, #0
 801187a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	2202      	movs	r2, #2
 8011880:	4619      	mov	r1, r3
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 fc47 	bl	8012116 <USBD_CtlSendData>
              break;
 8011888:	e06a      	b.n	8011960 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801188a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801188e:	2b00      	cmp	r3, #0
 8011890:	da11      	bge.n	80118b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011892:	7bbb      	ldrb	r3, [r7, #14]
 8011894:	f003 020f 	and.w	r2, r3, #15
 8011898:	6879      	ldr	r1, [r7, #4]
 801189a:	4613      	mov	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	440b      	add	r3, r1
 80118a4:	3324      	adds	r3, #36	; 0x24
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d117      	bne.n	80118dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fbc0 	bl	8012034 <USBD_CtlError>
                  break;
 80118b4:	e054      	b.n	8011960 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80118b6:	7bbb      	ldrb	r3, [r7, #14]
 80118b8:	f003 020f 	and.w	r2, r3, #15
 80118bc:	6879      	ldr	r1, [r7, #4]
 80118be:	4613      	mov	r3, r2
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	4413      	add	r3, r2
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	440b      	add	r3, r1
 80118c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d104      	bne.n	80118dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f000 fbad 	bl	8012034 <USBD_CtlError>
                  break;
 80118da:	e041      	b.n	8011960 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80118dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	da0b      	bge.n	80118fc <USBD_StdEPReq+0x23e>
 80118e4:	7bbb      	ldrb	r3, [r7, #14]
 80118e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118ea:	4613      	mov	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	3310      	adds	r3, #16
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	4413      	add	r3, r2
 80118f8:	3304      	adds	r3, #4
 80118fa:	e00b      	b.n	8011914 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80118fc:	7bbb      	ldrb	r3, [r7, #14]
 80118fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011902:	4613      	mov	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	4413      	add	r3, r2
 8011912:	3304      	adds	r3, #4
 8011914:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011916:	7bbb      	ldrb	r3, [r7, #14]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <USBD_StdEPReq+0x264>
 801191c:	7bbb      	ldrb	r3, [r7, #14]
 801191e:	2b80      	cmp	r3, #128	; 0x80
 8011920:	d103      	bne.n	801192a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	e00e      	b.n	8011948 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801192a:	7bbb      	ldrb	r3, [r7, #14]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f001 f8dc 	bl	8012aec <USBD_LL_IsStallEP>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d003      	beq.n	8011942 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2201      	movs	r2, #1
 801193e:	601a      	str	r2, [r3, #0]
 8011940:	e002      	b.n	8011948 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011942:	68bb      	ldr	r3, [r7, #8]
 8011944:	2200      	movs	r2, #0
 8011946:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	2202      	movs	r2, #2
 801194c:	4619      	mov	r1, r3
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fbe1 	bl	8012116 <USBD_CtlSendData>
              break;
 8011954:	e004      	b.n	8011960 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011956:	6839      	ldr	r1, [r7, #0]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 fb6b 	bl	8012034 <USBD_CtlError>
              break;
 801195e:	bf00      	nop
          }
          break;
 8011960:	e004      	b.n	801196c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011962:	6839      	ldr	r1, [r7, #0]
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f000 fb65 	bl	8012034 <USBD_CtlError>
          break;
 801196a:	bf00      	nop
      }
      break;
 801196c:	e004      	b.n	8011978 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 fb5f 	bl	8012034 <USBD_CtlError>
      break;
 8011976:	bf00      	nop
  }

  return ret;
 8011978:	7bfb      	ldrb	r3, [r7, #15]
}
 801197a:	4618      	mov	r0, r3
 801197c:	3710      	adds	r7, #16
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
	...

08011984 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801198e:	2300      	movs	r3, #0
 8011990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011992:	2300      	movs	r3, #0
 8011994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011996:	2300      	movs	r3, #0
 8011998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	885b      	ldrh	r3, [r3, #2]
 801199e:	0a1b      	lsrs	r3, r3, #8
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	3b01      	subs	r3, #1
 80119a4:	2b0e      	cmp	r3, #14
 80119a6:	f200 8152 	bhi.w	8011c4e <USBD_GetDescriptor+0x2ca>
 80119aa:	a201      	add	r2, pc, #4	; (adr r2, 80119b0 <USBD_GetDescriptor+0x2c>)
 80119ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b0:	08011a21 	.word	0x08011a21
 80119b4:	08011a39 	.word	0x08011a39
 80119b8:	08011a79 	.word	0x08011a79
 80119bc:	08011c4f 	.word	0x08011c4f
 80119c0:	08011c4f 	.word	0x08011c4f
 80119c4:	08011bef 	.word	0x08011bef
 80119c8:	08011c1b 	.word	0x08011c1b
 80119cc:	08011c4f 	.word	0x08011c4f
 80119d0:	08011c4f 	.word	0x08011c4f
 80119d4:	08011c4f 	.word	0x08011c4f
 80119d8:	08011c4f 	.word	0x08011c4f
 80119dc:	08011c4f 	.word	0x08011c4f
 80119e0:	08011c4f 	.word	0x08011c4f
 80119e4:	08011c4f 	.word	0x08011c4f
 80119e8:	080119ed 	.word	0x080119ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119f2:	69db      	ldr	r3, [r3, #28]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00b      	beq.n	8011a10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119fe:	69db      	ldr	r3, [r3, #28]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	7c12      	ldrb	r2, [r2, #16]
 8011a04:	f107 0108 	add.w	r1, r7, #8
 8011a08:	4610      	mov	r0, r2
 8011a0a:	4798      	blx	r3
 8011a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011a0e:	e126      	b.n	8011c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011a10:	6839      	ldr	r1, [r7, #0]
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 fb0e 	bl	8012034 <USBD_CtlError>
        err++;
 8011a18:	7afb      	ldrb	r3, [r7, #11]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8011a1e:	e11e      	b.n	8011c5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	687a      	ldr	r2, [r7, #4]
 8011a2a:	7c12      	ldrb	r2, [r2, #16]
 8011a2c:	f107 0108 	add.w	r1, r7, #8
 8011a30:	4610      	mov	r0, r2
 8011a32:	4798      	blx	r3
 8011a34:	60f8      	str	r0, [r7, #12]
      break;
 8011a36:	e112      	b.n	8011c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7c1b      	ldrb	r3, [r3, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d10d      	bne.n	8011a5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a48:	f107 0208 	add.w	r2, r7, #8
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	4798      	blx	r3
 8011a50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	3301      	adds	r3, #1
 8011a56:	2202      	movs	r2, #2
 8011a58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011a5a:	e100      	b.n	8011c5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a64:	f107 0208 	add.w	r2, r7, #8
 8011a68:	4610      	mov	r0, r2
 8011a6a:	4798      	blx	r3
 8011a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3301      	adds	r3, #1
 8011a72:	2202      	movs	r2, #2
 8011a74:	701a      	strb	r2, [r3, #0]
      break;
 8011a76:	e0f2      	b.n	8011c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	885b      	ldrh	r3, [r3, #2]
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b05      	cmp	r3, #5
 8011a80:	f200 80ac 	bhi.w	8011bdc <USBD_GetDescriptor+0x258>
 8011a84:	a201      	add	r2, pc, #4	; (adr r2, 8011a8c <USBD_GetDescriptor+0x108>)
 8011a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a8a:	bf00      	nop
 8011a8c:	08011aa5 	.word	0x08011aa5
 8011a90:	08011ad9 	.word	0x08011ad9
 8011a94:	08011b0d 	.word	0x08011b0d
 8011a98:	08011b41 	.word	0x08011b41
 8011a9c:	08011b75 	.word	0x08011b75
 8011aa0:	08011ba9 	.word	0x08011ba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d00b      	beq.n	8011ac8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	7c12      	ldrb	r2, [r2, #16]
 8011abc:	f107 0108 	add.w	r1, r7, #8
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	4798      	blx	r3
 8011ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ac6:	e091      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011ac8:	6839      	ldr	r1, [r7, #0]
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 fab2 	bl	8012034 <USBD_CtlError>
            err++;
 8011ad0:	7afb      	ldrb	r3, [r7, #11]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ad6:	e089      	b.n	8011bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d00b      	beq.n	8011afc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	7c12      	ldrb	r2, [r2, #16]
 8011af0:	f107 0108 	add.w	r1, r7, #8
 8011af4:	4610      	mov	r0, r2
 8011af6:	4798      	blx	r3
 8011af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011afa:	e077      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011afc:	6839      	ldr	r1, [r7, #0]
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fa98 	bl	8012034 <USBD_CtlError>
            err++;
 8011b04:	7afb      	ldrb	r3, [r7, #11]
 8011b06:	3301      	adds	r3, #1
 8011b08:	72fb      	strb	r3, [r7, #11]
          break;
 8011b0a:	e06f      	b.n	8011bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d00b      	beq.n	8011b30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	7c12      	ldrb	r2, [r2, #16]
 8011b24:	f107 0108 	add.w	r1, r7, #8
 8011b28:	4610      	mov	r0, r2
 8011b2a:	4798      	blx	r3
 8011b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b2e:	e05d      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fa7e 	bl	8012034 <USBD_CtlError>
            err++;
 8011b38:	7afb      	ldrb	r3, [r7, #11]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8011b3e:	e055      	b.n	8011bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b46:	691b      	ldr	r3, [r3, #16]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d00b      	beq.n	8011b64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	7c12      	ldrb	r2, [r2, #16]
 8011b58:	f107 0108 	add.w	r1, r7, #8
 8011b5c:	4610      	mov	r0, r2
 8011b5e:	4798      	blx	r3
 8011b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b62:	e043      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011b64:	6839      	ldr	r1, [r7, #0]
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fa64 	bl	8012034 <USBD_CtlError>
            err++;
 8011b6c:	7afb      	ldrb	r3, [r7, #11]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	72fb      	strb	r3, [r7, #11]
          break;
 8011b72:	e03b      	b.n	8011bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b7a:	695b      	ldr	r3, [r3, #20]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d00b      	beq.n	8011b98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b86:	695b      	ldr	r3, [r3, #20]
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	7c12      	ldrb	r2, [r2, #16]
 8011b8c:	f107 0108 	add.w	r1, r7, #8
 8011b90:	4610      	mov	r0, r2
 8011b92:	4798      	blx	r3
 8011b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b96:	e029      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 fa4a 	bl	8012034 <USBD_CtlError>
            err++;
 8011ba0:	7afb      	ldrb	r3, [r7, #11]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ba6:	e021      	b.n	8011bec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bae:	699b      	ldr	r3, [r3, #24]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00b      	beq.n	8011bcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bba:	699b      	ldr	r3, [r3, #24]
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	7c12      	ldrb	r2, [r2, #16]
 8011bc0:	f107 0108 	add.w	r1, r7, #8
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	4798      	blx	r3
 8011bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bca:	e00f      	b.n	8011bec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011bcc:	6839      	ldr	r1, [r7, #0]
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 fa30 	bl	8012034 <USBD_CtlError>
            err++;
 8011bd4:	7afb      	ldrb	r3, [r7, #11]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8011bda:	e007      	b.n	8011bec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011bdc:	6839      	ldr	r1, [r7, #0]
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fa28 	bl	8012034 <USBD_CtlError>
          err++;
 8011be4:	7afb      	ldrb	r3, [r7, #11]
 8011be6:	3301      	adds	r3, #1
 8011be8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011bea:	bf00      	nop
      }
      break;
 8011bec:	e037      	b.n	8011c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	7c1b      	ldrb	r3, [r3, #16]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d109      	bne.n	8011c0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bfe:	f107 0208 	add.w	r2, r7, #8
 8011c02:	4610      	mov	r0, r2
 8011c04:	4798      	blx	r3
 8011c06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c08:	e029      	b.n	8011c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011c0a:	6839      	ldr	r1, [r7, #0]
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 fa11 	bl	8012034 <USBD_CtlError>
        err++;
 8011c12:	7afb      	ldrb	r3, [r7, #11]
 8011c14:	3301      	adds	r3, #1
 8011c16:	72fb      	strb	r3, [r7, #11]
      break;
 8011c18:	e021      	b.n	8011c5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7c1b      	ldrb	r3, [r3, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10d      	bne.n	8011c3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c2a:	f107 0208 	add.w	r2, r7, #8
 8011c2e:	4610      	mov	r0, r2
 8011c30:	4798      	blx	r3
 8011c32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	3301      	adds	r3, #1
 8011c38:	2207      	movs	r2, #7
 8011c3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c3c:	e00f      	b.n	8011c5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 f9f7 	bl	8012034 <USBD_CtlError>
        err++;
 8011c46:	7afb      	ldrb	r3, [r7, #11]
 8011c48:	3301      	adds	r3, #1
 8011c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8011c4c:	e007      	b.n	8011c5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 f9ef 	bl	8012034 <USBD_CtlError>
      err++;
 8011c56:	7afb      	ldrb	r3, [r7, #11]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8011c5c:	bf00      	nop
  }

  if (err != 0U)
 8011c5e:	7afb      	ldrb	r3, [r7, #11]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d11e      	bne.n	8011ca2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	88db      	ldrh	r3, [r3, #6]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d016      	beq.n	8011c9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011c6c:	893b      	ldrh	r3, [r7, #8]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00e      	beq.n	8011c90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	88da      	ldrh	r2, [r3, #6]
 8011c76:	893b      	ldrh	r3, [r7, #8]
 8011c78:	4293      	cmp	r3, r2
 8011c7a:	bf28      	it	cs
 8011c7c:	4613      	movcs	r3, r2
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011c82:	893b      	ldrh	r3, [r7, #8]
 8011c84:	461a      	mov	r2, r3
 8011c86:	68f9      	ldr	r1, [r7, #12]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 fa44 	bl	8012116 <USBD_CtlSendData>
 8011c8e:	e009      	b.n	8011ca4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f9ce 	bl	8012034 <USBD_CtlError>
 8011c98:	e004      	b.n	8011ca4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fa95 	bl	80121ca <USBD_CtlSendStatus>
 8011ca0:	e000      	b.n	8011ca4 <USBD_GetDescriptor+0x320>
    return;
 8011ca2:	bf00      	nop
  }
}
 8011ca4:	3710      	adds	r7, #16
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop

08011cac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	889b      	ldrh	r3, [r3, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d131      	bne.n	8011d22 <USBD_SetAddress+0x76>
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	88db      	ldrh	r3, [r3, #6]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d12d      	bne.n	8011d22 <USBD_SetAddress+0x76>
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	2b7f      	cmp	r3, #127	; 0x7f
 8011ccc:	d829      	bhi.n	8011d22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	885b      	ldrh	r3, [r3, #2]
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d104      	bne.n	8011cf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011ce6:	6839      	ldr	r1, [r7, #0]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 f9a3 	bl	8012034 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cee:	e01d      	b.n	8011d2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	7bfa      	ldrb	r2, [r7, #15]
 8011cf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011cf8:	7bfb      	ldrb	r3, [r7, #15]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 ff21 	bl	8012b44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fa61 	bl	80121ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011d08:	7bfb      	ldrb	r3, [r7, #15]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d004      	beq.n	8011d18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2202      	movs	r2, #2
 8011d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d16:	e009      	b.n	8011d2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d20:	e004      	b.n	8011d2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011d22:	6839      	ldr	r1, [r7, #0]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 f985 	bl	8012034 <USBD_CtlError>
  }
}
 8011d2a:	bf00      	nop
 8011d2c:	bf00      	nop
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	885b      	ldrh	r3, [r3, #2]
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	4b4c      	ldr	r3, [pc, #304]	; (8011e7c <USBD_SetConfig+0x148>)
 8011d4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011d4c:	4b4b      	ldr	r3, [pc, #300]	; (8011e7c <USBD_SetConfig+0x148>)
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d905      	bls.n	8011d60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f96c 	bl	8012034 <USBD_CtlError>
    return USBD_FAIL;
 8011d5c:	2303      	movs	r3, #3
 8011d5e:	e088      	b.n	8011e72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d002      	beq.n	8011d72 <USBD_SetConfig+0x3e>
 8011d6c:	2b03      	cmp	r3, #3
 8011d6e:	d025      	beq.n	8011dbc <USBD_SetConfig+0x88>
 8011d70:	e071      	b.n	8011e56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011d72:	4b42      	ldr	r3, [pc, #264]	; (8011e7c <USBD_SetConfig+0x148>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d01c      	beq.n	8011db4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8011d7a:	4b40      	ldr	r3, [pc, #256]	; (8011e7c <USBD_SetConfig+0x148>)
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011d84:	4b3d      	ldr	r3, [pc, #244]	; (8011e7c <USBD_SetConfig+0x148>)
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff f91e 	bl	8010fcc <USBD_SetClassConfig>
 8011d90:	4603      	mov	r3, r0
 8011d92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011d94:	7bfb      	ldrb	r3, [r7, #15]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d004      	beq.n	8011da4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011d9a:	6839      	ldr	r1, [r7, #0]
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 f949 	bl	8012034 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011da2:	e065      	b.n	8011e70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 fa10 	bl	80121ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2203      	movs	r2, #3
 8011dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011db2:	e05d      	b.n	8011e70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fa08 	bl	80121ca <USBD_CtlSendStatus>
      break;
 8011dba:	e059      	b.n	8011e70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011dbc:	4b2f      	ldr	r3, [pc, #188]	; (8011e7c <USBD_SetConfig+0x148>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d112      	bne.n	8011dea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2202      	movs	r2, #2
 8011dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011dcc:	4b2b      	ldr	r3, [pc, #172]	; (8011e7c <USBD_SetConfig+0x148>)
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011dd6:	4b29      	ldr	r3, [pc, #164]	; (8011e7c <USBD_SetConfig+0x148>)
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	4619      	mov	r1, r3
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7ff f911 	bl	8011004 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 f9f1 	bl	80121ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011de8:	e042      	b.n	8011e70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011dea:	4b24      	ldr	r3, [pc, #144]	; (8011e7c <USBD_SetConfig+0x148>)
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d02a      	beq.n	8011e4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	4619      	mov	r1, r3
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7ff f8ff 	bl	8011004 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011e06:	4b1d      	ldr	r3, [pc, #116]	; (8011e7c <USBD_SetConfig+0x148>)
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e10:	4b1a      	ldr	r3, [pc, #104]	; (8011e7c <USBD_SetConfig+0x148>)
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7ff f8d8 	bl	8010fcc <USBD_SetClassConfig>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011e20:	7bfb      	ldrb	r3, [r7, #15]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00f      	beq.n	8011e46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011e26:	6839      	ldr	r1, [r7, #0]
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 f903 	bl	8012034 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	4619      	mov	r1, r3
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f7ff f8e4 	bl	8011004 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2202      	movs	r2, #2
 8011e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011e44:	e014      	b.n	8011e70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f9bf 	bl	80121ca <USBD_CtlSendStatus>
      break;
 8011e4c:	e010      	b.n	8011e70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f9bb 	bl	80121ca <USBD_CtlSendStatus>
      break;
 8011e54:	e00c      	b.n	8011e70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011e56:	6839      	ldr	r1, [r7, #0]
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f000 f8eb 	bl	8012034 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011e5e:	4b07      	ldr	r3, [pc, #28]	; (8011e7c <USBD_SetConfig+0x148>)
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	4619      	mov	r1, r3
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7ff f8cd 	bl	8011004 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8011e6e:	bf00      	nop
  }

  return ret;
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20000aa8 	.word	0x20000aa8

08011e80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	88db      	ldrh	r3, [r3, #6]
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d004      	beq.n	8011e9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011e92:	6839      	ldr	r1, [r7, #0]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 f8cd 	bl	8012034 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011e9a:	e023      	b.n	8011ee4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	2b02      	cmp	r3, #2
 8011ea6:	dc02      	bgt.n	8011eae <USBD_GetConfig+0x2e>
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dc03      	bgt.n	8011eb4 <USBD_GetConfig+0x34>
 8011eac:	e015      	b.n	8011eda <USBD_GetConfig+0x5a>
 8011eae:	2b03      	cmp	r3, #3
 8011eb0:	d00b      	beq.n	8011eca <USBD_GetConfig+0x4a>
 8011eb2:	e012      	b.n	8011eda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	3308      	adds	r3, #8
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f927 	bl	8012116 <USBD_CtlSendData>
        break;
 8011ec8:	e00c      	b.n	8011ee4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	3304      	adds	r3, #4
 8011ece:	2201      	movs	r2, #1
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 f91f 	bl	8012116 <USBD_CtlSendData>
        break;
 8011ed8:	e004      	b.n	8011ee4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011eda:	6839      	ldr	r1, [r7, #0]
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 f8a9 	bl	8012034 <USBD_CtlError>
        break;
 8011ee2:	bf00      	nop
}
 8011ee4:	bf00      	nop
 8011ee6:	3708      	adds	r7, #8
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	3b01      	subs	r3, #1
 8011f00:	2b02      	cmp	r3, #2
 8011f02:	d81e      	bhi.n	8011f42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	88db      	ldrh	r3, [r3, #6]
 8011f08:	2b02      	cmp	r3, #2
 8011f0a:	d004      	beq.n	8011f16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011f0c:	6839      	ldr	r1, [r7, #0]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f000 f890 	bl	8012034 <USBD_CtlError>
        break;
 8011f14:	e01a      	b.n	8011f4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2201      	movs	r2, #1
 8011f1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d005      	beq.n	8011f32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	68db      	ldr	r3, [r3, #12]
 8011f2a:	f043 0202 	orr.w	r2, r3, #2
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	330c      	adds	r3, #12
 8011f36:	2202      	movs	r2, #2
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 f8eb 	bl	8012116 <USBD_CtlSendData>
      break;
 8011f40:	e004      	b.n	8011f4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f875 	bl	8012034 <USBD_CtlError>
      break;
 8011f4a:	bf00      	nop
  }
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	885b      	ldrh	r3, [r3, #2]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d106      	bne.n	8011f74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 f92b 	bl	80121ca <USBD_CtlSendStatus>
  }
}
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	2b02      	cmp	r3, #2
 8011f92:	d80b      	bhi.n	8011fac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	885b      	ldrh	r3, [r3, #2]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d10c      	bne.n	8011fb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 f910 	bl	80121ca <USBD_CtlSendStatus>
      }
      break;
 8011faa:	e004      	b.n	8011fb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011fac:	6839      	ldr	r1, [r7, #0]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 f840 	bl	8012034 <USBD_CtlError>
      break;
 8011fb4:	e000      	b.n	8011fb8 <USBD_ClrFeature+0x3c>
      break;
 8011fb6:	bf00      	nop
  }
}
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	781a      	ldrb	r2, [r3, #0]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	781a      	ldrb	r2, [r3, #0]
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011fea:	68f8      	ldr	r0, [r7, #12]
 8011fec:	f7ff fa91 	bl	8011512 <SWAPBYTE>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	3301      	adds	r3, #1
 8012002:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f7ff fa84 	bl	8011512 <SWAPBYTE>
 801200a:	4603      	mov	r3, r0
 801200c:	461a      	mov	r2, r3
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3301      	adds	r3, #1
 8012016:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	3301      	adds	r3, #1
 801201c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801201e:	68f8      	ldr	r0, [r7, #12]
 8012020:	f7ff fa77 	bl	8011512 <SWAPBYTE>
 8012024:	4603      	mov	r3, r0
 8012026:	461a      	mov	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	80da      	strh	r2, [r3, #6]
}
 801202c:	bf00      	nop
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801203e:	2180      	movs	r1, #128	; 0x80
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f000 fd15 	bl	8012a70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012046:	2100      	movs	r1, #0
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 fd11 	bl	8012a70 <USBD_LL_StallEP>
}
 801204e:	bf00      	nop
 8012050:	3708      	adds	r7, #8
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012056:	b580      	push	{r7, lr}
 8012058:	b086      	sub	sp, #24
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	60b9      	str	r1, [r7, #8]
 8012060:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012062:	2300      	movs	r3, #0
 8012064:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d036      	beq.n	80120da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012070:	6938      	ldr	r0, [r7, #16]
 8012072:	f000 f836 	bl	80120e2 <USBD_GetLen>
 8012076:	4603      	mov	r3, r0
 8012078:	3301      	adds	r3, #1
 801207a:	b29b      	uxth	r3, r3
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	68ba      	ldr	r2, [r7, #8]
 8012088:	4413      	add	r3, r2
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	7812      	ldrb	r2, [r2, #0]
 801208e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012090:	7dfb      	ldrb	r3, [r7, #23]
 8012092:	3301      	adds	r3, #1
 8012094:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012096:	7dfb      	ldrb	r3, [r7, #23]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	4413      	add	r3, r2
 801209c:	2203      	movs	r2, #3
 801209e:	701a      	strb	r2, [r3, #0]
  idx++;
 80120a0:	7dfb      	ldrb	r3, [r7, #23]
 80120a2:	3301      	adds	r3, #1
 80120a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80120a6:	e013      	b.n	80120d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80120a8:	7dfb      	ldrb	r3, [r7, #23]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	4413      	add	r3, r2
 80120ae:	693a      	ldr	r2, [r7, #16]
 80120b0:	7812      	ldrb	r2, [r2, #0]
 80120b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	3301      	adds	r3, #1
 80120b8:	613b      	str	r3, [r7, #16]
    idx++;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
 80120bc:	3301      	adds	r3, #1
 80120be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80120c0:	7dfb      	ldrb	r3, [r7, #23]
 80120c2:	68ba      	ldr	r2, [r7, #8]
 80120c4:	4413      	add	r3, r2
 80120c6:	2200      	movs	r2, #0
 80120c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80120ca:	7dfb      	ldrb	r3, [r7, #23]
 80120cc:	3301      	adds	r3, #1
 80120ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1e7      	bne.n	80120a8 <USBD_GetString+0x52>
 80120d8:	e000      	b.n	80120dc <USBD_GetString+0x86>
    return;
 80120da:	bf00      	nop
  }
}
 80120dc:	3718      	adds	r7, #24
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80120e2:	b480      	push	{r7}
 80120e4:	b085      	sub	sp, #20
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80120ea:	2300      	movs	r3, #0
 80120ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80120f2:	e005      	b.n	8012100 <USBD_GetLen+0x1e>
  {
    len++;
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
 80120f6:	3301      	adds	r3, #1
 80120f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	3301      	adds	r3, #1
 80120fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1f5      	bne.n	80120f4 <USBD_GetLen+0x12>
  }

  return len;
 8012108:	7bfb      	ldrb	r3, [r7, #15]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr

08012116 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b084      	sub	sp, #16
 801211a:	af00      	add	r7, sp, #0
 801211c:	60f8      	str	r0, [r7, #12]
 801211e:	60b9      	str	r1, [r7, #8]
 8012120:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2202      	movs	r2, #2
 8012126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	687a      	ldr	r2, [r7, #4]
 801212e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	68ba      	ldr	r2, [r7, #8]
 801213a:	2100      	movs	r1, #0
 801213c:	68f8      	ldr	r0, [r7, #12]
 801213e:	f000 fd20 	bl	8012b82 <USBD_LL_Transmit>

  return USBD_OK;
 8012142:	2300      	movs	r3, #0
}
 8012144:	4618      	mov	r0, r3
 8012146:	3710      	adds	r7, #16
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	2100      	movs	r1, #0
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f000 fd0f 	bl	8012b82 <USBD_LL_Transmit>

  return USBD_OK;
 8012164:	2300      	movs	r3, #0
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b084      	sub	sp, #16
 8012172:	af00      	add	r7, sp, #0
 8012174:	60f8      	str	r0, [r7, #12]
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2203      	movs	r2, #3
 801217e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	2100      	movs	r1, #0
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 fd13 	bl	8012bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	68ba      	ldr	r2, [r7, #8]
 80121b8:	2100      	movs	r1, #0
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f000 fd02 	bl	8012bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80121c0:	2300      	movs	r3, #0
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	3710      	adds	r7, #16
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}

080121ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80121ca:	b580      	push	{r7, lr}
 80121cc:	b082      	sub	sp, #8
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2204      	movs	r2, #4
 80121d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80121da:	2300      	movs	r3, #0
 80121dc:	2200      	movs	r2, #0
 80121de:	2100      	movs	r1, #0
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 fcce 	bl	8012b82 <USBD_LL_Transmit>

  return USBD_OK;
 80121e6:	2300      	movs	r3, #0
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}

080121f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2205      	movs	r2, #5
 80121fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012200:	2300      	movs	r3, #0
 8012202:	2200      	movs	r2, #0
 8012204:	2100      	movs	r1, #0
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 fcdc 	bl	8012bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
	...

08012218 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801221c:	2200      	movs	r2, #0
 801221e:	4912      	ldr	r1, [pc, #72]	; (8012268 <MX_USB_DEVICE_Init+0x50>)
 8012220:	4812      	ldr	r0, [pc, #72]	; (801226c <MX_USB_DEVICE_Init+0x54>)
 8012222:	f7fe fe65 	bl	8010ef0 <USBD_Init>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801222c:	f7f5 fbba 	bl	80079a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012230:	490f      	ldr	r1, [pc, #60]	; (8012270 <MX_USB_DEVICE_Init+0x58>)
 8012232:	480e      	ldr	r0, [pc, #56]	; (801226c <MX_USB_DEVICE_Init+0x54>)
 8012234:	f7fe fe8c 	bl	8010f50 <USBD_RegisterClass>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801223e:	f7f5 fbb1 	bl	80079a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012242:	490c      	ldr	r1, [pc, #48]	; (8012274 <MX_USB_DEVICE_Init+0x5c>)
 8012244:	4809      	ldr	r0, [pc, #36]	; (801226c <MX_USB_DEVICE_Init+0x54>)
 8012246:	f7fe fdad 	bl	8010da4 <USBD_CDC_RegisterInterface>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012250:	f7f5 fba8 	bl	80079a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012254:	4805      	ldr	r0, [pc, #20]	; (801226c <MX_USB_DEVICE_Init+0x54>)
 8012256:	f7fe fea2 	bl	8010f9e <USBD_Start>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012260:	f7f5 fba0 	bl	80079a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012264:	bf00      	nop
 8012266:	bd80      	pop	{r7, pc}
 8012268:	20000130 	.word	0x20000130
 801226c:	20000cdc 	.word	0x20000cdc
 8012270:	20000018 	.word	0x20000018
 8012274:	2000011c 	.word	0x2000011c

08012278 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801227c:	2200      	movs	r2, #0
 801227e:	4905      	ldr	r1, [pc, #20]	; (8012294 <CDC_Init_FS+0x1c>)
 8012280:	4805      	ldr	r0, [pc, #20]	; (8012298 <CDC_Init_FS+0x20>)
 8012282:	f7fe fda4 	bl	8010dce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012286:	4905      	ldr	r1, [pc, #20]	; (801229c <CDC_Init_FS+0x24>)
 8012288:	4803      	ldr	r0, [pc, #12]	; (8012298 <CDC_Init_FS+0x20>)
 801228a:	f7fe fdbe 	bl	8010e0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801228e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012290:	4618      	mov	r0, r3
 8012292:	bd80      	pop	{r7, pc}
 8012294:	200017ac 	.word	0x200017ac
 8012298:	20000cdc 	.word	0x20000cdc
 801229c:	20000fac 	.word	0x20000fac

080122a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80122a0:	b480      	push	{r7}
 80122a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80122a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	4603      	mov	r3, r0
 80122b8:	6039      	str	r1, [r7, #0]
 80122ba:	71fb      	strb	r3, [r7, #7]
 80122bc:	4613      	mov	r3, r2
 80122be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80122c0:	79fb      	ldrb	r3, [r7, #7]
 80122c2:	2b23      	cmp	r3, #35	; 0x23
 80122c4:	d84a      	bhi.n	801235c <CDC_Control_FS+0xac>
 80122c6:	a201      	add	r2, pc, #4	; (adr r2, 80122cc <CDC_Control_FS+0x1c>)
 80122c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122cc:	0801235d 	.word	0x0801235d
 80122d0:	0801235d 	.word	0x0801235d
 80122d4:	0801235d 	.word	0x0801235d
 80122d8:	0801235d 	.word	0x0801235d
 80122dc:	0801235d 	.word	0x0801235d
 80122e0:	0801235d 	.word	0x0801235d
 80122e4:	0801235d 	.word	0x0801235d
 80122e8:	0801235d 	.word	0x0801235d
 80122ec:	0801235d 	.word	0x0801235d
 80122f0:	0801235d 	.word	0x0801235d
 80122f4:	0801235d 	.word	0x0801235d
 80122f8:	0801235d 	.word	0x0801235d
 80122fc:	0801235d 	.word	0x0801235d
 8012300:	0801235d 	.word	0x0801235d
 8012304:	0801235d 	.word	0x0801235d
 8012308:	0801235d 	.word	0x0801235d
 801230c:	0801235d 	.word	0x0801235d
 8012310:	0801235d 	.word	0x0801235d
 8012314:	0801235d 	.word	0x0801235d
 8012318:	0801235d 	.word	0x0801235d
 801231c:	0801235d 	.word	0x0801235d
 8012320:	0801235d 	.word	0x0801235d
 8012324:	0801235d 	.word	0x0801235d
 8012328:	0801235d 	.word	0x0801235d
 801232c:	0801235d 	.word	0x0801235d
 8012330:	0801235d 	.word	0x0801235d
 8012334:	0801235d 	.word	0x0801235d
 8012338:	0801235d 	.word	0x0801235d
 801233c:	0801235d 	.word	0x0801235d
 8012340:	0801235d 	.word	0x0801235d
 8012344:	0801235d 	.word	0x0801235d
 8012348:	0801235d 	.word	0x0801235d
 801234c:	0801235d 	.word	0x0801235d
 8012350:	0801235d 	.word	0x0801235d
 8012354:	0801235d 	.word	0x0801235d
 8012358:	0801235d 	.word	0x0801235d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801235c:	bf00      	nop
  }

  return (USBD_OK);
 801235e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012360:	4618      	mov	r0, r3
 8012362:	370c      	adds	r7, #12
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr

0801236c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012376:	6879      	ldr	r1, [r7, #4]
 8012378:	4805      	ldr	r0, [pc, #20]	; (8012390 <CDC_Receive_FS+0x24>)
 801237a:	f7fe fd46 	bl	8010e0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801237e:	4804      	ldr	r0, [pc, #16]	; (8012390 <CDC_Receive_FS+0x24>)
 8012380:	f7fe fd8c 	bl	8010e9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012384:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012386:	4618      	mov	r0, r3
 8012388:	3708      	adds	r7, #8
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	20000cdc 	.word	0x20000cdc

08012394 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	460b      	mov	r3, r1
 801239e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80123a4:	4b0d      	ldr	r3, [pc, #52]	; (80123dc <CDC_Transmit_FS+0x48>)
 80123a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80123b6:	2301      	movs	r3, #1
 80123b8:	e00b      	b.n	80123d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80123ba:	887b      	ldrh	r3, [r7, #2]
 80123bc:	461a      	mov	r2, r3
 80123be:	6879      	ldr	r1, [r7, #4]
 80123c0:	4806      	ldr	r0, [pc, #24]	; (80123dc <CDC_Transmit_FS+0x48>)
 80123c2:	f7fe fd04 	bl	8010dce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80123c6:	4805      	ldr	r0, [pc, #20]	; (80123dc <CDC_Transmit_FS+0x48>)
 80123c8:	f7fe fd38 	bl	8010e3c <USBD_CDC_TransmitPacket>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	20000cdc 	.word	0x20000cdc

080123e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b087      	sub	sp, #28
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	60f8      	str	r0, [r7, #12]
 80123e8:	60b9      	str	r1, [r7, #8]
 80123ea:	4613      	mov	r3, r2
 80123ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80123f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	371c      	adds	r7, #28
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr
	...

08012404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	6039      	str	r1, [r7, #0]
 801240e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	2212      	movs	r2, #18
 8012414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012416:	4b03      	ldr	r3, [pc, #12]	; (8012424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012418:	4618      	mov	r0, r3
 801241a:	370c      	adds	r7, #12
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr
 8012424:	20000150 	.word	0x20000150

08012428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	6039      	str	r1, [r7, #0]
 8012432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	2204      	movs	r2, #4
 8012438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801243a:	4b03      	ldr	r3, [pc, #12]	; (8012448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	20000170 	.word	0x20000170

0801244c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
 8012452:	4603      	mov	r3, r0
 8012454:	6039      	str	r1, [r7, #0]
 8012456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012458:	79fb      	ldrb	r3, [r7, #7]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d105      	bne.n	801246a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	4907      	ldr	r1, [pc, #28]	; (8012480 <USBD_FS_ProductStrDescriptor+0x34>)
 8012462:	4808      	ldr	r0, [pc, #32]	; (8012484 <USBD_FS_ProductStrDescriptor+0x38>)
 8012464:	f7ff fdf7 	bl	8012056 <USBD_GetString>
 8012468:	e004      	b.n	8012474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801246a:	683a      	ldr	r2, [r7, #0]
 801246c:	4904      	ldr	r1, [pc, #16]	; (8012480 <USBD_FS_ProductStrDescriptor+0x34>)
 801246e:	4805      	ldr	r0, [pc, #20]	; (8012484 <USBD_FS_ProductStrDescriptor+0x38>)
 8012470:	f7ff fdf1 	bl	8012056 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012474:	4b02      	ldr	r3, [pc, #8]	; (8012480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012476:	4618      	mov	r0, r3
 8012478:	3708      	adds	r7, #8
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	20001fac 	.word	0x20001fac
 8012484:	08021cc8 	.word	0x08021cc8

08012488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	4603      	mov	r3, r0
 8012490:	6039      	str	r1, [r7, #0]
 8012492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012494:	683a      	ldr	r2, [r7, #0]
 8012496:	4904      	ldr	r1, [pc, #16]	; (80124a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012498:	4804      	ldr	r0, [pc, #16]	; (80124ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801249a:	f7ff fddc 	bl	8012056 <USBD_GetString>
  return USBD_StrDesc;
 801249e:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	20001fac 	.word	0x20001fac
 80124ac:	08021cdc 	.word	0x08021cdc

080124b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	4603      	mov	r3, r0
 80124b8:	6039      	str	r1, [r7, #0]
 80124ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	221a      	movs	r2, #26
 80124c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80124c2:	f000 f855 	bl	8012570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80124c6:	4b02      	ldr	r3, [pc, #8]	; (80124d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	20000174 	.word	0x20000174

080124d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	6039      	str	r1, [r7, #0]
 80124de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80124e0:	79fb      	ldrb	r3, [r7, #7]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d105      	bne.n	80124f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124e6:	683a      	ldr	r2, [r7, #0]
 80124e8:	4907      	ldr	r1, [pc, #28]	; (8012508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124ea:	4808      	ldr	r0, [pc, #32]	; (801250c <USBD_FS_ConfigStrDescriptor+0x38>)
 80124ec:	f7ff fdb3 	bl	8012056 <USBD_GetString>
 80124f0:	e004      	b.n	80124fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	4904      	ldr	r1, [pc, #16]	; (8012508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80124f6:	4805      	ldr	r0, [pc, #20]	; (801250c <USBD_FS_ConfigStrDescriptor+0x38>)
 80124f8:	f7ff fdad 	bl	8012056 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124fc:	4b02      	ldr	r3, [pc, #8]	; (8012508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	20001fac 	.word	0x20001fac
 801250c:	08021cec 	.word	0x08021cec

08012510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	6039      	str	r1, [r7, #0]
 801251a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801251c:	79fb      	ldrb	r3, [r7, #7]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d105      	bne.n	801252e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012522:	683a      	ldr	r2, [r7, #0]
 8012524:	4907      	ldr	r1, [pc, #28]	; (8012544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012526:	4808      	ldr	r0, [pc, #32]	; (8012548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012528:	f7ff fd95 	bl	8012056 <USBD_GetString>
 801252c:	e004      	b.n	8012538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	4904      	ldr	r1, [pc, #16]	; (8012544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012532:	4805      	ldr	r0, [pc, #20]	; (8012548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012534:	f7ff fd8f 	bl	8012056 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012538:	4b02      	ldr	r3, [pc, #8]	; (8012544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20001fac 	.word	0x20001fac
 8012548:	08021cf8 	.word	0x08021cf8

0801254c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	4603      	mov	r3, r0
 8012554:	6039      	str	r1, [r7, #0]
 8012556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	220c      	movs	r2, #12
 801255c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801255e:	4b03      	ldr	r3, [pc, #12]	; (801256c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012560:	4618      	mov	r0, r3
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr
 801256c:	20000164 	.word	0x20000164

08012570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012576:	4b0f      	ldr	r3, [pc, #60]	; (80125b4 <Get_SerialNum+0x44>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801257c:	4b0e      	ldr	r3, [pc, #56]	; (80125b8 <Get_SerialNum+0x48>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012582:	4b0e      	ldr	r3, [pc, #56]	; (80125bc <Get_SerialNum+0x4c>)
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012588:	68fa      	ldr	r2, [r7, #12]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4413      	add	r3, r2
 801258e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d009      	beq.n	80125aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012596:	2208      	movs	r2, #8
 8012598:	4909      	ldr	r1, [pc, #36]	; (80125c0 <Get_SerialNum+0x50>)
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f000 f814 	bl	80125c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80125a0:	2204      	movs	r2, #4
 80125a2:	4908      	ldr	r1, [pc, #32]	; (80125c4 <Get_SerialNum+0x54>)
 80125a4:	68b8      	ldr	r0, [r7, #8]
 80125a6:	f000 f80f 	bl	80125c8 <IntToUnicode>
  }
}
 80125aa:	bf00      	nop
 80125ac:	3710      	adds	r7, #16
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	1fff7a10 	.word	0x1fff7a10
 80125b8:	1fff7a14 	.word	0x1fff7a14
 80125bc:	1fff7a18 	.word	0x1fff7a18
 80125c0:	20000176 	.word	0x20000176
 80125c4:	20000186 	.word	0x20000186

080125c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b087      	sub	sp, #28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	4613      	mov	r3, r2
 80125d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80125da:	2300      	movs	r3, #0
 80125dc:	75fb      	strb	r3, [r7, #23]
 80125de:	e027      	b.n	8012630 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	0f1b      	lsrs	r3, r3, #28
 80125e4:	2b09      	cmp	r3, #9
 80125e6:	d80b      	bhi.n	8012600 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	0f1b      	lsrs	r3, r3, #28
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	7dfb      	ldrb	r3, [r7, #23]
 80125f0:	005b      	lsls	r3, r3, #1
 80125f2:	4619      	mov	r1, r3
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	440b      	add	r3, r1
 80125f8:	3230      	adds	r2, #48	; 0x30
 80125fa:	b2d2      	uxtb	r2, r2
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	e00a      	b.n	8012616 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	0f1b      	lsrs	r3, r3, #28
 8012604:	b2da      	uxtb	r2, r3
 8012606:	7dfb      	ldrb	r3, [r7, #23]
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	4619      	mov	r1, r3
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	440b      	add	r3, r1
 8012610:	3237      	adds	r2, #55	; 0x37
 8012612:	b2d2      	uxtb	r2, r2
 8012614:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	011b      	lsls	r3, r3, #4
 801261a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801261c:	7dfb      	ldrb	r3, [r7, #23]
 801261e:	005b      	lsls	r3, r3, #1
 8012620:	3301      	adds	r3, #1
 8012622:	68ba      	ldr	r2, [r7, #8]
 8012624:	4413      	add	r3, r2
 8012626:	2200      	movs	r2, #0
 8012628:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801262a:	7dfb      	ldrb	r3, [r7, #23]
 801262c:	3301      	adds	r3, #1
 801262e:	75fb      	strb	r3, [r7, #23]
 8012630:	7dfa      	ldrb	r2, [r7, #23]
 8012632:	79fb      	ldrb	r3, [r7, #7]
 8012634:	429a      	cmp	r2, r3
 8012636:	d3d3      	bcc.n	80125e0 <IntToUnicode+0x18>
  }
}
 8012638:	bf00      	nop
 801263a:	bf00      	nop
 801263c:	371c      	adds	r7, #28
 801263e:	46bd      	mov	sp, r7
 8012640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012644:	4770      	bx	lr
	...

08012648 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b0a0      	sub	sp, #128	; 0x80
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012650:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	605a      	str	r2, [r3, #4]
 801265a:	609a      	str	r2, [r3, #8]
 801265c:	60da      	str	r2, [r3, #12]
 801265e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012660:	f107 0310 	add.w	r3, r7, #16
 8012664:	225c      	movs	r2, #92	; 0x5c
 8012666:	2100      	movs	r1, #0
 8012668:	4618      	mov	r0, r3
 801266a:	f001 f98f 	bl	801398c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012676:	d154      	bne.n	8012722 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8012678:	f44f 7380 	mov.w	r3, #256	; 0x100
 801267c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 5;
 801267e:	2305      	movs	r3, #5
 8012680:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 120;
 8012682:	2378      	movs	r3, #120	; 0x78
 8012684:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012686:	2302      	movs	r3, #2
 8012688:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 801268a:	2304      	movs	r3, #4
 801268c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 801268e:	2301      	movs	r3, #1
 8012690:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8012692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012696:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012698:	f107 0310 	add.w	r3, r7, #16
 801269c:	4618      	mov	r0, r3
 801269e:	f7f9 fc8f 	bl	800bfc0 <HAL_RCCEx_PeriphCLKConfig>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80126a8:	f7f5 f97c 	bl	80079a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80126ac:	2300      	movs	r3, #0
 80126ae:	60fb      	str	r3, [r7, #12]
 80126b0:	4b1e      	ldr	r3, [pc, #120]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126b4:	4a1d      	ldr	r2, [pc, #116]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126b6:	f043 0301 	orr.w	r3, r3, #1
 80126ba:	6313      	str	r3, [r2, #48]	; 0x30
 80126bc:	4b1b      	ldr	r3, [pc, #108]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c0:	f003 0301 	and.w	r3, r3, #1
 80126c4:	60fb      	str	r3, [r7, #12]
 80126c6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80126c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80126cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126ce:	2302      	movs	r3, #2
 80126d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126d2:	2300      	movs	r3, #0
 80126d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126d6:	2303      	movs	r3, #3
 80126d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80126da:	230a      	movs	r3, #10
 80126dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80126de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80126e2:	4619      	mov	r1, r3
 80126e4:	4812      	ldr	r0, [pc, #72]	; (8012730 <HAL_PCD_MspInit+0xe8>)
 80126e6:	f7f7 fe25 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80126ea:	4b10      	ldr	r3, [pc, #64]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ee:	4a0f      	ldr	r2, [pc, #60]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126f4:	6353      	str	r3, [r2, #52]	; 0x34
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]
 80126fa:	4b0c      	ldr	r3, [pc, #48]	; (801272c <HAL_PCD_MspInit+0xe4>)
 80126fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126fe:	4a0b      	ldr	r2, [pc, #44]	; (801272c <HAL_PCD_MspInit+0xe4>)
 8012700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012704:	6453      	str	r3, [r2, #68]	; 0x44
 8012706:	4b09      	ldr	r3, [pc, #36]	; (801272c <HAL_PCD_MspInit+0xe4>)
 8012708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801270e:	60bb      	str	r3, [r7, #8]
 8012710:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012712:	2200      	movs	r2, #0
 8012714:	2100      	movs	r1, #0
 8012716:	2043      	movs	r0, #67	; 0x43
 8012718:	f7f6 fc9d 	bl	8009056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801271c:	2043      	movs	r0, #67	; 0x43
 801271e:	f7f6 fcb6 	bl	800908e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012722:	bf00      	nop
 8012724:	3780      	adds	r7, #128	; 0x80
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	40023800 	.word	0x40023800
 8012730:	40020000 	.word	0x40020000

08012734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012748:	4619      	mov	r1, r3
 801274a:	4610      	mov	r0, r2
 801274c:	f7fe fc72 	bl	8011034 <USBD_LL_SetupStage>
}
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801276a:	78fa      	ldrb	r2, [r7, #3]
 801276c:	6879      	ldr	r1, [r7, #4]
 801276e:	4613      	mov	r3, r2
 8012770:	00db      	lsls	r3, r3, #3
 8012772:	1a9b      	subs	r3, r3, r2
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	440b      	add	r3, r1
 8012778:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	78fb      	ldrb	r3, [r7, #3]
 8012780:	4619      	mov	r1, r3
 8012782:	f7fe fcac 	bl	80110de <USBD_LL_DataOutStage>
}
 8012786:	bf00      	nop
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	460b      	mov	r3, r1
 8012798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80127a0:	78fa      	ldrb	r2, [r7, #3]
 80127a2:	6879      	ldr	r1, [r7, #4]
 80127a4:	4613      	mov	r3, r2
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	1a9b      	subs	r3, r3, r2
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	440b      	add	r3, r1
 80127ae:	3348      	adds	r3, #72	; 0x48
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	78fb      	ldrb	r3, [r7, #3]
 80127b4:	4619      	mov	r1, r3
 80127b6:	f7fe fcf5 	bl	80111a4 <USBD_LL_DataInStage>
}
 80127ba:	bf00      	nop
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b082      	sub	sp, #8
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fe fe09 	bl	80113e8 <USBD_LL_SOF>
}
 80127d6:	bf00      	nop
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b084      	sub	sp, #16
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80127e6:	2301      	movs	r3, #1
 80127e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	68db      	ldr	r3, [r3, #12]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d102      	bne.n	80127f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80127f2:	2300      	movs	r3, #0
 80127f4:	73fb      	strb	r3, [r7, #15]
 80127f6:	e008      	b.n	801280a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	d102      	bne.n	8012806 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012800:	2301      	movs	r3, #1
 8012802:	73fb      	strb	r3, [r7, #15]
 8012804:	e001      	b.n	801280a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012806:	f7f5 f8cd 	bl	80079a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012810:	7bfa      	ldrb	r2, [r7, #15]
 8012812:	4611      	mov	r1, r2
 8012814:	4618      	mov	r0, r3
 8012816:	f7fe fda9 	bl	801136c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fd55 	bl	80112d0 <USBD_LL_Reset>
}
 8012826:	bf00      	nop
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
	...

08012830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801283e:	4618      	mov	r0, r3
 8012840:	f7fe fda4 	bl	801138c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	6812      	ldr	r2, [r2, #0]
 8012852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012856:	f043 0301 	orr.w	r3, r3, #1
 801285a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6a1b      	ldr	r3, [r3, #32]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d005      	beq.n	8012870 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012864:	4b04      	ldr	r3, [pc, #16]	; (8012878 <HAL_PCD_SuspendCallback+0x48>)
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	4a03      	ldr	r2, [pc, #12]	; (8012878 <HAL_PCD_SuspendCallback+0x48>)
 801286a:	f043 0306 	orr.w	r3, r3, #6
 801286e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012870:	bf00      	nop
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	e000ed00 	.word	0xe000ed00

0801287c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801288a:	4618      	mov	r0, r3
 801288c:	f7fe fd94 	bl	80113b8 <USBD_LL_Resume>
}
 8012890:	bf00      	nop
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	460b      	mov	r3, r1
 80128a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128aa:	78fa      	ldrb	r2, [r7, #3]
 80128ac:	4611      	mov	r1, r2
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe fde2 	bl	8011478 <USBD_LL_IsoOUTIncomplete>
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ce:	78fa      	ldrb	r2, [r7, #3]
 80128d0:	4611      	mov	r1, r2
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fe fdaa 	bl	801142c <USBD_LL_IsoINIncomplete>
}
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fe fde8 	bl	80114c4 <USBD_LL_DevConnected>
}
 80128f4:	bf00      	nop
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801290a:	4618      	mov	r0, r3
 801290c:	f7fe fde5 	bl	80114da <USBD_LL_DevDisconnected>
}
 8012910:	bf00      	nop
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d13c      	bne.n	80129a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012928:	4a20      	ldr	r2, [pc, #128]	; (80129ac <USBD_LL_Init+0x94>)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	4a1e      	ldr	r2, [pc, #120]	; (80129ac <USBD_LL_Init+0x94>)
 8012934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012938:	4b1c      	ldr	r3, [pc, #112]	; (80129ac <USBD_LL_Init+0x94>)
 801293a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801293e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8012940:	4b1a      	ldr	r3, [pc, #104]	; (80129ac <USBD_LL_Init+0x94>)
 8012942:	2206      	movs	r2, #6
 8012944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012946:	4b19      	ldr	r3, [pc, #100]	; (80129ac <USBD_LL_Init+0x94>)
 8012948:	2202      	movs	r2, #2
 801294a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801294c:	4b17      	ldr	r3, [pc, #92]	; (80129ac <USBD_LL_Init+0x94>)
 801294e:	2200      	movs	r2, #0
 8012950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012952:	4b16      	ldr	r3, [pc, #88]	; (80129ac <USBD_LL_Init+0x94>)
 8012954:	2202      	movs	r2, #2
 8012956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012958:	4b14      	ldr	r3, [pc, #80]	; (80129ac <USBD_LL_Init+0x94>)
 801295a:	2200      	movs	r2, #0
 801295c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801295e:	4b13      	ldr	r3, [pc, #76]	; (80129ac <USBD_LL_Init+0x94>)
 8012960:	2200      	movs	r2, #0
 8012962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012964:	4b11      	ldr	r3, [pc, #68]	; (80129ac <USBD_LL_Init+0x94>)
 8012966:	2200      	movs	r2, #0
 8012968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801296a:	4b10      	ldr	r3, [pc, #64]	; (80129ac <USBD_LL_Init+0x94>)
 801296c:	2200      	movs	r2, #0
 801296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012970:	4b0e      	ldr	r3, [pc, #56]	; (80129ac <USBD_LL_Init+0x94>)
 8012972:	2200      	movs	r2, #0
 8012974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012976:	480d      	ldr	r0, [pc, #52]	; (80129ac <USBD_LL_Init+0x94>)
 8012978:	f7f7 ffe8 	bl	800a94c <HAL_PCD_Init>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d001      	beq.n	8012986 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012982:	f7f5 f80f 	bl	80079a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012986:	2180      	movs	r1, #128	; 0x80
 8012988:	4808      	ldr	r0, [pc, #32]	; (80129ac <USBD_LL_Init+0x94>)
 801298a:	f7f9 f97a 	bl	800bc82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801298e:	2240      	movs	r2, #64	; 0x40
 8012990:	2100      	movs	r1, #0
 8012992:	4806      	ldr	r0, [pc, #24]	; (80129ac <USBD_LL_Init+0x94>)
 8012994:	f7f9 f92e 	bl	800bbf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012998:	2280      	movs	r2, #128	; 0x80
 801299a:	2101      	movs	r1, #1
 801299c:	4803      	ldr	r0, [pc, #12]	; (80129ac <USBD_LL_Init+0x94>)
 801299e:	f7f9 f929 	bl	800bbf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	200021ac 	.word	0x200021ac

080129b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129b8:	2300      	movs	r3, #0
 80129ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7f8 f8e4 	bl	800ab94 <HAL_PCD_Start>
 80129cc:	4603      	mov	r3, r0
 80129ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129d0:	7bfb      	ldrb	r3, [r7, #15]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f000 f990 	bl	8012cf8 <USBD_Get_USB_Status>
 80129d8:	4603      	mov	r3, r0
 80129da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3710      	adds	r7, #16
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}

080129e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80129e6:	b580      	push	{r7, lr}
 80129e8:	b084      	sub	sp, #16
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
 80129ee:	4608      	mov	r0, r1
 80129f0:	4611      	mov	r1, r2
 80129f2:	461a      	mov	r2, r3
 80129f4:	4603      	mov	r3, r0
 80129f6:	70fb      	strb	r3, [r7, #3]
 80129f8:	460b      	mov	r3, r1
 80129fa:	70bb      	strb	r3, [r7, #2]
 80129fc:	4613      	mov	r3, r2
 80129fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a00:	2300      	movs	r3, #0
 8012a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a04:	2300      	movs	r3, #0
 8012a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a0e:	78bb      	ldrb	r3, [r7, #2]
 8012a10:	883a      	ldrh	r2, [r7, #0]
 8012a12:	78f9      	ldrb	r1, [r7, #3]
 8012a14:	f7f8 fcf5 	bl	800b402 <HAL_PCD_EP_Open>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a1c:	7bfb      	ldrb	r3, [r7, #15]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f000 f96a 	bl	8012cf8 <USBD_Get_USB_Status>
 8012a24:	4603      	mov	r3, r0
 8012a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3710      	adds	r7, #16
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a32:	b580      	push	{r7, lr}
 8012a34:	b084      	sub	sp, #16
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a4c:	78fa      	ldrb	r2, [r7, #3]
 8012a4e:	4611      	mov	r1, r2
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7f8 fd3e 	bl	800b4d2 <HAL_PCD_EP_Close>
 8012a56:	4603      	mov	r3, r0
 8012a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 f94b 	bl	8012cf8 <USBD_Get_USB_Status>
 8012a62:	4603      	mov	r3, r0
 8012a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	460b      	mov	r3, r1
 8012a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a80:	2300      	movs	r3, #0
 8012a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a8a:	78fa      	ldrb	r2, [r7, #3]
 8012a8c:	4611      	mov	r1, r2
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f8 fe16 	bl	800b6c0 <HAL_PCD_EP_SetStall>
 8012a94:	4603      	mov	r3, r0
 8012a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a98:	7bfb      	ldrb	r3, [r7, #15]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f000 f92c 	bl	8012cf8 <USBD_Get_USB_Status>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b084      	sub	sp, #16
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012ac8:	78fa      	ldrb	r2, [r7, #3]
 8012aca:	4611      	mov	r1, r2
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f8 fe5b 	bl	800b788 <HAL_PCD_EP_ClrStall>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 f90d 	bl	8012cf8 <USBD_Get_USB_Status>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012afe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	da0b      	bge.n	8012b20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012b08:	78fb      	ldrb	r3, [r7, #3]
 8012b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012b0e:	68f9      	ldr	r1, [r7, #12]
 8012b10:	4613      	mov	r3, r2
 8012b12:	00db      	lsls	r3, r3, #3
 8012b14:	1a9b      	subs	r3, r3, r2
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	440b      	add	r3, r1
 8012b1a:	333e      	adds	r3, #62	; 0x3e
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	e00b      	b.n	8012b38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012b26:	68f9      	ldr	r1, [r7, #12]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	00db      	lsls	r3, r3, #3
 8012b2c:	1a9b      	subs	r3, r3, r2
 8012b2e:	009b      	lsls	r3, r3, #2
 8012b30:	440b      	add	r3, r1
 8012b32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b50:	2300      	movs	r3, #0
 8012b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b5e:	78fa      	ldrb	r2, [r7, #3]
 8012b60:	4611      	mov	r1, r2
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7f8 fc28 	bl	800b3b8 <HAL_PCD_SetAddress>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b6c:	7bfb      	ldrb	r3, [r7, #15]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 f8c2 	bl	8012cf8 <USBD_Get_USB_Status>
 8012b74:	4603      	mov	r3, r0
 8012b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b086      	sub	sp, #24
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	603b      	str	r3, [r7, #0]
 8012b8e:	460b      	mov	r3, r1
 8012b90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b92:	2300      	movs	r3, #0
 8012b94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b96:	2300      	movs	r3, #0
 8012b98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ba0:	7af9      	ldrb	r1, [r7, #11]
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	f7f8 fd41 	bl	800b62c <HAL_PCD_EP_Transmit>
 8012baa:	4603      	mov	r3, r0
 8012bac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bae:	7dfb      	ldrb	r3, [r7, #23]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f000 f8a1 	bl	8012cf8 <USBD_Get_USB_Status>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012bba:	7dbb      	ldrb	r3, [r7, #22]
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3718      	adds	r7, #24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	607a      	str	r2, [r7, #4]
 8012bce:	603b      	str	r3, [r7, #0]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012be2:	7af9      	ldrb	r1, [r7, #11]
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	f7f8 fcbd 	bl	800b566 <HAL_PCD_EP_Receive>
 8012bec:	4603      	mov	r3, r0
 8012bee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bf0:	7dfb      	ldrb	r3, [r7, #23]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 f880 	bl	8012cf8 <USBD_Get_USB_Status>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012bfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3718      	adds	r7, #24
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c06:	b580      	push	{r7, lr}
 8012c08:	b082      	sub	sp, #8
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
 8012c0e:	460b      	mov	r3, r1
 8012c10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c18:	78fa      	ldrb	r2, [r7, #3]
 8012c1a:	4611      	mov	r1, r2
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f8 fced 	bl	800b5fc <HAL_PCD_EP_GetRxCount>
 8012c22:	4603      	mov	r3, r0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012c38:	78fb      	ldrb	r3, [r7, #3]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d002      	beq.n	8012c44 <HAL_PCDEx_LPM_Callback+0x18>
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d01f      	beq.n	8012c82 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012c42:	e03b      	b.n	8012cbc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a1b      	ldr	r3, [r3, #32]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d007      	beq.n	8012c5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8012c4c:	f7f4 fb40 	bl	80072d0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c50:	4b1c      	ldr	r3, [pc, #112]	; (8012cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012c52:	691b      	ldr	r3, [r3, #16]
 8012c54:	4a1b      	ldr	r2, [pc, #108]	; (8012cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012c56:	f023 0306 	bic.w	r3, r3, #6
 8012c5a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	6812      	ldr	r2, [r2, #0]
 8012c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012c6e:	f023 0301 	bic.w	r3, r3, #1
 8012c72:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fe fb9c 	bl	80113b8 <USBD_LL_Resume>
    break;
 8012c80:	e01c      	b.n	8012cbc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	6812      	ldr	r2, [r2, #0]
 8012c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012c94:	f043 0301 	orr.w	r3, r3, #1
 8012c98:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fe fb73 	bl	801138c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6a1b      	ldr	r3, [r3, #32]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d005      	beq.n	8012cba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012cae:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	4a04      	ldr	r2, [pc, #16]	; (8012cc4 <HAL_PCDEx_LPM_Callback+0x98>)
 8012cb4:	f043 0306 	orr.w	r3, r3, #6
 8012cb8:	6113      	str	r3, [r2, #16]
    break;
 8012cba:	bf00      	nop
}
 8012cbc:	bf00      	nop
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	e000ed00 	.word	0xe000ed00

08012cc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012cd0:	4b03      	ldr	r3, [pc, #12]	; (8012ce0 <USBD_static_malloc+0x18>)
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	370c      	adds	r7, #12
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	20000aac 	.word	0x20000aac

08012ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]

}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	4603      	mov	r3, r0
 8012d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d02:	2300      	movs	r3, #0
 8012d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012d06:	79fb      	ldrb	r3, [r7, #7]
 8012d08:	2b03      	cmp	r3, #3
 8012d0a:	d817      	bhi.n	8012d3c <USBD_Get_USB_Status+0x44>
 8012d0c:	a201      	add	r2, pc, #4	; (adr r2, 8012d14 <USBD_Get_USB_Status+0x1c>)
 8012d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d12:	bf00      	nop
 8012d14:	08012d25 	.word	0x08012d25
 8012d18:	08012d2b 	.word	0x08012d2b
 8012d1c:	08012d31 	.word	0x08012d31
 8012d20:	08012d37 	.word	0x08012d37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012d24:	2300      	movs	r3, #0
 8012d26:	73fb      	strb	r3, [r7, #15]
    break;
 8012d28:	e00b      	b.n	8012d42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d2a:	2303      	movs	r3, #3
 8012d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8012d2e:	e008      	b.n	8012d42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d30:	2301      	movs	r3, #1
 8012d32:	73fb      	strb	r3, [r7, #15]
    break;
 8012d34:	e005      	b.n	8012d42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d36:	2303      	movs	r3, #3
 8012d38:	73fb      	strb	r3, [r7, #15]
    break;
 8012d3a:	e002      	b.n	8012d42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012d3c:	2303      	movs	r3, #3
 8012d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012d40:	bf00      	nop
  }
  return usb_status;
 8012d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3714      	adds	r7, #20
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <_ZdlPv>:
 8012d50:	f000 bdde 	b.w	8013910 <free>

08012d54 <_Znwj>:
 8012d54:	2801      	cmp	r0, #1
 8012d56:	bf38      	it	cc
 8012d58:	2001      	movcc	r0, #1
 8012d5a:	b510      	push	{r4, lr}
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f000 fdce 	bl	8013900 <malloc>
 8012d64:	b930      	cbnz	r0, 8012d74 <_Znwj+0x20>
 8012d66:	f000 fc73 	bl	8013650 <_ZSt15get_new_handlerv>
 8012d6a:	b908      	cbnz	r0, 8012d70 <_Znwj+0x1c>
 8012d6c:	f000 fd97 	bl	801389e <abort>
 8012d70:	4780      	blx	r0
 8012d72:	e7f4      	b.n	8012d5e <_Znwj+0xa>
 8012d74:	bd10      	pop	{r4, pc}

08012d76 <_ZNSaIcEC1Ev>:
 8012d76:	4770      	bx	lr

08012d78 <_ZNSaIcED1Ev>:
 8012d78:	4770      	bx	lr

08012d7a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8012d7a:	68c3      	ldr	r3, [r0, #12]
 8012d7c:	689a      	ldr	r2, [r3, #8]
 8012d7e:	60c2      	str	r2, [r0, #12]
 8012d80:	b510      	push	{r4, lr}
 8012d82:	b102      	cbz	r2, 8012d86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8012d84:	6050      	str	r0, [r2, #4]
 8012d86:	6842      	ldr	r2, [r0, #4]
 8012d88:	605a      	str	r2, [r3, #4]
 8012d8a:	680c      	ldr	r4, [r1, #0]
 8012d8c:	4284      	cmp	r4, r0
 8012d8e:	d103      	bne.n	8012d98 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012d90:	600b      	str	r3, [r1, #0]
 8012d92:	6098      	str	r0, [r3, #8]
 8012d94:	6043      	str	r3, [r0, #4]
 8012d96:	bd10      	pop	{r4, pc}
 8012d98:	6891      	ldr	r1, [r2, #8]
 8012d9a:	4281      	cmp	r1, r0
 8012d9c:	bf0c      	ite	eq
 8012d9e:	6093      	streq	r3, [r2, #8]
 8012da0:	60d3      	strne	r3, [r2, #12]
 8012da2:	e7f6      	b.n	8012d92 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08012da4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8012da4:	6883      	ldr	r3, [r0, #8]
 8012da6:	68da      	ldr	r2, [r3, #12]
 8012da8:	6082      	str	r2, [r0, #8]
 8012daa:	b510      	push	{r4, lr}
 8012dac:	b102      	cbz	r2, 8012db0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8012dae:	6050      	str	r0, [r2, #4]
 8012db0:	6842      	ldr	r2, [r0, #4]
 8012db2:	605a      	str	r2, [r3, #4]
 8012db4:	680c      	ldr	r4, [r1, #0]
 8012db6:	4284      	cmp	r4, r0
 8012db8:	d103      	bne.n	8012dc2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8012dba:	600b      	str	r3, [r1, #0]
 8012dbc:	60d8      	str	r0, [r3, #12]
 8012dbe:	6043      	str	r3, [r0, #4]
 8012dc0:	bd10      	pop	{r4, pc}
 8012dc2:	68d1      	ldr	r1, [r2, #12]
 8012dc4:	4281      	cmp	r1, r0
 8012dc6:	bf0c      	ite	eq
 8012dc8:	60d3      	streq	r3, [r2, #12]
 8012dca:	6093      	strne	r3, [r2, #8]
 8012dcc:	e7f6      	b.n	8012dbc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08012dce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8012dce:	7803      	ldrb	r3, [r0, #0]
 8012dd0:	b933      	cbnz	r3, 8012de0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012dd2:	6843      	ldr	r3, [r0, #4]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	4283      	cmp	r3, r0
 8012dd8:	d102      	bne.n	8012de0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	4770      	bx	lr
 8012de0:	6882      	ldr	r2, [r0, #8]
 8012de2:	b122      	cbz	r2, 8012dee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8012de4:	4613      	mov	r3, r2
 8012de6:	68d2      	ldr	r2, [r2, #12]
 8012de8:	2a00      	cmp	r2, #0
 8012dea:	d1fb      	bne.n	8012de4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8012dec:	e7f6      	b.n	8012ddc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012dee:	6843      	ldr	r3, [r0, #4]
 8012df0:	689a      	ldr	r2, [r3, #8]
 8012df2:	4282      	cmp	r2, r0
 8012df4:	d1f2      	bne.n	8012ddc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8012df6:	4618      	mov	r0, r3
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	e7f9      	b.n	8012df0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08012dfc <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 8012dfc:	68c3      	ldr	r3, [r0, #12]
 8012dfe:	b123      	cbz	r3, 8012e0a <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0xe>
 8012e00:	4618      	mov	r0, r3
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d1fb      	bne.n	8012e00 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x4>
 8012e08:	4770      	bx	lr
 8012e0a:	6843      	ldr	r3, [r0, #4]
 8012e0c:	68da      	ldr	r2, [r3, #12]
 8012e0e:	4282      	cmp	r2, r0
 8012e10:	d102      	bne.n	8012e18 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x1c>
 8012e12:	4618      	mov	r0, r3
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	e7f9      	b.n	8012e0c <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base+0x10>
 8012e18:	68c2      	ldr	r2, [r0, #12]
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	bf18      	it	ne
 8012e1e:	4618      	movne	r0, r3
 8012e20:	4770      	bx	lr

08012e22 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8012e22:	f7ff bfd4 	b.w	8012dce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08012e26 <_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base>:
 8012e26:	f7ff bfd2 	b.w	8012dce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08012e2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8012e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e2e:	461e      	mov	r6, r3
 8012e30:	f103 0804 	add.w	r8, r3, #4
 8012e34:	2300      	movs	r3, #0
 8012e36:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	604a      	str	r2, [r1, #4]
 8012e3e:	700b      	strb	r3, [r1, #0]
 8012e40:	b300      	cbz	r0, 8012e84 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8012e42:	4296      	cmp	r6, r2
 8012e44:	6091      	str	r1, [r2, #8]
 8012e46:	d118      	bne.n	8012e7a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8012e48:	6071      	str	r1, [r6, #4]
 8012e4a:	60f4      	str	r4, [r6, #12]
 8012e4c:	2701      	movs	r7, #1
 8012e4e:	f04f 0900 	mov.w	r9, #0
 8012e52:	6873      	ldr	r3, [r6, #4]
 8012e54:	42a3      	cmp	r3, r4
 8012e56:	d03f      	beq.n	8012ed8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8012e58:	6860      	ldr	r0, [r4, #4]
 8012e5a:	7802      	ldrb	r2, [r0, #0]
 8012e5c:	2a00      	cmp	r2, #0
 8012e5e:	d13c      	bne.n	8012eda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
 8012e60:	6845      	ldr	r5, [r0, #4]
 8012e62:	68ab      	ldr	r3, [r5, #8]
 8012e64:	4298      	cmp	r0, r3
 8012e66:	d123      	bne.n	8012eb0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8012e68:	68eb      	ldr	r3, [r5, #12]
 8012e6a:	b183      	cbz	r3, 8012e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012e6c:	781a      	ldrb	r2, [r3, #0]
 8012e6e:	b972      	cbnz	r2, 8012e8e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8012e70:	7007      	strb	r7, [r0, #0]
 8012e72:	701f      	strb	r7, [r3, #0]
 8012e74:	702a      	strb	r2, [r5, #0]
 8012e76:	462c      	mov	r4, r5
 8012e78:	e7eb      	b.n	8012e52 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8012e7a:	68b3      	ldr	r3, [r6, #8]
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d1e5      	bne.n	8012e4c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012e80:	60b1      	str	r1, [r6, #8]
 8012e82:	e7e3      	b.n	8012e4c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012e84:	60d1      	str	r1, [r2, #12]
 8012e86:	68f3      	ldr	r3, [r6, #12]
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	d1df      	bne.n	8012e4c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8012e8c:	e7dd      	b.n	8012e4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8012e8e:	68c3      	ldr	r3, [r0, #12]
 8012e90:	42a3      	cmp	r3, r4
 8012e92:	d103      	bne.n	8012e9c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8012e94:	4641      	mov	r1, r8
 8012e96:	f7ff ff70 	bl	8012d7a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	6863      	ldr	r3, [r4, #4]
 8012e9e:	4641      	mov	r1, r8
 8012ea0:	701f      	strb	r7, [r3, #0]
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f885 9000 	strb.w	r9, [r5]
 8012ea8:	f7ff ff7c 	bl	8012da4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012eac:	4625      	mov	r5, r4
 8012eae:	e7e2      	b.n	8012e76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8012eb0:	b113      	cbz	r3, 8012eb8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8012eb2:	781a      	ldrb	r2, [r3, #0]
 8012eb4:	2a00      	cmp	r2, #0
 8012eb6:	d0db      	beq.n	8012e70 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8012eb8:	6883      	ldr	r3, [r0, #8]
 8012eba:	42a3      	cmp	r3, r4
 8012ebc:	d103      	bne.n	8012ec6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8012ebe:	4641      	mov	r1, r8
 8012ec0:	f7ff ff70 	bl	8012da4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	6863      	ldr	r3, [r4, #4]
 8012ec8:	4641      	mov	r1, r8
 8012eca:	701f      	strb	r7, [r3, #0]
 8012ecc:	4628      	mov	r0, r5
 8012ece:	f885 9000 	strb.w	r9, [r5]
 8012ed2:	f7ff ff52 	bl	8012d7a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8012ed6:	e7e9      	b.n	8012eac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8012ed8:	4623      	mov	r3, r4
 8012eda:	2201      	movs	r2, #1
 8012edc:	701a      	strb	r2, [r3, #0]
 8012ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012ee2 <_ZSt17__throw_bad_allocv>:
 8012ee2:	b508      	push	{r3, lr}
 8012ee4:	f000 fcdb 	bl	801389e <abort>

08012ee8 <_ZSt19__throw_logic_errorPKc>:
 8012ee8:	b508      	push	{r3, lr}
 8012eea:	f000 fcd8 	bl	801389e <abort>

08012eee <_ZSt20__throw_length_errorPKc>:
 8012eee:	b508      	push	{r3, lr}
 8012ef0:	f000 fcd5 	bl	801389e <abort>

08012ef4 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8012ef4:	b40f      	push	{r0, r1, r2, r3}
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b084      	sub	sp, #16
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	f107 0418 	add.w	r4, r7, #24
 8012f00:	f854 2b04 	ldr.w	r2, [r4], #4
 8012f04:	607a      	str	r2, [r7, #4]
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7ed f9d2 	bl	80002b0 <strlen>
 8012f0c:	f200 2307 	addw	r3, r0, #519	; 0x207
 8012f10:	f023 0307 	bic.w	r3, r3, #7
 8012f14:	ebad 0d03 	sub.w	sp, sp, r3
 8012f18:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	60fc      	str	r4, [r7, #12]
 8012f20:	4623      	mov	r3, r4
 8012f22:	4668      	mov	r0, sp
 8012f24:	f000 f854 	bl	8012fd0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8012f28:	f000 fcb9 	bl	801389e <abort>

08012f2c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b09c      	sub	sp, #112	; 0x70
 8012f30:	4606      	mov	r6, r0
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	460c      	mov	r4, r1
 8012f36:	1ba4      	subs	r4, r4, r6
 8012f38:	490e      	ldr	r1, [pc, #56]	; (8012f74 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8012f3a:	2269      	movs	r2, #105	; 0x69
 8012f3c:	1d38      	adds	r0, r7, #4
 8012f3e:	f000 fcfd 	bl	801393c <memcpy>
 8012f42:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8012f46:	f023 0307 	bic.w	r3, r3, #7
 8012f4a:	ebad 0d03 	sub.w	sp, sp, r3
 8012f4e:	466d      	mov	r5, sp
 8012f50:	2268      	movs	r2, #104	; 0x68
 8012f52:	1d39      	adds	r1, r7, #4
 8012f54:	4628      	mov	r0, r5
 8012f56:	f000 fcf1 	bl	801393c <memcpy>
 8012f5a:	4622      	mov	r2, r4
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8012f62:	442c      	add	r4, r5
 8012f64:	f000 fcea 	bl	801393c <memcpy>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ff ffba 	bl	8012ee8 <_ZSt19__throw_logic_errorPKc>
 8012f74:	08021d8c 	.word	0x08021d8c

08012f78 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8012f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	b084      	sub	sp, #16
 8012f80:	466d      	mov	r5, sp
 8012f82:	f105 040c 	add.w	r4, r5, #12
 8012f86:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8012fcc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8012f8a:	4623      	mov	r3, r4
 8012f8c:	f04f 0c0a 	mov.w	ip, #10
 8012f90:	fbb2 f6fc 	udiv	r6, r2, ip
 8012f94:	fb0c 2e16 	mls	lr, ip, r6, r2
 8012f98:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8012f9c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8012fa0:	4696      	mov	lr, r2
 8012fa2:	f1be 0f09 	cmp.w	lr, #9
 8012fa6:	4632      	mov	r2, r6
 8012fa8:	d8f2      	bhi.n	8012f90 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8012faa:	1ae4      	subs	r4, r4, r3
 8012fac:	428c      	cmp	r4, r1
 8012fae:	d809      	bhi.n	8012fc4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8012fb0:	f1c4 010c 	rsb	r1, r4, #12
 8012fb4:	4622      	mov	r2, r4
 8012fb6:	4429      	add	r1, r5
 8012fb8:	f000 fcc0 	bl	801393c <memcpy>
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8012fc8:	e7f8      	b.n	8012fbc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8012fca:	bf00      	nop
 8012fcc:	08021df5 	.word	0x08021df5

08012fd0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8012fd0:	3901      	subs	r1, #1
 8012fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd6:	4607      	mov	r7, r0
 8012fd8:	4615      	mov	r5, r2
 8012fda:	eb00 0801 	add.w	r8, r0, r1
 8012fde:	4604      	mov	r4, r0
 8012fe0:	782a      	ldrb	r2, [r5, #0]
 8012fe2:	b362      	cbz	r2, 801303e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8012fe4:	4544      	cmp	r4, r8
 8012fe6:	d22e      	bcs.n	8013046 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8012fe8:	2a25      	cmp	r2, #37	; 0x25
 8012fea:	d107      	bne.n	8012ffc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8012fec:	786a      	ldrb	r2, [r5, #1]
 8012fee:	2a73      	cmp	r2, #115	; 0x73
 8012ff0:	d009      	beq.n	8013006 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8012ff2:	2a7a      	cmp	r2, #122	; 0x7a
 8012ff4:	d012      	beq.n	801301c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8012ff6:	2a25      	cmp	r2, #37	; 0x25
 8012ff8:	d100      	bne.n	8012ffc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8012ffa:	3501      	adds	r5, #1
 8012ffc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013000:	f804 2b01 	strb.w	r2, [r4], #1
 8013004:	e7ec      	b.n	8012fe0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8013006:	f853 2b04 	ldr.w	r2, [r3], #4
 801300a:	3a01      	subs	r2, #1
 801300c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8013010:	b1e9      	cbz	r1, 801304e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8013012:	4544      	cmp	r4, r8
 8013014:	d017      	beq.n	8013046 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8013016:	f804 1b01 	strb.w	r1, [r4], #1
 801301a:	e7f7      	b.n	801300c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801301c:	78aa      	ldrb	r2, [r5, #2]
 801301e:	2a75      	cmp	r2, #117	; 0x75
 8013020:	d1ec      	bne.n	8012ffc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8013022:	461e      	mov	r6, r3
 8013024:	eba8 0104 	sub.w	r1, r8, r4
 8013028:	f856 2b04 	ldr.w	r2, [r6], #4
 801302c:	4620      	mov	r0, r4
 801302e:	f7ff ffa3 	bl	8012f78 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8013032:	2800      	cmp	r0, #0
 8013034:	dd07      	ble.n	8013046 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8013036:	4404      	add	r4, r0
 8013038:	3503      	adds	r5, #3
 801303a:	4633      	mov	r3, r6
 801303c:	e7d0      	b.n	8012fe0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801303e:	7022      	strb	r2, [r4, #0]
 8013040:	1be0      	subs	r0, r4, r7
 8013042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013046:	4621      	mov	r1, r4
 8013048:	4638      	mov	r0, r7
 801304a:	f7ff ff6f 	bl	8012f2c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801304e:	3502      	adds	r5, #2
 8013050:	e7c6      	b.n	8012fe0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

08013052 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8013052:	b10a      	cbz	r2, 8013058 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8013054:	f000 bc64 	b.w	8013920 <memcmp>
 8013058:	4610      	mov	r0, r2
 801305a:	4770      	bx	lr

0801305c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801305c:	b10a      	cbz	r2, 8013062 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801305e:	f000 bc6d 	b.w	801393c <memcpy>
 8013062:	4770      	bx	lr

08013064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8013064:	6001      	str	r1, [r0, #0]
 8013066:	4770      	bx	lr

08013068 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8013068:	6800      	ldr	r0, [r0, #0]
 801306a:	4770      	bx	lr

0801306c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801306c:	3008      	adds	r0, #8
 801306e:	4770      	bx	lr

08013070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8013070:	6081      	str	r1, [r0, #8]
 8013072:	4770      	bx	lr

08013074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8013074:	6803      	ldr	r3, [r0, #0]
 8013076:	6041      	str	r1, [r0, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	545a      	strb	r2, [r3, r1]
 801307c:	4770      	bx	lr
	...

08013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8013080:	b508      	push	{r3, lr}
 8013082:	680b      	ldr	r3, [r1, #0]
 8013084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013088:	d302      	bcc.n	8013090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801308a:	480d      	ldr	r0, [pc, #52]	; (80130c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801308c:	f7ff ff2f 	bl	8012eee <_ZSt20__throw_length_errorPKc>
 8013090:	4293      	cmp	r3, r2
 8013092:	d90b      	bls.n	80130ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8013094:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013098:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801309c:	d206      	bcs.n	80130ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801309e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80130a2:	bf2a      	itet	cs
 80130a4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80130a8:	6008      	strcc	r0, [r1, #0]
 80130aa:	600b      	strcs	r3, [r1, #0]
 80130ac:	6808      	ldr	r0, [r1, #0]
 80130ae:	3001      	adds	r0, #1
 80130b0:	d501      	bpl.n	80130b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80130b2:	f7ff ff16 	bl	8012ee2 <_ZSt17__throw_bad_allocv>
 80130b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130ba:	f7ff be4b 	b.w	8012d54 <_Znwj>
 80130be:	bf00      	nop
 80130c0:	08021e00 	.word	0x08021e00

080130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80130c4:	f850 3b08 	ldr.w	r3, [r0], #8
 80130c8:	4283      	cmp	r3, r0
 80130ca:	d002      	beq.n	80130d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7ff be3f 	b.w	8012d50 <_ZdlPv>
 80130d2:	4770      	bx	lr

080130d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80130d4:	b508      	push	{r3, lr}
 80130d6:	4603      	mov	r3, r0
 80130d8:	4608      	mov	r0, r1
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	4298      	cmp	r0, r3
 80130de:	4611      	mov	r1, r2
 80130e0:	d903      	bls.n	80130ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80130e2:	4602      	mov	r2, r0
 80130e4:	4801      	ldr	r0, [pc, #4]	; (80130ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80130e6:	f7ff ff05 	bl	8012ef4 <_ZSt24__throw_out_of_range_fmtPKcz>
 80130ea:	bd08      	pop	{r3, pc}
 80130ec:	08021e18 	.word	0x08021e18

080130f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80130f0:	6840      	ldr	r0, [r0, #4]
 80130f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80130f6:	3901      	subs	r1, #1
 80130f8:	1a09      	subs	r1, r1, r0
 80130fa:	4291      	cmp	r1, r2
 80130fc:	b508      	push	{r3, lr}
 80130fe:	d202      	bcs.n	8013106 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8013100:	4618      	mov	r0, r3
 8013102:	f7ff fef4 	bl	8012eee <_ZSt20__throw_length_errorPKc>
 8013106:	bd08      	pop	{r3, pc}

08013108 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8013108:	6803      	ldr	r3, [r0, #0]
 801310a:	428b      	cmp	r3, r1
 801310c:	d806      	bhi.n	801311c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 801310e:	6840      	ldr	r0, [r0, #4]
 8013110:	4418      	add	r0, r3
 8013112:	4281      	cmp	r1, r0
 8013114:	bf94      	ite	ls
 8013116:	2000      	movls	r0, #0
 8013118:	2001      	movhi	r0, #1
 801311a:	4770      	bx	lr
 801311c:	2001      	movs	r0, #1
 801311e:	4770      	bx	lr

08013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8013120:	2a01      	cmp	r2, #1
 8013122:	b510      	push	{r4, lr}
 8013124:	d102      	bne.n	801312c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8013126:	780a      	ldrb	r2, [r1, #0]
 8013128:	7002      	strb	r2, [r0, #0]
 801312a:	bd10      	pop	{r4, pc}
 801312c:	f7ff ff96 	bl	801305c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8013130:	e7fb      	b.n	801312a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8013132:	2a01      	cmp	r2, #1
 8013134:	b430      	push	{r4, r5}
 8013136:	d103      	bne.n	8013140 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8013138:	780b      	ldrb	r3, [r1, #0]
 801313a:	7003      	strb	r3, [r0, #0]
 801313c:	bc30      	pop	{r4, r5}
 801313e:	4770      	bx	lr
 8013140:	2a00      	cmp	r2, #0
 8013142:	d0fb      	beq.n	801313c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8013144:	bc30      	pop	{r4, r5}
 8013146:	f000 bc07 	b.w	8013958 <memmove>

0801314a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801314a:	b508      	push	{r3, lr}
 801314c:	1a52      	subs	r2, r2, r1
 801314e:	f7ff ffe7 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013152:	bd08      	pop	{r3, pc}

08013154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8013154:	b508      	push	{r3, lr}
 8013156:	1a52      	subs	r2, r2, r1
 8013158:	f7ff ffe2 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801315c:	bd08      	pop	{r3, pc}

0801315e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801315e:	4288      	cmp	r0, r1
 8013160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013162:	4604      	mov	r4, r0
 8013164:	460e      	mov	r6, r1
 8013166:	d01e      	beq.n	80131a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8013168:	4603      	mov	r3, r0
 801316a:	684d      	ldr	r5, [r1, #4]
 801316c:	f853 2b08 	ldr.w	r2, [r3], #8
 8013170:	429a      	cmp	r2, r3
 8013172:	bf14      	ite	ne
 8013174:	6882      	ldrne	r2, [r0, #8]
 8013176:	220f      	moveq	r2, #15
 8013178:	42aa      	cmp	r2, r5
 801317a:	d20a      	bcs.n	8013192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 801317c:	a901      	add	r1, sp, #4
 801317e:	9501      	str	r5, [sp, #4]
 8013180:	f7ff ff7e 	bl	8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013184:	4607      	mov	r7, r0
 8013186:	4620      	mov	r0, r4
 8013188:	f7ff ff9c 	bl	80130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801318c:	9b01      	ldr	r3, [sp, #4]
 801318e:	6027      	str	r7, [r4, #0]
 8013190:	60a3      	str	r3, [r4, #8]
 8013192:	b125      	cbz	r5, 801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8013194:	6831      	ldr	r1, [r6, #0]
 8013196:	6820      	ldr	r0, [r4, #0]
 8013198:	462a      	mov	r2, r5
 801319a:	f7ff ffc1 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	6065      	str	r5, [r4, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	555a      	strb	r2, [r3, r5]
 80131a6:	b003      	add	sp, #12
 80131a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80131aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80131ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80131b0:	461f      	mov	r7, r3
 80131b2:	6843      	ldr	r3, [r0, #4]
 80131b4:	eb01 0802 	add.w	r8, r1, r2
 80131b8:	1ab2      	subs	r2, r6, r2
 80131ba:	441a      	add	r2, r3
 80131bc:	eba3 0908 	sub.w	r9, r3, r8
 80131c0:	4603      	mov	r3, r0
 80131c2:	9201      	str	r2, [sp, #4]
 80131c4:	f853 2b08 	ldr.w	r2, [r3], #8
 80131c8:	429a      	cmp	r2, r3
 80131ca:	bf18      	it	ne
 80131cc:	6882      	ldrne	r2, [r0, #8]
 80131ce:	460d      	mov	r5, r1
 80131d0:	bf08      	it	eq
 80131d2:	220f      	moveq	r2, #15
 80131d4:	a901      	add	r1, sp, #4
 80131d6:	4604      	mov	r4, r0
 80131d8:	f7ff ff52 	bl	8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80131dc:	4682      	mov	sl, r0
 80131de:	b11d      	cbz	r5, 80131e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80131e0:	6821      	ldr	r1, [r4, #0]
 80131e2:	462a      	mov	r2, r5
 80131e4:	f7ff ff9c 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80131e8:	b137      	cbz	r7, 80131f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80131ea:	b12e      	cbz	r6, 80131f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80131ec:	4632      	mov	r2, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	eb0a 0005 	add.w	r0, sl, r5
 80131f4:	f7ff ff94 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80131f8:	f1b9 0f00 	cmp.w	r9, #0
 80131fc:	d007      	beq.n	801320e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80131fe:	6821      	ldr	r1, [r4, #0]
 8013200:	4435      	add	r5, r6
 8013202:	464a      	mov	r2, r9
 8013204:	4441      	add	r1, r8
 8013206:	eb0a 0005 	add.w	r0, sl, r5
 801320a:	f7ff ff89 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801320e:	4620      	mov	r0, r4
 8013210:	f7ff ff58 	bl	80130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013214:	9b01      	ldr	r3, [sp, #4]
 8013216:	f8c4 a000 	str.w	sl, [r4]
 801321a:	60a3      	str	r3, [r4, #8]
 801321c:	b002      	add	sp, #8
 801321e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8013222:	f100 0208 	add.w	r2, r0, #8
 8013226:	6002      	str	r2, [r0, #0]
 8013228:	2200      	movs	r2, #0
 801322a:	6042      	str	r2, [r0, #4]
 801322c:	7202      	strb	r2, [r0, #8]
 801322e:	4770      	bx	lr

08013230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	4604      	mov	r4, r0
 8013234:	460e      	mov	r6, r1
 8013236:	3008      	adds	r0, #8
 8013238:	6020      	str	r0, [r4, #0]
 801323a:	f856 3b08 	ldr.w	r3, [r6], #8
 801323e:	429e      	cmp	r6, r3
 8013240:	460d      	mov	r5, r1
 8013242:	d10b      	bne.n	801325c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8013244:	2210      	movs	r2, #16
 8013246:	4631      	mov	r1, r6
 8013248:	f7ff ff08 	bl	801305c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801324c:	686b      	ldr	r3, [r5, #4]
 801324e:	6063      	str	r3, [r4, #4]
 8013250:	2300      	movs	r3, #0
 8013252:	602e      	str	r6, [r5, #0]
 8013254:	606b      	str	r3, [r5, #4]
 8013256:	722b      	strb	r3, [r5, #8]
 8013258:	4620      	mov	r0, r4
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	688b      	ldr	r3, [r1, #8]
 8013260:	60a3      	str	r3, [r4, #8]
 8013262:	e7f3      	b.n	801324c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08013264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8013264:	b510      	push	{r4, lr}
 8013266:	4604      	mov	r4, r0
 8013268:	f7ff ff2c 	bl	80130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801326c:	4620      	mov	r0, r4
 801326e:	bd10      	pop	{r4, pc}

08013270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8013270:	b510      	push	{r4, lr}
 8013272:	4604      	mov	r4, r0
 8013274:	f7ff ff73 	bl	801315e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8013278:	4620      	mov	r0, r4
 801327a:	bd10      	pop	{r4, pc}

0801327c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 801327c:	6840      	ldr	r0, [r0, #4]
 801327e:	4770      	bx	lr

08013280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8013280:	6840      	ldr	r0, [r0, #4]
 8013282:	4770      	bx	lr

08013284 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8013284:	4603      	mov	r3, r0
 8013286:	f853 2b08 	ldr.w	r2, [r3], #8
 801328a:	429a      	cmp	r2, r3
 801328c:	bf14      	ite	ne
 801328e:	6880      	ldrne	r0, [r0, #8]
 8013290:	200f      	moveq	r0, #15
 8013292:	4770      	bx	lr

08013294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8013294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013296:	4605      	mov	r5, r0
 8013298:	6843      	ldr	r3, [r0, #4]
 801329a:	4299      	cmp	r1, r3
 801329c:	bf2c      	ite	cs
 801329e:	9101      	strcs	r1, [sp, #4]
 80132a0:	9301      	strcc	r3, [sp, #4]
 80132a2:	f855 1b08 	ldr.w	r1, [r5], #8
 80132a6:	428d      	cmp	r5, r1
 80132a8:	bf18      	it	ne
 80132aa:	6882      	ldrne	r2, [r0, #8]
 80132ac:	4604      	mov	r4, r0
 80132ae:	9801      	ldr	r0, [sp, #4]
 80132b0:	bf08      	it	eq
 80132b2:	220f      	moveq	r2, #15
 80132b4:	4290      	cmp	r0, r2
 80132b6:	d012      	beq.n	80132de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 80132b8:	d801      	bhi.n	80132be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x2a>
 80132ba:	280f      	cmp	r0, #15
 80132bc:	d911      	bls.n	80132e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4e>
 80132be:	a901      	add	r1, sp, #4
 80132c0:	4620      	mov	r0, r4
 80132c2:	f7ff fedd 	bl	8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80132c6:	6862      	ldr	r2, [r4, #4]
 80132c8:	6821      	ldr	r1, [r4, #0]
 80132ca:	3201      	adds	r2, #1
 80132cc:	4605      	mov	r5, r0
 80132ce:	f7ff ff27 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80132d2:	4620      	mov	r0, r4
 80132d4:	f7ff fef6 	bl	80130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80132d8:	9b01      	ldr	r3, [sp, #4]
 80132da:	6025      	str	r5, [r4, #0]
 80132dc:	60a3      	str	r3, [r4, #8]
 80132de:	b003      	add	sp, #12
 80132e0:	bd30      	pop	{r4, r5, pc}
 80132e2:	428d      	cmp	r5, r1
 80132e4:	d0fb      	beq.n	80132de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>
 80132e6:	1c5a      	adds	r2, r3, #1
 80132e8:	4628      	mov	r0, r5
 80132ea:	f7ff ff19 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80132ee:	6820      	ldr	r0, [r4, #0]
 80132f0:	f7ff fd2e 	bl	8012d50 <_ZdlPv>
 80132f4:	6025      	str	r5, [r4, #0]
 80132f6:	e7f2      	b.n	80132de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x4a>

080132f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80132f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80132fe:	4614      	mov	r4, r2
 8013300:	4680      	mov	r8, r0
 8013302:	462a      	mov	r2, r5
 8013304:	4689      	mov	r9, r1
 8013306:	461f      	mov	r7, r3
 8013308:	4621      	mov	r1, r4
 801330a:	4b39      	ldr	r3, [pc, #228]	; (80133f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 801330c:	f7ff fef0 	bl	80130f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013310:	4642      	mov	r2, r8
 8013312:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013316:	f852 6b08 	ldr.w	r6, [r2], #8
 801331a:	4296      	cmp	r6, r2
 801331c:	bf18      	it	ne
 801331e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8013322:	eba5 0b04 	sub.w	fp, r5, r4
 8013326:	eb03 0a0b 	add.w	sl, r3, fp
 801332a:	bf08      	it	eq
 801332c:	220f      	moveq	r2, #15
 801332e:	4552      	cmp	r2, sl
 8013330:	d351      	bcc.n	80133d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8013332:	444e      	add	r6, r9
 8013334:	4639      	mov	r1, r7
 8013336:	44a1      	add	r9, r4
 8013338:	4640      	mov	r0, r8
 801333a:	eba3 0909 	sub.w	r9, r3, r9
 801333e:	f7ff fee3 	bl	8013108 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8013342:	b180      	cbz	r0, 8013366 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8013344:	f1b9 0f00 	cmp.w	r9, #0
 8013348:	d006      	beq.n	8013358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801334a:	42ac      	cmp	r4, r5
 801334c:	d004      	beq.n	8013358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801334e:	464a      	mov	r2, r9
 8013350:	1931      	adds	r1, r6, r4
 8013352:	1970      	adds	r0, r6, r5
 8013354:	f7ff feed 	bl	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013358:	b315      	cbz	r5, 80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801335a:	462a      	mov	r2, r5
 801335c:	4639      	mov	r1, r7
 801335e:	4630      	mov	r0, r6
 8013360:	f7ff fede 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013364:	e01c      	b.n	80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8013366:	b135      	cbz	r5, 8013376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8013368:	42ac      	cmp	r4, r5
 801336a:	d33c      	bcc.n	80133e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 801336c:	462a      	mov	r2, r5
 801336e:	4639      	mov	r1, r7
 8013370:	4630      	mov	r0, r6
 8013372:	f7ff fede 	bl	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8013376:	f1b9 0f00 	cmp.w	r9, #0
 801337a:	d011      	beq.n	80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801337c:	42ac      	cmp	r4, r5
 801337e:	d00f      	beq.n	80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8013380:	464a      	mov	r2, r9
 8013382:	1931      	adds	r1, r6, r4
 8013384:	1970      	adds	r0, r6, r5
 8013386:	f7ff fed4 	bl	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801338a:	42ac      	cmp	r4, r5
 801338c:	d208      	bcs.n	80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801338e:	4434      	add	r4, r6
 8013390:	197b      	adds	r3, r7, r5
 8013392:	429c      	cmp	r4, r3
 8013394:	d30f      	bcc.n	80133b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8013396:	462a      	mov	r2, r5
 8013398:	4639      	mov	r1, r7
 801339a:	4630      	mov	r0, r6
 801339c:	f7ff fec9 	bl	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80133a0:	f8d8 3000 	ldr.w	r3, [r8]
 80133a4:	f8c8 a004 	str.w	sl, [r8, #4]
 80133a8:	2200      	movs	r2, #0
 80133aa:	4640      	mov	r0, r8
 80133ac:	f803 200a 	strb.w	r2, [r3, sl]
 80133b0:	b003      	add	sp, #12
 80133b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b6:	42bc      	cmp	r4, r7
 80133b8:	d803      	bhi.n	80133c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 80133ba:	462a      	mov	r2, r5
 80133bc:	eb07 010b 	add.w	r1, r7, fp
 80133c0:	e7cd      	b.n	801335e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80133c2:	1be4      	subs	r4, r4, r7
 80133c4:	4622      	mov	r2, r4
 80133c6:	4639      	mov	r1, r7
 80133c8:	4630      	mov	r0, r6
 80133ca:	f7ff feb2 	bl	8013132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80133ce:	1b2a      	subs	r2, r5, r4
 80133d0:	1971      	adds	r1, r6, r5
 80133d2:	1930      	adds	r0, r6, r4
 80133d4:	e7c4      	b.n	8013360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80133d6:	9500      	str	r5, [sp, #0]
 80133d8:	463b      	mov	r3, r7
 80133da:	4622      	mov	r2, r4
 80133dc:	4649      	mov	r1, r9
 80133de:	4640      	mov	r0, r8
 80133e0:	f7ff fee3 	bl	80131aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80133e4:	e7dc      	b.n	80133a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80133e6:	f1b9 0f00 	cmp.w	r9, #0
 80133ea:	d0d0      	beq.n	801338e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80133ec:	e7c8      	b.n	8013380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80133ee:	bf00      	nop
 80133f0:	08021e65 	.word	0x08021e65

080133f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80133f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80133f6:	4604      	mov	r4, r0
 80133f8:	4615      	mov	r5, r2
 80133fa:	4a09      	ldr	r2, [pc, #36]	; (8013420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80133fc:	9303      	str	r3, [sp, #12]
 80133fe:	460e      	mov	r6, r1
 8013400:	f7ff fe68 	bl	80130d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8013404:	6862      	ldr	r2, [r4, #4]
 8013406:	9b03      	ldr	r3, [sp, #12]
 8013408:	1b92      	subs	r2, r2, r6
 801340a:	4601      	mov	r1, r0
 801340c:	42aa      	cmp	r2, r5
 801340e:	9808      	ldr	r0, [sp, #32]
 8013410:	9000      	str	r0, [sp, #0]
 8013412:	bf28      	it	cs
 8013414:	462a      	movcs	r2, r5
 8013416:	4620      	mov	r0, r4
 8013418:	f7ff ff6e 	bl	80132f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801341c:	b004      	add	sp, #16
 801341e:	bd70      	pop	{r4, r5, r6, pc}
 8013420:	08021e4f 	.word	0x08021e4f

08013424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 8013424:	b507      	push	{r0, r1, r2, lr}
 8013426:	6853      	ldr	r3, [r2, #4]
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	6813      	ldr	r3, [r2, #0]
 801342c:	2200      	movs	r2, #0
 801342e:	f7ff ffe1 	bl	80133f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8013432:	b003      	add	sp, #12
 8013434:	f85d fb04 	ldr.w	pc, [sp], #4

08013438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8013438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801343a:	4604      	mov	r4, r0
 801343c:	4610      	mov	r0, r2
 801343e:	9103      	str	r1, [sp, #12]
 8013440:	9202      	str	r2, [sp, #8]
 8013442:	f7ec ff35 	bl	80002b0 <strlen>
 8013446:	9b02      	ldr	r3, [sp, #8]
 8013448:	9000      	str	r0, [sp, #0]
 801344a:	9903      	ldr	r1, [sp, #12]
 801344c:	2200      	movs	r2, #0
 801344e:	4620      	mov	r0, r4
 8013450:	f7ff ffd0 	bl	80133f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8013454:	b004      	add	sp, #16
 8013456:	bd10      	pop	{r4, pc}

08013458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8013458:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801345a:	4604      	mov	r4, r0
 801345c:	4623      	mov	r3, r4
 801345e:	6840      	ldr	r0, [r0, #4]
 8013460:	f853 6b08 	ldr.w	r6, [r3], #8
 8013464:	429e      	cmp	r6, r3
 8013466:	bf18      	it	ne
 8013468:	68a3      	ldrne	r3, [r4, #8]
 801346a:	eb00 0502 	add.w	r5, r0, r2
 801346e:	bf08      	it	eq
 8013470:	230f      	moveq	r3, #15
 8013472:	429d      	cmp	r5, r3
 8013474:	d80a      	bhi.n	801348c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8013476:	b112      	cbz	r2, 801347e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8013478:	4430      	add	r0, r6
 801347a:	f7ff fe51 	bl	8013120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	6065      	str	r5, [r4, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	4620      	mov	r0, r4
 8013486:	555a      	strb	r2, [r3, r5]
 8013488:	b002      	add	sp, #8
 801348a:	bd70      	pop	{r4, r5, r6, pc}
 801348c:	9200      	str	r2, [sp, #0]
 801348e:	460b      	mov	r3, r1
 8013490:	2200      	movs	r2, #0
 8013492:	4601      	mov	r1, r0
 8013494:	4620      	mov	r0, r4
 8013496:	f7ff fe88 	bl	80131aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801349a:	e7f0      	b.n	801347e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0801349c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 801349c:	b508      	push	{r3, lr}
 801349e:	e9d1 1200 	ldrd	r1, r2, [r1]
 80134a2:	f7ff ffd9 	bl	8013458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80134a6:	bd08      	pop	{r3, pc}

080134a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 80134a8:	b508      	push	{r3, lr}
 80134aa:	f7ff fff7 	bl	801349c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80134ae:	bd08      	pop	{r3, pc}

080134b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80134b0:	b570      	push	{r4, r5, r6, lr}
 80134b2:	4b06      	ldr	r3, [pc, #24]	; (80134cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80134b4:	4604      	mov	r4, r0
 80134b6:	460d      	mov	r5, r1
 80134b8:	4616      	mov	r6, r2
 80134ba:	2100      	movs	r1, #0
 80134bc:	f7ff fe18 	bl	80130f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80134c0:	4632      	mov	r2, r6
 80134c2:	4629      	mov	r1, r5
 80134c4:	4620      	mov	r0, r4
 80134c6:	f7ff ffc7 	bl	8013458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	08021e7e 	.word	0x08021e7e

080134d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80134d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134d2:	4604      	mov	r4, r0
 80134d4:	4608      	mov	r0, r1
 80134d6:	460d      	mov	r5, r1
 80134d8:	f7ec feea 	bl	80002b0 <strlen>
 80134dc:	4b06      	ldr	r3, [pc, #24]	; (80134f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80134de:	9001      	str	r0, [sp, #4]
 80134e0:	4602      	mov	r2, r0
 80134e2:	2100      	movs	r1, #0
 80134e4:	4620      	mov	r0, r4
 80134e6:	f7ff fe03 	bl	80130f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80134ea:	9a01      	ldr	r2, [sp, #4]
 80134ec:	4629      	mov	r1, r5
 80134ee:	4620      	mov	r0, r4
 80134f0:	f7ff ffb2 	bl	8013458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80134f4:	b003      	add	sp, #12
 80134f6:	bd30      	pop	{r4, r5, pc}
 80134f8:	08021e7e 	.word	0x08021e7e

080134fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80134fc:	b508      	push	{r3, lr}
 80134fe:	f7ff ffe7 	bl	80134d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8013502:	bd08      	pop	{r3, pc}

08013504 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8013504:	6800      	ldr	r0, [r0, #0]
 8013506:	4770      	bx	lr

08013508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8013508:	b538      	push	{r3, r4, r5, lr}
 801350a:	6845      	ldr	r5, [r0, #4]
 801350c:	684c      	ldr	r4, [r1, #4]
 801350e:	6800      	ldr	r0, [r0, #0]
 8013510:	6809      	ldr	r1, [r1, #0]
 8013512:	42a5      	cmp	r5, r4
 8013514:	462a      	mov	r2, r5
 8013516:	bf28      	it	cs
 8013518:	4622      	movcs	r2, r4
 801351a:	f7ff fd9a 	bl	8013052 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801351e:	b900      	cbnz	r0, 8013522 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8013520:	1b28      	subs	r0, r5, r4
 8013522:	bd38      	pop	{r3, r4, r5, pc}

08013524 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8013524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013526:	6846      	ldr	r6, [r0, #4]
 8013528:	9101      	str	r1, [sp, #4]
 801352a:	4605      	mov	r5, r0
 801352c:	4608      	mov	r0, r1
 801352e:	f7ec febf 	bl	80002b0 <strlen>
 8013532:	4286      	cmp	r6, r0
 8013534:	4604      	mov	r4, r0
 8013536:	4632      	mov	r2, r6
 8013538:	9901      	ldr	r1, [sp, #4]
 801353a:	bf28      	it	cs
 801353c:	4602      	movcs	r2, r0
 801353e:	6828      	ldr	r0, [r5, #0]
 8013540:	f7ff fd87 	bl	8013052 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8013544:	b900      	cbnz	r0, 8013548 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8013546:	1b30      	subs	r0, r6, r4
 8013548:	b002      	add	sp, #8
 801354a:	bd70      	pop	{r4, r5, r6, pc}

0801354c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801354c:	6001      	str	r1, [r0, #0]
 801354e:	4770      	bx	lr

08013550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	f100 0308 	add.w	r3, r0, #8
 8013556:	6003      	str	r3, [r0, #0]
 8013558:	e9d1 5200 	ldrd	r5, r2, [r1]
 801355c:	4604      	mov	r4, r0
 801355e:	f04f 0300 	mov.w	r3, #0
 8013562:	442a      	add	r2, r5
 8013564:	4629      	mov	r1, r5
 8013566:	f7ee ff35 	bl	80023d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801356a:	4620      	mov	r0, r4
 801356c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8013570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013572:	4604      	mov	r4, r0
 8013574:	4616      	mov	r6, r2
 8013576:	460d      	mov	r5, r1
 8013578:	b919      	cbnz	r1, 8013582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801357a:	b112      	cbz	r2, 8013582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801357c:	480d      	ldr	r0, [pc, #52]	; (80135b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801357e:	f7ff fcb3 	bl	8012ee8 <_ZSt19__throw_logic_errorPKc>
 8013582:	1b73      	subs	r3, r6, r5
 8013584:	2b0f      	cmp	r3, #15
 8013586:	9301      	str	r3, [sp, #4]
 8013588:	d907      	bls.n	801359a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801358a:	2200      	movs	r2, #0
 801358c:	a901      	add	r1, sp, #4
 801358e:	4620      	mov	r0, r4
 8013590:	f7ff fd76 	bl	8013080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013594:	9b01      	ldr	r3, [sp, #4]
 8013596:	6020      	str	r0, [r4, #0]
 8013598:	60a3      	str	r3, [r4, #8]
 801359a:	4632      	mov	r2, r6
 801359c:	4629      	mov	r1, r5
 801359e:	6820      	ldr	r0, [r4, #0]
 80135a0:	f7ff fdd8 	bl	8013154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80135a4:	9b01      	ldr	r3, [sp, #4]
 80135a6:	6822      	ldr	r2, [r4, #0]
 80135a8:	6063      	str	r3, [r4, #4]
 80135aa:	2100      	movs	r1, #0
 80135ac:	54d1      	strb	r1, [r2, r3]
 80135ae:	b002      	add	sp, #8
 80135b0:	bd70      	pop	{r4, r5, r6, pc}
 80135b2:	bf00      	nop
 80135b4:	08021e93 	.word	0x08021e93

080135b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	f100 0308 	add.w	r3, r0, #8
 80135be:	4604      	mov	r4, r0
 80135c0:	6003      	str	r3, [r0, #0]
 80135c2:	460d      	mov	r5, r1
 80135c4:	b159      	cbz	r1, 80135de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80135c6:	4608      	mov	r0, r1
 80135c8:	f7ec fe72 	bl	80002b0 <strlen>
 80135cc:	182a      	adds	r2, r5, r0
 80135ce:	4620      	mov	r0, r4
 80135d0:	f04f 0300 	mov.w	r3, #0
 80135d4:	4629      	mov	r1, r5
 80135d6:	f7ff ffcb 	bl	8013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80135da:	4620      	mov	r0, r4
 80135dc:	bd38      	pop	{r3, r4, r5, pc}
 80135de:	f04f 32ff 	mov.w	r2, #4294967295
 80135e2:	e7f4      	b.n	80135ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080135e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	460d      	mov	r5, r1
 80135ea:	4617      	mov	r7, r2
 80135ec:	4698      	mov	r8, r3
 80135ee:	f100 0308 	add.w	r3, r0, #8
 80135f2:	4604      	mov	r4, r0
 80135f4:	6003      	str	r3, [r0, #0]
 80135f6:	4639      	mov	r1, r7
 80135f8:	4a0a      	ldr	r2, [pc, #40]	; (8013624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 80135fa:	4628      	mov	r0, r5
 80135fc:	f7ff fd6a 	bl	80130d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8013600:	682e      	ldr	r6, [r5, #0]
 8013602:	686a      	ldr	r2, [r5, #4]
 8013604:	1831      	adds	r1, r6, r0
 8013606:	1bd2      	subs	r2, r2, r7
 8013608:	4620      	mov	r0, r4
 801360a:	f04f 0300 	mov.w	r3, #0
 801360e:	4542      	cmp	r2, r8
 8013610:	bf94      	ite	ls
 8013612:	188a      	addls	r2, r1, r2
 8013614:	eb01 0208 	addhi.w	r2, r1, r8
 8013618:	f7ff ffaa 	bl	8013570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801361c:	4620      	mov	r0, r4
 801361e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013622:	bf00      	nop
 8013624:	08021ebd 	.word	0x08021ebd

08013628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8013628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801362a:	460d      	mov	r5, r1
 801362c:	4604      	mov	r4, r0
 801362e:	4611      	mov	r1, r2
 8013630:	4628      	mov	r0, r5
 8013632:	4a06      	ldr	r2, [pc, #24]	; (801364c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8013634:	9301      	str	r3, [sp, #4]
 8013636:	f7ff fd4d 	bl	80130d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 801363a:	9b01      	ldr	r3, [sp, #4]
 801363c:	4602      	mov	r2, r0
 801363e:	4629      	mov	r1, r5
 8013640:	4620      	mov	r0, r4
 8013642:	f7ff ffcf 	bl	80135e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8013646:	4620      	mov	r0, r4
 8013648:	b003      	add	sp, #12
 801364a:	bd30      	pop	{r4, r5, pc}
 801364c:	08021ed8 	.word	0x08021ed8

08013650 <_ZSt15get_new_handlerv>:
 8013650:	4b02      	ldr	r3, [pc, #8]	; (801365c <_ZSt15get_new_handlerv+0xc>)
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	f3bf 8f5b 	dmb	ish
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	20000ccc 	.word	0x20000ccc

08013660 <expf>:
 8013660:	b508      	push	{r3, lr}
 8013662:	ed2d 8b02 	vpush	{d8}
 8013666:	eef0 8a40 	vmov.f32	s17, s0
 801366a:	f000 f837 	bl	80136dc <__ieee754_expf>
 801366e:	4b16      	ldr	r3, [pc, #88]	; (80136c8 <expf+0x68>)
 8013670:	f993 3000 	ldrsb.w	r3, [r3]
 8013674:	3301      	adds	r3, #1
 8013676:	eeb0 8a40 	vmov.f32	s16, s0
 801367a:	d011      	beq.n	80136a0 <expf+0x40>
 801367c:	eeb0 0a68 	vmov.f32	s0, s17
 8013680:	f000 f900 	bl	8013884 <finitef>
 8013684:	b160      	cbz	r0, 80136a0 <expf+0x40>
 8013686:	eddf 7a11 	vldr	s15, [pc, #68]	; 80136cc <expf+0x6c>
 801368a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013692:	dd0a      	ble.n	80136aa <expf+0x4a>
 8013694:	f000 f90a 	bl	80138ac <__errno>
 8013698:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80136d0 <expf+0x70>
 801369c:	2322      	movs	r3, #34	; 0x22
 801369e:	6003      	str	r3, [r0, #0]
 80136a0:	eeb0 0a48 	vmov.f32	s0, s16
 80136a4:	ecbd 8b02 	vpop	{d8}
 80136a8:	bd08      	pop	{r3, pc}
 80136aa:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80136d4 <expf+0x74>
 80136ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80136b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b6:	d5f3      	bpl.n	80136a0 <expf+0x40>
 80136b8:	f000 f8f8 	bl	80138ac <__errno>
 80136bc:	2322      	movs	r3, #34	; 0x22
 80136be:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80136d8 <expf+0x78>
 80136c2:	6003      	str	r3, [r0, #0]
 80136c4:	e7ec      	b.n	80136a0 <expf+0x40>
 80136c6:	bf00      	nop
 80136c8:	2000018e 	.word	0x2000018e
 80136cc:	42b17180 	.word	0x42b17180
 80136d0:	7f800000 	.word	0x7f800000
 80136d4:	c2cff1b5 	.word	0xc2cff1b5
 80136d8:	00000000 	.word	0x00000000

080136dc <__ieee754_expf>:
 80136dc:	ee10 2a10 	vmov	r2, s0
 80136e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80136e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80136e8:	d902      	bls.n	80136f0 <__ieee754_expf+0x14>
 80136ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136ee:	4770      	bx	lr
 80136f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80136f4:	d106      	bne.n	8013704 <__ieee754_expf+0x28>
 80136f6:	eddf 7a51 	vldr	s15, [pc, #324]	; 801383c <__ieee754_expf+0x160>
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	bf18      	it	ne
 80136fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8013702:	4770      	bx	lr
 8013704:	484e      	ldr	r0, [pc, #312]	; (8013840 <__ieee754_expf+0x164>)
 8013706:	4282      	cmp	r2, r0
 8013708:	dd04      	ble.n	8013714 <__ieee754_expf+0x38>
 801370a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013844 <__ieee754_expf+0x168>
 801370e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013712:	4770      	bx	lr
 8013714:	2a00      	cmp	r2, #0
 8013716:	da03      	bge.n	8013720 <__ieee754_expf+0x44>
 8013718:	4a4b      	ldr	r2, [pc, #300]	; (8013848 <__ieee754_expf+0x16c>)
 801371a:	4291      	cmp	r1, r2
 801371c:	f200 808a 	bhi.w	8013834 <__ieee754_expf+0x158>
 8013720:	4a4a      	ldr	r2, [pc, #296]	; (801384c <__ieee754_expf+0x170>)
 8013722:	4291      	cmp	r1, r2
 8013724:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013728:	d954      	bls.n	80137d4 <__ieee754_expf+0xf8>
 801372a:	4a49      	ldr	r2, [pc, #292]	; (8013850 <__ieee754_expf+0x174>)
 801372c:	4291      	cmp	r1, r2
 801372e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013732:	d836      	bhi.n	80137a2 <__ieee754_expf+0xc6>
 8013734:	4947      	ldr	r1, [pc, #284]	; (8013854 <__ieee754_expf+0x178>)
 8013736:	4411      	add	r1, r2
 8013738:	ed91 7a00 	vldr	s14, [r1]
 801373c:	4946      	ldr	r1, [pc, #280]	; (8013858 <__ieee754_expf+0x17c>)
 801373e:	440a      	add	r2, r1
 8013740:	edd2 7a00 	vldr	s15, [r2]
 8013744:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013748:	f1c3 0201 	rsb	r2, r3, #1
 801374c:	1ad2      	subs	r2, r2, r3
 801374e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013752:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013756:	eddf 5a41 	vldr	s11, [pc, #260]	; 801385c <__ieee754_expf+0x180>
 801375a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013860 <__ieee754_expf+0x184>
 801375e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013762:	eddf 5a40 	vldr	s11, [pc, #256]	; 8013864 <__ieee754_expf+0x188>
 8013766:	eee5 5a26 	vfma.f32	s11, s10, s13
 801376a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013868 <__ieee754_expf+0x18c>
 801376e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8013772:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801386c <__ieee754_expf+0x190>
 8013776:	eee5 5a26 	vfma.f32	s11, s10, s13
 801377a:	eeb0 5a40 	vmov.f32	s10, s0
 801377e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8013782:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013786:	eef0 6a45 	vmov.f32	s13, s10
 801378a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801378e:	bb92      	cbnz	r2, 80137f6 <__ieee754_expf+0x11a>
 8013790:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013794:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013798:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801379c:	ee36 0a40 	vsub.f32	s0, s12, s0
 80137a0:	4770      	bx	lr
 80137a2:	4b33      	ldr	r3, [pc, #204]	; (8013870 <__ieee754_expf+0x194>)
 80137a4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013874 <__ieee754_expf+0x198>
 80137a8:	4413      	add	r3, r2
 80137aa:	edd3 7a00 	vldr	s15, [r3]
 80137ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80137b2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013878 <__ieee754_expf+0x19c>
 80137b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137ba:	ee17 2a90 	vmov	r2, s15
 80137be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80137c6:	eeb0 7a40 	vmov.f32	s14, s0
 80137ca:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801387c <__ieee754_expf+0x1a0>
 80137ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80137d2:	e7bc      	b.n	801374e <__ieee754_expf+0x72>
 80137d4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80137d8:	d20b      	bcs.n	80137f2 <__ieee754_expf+0x116>
 80137da:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013844 <__ieee754_expf+0x168>
 80137de:	ee70 6a26 	vadd.f32	s13, s0, s13
 80137e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80137e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ea:	dd02      	ble.n	80137f2 <__ieee754_expf+0x116>
 80137ec:	ee30 0a06 	vadd.f32	s0, s0, s12
 80137f0:	4770      	bx	lr
 80137f2:	2200      	movs	r2, #0
 80137f4:	e7ad      	b.n	8013752 <__ieee754_expf+0x76>
 80137f6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80137fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80137fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8013802:	bfb8      	it	lt
 8013804:	3264      	addlt	r2, #100	; 0x64
 8013806:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801380a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801380e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8013812:	ee17 3a90 	vmov	r3, s15
 8013816:	bfab      	itete	ge
 8013818:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801381c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013820:	ee00 3a10 	vmovge	s0, r3
 8013824:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013880 <__ieee754_expf+0x1a4>
 8013828:	bfbc      	itt	lt
 801382a:	ee00 3a10 	vmovlt	s0, r3
 801382e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013832:	4770      	bx	lr
 8013834:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801383c <__ieee754_expf+0x160>
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop
 801383c:	00000000 	.word	0x00000000
 8013840:	42b17217 	.word	0x42b17217
 8013844:	7149f2ca 	.word	0x7149f2ca
 8013848:	42cff1b5 	.word	0x42cff1b5
 801384c:	3eb17218 	.word	0x3eb17218
 8013850:	3f851591 	.word	0x3f851591
 8013854:	08021ef8 	.word	0x08021ef8
 8013858:	08021f00 	.word	0x08021f00
 801385c:	3331bb4c 	.word	0x3331bb4c
 8013860:	b5ddea0e 	.word	0xb5ddea0e
 8013864:	388ab355 	.word	0x388ab355
 8013868:	bb360b61 	.word	0xbb360b61
 801386c:	3e2aaaab 	.word	0x3e2aaaab
 8013870:	08021ef0 	.word	0x08021ef0
 8013874:	3fb8aa3b 	.word	0x3fb8aa3b
 8013878:	3f317180 	.word	0x3f317180
 801387c:	3717f7d1 	.word	0x3717f7d1
 8013880:	0d800000 	.word	0x0d800000

08013884 <finitef>:
 8013884:	b082      	sub	sp, #8
 8013886:	ed8d 0a01 	vstr	s0, [sp, #4]
 801388a:	9801      	ldr	r0, [sp, #4]
 801388c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013890:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013894:	bfac      	ite	ge
 8013896:	2000      	movge	r0, #0
 8013898:	2001      	movlt	r0, #1
 801389a:	b002      	add	sp, #8
 801389c:	4770      	bx	lr

0801389e <abort>:
 801389e:	b508      	push	{r3, lr}
 80138a0:	2006      	movs	r0, #6
 80138a2:	f000 fe55 	bl	8014550 <raise>
 80138a6:	2001      	movs	r0, #1
 80138a8:	f7f4 fd46 	bl	8008338 <_exit>

080138ac <__errno>:
 80138ac:	4b01      	ldr	r3, [pc, #4]	; (80138b4 <__errno+0x8>)
 80138ae:	6818      	ldr	r0, [r3, #0]
 80138b0:	4770      	bx	lr
 80138b2:	bf00      	nop
 80138b4:	20000190 	.word	0x20000190

080138b8 <__libc_init_array>:
 80138b8:	b570      	push	{r4, r5, r6, lr}
 80138ba:	4d0d      	ldr	r5, [pc, #52]	; (80138f0 <__libc_init_array+0x38>)
 80138bc:	4c0d      	ldr	r4, [pc, #52]	; (80138f4 <__libc_init_array+0x3c>)
 80138be:	1b64      	subs	r4, r4, r5
 80138c0:	10a4      	asrs	r4, r4, #2
 80138c2:	2600      	movs	r6, #0
 80138c4:	42a6      	cmp	r6, r4
 80138c6:	d109      	bne.n	80138dc <__libc_init_array+0x24>
 80138c8:	4d0b      	ldr	r5, [pc, #44]	; (80138f8 <__libc_init_array+0x40>)
 80138ca:	4c0c      	ldr	r4, [pc, #48]	; (80138fc <__libc_init_array+0x44>)
 80138cc:	f002 ff6c 	bl	80167a8 <_init>
 80138d0:	1b64      	subs	r4, r4, r5
 80138d2:	10a4      	asrs	r4, r4, #2
 80138d4:	2600      	movs	r6, #0
 80138d6:	42a6      	cmp	r6, r4
 80138d8:	d105      	bne.n	80138e6 <__libc_init_array+0x2e>
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80138e0:	4798      	blx	r3
 80138e2:	3601      	adds	r6, #1
 80138e4:	e7ee      	b.n	80138c4 <__libc_init_array+0xc>
 80138e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ea:	4798      	blx	r3
 80138ec:	3601      	adds	r6, #1
 80138ee:	e7f2      	b.n	80138d6 <__libc_init_array+0x1e>
 80138f0:	080222f4 	.word	0x080222f4
 80138f4:	080222f4 	.word	0x080222f4
 80138f8:	080222f4 	.word	0x080222f4
 80138fc:	08022324 	.word	0x08022324

08013900 <malloc>:
 8013900:	4b02      	ldr	r3, [pc, #8]	; (801390c <malloc+0xc>)
 8013902:	4601      	mov	r1, r0
 8013904:	6818      	ldr	r0, [r3, #0]
 8013906:	f000 b899 	b.w	8013a3c <_malloc_r>
 801390a:	bf00      	nop
 801390c:	20000190 	.word	0x20000190

08013910 <free>:
 8013910:	4b02      	ldr	r3, [pc, #8]	; (801391c <free+0xc>)
 8013912:	4601      	mov	r1, r0
 8013914:	6818      	ldr	r0, [r3, #0]
 8013916:	f000 b841 	b.w	801399c <_free_r>
 801391a:	bf00      	nop
 801391c:	20000190 	.word	0x20000190

08013920 <memcmp>:
 8013920:	b530      	push	{r4, r5, lr}
 8013922:	3901      	subs	r1, #1
 8013924:	2400      	movs	r4, #0
 8013926:	42a2      	cmp	r2, r4
 8013928:	d101      	bne.n	801392e <memcmp+0xe>
 801392a:	2000      	movs	r0, #0
 801392c:	e005      	b.n	801393a <memcmp+0x1a>
 801392e:	5d03      	ldrb	r3, [r0, r4]
 8013930:	3401      	adds	r4, #1
 8013932:	5d0d      	ldrb	r5, [r1, r4]
 8013934:	42ab      	cmp	r3, r5
 8013936:	d0f6      	beq.n	8013926 <memcmp+0x6>
 8013938:	1b58      	subs	r0, r3, r5
 801393a:	bd30      	pop	{r4, r5, pc}

0801393c <memcpy>:
 801393c:	440a      	add	r2, r1
 801393e:	4291      	cmp	r1, r2
 8013940:	f100 33ff 	add.w	r3, r0, #4294967295
 8013944:	d100      	bne.n	8013948 <memcpy+0xc>
 8013946:	4770      	bx	lr
 8013948:	b510      	push	{r4, lr}
 801394a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801394e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013952:	4291      	cmp	r1, r2
 8013954:	d1f9      	bne.n	801394a <memcpy+0xe>
 8013956:	bd10      	pop	{r4, pc}

08013958 <memmove>:
 8013958:	4288      	cmp	r0, r1
 801395a:	b510      	push	{r4, lr}
 801395c:	eb01 0402 	add.w	r4, r1, r2
 8013960:	d902      	bls.n	8013968 <memmove+0x10>
 8013962:	4284      	cmp	r4, r0
 8013964:	4623      	mov	r3, r4
 8013966:	d807      	bhi.n	8013978 <memmove+0x20>
 8013968:	1e43      	subs	r3, r0, #1
 801396a:	42a1      	cmp	r1, r4
 801396c:	d008      	beq.n	8013980 <memmove+0x28>
 801396e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013976:	e7f8      	b.n	801396a <memmove+0x12>
 8013978:	4402      	add	r2, r0
 801397a:	4601      	mov	r1, r0
 801397c:	428a      	cmp	r2, r1
 801397e:	d100      	bne.n	8013982 <memmove+0x2a>
 8013980:	bd10      	pop	{r4, pc}
 8013982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801398a:	e7f7      	b.n	801397c <memmove+0x24>

0801398c <memset>:
 801398c:	4402      	add	r2, r0
 801398e:	4603      	mov	r3, r0
 8013990:	4293      	cmp	r3, r2
 8013992:	d100      	bne.n	8013996 <memset+0xa>
 8013994:	4770      	bx	lr
 8013996:	f803 1b01 	strb.w	r1, [r3], #1
 801399a:	e7f9      	b.n	8013990 <memset+0x4>

0801399c <_free_r>:
 801399c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801399e:	2900      	cmp	r1, #0
 80139a0:	d048      	beq.n	8013a34 <_free_r+0x98>
 80139a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139a6:	9001      	str	r0, [sp, #4]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f1a1 0404 	sub.w	r4, r1, #4
 80139ae:	bfb8      	it	lt
 80139b0:	18e4      	addlt	r4, r4, r3
 80139b2:	f001 ff81 	bl	80158b8 <__malloc_lock>
 80139b6:	4a20      	ldr	r2, [pc, #128]	; (8013a38 <_free_r+0x9c>)
 80139b8:	9801      	ldr	r0, [sp, #4]
 80139ba:	6813      	ldr	r3, [r2, #0]
 80139bc:	4615      	mov	r5, r2
 80139be:	b933      	cbnz	r3, 80139ce <_free_r+0x32>
 80139c0:	6063      	str	r3, [r4, #4]
 80139c2:	6014      	str	r4, [r2, #0]
 80139c4:	b003      	add	sp, #12
 80139c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139ca:	f001 bf7b 	b.w	80158c4 <__malloc_unlock>
 80139ce:	42a3      	cmp	r3, r4
 80139d0:	d90b      	bls.n	80139ea <_free_r+0x4e>
 80139d2:	6821      	ldr	r1, [r4, #0]
 80139d4:	1862      	adds	r2, r4, r1
 80139d6:	4293      	cmp	r3, r2
 80139d8:	bf04      	itt	eq
 80139da:	681a      	ldreq	r2, [r3, #0]
 80139dc:	685b      	ldreq	r3, [r3, #4]
 80139de:	6063      	str	r3, [r4, #4]
 80139e0:	bf04      	itt	eq
 80139e2:	1852      	addeq	r2, r2, r1
 80139e4:	6022      	streq	r2, [r4, #0]
 80139e6:	602c      	str	r4, [r5, #0]
 80139e8:	e7ec      	b.n	80139c4 <_free_r+0x28>
 80139ea:	461a      	mov	r2, r3
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	b10b      	cbz	r3, 80139f4 <_free_r+0x58>
 80139f0:	42a3      	cmp	r3, r4
 80139f2:	d9fa      	bls.n	80139ea <_free_r+0x4e>
 80139f4:	6811      	ldr	r1, [r2, #0]
 80139f6:	1855      	adds	r5, r2, r1
 80139f8:	42a5      	cmp	r5, r4
 80139fa:	d10b      	bne.n	8013a14 <_free_r+0x78>
 80139fc:	6824      	ldr	r4, [r4, #0]
 80139fe:	4421      	add	r1, r4
 8013a00:	1854      	adds	r4, r2, r1
 8013a02:	42a3      	cmp	r3, r4
 8013a04:	6011      	str	r1, [r2, #0]
 8013a06:	d1dd      	bne.n	80139c4 <_free_r+0x28>
 8013a08:	681c      	ldr	r4, [r3, #0]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	6053      	str	r3, [r2, #4]
 8013a0e:	4421      	add	r1, r4
 8013a10:	6011      	str	r1, [r2, #0]
 8013a12:	e7d7      	b.n	80139c4 <_free_r+0x28>
 8013a14:	d902      	bls.n	8013a1c <_free_r+0x80>
 8013a16:	230c      	movs	r3, #12
 8013a18:	6003      	str	r3, [r0, #0]
 8013a1a:	e7d3      	b.n	80139c4 <_free_r+0x28>
 8013a1c:	6825      	ldr	r5, [r4, #0]
 8013a1e:	1961      	adds	r1, r4, r5
 8013a20:	428b      	cmp	r3, r1
 8013a22:	bf04      	itt	eq
 8013a24:	6819      	ldreq	r1, [r3, #0]
 8013a26:	685b      	ldreq	r3, [r3, #4]
 8013a28:	6063      	str	r3, [r4, #4]
 8013a2a:	bf04      	itt	eq
 8013a2c:	1949      	addeq	r1, r1, r5
 8013a2e:	6021      	streq	r1, [r4, #0]
 8013a30:	6054      	str	r4, [r2, #4]
 8013a32:	e7c7      	b.n	80139c4 <_free_r+0x28>
 8013a34:	b003      	add	sp, #12
 8013a36:	bd30      	pop	{r4, r5, pc}
 8013a38:	20000cd0 	.word	0x20000cd0

08013a3c <_malloc_r>:
 8013a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3e:	1ccd      	adds	r5, r1, #3
 8013a40:	f025 0503 	bic.w	r5, r5, #3
 8013a44:	3508      	adds	r5, #8
 8013a46:	2d0c      	cmp	r5, #12
 8013a48:	bf38      	it	cc
 8013a4a:	250c      	movcc	r5, #12
 8013a4c:	2d00      	cmp	r5, #0
 8013a4e:	4606      	mov	r6, r0
 8013a50:	db01      	blt.n	8013a56 <_malloc_r+0x1a>
 8013a52:	42a9      	cmp	r1, r5
 8013a54:	d903      	bls.n	8013a5e <_malloc_r+0x22>
 8013a56:	230c      	movs	r3, #12
 8013a58:	6033      	str	r3, [r6, #0]
 8013a5a:	2000      	movs	r0, #0
 8013a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a5e:	f001 ff2b 	bl	80158b8 <__malloc_lock>
 8013a62:	4921      	ldr	r1, [pc, #132]	; (8013ae8 <_malloc_r+0xac>)
 8013a64:	680a      	ldr	r2, [r1, #0]
 8013a66:	4614      	mov	r4, r2
 8013a68:	b99c      	cbnz	r4, 8013a92 <_malloc_r+0x56>
 8013a6a:	4f20      	ldr	r7, [pc, #128]	; (8013aec <_malloc_r+0xb0>)
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	b923      	cbnz	r3, 8013a7a <_malloc_r+0x3e>
 8013a70:	4621      	mov	r1, r4
 8013a72:	4630      	mov	r0, r6
 8013a74:	f000 fd34 	bl	80144e0 <_sbrk_r>
 8013a78:	6038      	str	r0, [r7, #0]
 8013a7a:	4629      	mov	r1, r5
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	f000 fd2f 	bl	80144e0 <_sbrk_r>
 8013a82:	1c43      	adds	r3, r0, #1
 8013a84:	d123      	bne.n	8013ace <_malloc_r+0x92>
 8013a86:	230c      	movs	r3, #12
 8013a88:	6033      	str	r3, [r6, #0]
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f001 ff1a 	bl	80158c4 <__malloc_unlock>
 8013a90:	e7e3      	b.n	8013a5a <_malloc_r+0x1e>
 8013a92:	6823      	ldr	r3, [r4, #0]
 8013a94:	1b5b      	subs	r3, r3, r5
 8013a96:	d417      	bmi.n	8013ac8 <_malloc_r+0x8c>
 8013a98:	2b0b      	cmp	r3, #11
 8013a9a:	d903      	bls.n	8013aa4 <_malloc_r+0x68>
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	441c      	add	r4, r3
 8013aa0:	6025      	str	r5, [r4, #0]
 8013aa2:	e004      	b.n	8013aae <_malloc_r+0x72>
 8013aa4:	6863      	ldr	r3, [r4, #4]
 8013aa6:	42a2      	cmp	r2, r4
 8013aa8:	bf0c      	ite	eq
 8013aaa:	600b      	streq	r3, [r1, #0]
 8013aac:	6053      	strne	r3, [r2, #4]
 8013aae:	4630      	mov	r0, r6
 8013ab0:	f001 ff08 	bl	80158c4 <__malloc_unlock>
 8013ab4:	f104 000b 	add.w	r0, r4, #11
 8013ab8:	1d23      	adds	r3, r4, #4
 8013aba:	f020 0007 	bic.w	r0, r0, #7
 8013abe:	1ac2      	subs	r2, r0, r3
 8013ac0:	d0cc      	beq.n	8013a5c <_malloc_r+0x20>
 8013ac2:	1a1b      	subs	r3, r3, r0
 8013ac4:	50a3      	str	r3, [r4, r2]
 8013ac6:	e7c9      	b.n	8013a5c <_malloc_r+0x20>
 8013ac8:	4622      	mov	r2, r4
 8013aca:	6864      	ldr	r4, [r4, #4]
 8013acc:	e7cc      	b.n	8013a68 <_malloc_r+0x2c>
 8013ace:	1cc4      	adds	r4, r0, #3
 8013ad0:	f024 0403 	bic.w	r4, r4, #3
 8013ad4:	42a0      	cmp	r0, r4
 8013ad6:	d0e3      	beq.n	8013aa0 <_malloc_r+0x64>
 8013ad8:	1a21      	subs	r1, r4, r0
 8013ada:	4630      	mov	r0, r6
 8013adc:	f000 fd00 	bl	80144e0 <_sbrk_r>
 8013ae0:	3001      	adds	r0, #1
 8013ae2:	d1dd      	bne.n	8013aa0 <_malloc_r+0x64>
 8013ae4:	e7cf      	b.n	8013a86 <_malloc_r+0x4a>
 8013ae6:	bf00      	nop
 8013ae8:	20000cd0 	.word	0x20000cd0
 8013aec:	20000cd4 	.word	0x20000cd4

08013af0 <__cvt>:
 8013af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013af4:	ec55 4b10 	vmov	r4, r5, d0
 8013af8:	2d00      	cmp	r5, #0
 8013afa:	460e      	mov	r6, r1
 8013afc:	4619      	mov	r1, r3
 8013afe:	462b      	mov	r3, r5
 8013b00:	bfbb      	ittet	lt
 8013b02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013b06:	461d      	movlt	r5, r3
 8013b08:	2300      	movge	r3, #0
 8013b0a:	232d      	movlt	r3, #45	; 0x2d
 8013b0c:	700b      	strb	r3, [r1, #0]
 8013b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013b14:	4691      	mov	r9, r2
 8013b16:	f023 0820 	bic.w	r8, r3, #32
 8013b1a:	bfbc      	itt	lt
 8013b1c:	4622      	movlt	r2, r4
 8013b1e:	4614      	movlt	r4, r2
 8013b20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013b24:	d005      	beq.n	8013b32 <__cvt+0x42>
 8013b26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013b2a:	d100      	bne.n	8013b2e <__cvt+0x3e>
 8013b2c:	3601      	adds	r6, #1
 8013b2e:	2102      	movs	r1, #2
 8013b30:	e000      	b.n	8013b34 <__cvt+0x44>
 8013b32:	2103      	movs	r1, #3
 8013b34:	ab03      	add	r3, sp, #12
 8013b36:	9301      	str	r3, [sp, #4]
 8013b38:	ab02      	add	r3, sp, #8
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	ec45 4b10 	vmov	d0, r4, r5
 8013b40:	4653      	mov	r3, sl
 8013b42:	4632      	mov	r2, r6
 8013b44:	f000 fea8 	bl	8014898 <_dtoa_r>
 8013b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013b4c:	4607      	mov	r7, r0
 8013b4e:	d102      	bne.n	8013b56 <__cvt+0x66>
 8013b50:	f019 0f01 	tst.w	r9, #1
 8013b54:	d022      	beq.n	8013b9c <__cvt+0xac>
 8013b56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013b5a:	eb07 0906 	add.w	r9, r7, r6
 8013b5e:	d110      	bne.n	8013b82 <__cvt+0x92>
 8013b60:	783b      	ldrb	r3, [r7, #0]
 8013b62:	2b30      	cmp	r3, #48	; 0x30
 8013b64:	d10a      	bne.n	8013b7c <__cvt+0x8c>
 8013b66:	2200      	movs	r2, #0
 8013b68:	2300      	movs	r3, #0
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	f7ec ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8013b72:	b918      	cbnz	r0, 8013b7c <__cvt+0x8c>
 8013b74:	f1c6 0601 	rsb	r6, r6, #1
 8013b78:	f8ca 6000 	str.w	r6, [sl]
 8013b7c:	f8da 3000 	ldr.w	r3, [sl]
 8013b80:	4499      	add	r9, r3
 8013b82:	2200      	movs	r2, #0
 8013b84:	2300      	movs	r3, #0
 8013b86:	4620      	mov	r0, r4
 8013b88:	4629      	mov	r1, r5
 8013b8a:	f7ec ffbd 	bl	8000b08 <__aeabi_dcmpeq>
 8013b8e:	b108      	cbz	r0, 8013b94 <__cvt+0xa4>
 8013b90:	f8cd 900c 	str.w	r9, [sp, #12]
 8013b94:	2230      	movs	r2, #48	; 0x30
 8013b96:	9b03      	ldr	r3, [sp, #12]
 8013b98:	454b      	cmp	r3, r9
 8013b9a:	d307      	bcc.n	8013bac <__cvt+0xbc>
 8013b9c:	9b03      	ldr	r3, [sp, #12]
 8013b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ba0:	1bdb      	subs	r3, r3, r7
 8013ba2:	4638      	mov	r0, r7
 8013ba4:	6013      	str	r3, [r2, #0]
 8013ba6:	b004      	add	sp, #16
 8013ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bac:	1c59      	adds	r1, r3, #1
 8013bae:	9103      	str	r1, [sp, #12]
 8013bb0:	701a      	strb	r2, [r3, #0]
 8013bb2:	e7f0      	b.n	8013b96 <__cvt+0xa6>

08013bb4 <__exponent>:
 8013bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2900      	cmp	r1, #0
 8013bba:	bfb8      	it	lt
 8013bbc:	4249      	neglt	r1, r1
 8013bbe:	f803 2b02 	strb.w	r2, [r3], #2
 8013bc2:	bfb4      	ite	lt
 8013bc4:	222d      	movlt	r2, #45	; 0x2d
 8013bc6:	222b      	movge	r2, #43	; 0x2b
 8013bc8:	2909      	cmp	r1, #9
 8013bca:	7042      	strb	r2, [r0, #1]
 8013bcc:	dd2a      	ble.n	8013c24 <__exponent+0x70>
 8013bce:	f10d 0407 	add.w	r4, sp, #7
 8013bd2:	46a4      	mov	ip, r4
 8013bd4:	270a      	movs	r7, #10
 8013bd6:	46a6      	mov	lr, r4
 8013bd8:	460a      	mov	r2, r1
 8013bda:	fb91 f6f7 	sdiv	r6, r1, r7
 8013bde:	fb07 1516 	mls	r5, r7, r6, r1
 8013be2:	3530      	adds	r5, #48	; 0x30
 8013be4:	2a63      	cmp	r2, #99	; 0x63
 8013be6:	f104 34ff 	add.w	r4, r4, #4294967295
 8013bea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013bee:	4631      	mov	r1, r6
 8013bf0:	dcf1      	bgt.n	8013bd6 <__exponent+0x22>
 8013bf2:	3130      	adds	r1, #48	; 0x30
 8013bf4:	f1ae 0502 	sub.w	r5, lr, #2
 8013bf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013bfc:	1c44      	adds	r4, r0, #1
 8013bfe:	4629      	mov	r1, r5
 8013c00:	4561      	cmp	r1, ip
 8013c02:	d30a      	bcc.n	8013c1a <__exponent+0x66>
 8013c04:	f10d 0209 	add.w	r2, sp, #9
 8013c08:	eba2 020e 	sub.w	r2, r2, lr
 8013c0c:	4565      	cmp	r5, ip
 8013c0e:	bf88      	it	hi
 8013c10:	2200      	movhi	r2, #0
 8013c12:	4413      	add	r3, r2
 8013c14:	1a18      	subs	r0, r3, r0
 8013c16:	b003      	add	sp, #12
 8013c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013c22:	e7ed      	b.n	8013c00 <__exponent+0x4c>
 8013c24:	2330      	movs	r3, #48	; 0x30
 8013c26:	3130      	adds	r1, #48	; 0x30
 8013c28:	7083      	strb	r3, [r0, #2]
 8013c2a:	70c1      	strb	r1, [r0, #3]
 8013c2c:	1d03      	adds	r3, r0, #4
 8013c2e:	e7f1      	b.n	8013c14 <__exponent+0x60>

08013c30 <_printf_float>:
 8013c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c34:	ed2d 8b02 	vpush	{d8}
 8013c38:	b08d      	sub	sp, #52	; 0x34
 8013c3a:	460c      	mov	r4, r1
 8013c3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013c40:	4616      	mov	r6, r2
 8013c42:	461f      	mov	r7, r3
 8013c44:	4605      	mov	r5, r0
 8013c46:	f001 fdcb 	bl	80157e0 <_localeconv_r>
 8013c4a:	f8d0 a000 	ldr.w	sl, [r0]
 8013c4e:	4650      	mov	r0, sl
 8013c50:	f7ec fb2e 	bl	80002b0 <strlen>
 8013c54:	2300      	movs	r3, #0
 8013c56:	930a      	str	r3, [sp, #40]	; 0x28
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	9305      	str	r3, [sp, #20]
 8013c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8013c60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013c64:	3307      	adds	r3, #7
 8013c66:	f023 0307 	bic.w	r3, r3, #7
 8013c6a:	f103 0208 	add.w	r2, r3, #8
 8013c6e:	f8c8 2000 	str.w	r2, [r8]
 8013c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013c7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013c7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c82:	9307      	str	r3, [sp, #28]
 8013c84:	f8cd 8018 	str.w	r8, [sp, #24]
 8013c88:	ee08 0a10 	vmov	s16, r0
 8013c8c:	4b9f      	ldr	r3, [pc, #636]	; (8013f0c <_printf_float+0x2dc>)
 8013c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c92:	f04f 32ff 	mov.w	r2, #4294967295
 8013c96:	f7ec ff69 	bl	8000b6c <__aeabi_dcmpun>
 8013c9a:	bb88      	cbnz	r0, 8013d00 <_printf_float+0xd0>
 8013c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ca0:	4b9a      	ldr	r3, [pc, #616]	; (8013f0c <_printf_float+0x2dc>)
 8013ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ca6:	f7ec ff43 	bl	8000b30 <__aeabi_dcmple>
 8013caa:	bb48      	cbnz	r0, 8013d00 <_printf_float+0xd0>
 8013cac:	2200      	movs	r2, #0
 8013cae:	2300      	movs	r3, #0
 8013cb0:	4640      	mov	r0, r8
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	f7ec ff32 	bl	8000b1c <__aeabi_dcmplt>
 8013cb8:	b110      	cbz	r0, 8013cc0 <_printf_float+0x90>
 8013cba:	232d      	movs	r3, #45	; 0x2d
 8013cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cc0:	4b93      	ldr	r3, [pc, #588]	; (8013f10 <_printf_float+0x2e0>)
 8013cc2:	4894      	ldr	r0, [pc, #592]	; (8013f14 <_printf_float+0x2e4>)
 8013cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013cc8:	bf94      	ite	ls
 8013cca:	4698      	movls	r8, r3
 8013ccc:	4680      	movhi	r8, r0
 8013cce:	2303      	movs	r3, #3
 8013cd0:	6123      	str	r3, [r4, #16]
 8013cd2:	9b05      	ldr	r3, [sp, #20]
 8013cd4:	f023 0204 	bic.w	r2, r3, #4
 8013cd8:	6022      	str	r2, [r4, #0]
 8013cda:	f04f 0900 	mov.w	r9, #0
 8013cde:	9700      	str	r7, [sp, #0]
 8013ce0:	4633      	mov	r3, r6
 8013ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8013ce4:	4621      	mov	r1, r4
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f000 f9d8 	bl	801409c <_printf_common>
 8013cec:	3001      	adds	r0, #1
 8013cee:	f040 8090 	bne.w	8013e12 <_printf_float+0x1e2>
 8013cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf6:	b00d      	add	sp, #52	; 0x34
 8013cf8:	ecbd 8b02 	vpop	{d8}
 8013cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d00:	4642      	mov	r2, r8
 8013d02:	464b      	mov	r3, r9
 8013d04:	4640      	mov	r0, r8
 8013d06:	4649      	mov	r1, r9
 8013d08:	f7ec ff30 	bl	8000b6c <__aeabi_dcmpun>
 8013d0c:	b140      	cbz	r0, 8013d20 <_printf_float+0xf0>
 8013d0e:	464b      	mov	r3, r9
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	bfbc      	itt	lt
 8013d14:	232d      	movlt	r3, #45	; 0x2d
 8013d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013d1a:	487f      	ldr	r0, [pc, #508]	; (8013f18 <_printf_float+0x2e8>)
 8013d1c:	4b7f      	ldr	r3, [pc, #508]	; (8013f1c <_printf_float+0x2ec>)
 8013d1e:	e7d1      	b.n	8013cc4 <_printf_float+0x94>
 8013d20:	6863      	ldr	r3, [r4, #4]
 8013d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013d26:	9206      	str	r2, [sp, #24]
 8013d28:	1c5a      	adds	r2, r3, #1
 8013d2a:	d13f      	bne.n	8013dac <_printf_float+0x17c>
 8013d2c:	2306      	movs	r3, #6
 8013d2e:	6063      	str	r3, [r4, #4]
 8013d30:	9b05      	ldr	r3, [sp, #20]
 8013d32:	6861      	ldr	r1, [r4, #4]
 8013d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013d38:	2300      	movs	r3, #0
 8013d3a:	9303      	str	r3, [sp, #12]
 8013d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8013d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013d42:	ab09      	add	r3, sp, #36	; 0x24
 8013d44:	ec49 8b10 	vmov	d0, r8, r9
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	6022      	str	r2, [r4, #0]
 8013d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013d50:	4628      	mov	r0, r5
 8013d52:	f7ff fecd 	bl	8013af0 <__cvt>
 8013d56:	9b06      	ldr	r3, [sp, #24]
 8013d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d5a:	2b47      	cmp	r3, #71	; 0x47
 8013d5c:	4680      	mov	r8, r0
 8013d5e:	d108      	bne.n	8013d72 <_printf_float+0x142>
 8013d60:	1cc8      	adds	r0, r1, #3
 8013d62:	db02      	blt.n	8013d6a <_printf_float+0x13a>
 8013d64:	6863      	ldr	r3, [r4, #4]
 8013d66:	4299      	cmp	r1, r3
 8013d68:	dd41      	ble.n	8013dee <_printf_float+0x1be>
 8013d6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8013d6e:	fa5f fb8b 	uxtb.w	fp, fp
 8013d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013d76:	d820      	bhi.n	8013dba <_printf_float+0x18a>
 8013d78:	3901      	subs	r1, #1
 8013d7a:	465a      	mov	r2, fp
 8013d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013d80:	9109      	str	r1, [sp, #36]	; 0x24
 8013d82:	f7ff ff17 	bl	8013bb4 <__exponent>
 8013d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d88:	1813      	adds	r3, r2, r0
 8013d8a:	2a01      	cmp	r2, #1
 8013d8c:	4681      	mov	r9, r0
 8013d8e:	6123      	str	r3, [r4, #16]
 8013d90:	dc02      	bgt.n	8013d98 <_printf_float+0x168>
 8013d92:	6822      	ldr	r2, [r4, #0]
 8013d94:	07d2      	lsls	r2, r2, #31
 8013d96:	d501      	bpl.n	8013d9c <_printf_float+0x16c>
 8013d98:	3301      	adds	r3, #1
 8013d9a:	6123      	str	r3, [r4, #16]
 8013d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d09c      	beq.n	8013cde <_printf_float+0xae>
 8013da4:	232d      	movs	r3, #45	; 0x2d
 8013da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013daa:	e798      	b.n	8013cde <_printf_float+0xae>
 8013dac:	9a06      	ldr	r2, [sp, #24]
 8013dae:	2a47      	cmp	r2, #71	; 0x47
 8013db0:	d1be      	bne.n	8013d30 <_printf_float+0x100>
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1bc      	bne.n	8013d30 <_printf_float+0x100>
 8013db6:	2301      	movs	r3, #1
 8013db8:	e7b9      	b.n	8013d2e <_printf_float+0xfe>
 8013dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013dbe:	d118      	bne.n	8013df2 <_printf_float+0x1c2>
 8013dc0:	2900      	cmp	r1, #0
 8013dc2:	6863      	ldr	r3, [r4, #4]
 8013dc4:	dd0b      	ble.n	8013dde <_printf_float+0x1ae>
 8013dc6:	6121      	str	r1, [r4, #16]
 8013dc8:	b913      	cbnz	r3, 8013dd0 <_printf_float+0x1a0>
 8013dca:	6822      	ldr	r2, [r4, #0]
 8013dcc:	07d0      	lsls	r0, r2, #31
 8013dce:	d502      	bpl.n	8013dd6 <_printf_float+0x1a6>
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	440b      	add	r3, r1
 8013dd4:	6123      	str	r3, [r4, #16]
 8013dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8013dd8:	f04f 0900 	mov.w	r9, #0
 8013ddc:	e7de      	b.n	8013d9c <_printf_float+0x16c>
 8013dde:	b913      	cbnz	r3, 8013de6 <_printf_float+0x1b6>
 8013de0:	6822      	ldr	r2, [r4, #0]
 8013de2:	07d2      	lsls	r2, r2, #31
 8013de4:	d501      	bpl.n	8013dea <_printf_float+0x1ba>
 8013de6:	3302      	adds	r3, #2
 8013de8:	e7f4      	b.n	8013dd4 <_printf_float+0x1a4>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e7f2      	b.n	8013dd4 <_printf_float+0x1a4>
 8013dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013df4:	4299      	cmp	r1, r3
 8013df6:	db05      	blt.n	8013e04 <_printf_float+0x1d4>
 8013df8:	6823      	ldr	r3, [r4, #0]
 8013dfa:	6121      	str	r1, [r4, #16]
 8013dfc:	07d8      	lsls	r0, r3, #31
 8013dfe:	d5ea      	bpl.n	8013dd6 <_printf_float+0x1a6>
 8013e00:	1c4b      	adds	r3, r1, #1
 8013e02:	e7e7      	b.n	8013dd4 <_printf_float+0x1a4>
 8013e04:	2900      	cmp	r1, #0
 8013e06:	bfd4      	ite	le
 8013e08:	f1c1 0202 	rsble	r2, r1, #2
 8013e0c:	2201      	movgt	r2, #1
 8013e0e:	4413      	add	r3, r2
 8013e10:	e7e0      	b.n	8013dd4 <_printf_float+0x1a4>
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	055a      	lsls	r2, r3, #21
 8013e16:	d407      	bmi.n	8013e28 <_printf_float+0x1f8>
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	4642      	mov	r2, r8
 8013e1c:	4631      	mov	r1, r6
 8013e1e:	4628      	mov	r0, r5
 8013e20:	47b8      	blx	r7
 8013e22:	3001      	adds	r0, #1
 8013e24:	d12c      	bne.n	8013e80 <_printf_float+0x250>
 8013e26:	e764      	b.n	8013cf2 <_printf_float+0xc2>
 8013e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013e2c:	f240 80e0 	bls.w	8013ff0 <_printf_float+0x3c0>
 8013e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e34:	2200      	movs	r2, #0
 8013e36:	2300      	movs	r3, #0
 8013e38:	f7ec fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	d034      	beq.n	8013eaa <_printf_float+0x27a>
 8013e40:	4a37      	ldr	r2, [pc, #220]	; (8013f20 <_printf_float+0x2f0>)
 8013e42:	2301      	movs	r3, #1
 8013e44:	4631      	mov	r1, r6
 8013e46:	4628      	mov	r0, r5
 8013e48:	47b8      	blx	r7
 8013e4a:	3001      	adds	r0, #1
 8013e4c:	f43f af51 	beq.w	8013cf2 <_printf_float+0xc2>
 8013e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013e54:	429a      	cmp	r2, r3
 8013e56:	db02      	blt.n	8013e5e <_printf_float+0x22e>
 8013e58:	6823      	ldr	r3, [r4, #0]
 8013e5a:	07d8      	lsls	r0, r3, #31
 8013e5c:	d510      	bpl.n	8013e80 <_printf_float+0x250>
 8013e5e:	ee18 3a10 	vmov	r3, s16
 8013e62:	4652      	mov	r2, sl
 8013e64:	4631      	mov	r1, r6
 8013e66:	4628      	mov	r0, r5
 8013e68:	47b8      	blx	r7
 8013e6a:	3001      	adds	r0, #1
 8013e6c:	f43f af41 	beq.w	8013cf2 <_printf_float+0xc2>
 8013e70:	f04f 0800 	mov.w	r8, #0
 8013e74:	f104 091a 	add.w	r9, r4, #26
 8013e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e7a:	3b01      	subs	r3, #1
 8013e7c:	4543      	cmp	r3, r8
 8013e7e:	dc09      	bgt.n	8013e94 <_printf_float+0x264>
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	079b      	lsls	r3, r3, #30
 8013e84:	f100 8105 	bmi.w	8014092 <_printf_float+0x462>
 8013e88:	68e0      	ldr	r0, [r4, #12]
 8013e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e8c:	4298      	cmp	r0, r3
 8013e8e:	bfb8      	it	lt
 8013e90:	4618      	movlt	r0, r3
 8013e92:	e730      	b.n	8013cf6 <_printf_float+0xc6>
 8013e94:	2301      	movs	r3, #1
 8013e96:	464a      	mov	r2, r9
 8013e98:	4631      	mov	r1, r6
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	47b8      	blx	r7
 8013e9e:	3001      	adds	r0, #1
 8013ea0:	f43f af27 	beq.w	8013cf2 <_printf_float+0xc2>
 8013ea4:	f108 0801 	add.w	r8, r8, #1
 8013ea8:	e7e6      	b.n	8013e78 <_printf_float+0x248>
 8013eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	dc39      	bgt.n	8013f24 <_printf_float+0x2f4>
 8013eb0:	4a1b      	ldr	r2, [pc, #108]	; (8013f20 <_printf_float+0x2f0>)
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	4631      	mov	r1, r6
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	47b8      	blx	r7
 8013eba:	3001      	adds	r0, #1
 8013ebc:	f43f af19 	beq.w	8013cf2 <_printf_float+0xc2>
 8013ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ec4:	4313      	orrs	r3, r2
 8013ec6:	d102      	bne.n	8013ece <_printf_float+0x29e>
 8013ec8:	6823      	ldr	r3, [r4, #0]
 8013eca:	07d9      	lsls	r1, r3, #31
 8013ecc:	d5d8      	bpl.n	8013e80 <_printf_float+0x250>
 8013ece:	ee18 3a10 	vmov	r3, s16
 8013ed2:	4652      	mov	r2, sl
 8013ed4:	4631      	mov	r1, r6
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	47b8      	blx	r7
 8013eda:	3001      	adds	r0, #1
 8013edc:	f43f af09 	beq.w	8013cf2 <_printf_float+0xc2>
 8013ee0:	f04f 0900 	mov.w	r9, #0
 8013ee4:	f104 0a1a 	add.w	sl, r4, #26
 8013ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eea:	425b      	negs	r3, r3
 8013eec:	454b      	cmp	r3, r9
 8013eee:	dc01      	bgt.n	8013ef4 <_printf_float+0x2c4>
 8013ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef2:	e792      	b.n	8013e1a <_printf_float+0x1ea>
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	4652      	mov	r2, sl
 8013ef8:	4631      	mov	r1, r6
 8013efa:	4628      	mov	r0, r5
 8013efc:	47b8      	blx	r7
 8013efe:	3001      	adds	r0, #1
 8013f00:	f43f aef7 	beq.w	8013cf2 <_printf_float+0xc2>
 8013f04:	f109 0901 	add.w	r9, r9, #1
 8013f08:	e7ee      	b.n	8013ee8 <_printf_float+0x2b8>
 8013f0a:	bf00      	nop
 8013f0c:	7fefffff 	.word	0x7fefffff
 8013f10:	08021f0c 	.word	0x08021f0c
 8013f14:	08021f10 	.word	0x08021f10
 8013f18:	08021f18 	.word	0x08021f18
 8013f1c:	08021f14 	.word	0x08021f14
 8013f20:	08021f1c 	.word	0x08021f1c
 8013f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	bfa8      	it	ge
 8013f2c:	461a      	movge	r2, r3
 8013f2e:	2a00      	cmp	r2, #0
 8013f30:	4691      	mov	r9, r2
 8013f32:	dc37      	bgt.n	8013fa4 <_printf_float+0x374>
 8013f34:	f04f 0b00 	mov.w	fp, #0
 8013f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f3c:	f104 021a 	add.w	r2, r4, #26
 8013f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013f42:	9305      	str	r3, [sp, #20]
 8013f44:	eba3 0309 	sub.w	r3, r3, r9
 8013f48:	455b      	cmp	r3, fp
 8013f4a:	dc33      	bgt.n	8013fb4 <_printf_float+0x384>
 8013f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f50:	429a      	cmp	r2, r3
 8013f52:	db3b      	blt.n	8013fcc <_printf_float+0x39c>
 8013f54:	6823      	ldr	r3, [r4, #0]
 8013f56:	07da      	lsls	r2, r3, #31
 8013f58:	d438      	bmi.n	8013fcc <_printf_float+0x39c>
 8013f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f5c:	9b05      	ldr	r3, [sp, #20]
 8013f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	eba2 0901 	sub.w	r9, r2, r1
 8013f66:	4599      	cmp	r9, r3
 8013f68:	bfa8      	it	ge
 8013f6a:	4699      	movge	r9, r3
 8013f6c:	f1b9 0f00 	cmp.w	r9, #0
 8013f70:	dc35      	bgt.n	8013fde <_printf_float+0x3ae>
 8013f72:	f04f 0800 	mov.w	r8, #0
 8013f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f7a:	f104 0a1a 	add.w	sl, r4, #26
 8013f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f82:	1a9b      	subs	r3, r3, r2
 8013f84:	eba3 0309 	sub.w	r3, r3, r9
 8013f88:	4543      	cmp	r3, r8
 8013f8a:	f77f af79 	ble.w	8013e80 <_printf_float+0x250>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	4652      	mov	r2, sl
 8013f92:	4631      	mov	r1, r6
 8013f94:	4628      	mov	r0, r5
 8013f96:	47b8      	blx	r7
 8013f98:	3001      	adds	r0, #1
 8013f9a:	f43f aeaa 	beq.w	8013cf2 <_printf_float+0xc2>
 8013f9e:	f108 0801 	add.w	r8, r8, #1
 8013fa2:	e7ec      	b.n	8013f7e <_printf_float+0x34e>
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	4631      	mov	r1, r6
 8013fa8:	4642      	mov	r2, r8
 8013faa:	4628      	mov	r0, r5
 8013fac:	47b8      	blx	r7
 8013fae:	3001      	adds	r0, #1
 8013fb0:	d1c0      	bne.n	8013f34 <_printf_float+0x304>
 8013fb2:	e69e      	b.n	8013cf2 <_printf_float+0xc2>
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	4631      	mov	r1, r6
 8013fb8:	4628      	mov	r0, r5
 8013fba:	9205      	str	r2, [sp, #20]
 8013fbc:	47b8      	blx	r7
 8013fbe:	3001      	adds	r0, #1
 8013fc0:	f43f ae97 	beq.w	8013cf2 <_printf_float+0xc2>
 8013fc4:	9a05      	ldr	r2, [sp, #20]
 8013fc6:	f10b 0b01 	add.w	fp, fp, #1
 8013fca:	e7b9      	b.n	8013f40 <_printf_float+0x310>
 8013fcc:	ee18 3a10 	vmov	r3, s16
 8013fd0:	4652      	mov	r2, sl
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	4628      	mov	r0, r5
 8013fd6:	47b8      	blx	r7
 8013fd8:	3001      	adds	r0, #1
 8013fda:	d1be      	bne.n	8013f5a <_printf_float+0x32a>
 8013fdc:	e689      	b.n	8013cf2 <_printf_float+0xc2>
 8013fde:	9a05      	ldr	r2, [sp, #20]
 8013fe0:	464b      	mov	r3, r9
 8013fe2:	4442      	add	r2, r8
 8013fe4:	4631      	mov	r1, r6
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	47b8      	blx	r7
 8013fea:	3001      	adds	r0, #1
 8013fec:	d1c1      	bne.n	8013f72 <_printf_float+0x342>
 8013fee:	e680      	b.n	8013cf2 <_printf_float+0xc2>
 8013ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ff2:	2a01      	cmp	r2, #1
 8013ff4:	dc01      	bgt.n	8013ffa <_printf_float+0x3ca>
 8013ff6:	07db      	lsls	r3, r3, #31
 8013ff8:	d538      	bpl.n	801406c <_printf_float+0x43c>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	4642      	mov	r2, r8
 8013ffe:	4631      	mov	r1, r6
 8014000:	4628      	mov	r0, r5
 8014002:	47b8      	blx	r7
 8014004:	3001      	adds	r0, #1
 8014006:	f43f ae74 	beq.w	8013cf2 <_printf_float+0xc2>
 801400a:	ee18 3a10 	vmov	r3, s16
 801400e:	4652      	mov	r2, sl
 8014010:	4631      	mov	r1, r6
 8014012:	4628      	mov	r0, r5
 8014014:	47b8      	blx	r7
 8014016:	3001      	adds	r0, #1
 8014018:	f43f ae6b 	beq.w	8013cf2 <_printf_float+0xc2>
 801401c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014020:	2200      	movs	r2, #0
 8014022:	2300      	movs	r3, #0
 8014024:	f7ec fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8014028:	b9d8      	cbnz	r0, 8014062 <_printf_float+0x432>
 801402a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801402c:	f108 0201 	add.w	r2, r8, #1
 8014030:	3b01      	subs	r3, #1
 8014032:	4631      	mov	r1, r6
 8014034:	4628      	mov	r0, r5
 8014036:	47b8      	blx	r7
 8014038:	3001      	adds	r0, #1
 801403a:	d10e      	bne.n	801405a <_printf_float+0x42a>
 801403c:	e659      	b.n	8013cf2 <_printf_float+0xc2>
 801403e:	2301      	movs	r3, #1
 8014040:	4652      	mov	r2, sl
 8014042:	4631      	mov	r1, r6
 8014044:	4628      	mov	r0, r5
 8014046:	47b8      	blx	r7
 8014048:	3001      	adds	r0, #1
 801404a:	f43f ae52 	beq.w	8013cf2 <_printf_float+0xc2>
 801404e:	f108 0801 	add.w	r8, r8, #1
 8014052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014054:	3b01      	subs	r3, #1
 8014056:	4543      	cmp	r3, r8
 8014058:	dcf1      	bgt.n	801403e <_printf_float+0x40e>
 801405a:	464b      	mov	r3, r9
 801405c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014060:	e6dc      	b.n	8013e1c <_printf_float+0x1ec>
 8014062:	f04f 0800 	mov.w	r8, #0
 8014066:	f104 0a1a 	add.w	sl, r4, #26
 801406a:	e7f2      	b.n	8014052 <_printf_float+0x422>
 801406c:	2301      	movs	r3, #1
 801406e:	4642      	mov	r2, r8
 8014070:	e7df      	b.n	8014032 <_printf_float+0x402>
 8014072:	2301      	movs	r3, #1
 8014074:	464a      	mov	r2, r9
 8014076:	4631      	mov	r1, r6
 8014078:	4628      	mov	r0, r5
 801407a:	47b8      	blx	r7
 801407c:	3001      	adds	r0, #1
 801407e:	f43f ae38 	beq.w	8013cf2 <_printf_float+0xc2>
 8014082:	f108 0801 	add.w	r8, r8, #1
 8014086:	68e3      	ldr	r3, [r4, #12]
 8014088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801408a:	1a5b      	subs	r3, r3, r1
 801408c:	4543      	cmp	r3, r8
 801408e:	dcf0      	bgt.n	8014072 <_printf_float+0x442>
 8014090:	e6fa      	b.n	8013e88 <_printf_float+0x258>
 8014092:	f04f 0800 	mov.w	r8, #0
 8014096:	f104 0919 	add.w	r9, r4, #25
 801409a:	e7f4      	b.n	8014086 <_printf_float+0x456>

0801409c <_printf_common>:
 801409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140a0:	4616      	mov	r6, r2
 80140a2:	4699      	mov	r9, r3
 80140a4:	688a      	ldr	r2, [r1, #8]
 80140a6:	690b      	ldr	r3, [r1, #16]
 80140a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80140ac:	4293      	cmp	r3, r2
 80140ae:	bfb8      	it	lt
 80140b0:	4613      	movlt	r3, r2
 80140b2:	6033      	str	r3, [r6, #0]
 80140b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80140b8:	4607      	mov	r7, r0
 80140ba:	460c      	mov	r4, r1
 80140bc:	b10a      	cbz	r2, 80140c2 <_printf_common+0x26>
 80140be:	3301      	adds	r3, #1
 80140c0:	6033      	str	r3, [r6, #0]
 80140c2:	6823      	ldr	r3, [r4, #0]
 80140c4:	0699      	lsls	r1, r3, #26
 80140c6:	bf42      	ittt	mi
 80140c8:	6833      	ldrmi	r3, [r6, #0]
 80140ca:	3302      	addmi	r3, #2
 80140cc:	6033      	strmi	r3, [r6, #0]
 80140ce:	6825      	ldr	r5, [r4, #0]
 80140d0:	f015 0506 	ands.w	r5, r5, #6
 80140d4:	d106      	bne.n	80140e4 <_printf_common+0x48>
 80140d6:	f104 0a19 	add.w	sl, r4, #25
 80140da:	68e3      	ldr	r3, [r4, #12]
 80140dc:	6832      	ldr	r2, [r6, #0]
 80140de:	1a9b      	subs	r3, r3, r2
 80140e0:	42ab      	cmp	r3, r5
 80140e2:	dc26      	bgt.n	8014132 <_printf_common+0x96>
 80140e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80140e8:	1e13      	subs	r3, r2, #0
 80140ea:	6822      	ldr	r2, [r4, #0]
 80140ec:	bf18      	it	ne
 80140ee:	2301      	movne	r3, #1
 80140f0:	0692      	lsls	r2, r2, #26
 80140f2:	d42b      	bmi.n	801414c <_printf_common+0xb0>
 80140f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140f8:	4649      	mov	r1, r9
 80140fa:	4638      	mov	r0, r7
 80140fc:	47c0      	blx	r8
 80140fe:	3001      	adds	r0, #1
 8014100:	d01e      	beq.n	8014140 <_printf_common+0xa4>
 8014102:	6823      	ldr	r3, [r4, #0]
 8014104:	68e5      	ldr	r5, [r4, #12]
 8014106:	6832      	ldr	r2, [r6, #0]
 8014108:	f003 0306 	and.w	r3, r3, #6
 801410c:	2b04      	cmp	r3, #4
 801410e:	bf08      	it	eq
 8014110:	1aad      	subeq	r5, r5, r2
 8014112:	68a3      	ldr	r3, [r4, #8]
 8014114:	6922      	ldr	r2, [r4, #16]
 8014116:	bf0c      	ite	eq
 8014118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801411c:	2500      	movne	r5, #0
 801411e:	4293      	cmp	r3, r2
 8014120:	bfc4      	itt	gt
 8014122:	1a9b      	subgt	r3, r3, r2
 8014124:	18ed      	addgt	r5, r5, r3
 8014126:	2600      	movs	r6, #0
 8014128:	341a      	adds	r4, #26
 801412a:	42b5      	cmp	r5, r6
 801412c:	d11a      	bne.n	8014164 <_printf_common+0xc8>
 801412e:	2000      	movs	r0, #0
 8014130:	e008      	b.n	8014144 <_printf_common+0xa8>
 8014132:	2301      	movs	r3, #1
 8014134:	4652      	mov	r2, sl
 8014136:	4649      	mov	r1, r9
 8014138:	4638      	mov	r0, r7
 801413a:	47c0      	blx	r8
 801413c:	3001      	adds	r0, #1
 801413e:	d103      	bne.n	8014148 <_printf_common+0xac>
 8014140:	f04f 30ff 	mov.w	r0, #4294967295
 8014144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014148:	3501      	adds	r5, #1
 801414a:	e7c6      	b.n	80140da <_printf_common+0x3e>
 801414c:	18e1      	adds	r1, r4, r3
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	2030      	movs	r0, #48	; 0x30
 8014152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014156:	4422      	add	r2, r4
 8014158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801415c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014160:	3302      	adds	r3, #2
 8014162:	e7c7      	b.n	80140f4 <_printf_common+0x58>
 8014164:	2301      	movs	r3, #1
 8014166:	4622      	mov	r2, r4
 8014168:	4649      	mov	r1, r9
 801416a:	4638      	mov	r0, r7
 801416c:	47c0      	blx	r8
 801416e:	3001      	adds	r0, #1
 8014170:	d0e6      	beq.n	8014140 <_printf_common+0xa4>
 8014172:	3601      	adds	r6, #1
 8014174:	e7d9      	b.n	801412a <_printf_common+0x8e>
	...

08014178 <_printf_i>:
 8014178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801417c:	460c      	mov	r4, r1
 801417e:	4691      	mov	r9, r2
 8014180:	7e27      	ldrb	r7, [r4, #24]
 8014182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014184:	2f78      	cmp	r7, #120	; 0x78
 8014186:	4680      	mov	r8, r0
 8014188:	469a      	mov	sl, r3
 801418a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801418e:	d807      	bhi.n	80141a0 <_printf_i+0x28>
 8014190:	2f62      	cmp	r7, #98	; 0x62
 8014192:	d80a      	bhi.n	80141aa <_printf_i+0x32>
 8014194:	2f00      	cmp	r7, #0
 8014196:	f000 80d8 	beq.w	801434a <_printf_i+0x1d2>
 801419a:	2f58      	cmp	r7, #88	; 0x58
 801419c:	f000 80a3 	beq.w	80142e6 <_printf_i+0x16e>
 80141a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80141a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80141a8:	e03a      	b.n	8014220 <_printf_i+0xa8>
 80141aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80141ae:	2b15      	cmp	r3, #21
 80141b0:	d8f6      	bhi.n	80141a0 <_printf_i+0x28>
 80141b2:	a001      	add	r0, pc, #4	; (adr r0, 80141b8 <_printf_i+0x40>)
 80141b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80141b8:	08014211 	.word	0x08014211
 80141bc:	08014225 	.word	0x08014225
 80141c0:	080141a1 	.word	0x080141a1
 80141c4:	080141a1 	.word	0x080141a1
 80141c8:	080141a1 	.word	0x080141a1
 80141cc:	080141a1 	.word	0x080141a1
 80141d0:	08014225 	.word	0x08014225
 80141d4:	080141a1 	.word	0x080141a1
 80141d8:	080141a1 	.word	0x080141a1
 80141dc:	080141a1 	.word	0x080141a1
 80141e0:	080141a1 	.word	0x080141a1
 80141e4:	08014331 	.word	0x08014331
 80141e8:	08014255 	.word	0x08014255
 80141ec:	08014313 	.word	0x08014313
 80141f0:	080141a1 	.word	0x080141a1
 80141f4:	080141a1 	.word	0x080141a1
 80141f8:	08014353 	.word	0x08014353
 80141fc:	080141a1 	.word	0x080141a1
 8014200:	08014255 	.word	0x08014255
 8014204:	080141a1 	.word	0x080141a1
 8014208:	080141a1 	.word	0x080141a1
 801420c:	0801431b 	.word	0x0801431b
 8014210:	680b      	ldr	r3, [r1, #0]
 8014212:	1d1a      	adds	r2, r3, #4
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	600a      	str	r2, [r1, #0]
 8014218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801421c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014220:	2301      	movs	r3, #1
 8014222:	e0a3      	b.n	801436c <_printf_i+0x1f4>
 8014224:	6825      	ldr	r5, [r4, #0]
 8014226:	6808      	ldr	r0, [r1, #0]
 8014228:	062e      	lsls	r6, r5, #24
 801422a:	f100 0304 	add.w	r3, r0, #4
 801422e:	d50a      	bpl.n	8014246 <_printf_i+0xce>
 8014230:	6805      	ldr	r5, [r0, #0]
 8014232:	600b      	str	r3, [r1, #0]
 8014234:	2d00      	cmp	r5, #0
 8014236:	da03      	bge.n	8014240 <_printf_i+0xc8>
 8014238:	232d      	movs	r3, #45	; 0x2d
 801423a:	426d      	negs	r5, r5
 801423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014240:	485e      	ldr	r0, [pc, #376]	; (80143bc <_printf_i+0x244>)
 8014242:	230a      	movs	r3, #10
 8014244:	e019      	b.n	801427a <_printf_i+0x102>
 8014246:	f015 0f40 	tst.w	r5, #64	; 0x40
 801424a:	6805      	ldr	r5, [r0, #0]
 801424c:	600b      	str	r3, [r1, #0]
 801424e:	bf18      	it	ne
 8014250:	b22d      	sxthne	r5, r5
 8014252:	e7ef      	b.n	8014234 <_printf_i+0xbc>
 8014254:	680b      	ldr	r3, [r1, #0]
 8014256:	6825      	ldr	r5, [r4, #0]
 8014258:	1d18      	adds	r0, r3, #4
 801425a:	6008      	str	r0, [r1, #0]
 801425c:	0628      	lsls	r0, r5, #24
 801425e:	d501      	bpl.n	8014264 <_printf_i+0xec>
 8014260:	681d      	ldr	r5, [r3, #0]
 8014262:	e002      	b.n	801426a <_printf_i+0xf2>
 8014264:	0669      	lsls	r1, r5, #25
 8014266:	d5fb      	bpl.n	8014260 <_printf_i+0xe8>
 8014268:	881d      	ldrh	r5, [r3, #0]
 801426a:	4854      	ldr	r0, [pc, #336]	; (80143bc <_printf_i+0x244>)
 801426c:	2f6f      	cmp	r7, #111	; 0x6f
 801426e:	bf0c      	ite	eq
 8014270:	2308      	moveq	r3, #8
 8014272:	230a      	movne	r3, #10
 8014274:	2100      	movs	r1, #0
 8014276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801427a:	6866      	ldr	r6, [r4, #4]
 801427c:	60a6      	str	r6, [r4, #8]
 801427e:	2e00      	cmp	r6, #0
 8014280:	bfa2      	ittt	ge
 8014282:	6821      	ldrge	r1, [r4, #0]
 8014284:	f021 0104 	bicge.w	r1, r1, #4
 8014288:	6021      	strge	r1, [r4, #0]
 801428a:	b90d      	cbnz	r5, 8014290 <_printf_i+0x118>
 801428c:	2e00      	cmp	r6, #0
 801428e:	d04d      	beq.n	801432c <_printf_i+0x1b4>
 8014290:	4616      	mov	r6, r2
 8014292:	fbb5 f1f3 	udiv	r1, r5, r3
 8014296:	fb03 5711 	mls	r7, r3, r1, r5
 801429a:	5dc7      	ldrb	r7, [r0, r7]
 801429c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80142a0:	462f      	mov	r7, r5
 80142a2:	42bb      	cmp	r3, r7
 80142a4:	460d      	mov	r5, r1
 80142a6:	d9f4      	bls.n	8014292 <_printf_i+0x11a>
 80142a8:	2b08      	cmp	r3, #8
 80142aa:	d10b      	bne.n	80142c4 <_printf_i+0x14c>
 80142ac:	6823      	ldr	r3, [r4, #0]
 80142ae:	07df      	lsls	r7, r3, #31
 80142b0:	d508      	bpl.n	80142c4 <_printf_i+0x14c>
 80142b2:	6923      	ldr	r3, [r4, #16]
 80142b4:	6861      	ldr	r1, [r4, #4]
 80142b6:	4299      	cmp	r1, r3
 80142b8:	bfde      	ittt	le
 80142ba:	2330      	movle	r3, #48	; 0x30
 80142bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80142c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80142c4:	1b92      	subs	r2, r2, r6
 80142c6:	6122      	str	r2, [r4, #16]
 80142c8:	f8cd a000 	str.w	sl, [sp]
 80142cc:	464b      	mov	r3, r9
 80142ce:	aa03      	add	r2, sp, #12
 80142d0:	4621      	mov	r1, r4
 80142d2:	4640      	mov	r0, r8
 80142d4:	f7ff fee2 	bl	801409c <_printf_common>
 80142d8:	3001      	adds	r0, #1
 80142da:	d14c      	bne.n	8014376 <_printf_i+0x1fe>
 80142dc:	f04f 30ff 	mov.w	r0, #4294967295
 80142e0:	b004      	add	sp, #16
 80142e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e6:	4835      	ldr	r0, [pc, #212]	; (80143bc <_printf_i+0x244>)
 80142e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80142ec:	6823      	ldr	r3, [r4, #0]
 80142ee:	680e      	ldr	r6, [r1, #0]
 80142f0:	061f      	lsls	r7, r3, #24
 80142f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80142f6:	600e      	str	r6, [r1, #0]
 80142f8:	d514      	bpl.n	8014324 <_printf_i+0x1ac>
 80142fa:	07d9      	lsls	r1, r3, #31
 80142fc:	bf44      	itt	mi
 80142fe:	f043 0320 	orrmi.w	r3, r3, #32
 8014302:	6023      	strmi	r3, [r4, #0]
 8014304:	b91d      	cbnz	r5, 801430e <_printf_i+0x196>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	f023 0320 	bic.w	r3, r3, #32
 801430c:	6023      	str	r3, [r4, #0]
 801430e:	2310      	movs	r3, #16
 8014310:	e7b0      	b.n	8014274 <_printf_i+0xfc>
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	f043 0320 	orr.w	r3, r3, #32
 8014318:	6023      	str	r3, [r4, #0]
 801431a:	2378      	movs	r3, #120	; 0x78
 801431c:	4828      	ldr	r0, [pc, #160]	; (80143c0 <_printf_i+0x248>)
 801431e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014322:	e7e3      	b.n	80142ec <_printf_i+0x174>
 8014324:	065e      	lsls	r6, r3, #25
 8014326:	bf48      	it	mi
 8014328:	b2ad      	uxthmi	r5, r5
 801432a:	e7e6      	b.n	80142fa <_printf_i+0x182>
 801432c:	4616      	mov	r6, r2
 801432e:	e7bb      	b.n	80142a8 <_printf_i+0x130>
 8014330:	680b      	ldr	r3, [r1, #0]
 8014332:	6826      	ldr	r6, [r4, #0]
 8014334:	6960      	ldr	r0, [r4, #20]
 8014336:	1d1d      	adds	r5, r3, #4
 8014338:	600d      	str	r5, [r1, #0]
 801433a:	0635      	lsls	r5, r6, #24
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	d501      	bpl.n	8014344 <_printf_i+0x1cc>
 8014340:	6018      	str	r0, [r3, #0]
 8014342:	e002      	b.n	801434a <_printf_i+0x1d2>
 8014344:	0671      	lsls	r1, r6, #25
 8014346:	d5fb      	bpl.n	8014340 <_printf_i+0x1c8>
 8014348:	8018      	strh	r0, [r3, #0]
 801434a:	2300      	movs	r3, #0
 801434c:	6123      	str	r3, [r4, #16]
 801434e:	4616      	mov	r6, r2
 8014350:	e7ba      	b.n	80142c8 <_printf_i+0x150>
 8014352:	680b      	ldr	r3, [r1, #0]
 8014354:	1d1a      	adds	r2, r3, #4
 8014356:	600a      	str	r2, [r1, #0]
 8014358:	681e      	ldr	r6, [r3, #0]
 801435a:	6862      	ldr	r2, [r4, #4]
 801435c:	2100      	movs	r1, #0
 801435e:	4630      	mov	r0, r6
 8014360:	f7eb ff56 	bl	8000210 <memchr>
 8014364:	b108      	cbz	r0, 801436a <_printf_i+0x1f2>
 8014366:	1b80      	subs	r0, r0, r6
 8014368:	6060      	str	r0, [r4, #4]
 801436a:	6863      	ldr	r3, [r4, #4]
 801436c:	6123      	str	r3, [r4, #16]
 801436e:	2300      	movs	r3, #0
 8014370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014374:	e7a8      	b.n	80142c8 <_printf_i+0x150>
 8014376:	6923      	ldr	r3, [r4, #16]
 8014378:	4632      	mov	r2, r6
 801437a:	4649      	mov	r1, r9
 801437c:	4640      	mov	r0, r8
 801437e:	47d0      	blx	sl
 8014380:	3001      	adds	r0, #1
 8014382:	d0ab      	beq.n	80142dc <_printf_i+0x164>
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	079b      	lsls	r3, r3, #30
 8014388:	d413      	bmi.n	80143b2 <_printf_i+0x23a>
 801438a:	68e0      	ldr	r0, [r4, #12]
 801438c:	9b03      	ldr	r3, [sp, #12]
 801438e:	4298      	cmp	r0, r3
 8014390:	bfb8      	it	lt
 8014392:	4618      	movlt	r0, r3
 8014394:	e7a4      	b.n	80142e0 <_printf_i+0x168>
 8014396:	2301      	movs	r3, #1
 8014398:	4632      	mov	r2, r6
 801439a:	4649      	mov	r1, r9
 801439c:	4640      	mov	r0, r8
 801439e:	47d0      	blx	sl
 80143a0:	3001      	adds	r0, #1
 80143a2:	d09b      	beq.n	80142dc <_printf_i+0x164>
 80143a4:	3501      	adds	r5, #1
 80143a6:	68e3      	ldr	r3, [r4, #12]
 80143a8:	9903      	ldr	r1, [sp, #12]
 80143aa:	1a5b      	subs	r3, r3, r1
 80143ac:	42ab      	cmp	r3, r5
 80143ae:	dcf2      	bgt.n	8014396 <_printf_i+0x21e>
 80143b0:	e7eb      	b.n	801438a <_printf_i+0x212>
 80143b2:	2500      	movs	r5, #0
 80143b4:	f104 0619 	add.w	r6, r4, #25
 80143b8:	e7f5      	b.n	80143a6 <_printf_i+0x22e>
 80143ba:	bf00      	nop
 80143bc:	08021f1e 	.word	0x08021f1e
 80143c0:	08021f2f 	.word	0x08021f2f

080143c4 <iprintf>:
 80143c4:	b40f      	push	{r0, r1, r2, r3}
 80143c6:	4b0a      	ldr	r3, [pc, #40]	; (80143f0 <iprintf+0x2c>)
 80143c8:	b513      	push	{r0, r1, r4, lr}
 80143ca:	681c      	ldr	r4, [r3, #0]
 80143cc:	b124      	cbz	r4, 80143d8 <iprintf+0x14>
 80143ce:	69a3      	ldr	r3, [r4, #24]
 80143d0:	b913      	cbnz	r3, 80143d8 <iprintf+0x14>
 80143d2:	4620      	mov	r0, r4
 80143d4:	f001 f966 	bl	80156a4 <__sinit>
 80143d8:	ab05      	add	r3, sp, #20
 80143da:	9a04      	ldr	r2, [sp, #16]
 80143dc:	68a1      	ldr	r1, [r4, #8]
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	4620      	mov	r0, r4
 80143e2:	f001 ff87 	bl	80162f4 <_vfiprintf_r>
 80143e6:	b002      	add	sp, #8
 80143e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ec:	b004      	add	sp, #16
 80143ee:	4770      	bx	lr
 80143f0:	20000190 	.word	0x20000190

080143f4 <_puts_r>:
 80143f4:	b570      	push	{r4, r5, r6, lr}
 80143f6:	460e      	mov	r6, r1
 80143f8:	4605      	mov	r5, r0
 80143fa:	b118      	cbz	r0, 8014404 <_puts_r+0x10>
 80143fc:	6983      	ldr	r3, [r0, #24]
 80143fe:	b90b      	cbnz	r3, 8014404 <_puts_r+0x10>
 8014400:	f001 f950 	bl	80156a4 <__sinit>
 8014404:	69ab      	ldr	r3, [r5, #24]
 8014406:	68ac      	ldr	r4, [r5, #8]
 8014408:	b913      	cbnz	r3, 8014410 <_puts_r+0x1c>
 801440a:	4628      	mov	r0, r5
 801440c:	f001 f94a 	bl	80156a4 <__sinit>
 8014410:	4b2c      	ldr	r3, [pc, #176]	; (80144c4 <_puts_r+0xd0>)
 8014412:	429c      	cmp	r4, r3
 8014414:	d120      	bne.n	8014458 <_puts_r+0x64>
 8014416:	686c      	ldr	r4, [r5, #4]
 8014418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801441a:	07db      	lsls	r3, r3, #31
 801441c:	d405      	bmi.n	801442a <_puts_r+0x36>
 801441e:	89a3      	ldrh	r3, [r4, #12]
 8014420:	0598      	lsls	r0, r3, #22
 8014422:	d402      	bmi.n	801442a <_puts_r+0x36>
 8014424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014426:	f001 f9e0 	bl	80157ea <__retarget_lock_acquire_recursive>
 801442a:	89a3      	ldrh	r3, [r4, #12]
 801442c:	0719      	lsls	r1, r3, #28
 801442e:	d51d      	bpl.n	801446c <_puts_r+0x78>
 8014430:	6923      	ldr	r3, [r4, #16]
 8014432:	b1db      	cbz	r3, 801446c <_puts_r+0x78>
 8014434:	3e01      	subs	r6, #1
 8014436:	68a3      	ldr	r3, [r4, #8]
 8014438:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801443c:	3b01      	subs	r3, #1
 801443e:	60a3      	str	r3, [r4, #8]
 8014440:	bb39      	cbnz	r1, 8014492 <_puts_r+0x9e>
 8014442:	2b00      	cmp	r3, #0
 8014444:	da38      	bge.n	80144b8 <_puts_r+0xc4>
 8014446:	4622      	mov	r2, r4
 8014448:	210a      	movs	r1, #10
 801444a:	4628      	mov	r0, r5
 801444c:	f000 f8d6 	bl	80145fc <__swbuf_r>
 8014450:	3001      	adds	r0, #1
 8014452:	d011      	beq.n	8014478 <_puts_r+0x84>
 8014454:	250a      	movs	r5, #10
 8014456:	e011      	b.n	801447c <_puts_r+0x88>
 8014458:	4b1b      	ldr	r3, [pc, #108]	; (80144c8 <_puts_r+0xd4>)
 801445a:	429c      	cmp	r4, r3
 801445c:	d101      	bne.n	8014462 <_puts_r+0x6e>
 801445e:	68ac      	ldr	r4, [r5, #8]
 8014460:	e7da      	b.n	8014418 <_puts_r+0x24>
 8014462:	4b1a      	ldr	r3, [pc, #104]	; (80144cc <_puts_r+0xd8>)
 8014464:	429c      	cmp	r4, r3
 8014466:	bf08      	it	eq
 8014468:	68ec      	ldreq	r4, [r5, #12]
 801446a:	e7d5      	b.n	8014418 <_puts_r+0x24>
 801446c:	4621      	mov	r1, r4
 801446e:	4628      	mov	r0, r5
 8014470:	f000 f916 	bl	80146a0 <__swsetup_r>
 8014474:	2800      	cmp	r0, #0
 8014476:	d0dd      	beq.n	8014434 <_puts_r+0x40>
 8014478:	f04f 35ff 	mov.w	r5, #4294967295
 801447c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801447e:	07da      	lsls	r2, r3, #31
 8014480:	d405      	bmi.n	801448e <_puts_r+0x9a>
 8014482:	89a3      	ldrh	r3, [r4, #12]
 8014484:	059b      	lsls	r3, r3, #22
 8014486:	d402      	bmi.n	801448e <_puts_r+0x9a>
 8014488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801448a:	f001 f9af 	bl	80157ec <__retarget_lock_release_recursive>
 801448e:	4628      	mov	r0, r5
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	2b00      	cmp	r3, #0
 8014494:	da04      	bge.n	80144a0 <_puts_r+0xac>
 8014496:	69a2      	ldr	r2, [r4, #24]
 8014498:	429a      	cmp	r2, r3
 801449a:	dc06      	bgt.n	80144aa <_puts_r+0xb6>
 801449c:	290a      	cmp	r1, #10
 801449e:	d004      	beq.n	80144aa <_puts_r+0xb6>
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	6022      	str	r2, [r4, #0]
 80144a6:	7019      	strb	r1, [r3, #0]
 80144a8:	e7c5      	b.n	8014436 <_puts_r+0x42>
 80144aa:	4622      	mov	r2, r4
 80144ac:	4628      	mov	r0, r5
 80144ae:	f000 f8a5 	bl	80145fc <__swbuf_r>
 80144b2:	3001      	adds	r0, #1
 80144b4:	d1bf      	bne.n	8014436 <_puts_r+0x42>
 80144b6:	e7df      	b.n	8014478 <_puts_r+0x84>
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	250a      	movs	r5, #10
 80144bc:	1c5a      	adds	r2, r3, #1
 80144be:	6022      	str	r2, [r4, #0]
 80144c0:	701d      	strb	r5, [r3, #0]
 80144c2:	e7db      	b.n	801447c <_puts_r+0x88>
 80144c4:	08021ff4 	.word	0x08021ff4
 80144c8:	08022014 	.word	0x08022014
 80144cc:	08021fd4 	.word	0x08021fd4

080144d0 <puts>:
 80144d0:	4b02      	ldr	r3, [pc, #8]	; (80144dc <puts+0xc>)
 80144d2:	4601      	mov	r1, r0
 80144d4:	6818      	ldr	r0, [r3, #0]
 80144d6:	f7ff bf8d 	b.w	80143f4 <_puts_r>
 80144da:	bf00      	nop
 80144dc:	20000190 	.word	0x20000190

080144e0 <_sbrk_r>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	4d06      	ldr	r5, [pc, #24]	; (80144fc <_sbrk_r+0x1c>)
 80144e4:	2300      	movs	r3, #0
 80144e6:	4604      	mov	r4, r0
 80144e8:	4608      	mov	r0, r1
 80144ea:	602b      	str	r3, [r5, #0]
 80144ec:	f7f3 ff80 	bl	80083f0 <_sbrk>
 80144f0:	1c43      	adds	r3, r0, #1
 80144f2:	d102      	bne.n	80144fa <_sbrk_r+0x1a>
 80144f4:	682b      	ldr	r3, [r5, #0]
 80144f6:	b103      	cbz	r3, 80144fa <_sbrk_r+0x1a>
 80144f8:	6023      	str	r3, [r4, #0]
 80144fa:	bd38      	pop	{r3, r4, r5, pc}
 80144fc:	200025c0 	.word	0x200025c0

08014500 <_raise_r>:
 8014500:	291f      	cmp	r1, #31
 8014502:	b538      	push	{r3, r4, r5, lr}
 8014504:	4604      	mov	r4, r0
 8014506:	460d      	mov	r5, r1
 8014508:	d904      	bls.n	8014514 <_raise_r+0x14>
 801450a:	2316      	movs	r3, #22
 801450c:	6003      	str	r3, [r0, #0]
 801450e:	f04f 30ff 	mov.w	r0, #4294967295
 8014512:	bd38      	pop	{r3, r4, r5, pc}
 8014514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014516:	b112      	cbz	r2, 801451e <_raise_r+0x1e>
 8014518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801451c:	b94b      	cbnz	r3, 8014532 <_raise_r+0x32>
 801451e:	4620      	mov	r0, r4
 8014520:	f000 f830 	bl	8014584 <_getpid_r>
 8014524:	462a      	mov	r2, r5
 8014526:	4601      	mov	r1, r0
 8014528:	4620      	mov	r0, r4
 801452a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801452e:	f000 b817 	b.w	8014560 <_kill_r>
 8014532:	2b01      	cmp	r3, #1
 8014534:	d00a      	beq.n	801454c <_raise_r+0x4c>
 8014536:	1c59      	adds	r1, r3, #1
 8014538:	d103      	bne.n	8014542 <_raise_r+0x42>
 801453a:	2316      	movs	r3, #22
 801453c:	6003      	str	r3, [r0, #0]
 801453e:	2001      	movs	r0, #1
 8014540:	e7e7      	b.n	8014512 <_raise_r+0x12>
 8014542:	2400      	movs	r4, #0
 8014544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014548:	4628      	mov	r0, r5
 801454a:	4798      	blx	r3
 801454c:	2000      	movs	r0, #0
 801454e:	e7e0      	b.n	8014512 <_raise_r+0x12>

08014550 <raise>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <raise+0xc>)
 8014552:	4601      	mov	r1, r0
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	f7ff bfd3 	b.w	8014500 <_raise_r>
 801455a:	bf00      	nop
 801455c:	20000190 	.word	0x20000190

08014560 <_kill_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4d07      	ldr	r5, [pc, #28]	; (8014580 <_kill_r+0x20>)
 8014564:	2300      	movs	r3, #0
 8014566:	4604      	mov	r4, r0
 8014568:	4608      	mov	r0, r1
 801456a:	4611      	mov	r1, r2
 801456c:	602b      	str	r3, [r5, #0]
 801456e:	f7f3 fed3 	bl	8008318 <_kill>
 8014572:	1c43      	adds	r3, r0, #1
 8014574:	d102      	bne.n	801457c <_kill_r+0x1c>
 8014576:	682b      	ldr	r3, [r5, #0]
 8014578:	b103      	cbz	r3, 801457c <_kill_r+0x1c>
 801457a:	6023      	str	r3, [r4, #0]
 801457c:	bd38      	pop	{r3, r4, r5, pc}
 801457e:	bf00      	nop
 8014580:	200025c0 	.word	0x200025c0

08014584 <_getpid_r>:
 8014584:	f7f3 bec0 	b.w	8008308 <_getpid>

08014588 <_vsniprintf_r>:
 8014588:	b530      	push	{r4, r5, lr}
 801458a:	1e14      	subs	r4, r2, #0
 801458c:	4605      	mov	r5, r0
 801458e:	b09b      	sub	sp, #108	; 0x6c
 8014590:	4618      	mov	r0, r3
 8014592:	da05      	bge.n	80145a0 <_vsniprintf_r+0x18>
 8014594:	238b      	movs	r3, #139	; 0x8b
 8014596:	602b      	str	r3, [r5, #0]
 8014598:	f04f 30ff 	mov.w	r0, #4294967295
 801459c:	b01b      	add	sp, #108	; 0x6c
 801459e:	bd30      	pop	{r4, r5, pc}
 80145a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80145a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80145a8:	bf14      	ite	ne
 80145aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80145ae:	4623      	moveq	r3, r4
 80145b0:	9302      	str	r3, [sp, #8]
 80145b2:	9305      	str	r3, [sp, #20]
 80145b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145b8:	9100      	str	r1, [sp, #0]
 80145ba:	9104      	str	r1, [sp, #16]
 80145bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80145c0:	4602      	mov	r2, r0
 80145c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80145c4:	4669      	mov	r1, sp
 80145c6:	4628      	mov	r0, r5
 80145c8:	f001 fd6a 	bl	80160a0 <_svfiprintf_r>
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	bfbc      	itt	lt
 80145d0:	238b      	movlt	r3, #139	; 0x8b
 80145d2:	602b      	strlt	r3, [r5, #0]
 80145d4:	2c00      	cmp	r4, #0
 80145d6:	d0e1      	beq.n	801459c <_vsniprintf_r+0x14>
 80145d8:	9b00      	ldr	r3, [sp, #0]
 80145da:	2200      	movs	r2, #0
 80145dc:	701a      	strb	r2, [r3, #0]
 80145de:	e7dd      	b.n	801459c <_vsniprintf_r+0x14>

080145e0 <vsniprintf>:
 80145e0:	b507      	push	{r0, r1, r2, lr}
 80145e2:	9300      	str	r3, [sp, #0]
 80145e4:	4613      	mov	r3, r2
 80145e6:	460a      	mov	r2, r1
 80145e8:	4601      	mov	r1, r0
 80145ea:	4803      	ldr	r0, [pc, #12]	; (80145f8 <vsniprintf+0x18>)
 80145ec:	6800      	ldr	r0, [r0, #0]
 80145ee:	f7ff ffcb 	bl	8014588 <_vsniprintf_r>
 80145f2:	b003      	add	sp, #12
 80145f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80145f8:	20000190 	.word	0x20000190

080145fc <__swbuf_r>:
 80145fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145fe:	460e      	mov	r6, r1
 8014600:	4614      	mov	r4, r2
 8014602:	4605      	mov	r5, r0
 8014604:	b118      	cbz	r0, 801460e <__swbuf_r+0x12>
 8014606:	6983      	ldr	r3, [r0, #24]
 8014608:	b90b      	cbnz	r3, 801460e <__swbuf_r+0x12>
 801460a:	f001 f84b 	bl	80156a4 <__sinit>
 801460e:	4b21      	ldr	r3, [pc, #132]	; (8014694 <__swbuf_r+0x98>)
 8014610:	429c      	cmp	r4, r3
 8014612:	d12b      	bne.n	801466c <__swbuf_r+0x70>
 8014614:	686c      	ldr	r4, [r5, #4]
 8014616:	69a3      	ldr	r3, [r4, #24]
 8014618:	60a3      	str	r3, [r4, #8]
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	071a      	lsls	r2, r3, #28
 801461e:	d52f      	bpl.n	8014680 <__swbuf_r+0x84>
 8014620:	6923      	ldr	r3, [r4, #16]
 8014622:	b36b      	cbz	r3, 8014680 <__swbuf_r+0x84>
 8014624:	6923      	ldr	r3, [r4, #16]
 8014626:	6820      	ldr	r0, [r4, #0]
 8014628:	1ac0      	subs	r0, r0, r3
 801462a:	6963      	ldr	r3, [r4, #20]
 801462c:	b2f6      	uxtb	r6, r6
 801462e:	4283      	cmp	r3, r0
 8014630:	4637      	mov	r7, r6
 8014632:	dc04      	bgt.n	801463e <__swbuf_r+0x42>
 8014634:	4621      	mov	r1, r4
 8014636:	4628      	mov	r0, r5
 8014638:	f000 ffa0 	bl	801557c <_fflush_r>
 801463c:	bb30      	cbnz	r0, 801468c <__swbuf_r+0x90>
 801463e:	68a3      	ldr	r3, [r4, #8]
 8014640:	3b01      	subs	r3, #1
 8014642:	60a3      	str	r3, [r4, #8]
 8014644:	6823      	ldr	r3, [r4, #0]
 8014646:	1c5a      	adds	r2, r3, #1
 8014648:	6022      	str	r2, [r4, #0]
 801464a:	701e      	strb	r6, [r3, #0]
 801464c:	6963      	ldr	r3, [r4, #20]
 801464e:	3001      	adds	r0, #1
 8014650:	4283      	cmp	r3, r0
 8014652:	d004      	beq.n	801465e <__swbuf_r+0x62>
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	07db      	lsls	r3, r3, #31
 8014658:	d506      	bpl.n	8014668 <__swbuf_r+0x6c>
 801465a:	2e0a      	cmp	r6, #10
 801465c:	d104      	bne.n	8014668 <__swbuf_r+0x6c>
 801465e:	4621      	mov	r1, r4
 8014660:	4628      	mov	r0, r5
 8014662:	f000 ff8b 	bl	801557c <_fflush_r>
 8014666:	b988      	cbnz	r0, 801468c <__swbuf_r+0x90>
 8014668:	4638      	mov	r0, r7
 801466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801466c:	4b0a      	ldr	r3, [pc, #40]	; (8014698 <__swbuf_r+0x9c>)
 801466e:	429c      	cmp	r4, r3
 8014670:	d101      	bne.n	8014676 <__swbuf_r+0x7a>
 8014672:	68ac      	ldr	r4, [r5, #8]
 8014674:	e7cf      	b.n	8014616 <__swbuf_r+0x1a>
 8014676:	4b09      	ldr	r3, [pc, #36]	; (801469c <__swbuf_r+0xa0>)
 8014678:	429c      	cmp	r4, r3
 801467a:	bf08      	it	eq
 801467c:	68ec      	ldreq	r4, [r5, #12]
 801467e:	e7ca      	b.n	8014616 <__swbuf_r+0x1a>
 8014680:	4621      	mov	r1, r4
 8014682:	4628      	mov	r0, r5
 8014684:	f000 f80c 	bl	80146a0 <__swsetup_r>
 8014688:	2800      	cmp	r0, #0
 801468a:	d0cb      	beq.n	8014624 <__swbuf_r+0x28>
 801468c:	f04f 37ff 	mov.w	r7, #4294967295
 8014690:	e7ea      	b.n	8014668 <__swbuf_r+0x6c>
 8014692:	bf00      	nop
 8014694:	08021ff4 	.word	0x08021ff4
 8014698:	08022014 	.word	0x08022014
 801469c:	08021fd4 	.word	0x08021fd4

080146a0 <__swsetup_r>:
 80146a0:	4b32      	ldr	r3, [pc, #200]	; (801476c <__swsetup_r+0xcc>)
 80146a2:	b570      	push	{r4, r5, r6, lr}
 80146a4:	681d      	ldr	r5, [r3, #0]
 80146a6:	4606      	mov	r6, r0
 80146a8:	460c      	mov	r4, r1
 80146aa:	b125      	cbz	r5, 80146b6 <__swsetup_r+0x16>
 80146ac:	69ab      	ldr	r3, [r5, #24]
 80146ae:	b913      	cbnz	r3, 80146b6 <__swsetup_r+0x16>
 80146b0:	4628      	mov	r0, r5
 80146b2:	f000 fff7 	bl	80156a4 <__sinit>
 80146b6:	4b2e      	ldr	r3, [pc, #184]	; (8014770 <__swsetup_r+0xd0>)
 80146b8:	429c      	cmp	r4, r3
 80146ba:	d10f      	bne.n	80146dc <__swsetup_r+0x3c>
 80146bc:	686c      	ldr	r4, [r5, #4]
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146c4:	0719      	lsls	r1, r3, #28
 80146c6:	d42c      	bmi.n	8014722 <__swsetup_r+0x82>
 80146c8:	06dd      	lsls	r5, r3, #27
 80146ca:	d411      	bmi.n	80146f0 <__swsetup_r+0x50>
 80146cc:	2309      	movs	r3, #9
 80146ce:	6033      	str	r3, [r6, #0]
 80146d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	f04f 30ff 	mov.w	r0, #4294967295
 80146da:	e03e      	b.n	801475a <__swsetup_r+0xba>
 80146dc:	4b25      	ldr	r3, [pc, #148]	; (8014774 <__swsetup_r+0xd4>)
 80146de:	429c      	cmp	r4, r3
 80146e0:	d101      	bne.n	80146e6 <__swsetup_r+0x46>
 80146e2:	68ac      	ldr	r4, [r5, #8]
 80146e4:	e7eb      	b.n	80146be <__swsetup_r+0x1e>
 80146e6:	4b24      	ldr	r3, [pc, #144]	; (8014778 <__swsetup_r+0xd8>)
 80146e8:	429c      	cmp	r4, r3
 80146ea:	bf08      	it	eq
 80146ec:	68ec      	ldreq	r4, [r5, #12]
 80146ee:	e7e6      	b.n	80146be <__swsetup_r+0x1e>
 80146f0:	0758      	lsls	r0, r3, #29
 80146f2:	d512      	bpl.n	801471a <__swsetup_r+0x7a>
 80146f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146f6:	b141      	cbz	r1, 801470a <__swsetup_r+0x6a>
 80146f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146fc:	4299      	cmp	r1, r3
 80146fe:	d002      	beq.n	8014706 <__swsetup_r+0x66>
 8014700:	4630      	mov	r0, r6
 8014702:	f7ff f94b 	bl	801399c <_free_r>
 8014706:	2300      	movs	r3, #0
 8014708:	6363      	str	r3, [r4, #52]	; 0x34
 801470a:	89a3      	ldrh	r3, [r4, #12]
 801470c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014710:	81a3      	strh	r3, [r4, #12]
 8014712:	2300      	movs	r3, #0
 8014714:	6063      	str	r3, [r4, #4]
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	6023      	str	r3, [r4, #0]
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	f043 0308 	orr.w	r3, r3, #8
 8014720:	81a3      	strh	r3, [r4, #12]
 8014722:	6923      	ldr	r3, [r4, #16]
 8014724:	b94b      	cbnz	r3, 801473a <__swsetup_r+0x9a>
 8014726:	89a3      	ldrh	r3, [r4, #12]
 8014728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014730:	d003      	beq.n	801473a <__swsetup_r+0x9a>
 8014732:	4621      	mov	r1, r4
 8014734:	4630      	mov	r0, r6
 8014736:	f001 f87f 	bl	8015838 <__smakebuf_r>
 801473a:	89a0      	ldrh	r0, [r4, #12]
 801473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014740:	f010 0301 	ands.w	r3, r0, #1
 8014744:	d00a      	beq.n	801475c <__swsetup_r+0xbc>
 8014746:	2300      	movs	r3, #0
 8014748:	60a3      	str	r3, [r4, #8]
 801474a:	6963      	ldr	r3, [r4, #20]
 801474c:	425b      	negs	r3, r3
 801474e:	61a3      	str	r3, [r4, #24]
 8014750:	6923      	ldr	r3, [r4, #16]
 8014752:	b943      	cbnz	r3, 8014766 <__swsetup_r+0xc6>
 8014754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014758:	d1ba      	bne.n	80146d0 <__swsetup_r+0x30>
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	0781      	lsls	r1, r0, #30
 801475e:	bf58      	it	pl
 8014760:	6963      	ldrpl	r3, [r4, #20]
 8014762:	60a3      	str	r3, [r4, #8]
 8014764:	e7f4      	b.n	8014750 <__swsetup_r+0xb0>
 8014766:	2000      	movs	r0, #0
 8014768:	e7f7      	b.n	801475a <__swsetup_r+0xba>
 801476a:	bf00      	nop
 801476c:	20000190 	.word	0x20000190
 8014770:	08021ff4 	.word	0x08021ff4
 8014774:	08022014 	.word	0x08022014
 8014778:	08021fd4 	.word	0x08021fd4

0801477c <quorem>:
 801477c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014780:	6903      	ldr	r3, [r0, #16]
 8014782:	690c      	ldr	r4, [r1, #16]
 8014784:	42a3      	cmp	r3, r4
 8014786:	4607      	mov	r7, r0
 8014788:	f2c0 8081 	blt.w	801488e <quorem+0x112>
 801478c:	3c01      	subs	r4, #1
 801478e:	f101 0814 	add.w	r8, r1, #20
 8014792:	f100 0514 	add.w	r5, r0, #20
 8014796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147a4:	3301      	adds	r3, #1
 80147a6:	429a      	cmp	r2, r3
 80147a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80147b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80147b4:	d331      	bcc.n	801481a <quorem+0x9e>
 80147b6:	f04f 0e00 	mov.w	lr, #0
 80147ba:	4640      	mov	r0, r8
 80147bc:	46ac      	mov	ip, r5
 80147be:	46f2      	mov	sl, lr
 80147c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80147c4:	b293      	uxth	r3, r2
 80147c6:	fb06 e303 	mla	r3, r6, r3, lr
 80147ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	ebaa 0303 	sub.w	r3, sl, r3
 80147d4:	0c12      	lsrs	r2, r2, #16
 80147d6:	f8dc a000 	ldr.w	sl, [ip]
 80147da:	fb06 e202 	mla	r2, r6, r2, lr
 80147de:	fa13 f38a 	uxtah	r3, r3, sl
 80147e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147e6:	fa1f fa82 	uxth.w	sl, r2
 80147ea:	f8dc 2000 	ldr.w	r2, [ip]
 80147ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80147f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147fc:	4581      	cmp	r9, r0
 80147fe:	f84c 3b04 	str.w	r3, [ip], #4
 8014802:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014806:	d2db      	bcs.n	80147c0 <quorem+0x44>
 8014808:	f855 300b 	ldr.w	r3, [r5, fp]
 801480c:	b92b      	cbnz	r3, 801481a <quorem+0x9e>
 801480e:	9b01      	ldr	r3, [sp, #4]
 8014810:	3b04      	subs	r3, #4
 8014812:	429d      	cmp	r5, r3
 8014814:	461a      	mov	r2, r3
 8014816:	d32e      	bcc.n	8014876 <quorem+0xfa>
 8014818:	613c      	str	r4, [r7, #16]
 801481a:	4638      	mov	r0, r7
 801481c:	f001 fad6 	bl	8015dcc <__mcmp>
 8014820:	2800      	cmp	r0, #0
 8014822:	db24      	blt.n	801486e <quorem+0xf2>
 8014824:	3601      	adds	r6, #1
 8014826:	4628      	mov	r0, r5
 8014828:	f04f 0c00 	mov.w	ip, #0
 801482c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014830:	f8d0 e000 	ldr.w	lr, [r0]
 8014834:	b293      	uxth	r3, r2
 8014836:	ebac 0303 	sub.w	r3, ip, r3
 801483a:	0c12      	lsrs	r2, r2, #16
 801483c:	fa13 f38e 	uxtah	r3, r3, lr
 8014840:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014848:	b29b      	uxth	r3, r3
 801484a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801484e:	45c1      	cmp	r9, r8
 8014850:	f840 3b04 	str.w	r3, [r0], #4
 8014854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014858:	d2e8      	bcs.n	801482c <quorem+0xb0>
 801485a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801485e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014862:	b922      	cbnz	r2, 801486e <quorem+0xf2>
 8014864:	3b04      	subs	r3, #4
 8014866:	429d      	cmp	r5, r3
 8014868:	461a      	mov	r2, r3
 801486a:	d30a      	bcc.n	8014882 <quorem+0x106>
 801486c:	613c      	str	r4, [r7, #16]
 801486e:	4630      	mov	r0, r6
 8014870:	b003      	add	sp, #12
 8014872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014876:	6812      	ldr	r2, [r2, #0]
 8014878:	3b04      	subs	r3, #4
 801487a:	2a00      	cmp	r2, #0
 801487c:	d1cc      	bne.n	8014818 <quorem+0x9c>
 801487e:	3c01      	subs	r4, #1
 8014880:	e7c7      	b.n	8014812 <quorem+0x96>
 8014882:	6812      	ldr	r2, [r2, #0]
 8014884:	3b04      	subs	r3, #4
 8014886:	2a00      	cmp	r2, #0
 8014888:	d1f0      	bne.n	801486c <quorem+0xf0>
 801488a:	3c01      	subs	r4, #1
 801488c:	e7eb      	b.n	8014866 <quorem+0xea>
 801488e:	2000      	movs	r0, #0
 8014890:	e7ee      	b.n	8014870 <quorem+0xf4>
 8014892:	0000      	movs	r0, r0
 8014894:	0000      	movs	r0, r0
	...

08014898 <_dtoa_r>:
 8014898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801489c:	ed2d 8b02 	vpush	{d8}
 80148a0:	ec57 6b10 	vmov	r6, r7, d0
 80148a4:	b095      	sub	sp, #84	; 0x54
 80148a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80148a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80148ac:	9105      	str	r1, [sp, #20]
 80148ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80148b2:	4604      	mov	r4, r0
 80148b4:	9209      	str	r2, [sp, #36]	; 0x24
 80148b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80148b8:	b975      	cbnz	r5, 80148d8 <_dtoa_r+0x40>
 80148ba:	2010      	movs	r0, #16
 80148bc:	f7ff f820 	bl	8013900 <malloc>
 80148c0:	4602      	mov	r2, r0
 80148c2:	6260      	str	r0, [r4, #36]	; 0x24
 80148c4:	b920      	cbnz	r0, 80148d0 <_dtoa_r+0x38>
 80148c6:	4bb2      	ldr	r3, [pc, #712]	; (8014b90 <_dtoa_r+0x2f8>)
 80148c8:	21ea      	movs	r1, #234	; 0xea
 80148ca:	48b2      	ldr	r0, [pc, #712]	; (8014b94 <_dtoa_r+0x2fc>)
 80148cc:	f001 fe98 	bl	8016600 <__assert_func>
 80148d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80148d4:	6005      	str	r5, [r0, #0]
 80148d6:	60c5      	str	r5, [r0, #12]
 80148d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148da:	6819      	ldr	r1, [r3, #0]
 80148dc:	b151      	cbz	r1, 80148f4 <_dtoa_r+0x5c>
 80148de:	685a      	ldr	r2, [r3, #4]
 80148e0:	604a      	str	r2, [r1, #4]
 80148e2:	2301      	movs	r3, #1
 80148e4:	4093      	lsls	r3, r2
 80148e6:	608b      	str	r3, [r1, #8]
 80148e8:	4620      	mov	r0, r4
 80148ea:	f001 f831 	bl	8015950 <_Bfree>
 80148ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148f0:	2200      	movs	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	1e3b      	subs	r3, r7, #0
 80148f6:	bfb9      	ittee	lt
 80148f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80148fc:	9303      	strlt	r3, [sp, #12]
 80148fe:	2300      	movge	r3, #0
 8014900:	f8c8 3000 	strge.w	r3, [r8]
 8014904:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014908:	4ba3      	ldr	r3, [pc, #652]	; (8014b98 <_dtoa_r+0x300>)
 801490a:	bfbc      	itt	lt
 801490c:	2201      	movlt	r2, #1
 801490e:	f8c8 2000 	strlt.w	r2, [r8]
 8014912:	ea33 0309 	bics.w	r3, r3, r9
 8014916:	d11b      	bne.n	8014950 <_dtoa_r+0xb8>
 8014918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801491a:	f242 730f 	movw	r3, #9999	; 0x270f
 801491e:	6013      	str	r3, [r2, #0]
 8014920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014924:	4333      	orrs	r3, r6
 8014926:	f000 857a 	beq.w	801541e <_dtoa_r+0xb86>
 801492a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801492c:	b963      	cbnz	r3, 8014948 <_dtoa_r+0xb0>
 801492e:	4b9b      	ldr	r3, [pc, #620]	; (8014b9c <_dtoa_r+0x304>)
 8014930:	e024      	b.n	801497c <_dtoa_r+0xe4>
 8014932:	4b9b      	ldr	r3, [pc, #620]	; (8014ba0 <_dtoa_r+0x308>)
 8014934:	9300      	str	r3, [sp, #0]
 8014936:	3308      	adds	r3, #8
 8014938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801493a:	6013      	str	r3, [r2, #0]
 801493c:	9800      	ldr	r0, [sp, #0]
 801493e:	b015      	add	sp, #84	; 0x54
 8014940:	ecbd 8b02 	vpop	{d8}
 8014944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014948:	4b94      	ldr	r3, [pc, #592]	; (8014b9c <_dtoa_r+0x304>)
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	3303      	adds	r3, #3
 801494e:	e7f3      	b.n	8014938 <_dtoa_r+0xa0>
 8014950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014954:	2200      	movs	r2, #0
 8014956:	ec51 0b17 	vmov	r0, r1, d7
 801495a:	2300      	movs	r3, #0
 801495c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014960:	f7ec f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8014964:	4680      	mov	r8, r0
 8014966:	b158      	cbz	r0, 8014980 <_dtoa_r+0xe8>
 8014968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801496a:	2301      	movs	r3, #1
 801496c:	6013      	str	r3, [r2, #0]
 801496e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014970:	2b00      	cmp	r3, #0
 8014972:	f000 8551 	beq.w	8015418 <_dtoa_r+0xb80>
 8014976:	488b      	ldr	r0, [pc, #556]	; (8014ba4 <_dtoa_r+0x30c>)
 8014978:	6018      	str	r0, [r3, #0]
 801497a:	1e43      	subs	r3, r0, #1
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	e7dd      	b.n	801493c <_dtoa_r+0xa4>
 8014980:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014984:	aa12      	add	r2, sp, #72	; 0x48
 8014986:	a913      	add	r1, sp, #76	; 0x4c
 8014988:	4620      	mov	r0, r4
 801498a:	f001 fac3 	bl	8015f14 <__d2b>
 801498e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014992:	4683      	mov	fp, r0
 8014994:	2d00      	cmp	r5, #0
 8014996:	d07c      	beq.n	8014a92 <_dtoa_r+0x1fa>
 8014998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801499a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801499e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80149a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80149aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80149ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80149b2:	4b7d      	ldr	r3, [pc, #500]	; (8014ba8 <_dtoa_r+0x310>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	4630      	mov	r0, r6
 80149b8:	4639      	mov	r1, r7
 80149ba:	f7eb fc85 	bl	80002c8 <__aeabi_dsub>
 80149be:	a36e      	add	r3, pc, #440	; (adr r3, 8014b78 <_dtoa_r+0x2e0>)
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	f7eb fe38 	bl	8000638 <__aeabi_dmul>
 80149c8:	a36d      	add	r3, pc, #436	; (adr r3, 8014b80 <_dtoa_r+0x2e8>)
 80149ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ce:	f7eb fc7d 	bl	80002cc <__adddf3>
 80149d2:	4606      	mov	r6, r0
 80149d4:	4628      	mov	r0, r5
 80149d6:	460f      	mov	r7, r1
 80149d8:	f7eb fdc4 	bl	8000564 <__aeabi_i2d>
 80149dc:	a36a      	add	r3, pc, #424	; (adr r3, 8014b88 <_dtoa_r+0x2f0>)
 80149de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e2:	f7eb fe29 	bl	8000638 <__aeabi_dmul>
 80149e6:	4602      	mov	r2, r0
 80149e8:	460b      	mov	r3, r1
 80149ea:	4630      	mov	r0, r6
 80149ec:	4639      	mov	r1, r7
 80149ee:	f7eb fc6d 	bl	80002cc <__adddf3>
 80149f2:	4606      	mov	r6, r0
 80149f4:	460f      	mov	r7, r1
 80149f6:	f7ec f8cf 	bl	8000b98 <__aeabi_d2iz>
 80149fa:	2200      	movs	r2, #0
 80149fc:	4682      	mov	sl, r0
 80149fe:	2300      	movs	r3, #0
 8014a00:	4630      	mov	r0, r6
 8014a02:	4639      	mov	r1, r7
 8014a04:	f7ec f88a 	bl	8000b1c <__aeabi_dcmplt>
 8014a08:	b148      	cbz	r0, 8014a1e <_dtoa_r+0x186>
 8014a0a:	4650      	mov	r0, sl
 8014a0c:	f7eb fdaa 	bl	8000564 <__aeabi_i2d>
 8014a10:	4632      	mov	r2, r6
 8014a12:	463b      	mov	r3, r7
 8014a14:	f7ec f878 	bl	8000b08 <__aeabi_dcmpeq>
 8014a18:	b908      	cbnz	r0, 8014a1e <_dtoa_r+0x186>
 8014a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a1e:	f1ba 0f16 	cmp.w	sl, #22
 8014a22:	d854      	bhi.n	8014ace <_dtoa_r+0x236>
 8014a24:	4b61      	ldr	r3, [pc, #388]	; (8014bac <_dtoa_r+0x314>)
 8014a26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a32:	f7ec f873 	bl	8000b1c <__aeabi_dcmplt>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d04b      	beq.n	8014ad2 <_dtoa_r+0x23a>
 8014a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a3e:	2300      	movs	r3, #0
 8014a40:	930e      	str	r3, [sp, #56]	; 0x38
 8014a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a44:	1b5d      	subs	r5, r3, r5
 8014a46:	1e6b      	subs	r3, r5, #1
 8014a48:	9304      	str	r3, [sp, #16]
 8014a4a:	bf43      	ittte	mi
 8014a4c:	2300      	movmi	r3, #0
 8014a4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8014a52:	9304      	strmi	r3, [sp, #16]
 8014a54:	f04f 0800 	movpl.w	r8, #0
 8014a58:	f1ba 0f00 	cmp.w	sl, #0
 8014a5c:	db3b      	blt.n	8014ad6 <_dtoa_r+0x23e>
 8014a5e:	9b04      	ldr	r3, [sp, #16]
 8014a60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014a64:	4453      	add	r3, sl
 8014a66:	9304      	str	r3, [sp, #16]
 8014a68:	2300      	movs	r3, #0
 8014a6a:	9306      	str	r3, [sp, #24]
 8014a6c:	9b05      	ldr	r3, [sp, #20]
 8014a6e:	2b09      	cmp	r3, #9
 8014a70:	d869      	bhi.n	8014b46 <_dtoa_r+0x2ae>
 8014a72:	2b05      	cmp	r3, #5
 8014a74:	bfc4      	itt	gt
 8014a76:	3b04      	subgt	r3, #4
 8014a78:	9305      	strgt	r3, [sp, #20]
 8014a7a:	9b05      	ldr	r3, [sp, #20]
 8014a7c:	f1a3 0302 	sub.w	r3, r3, #2
 8014a80:	bfcc      	ite	gt
 8014a82:	2500      	movgt	r5, #0
 8014a84:	2501      	movle	r5, #1
 8014a86:	2b03      	cmp	r3, #3
 8014a88:	d869      	bhi.n	8014b5e <_dtoa_r+0x2c6>
 8014a8a:	e8df f003 	tbb	[pc, r3]
 8014a8e:	4e2c      	.short	0x4e2c
 8014a90:	5a4c      	.short	0x5a4c
 8014a92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014a96:	441d      	add	r5, r3
 8014a98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014a9c:	2b20      	cmp	r3, #32
 8014a9e:	bfc1      	itttt	gt
 8014aa0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014aa4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014aa8:	fa09 f303 	lslgt.w	r3, r9, r3
 8014aac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014ab0:	bfda      	itte	le
 8014ab2:	f1c3 0320 	rsble	r3, r3, #32
 8014ab6:	fa06 f003 	lslle.w	r0, r6, r3
 8014aba:	4318      	orrgt	r0, r3
 8014abc:	f7eb fd42 	bl	8000544 <__aeabi_ui2d>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014ac8:	3d01      	subs	r5, #1
 8014aca:	9310      	str	r3, [sp, #64]	; 0x40
 8014acc:	e771      	b.n	80149b2 <_dtoa_r+0x11a>
 8014ace:	2301      	movs	r3, #1
 8014ad0:	e7b6      	b.n	8014a40 <_dtoa_r+0x1a8>
 8014ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8014ad4:	e7b5      	b.n	8014a42 <_dtoa_r+0x1aa>
 8014ad6:	f1ca 0300 	rsb	r3, sl, #0
 8014ada:	9306      	str	r3, [sp, #24]
 8014adc:	2300      	movs	r3, #0
 8014ade:	eba8 080a 	sub.w	r8, r8, sl
 8014ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8014ae4:	e7c2      	b.n	8014a6c <_dtoa_r+0x1d4>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	9308      	str	r3, [sp, #32]
 8014aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	dc39      	bgt.n	8014b64 <_dtoa_r+0x2cc>
 8014af0:	f04f 0901 	mov.w	r9, #1
 8014af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8014af8:	464b      	mov	r3, r9
 8014afa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014b00:	2200      	movs	r2, #0
 8014b02:	6042      	str	r2, [r0, #4]
 8014b04:	2204      	movs	r2, #4
 8014b06:	f102 0614 	add.w	r6, r2, #20
 8014b0a:	429e      	cmp	r6, r3
 8014b0c:	6841      	ldr	r1, [r0, #4]
 8014b0e:	d92f      	bls.n	8014b70 <_dtoa_r+0x2d8>
 8014b10:	4620      	mov	r0, r4
 8014b12:	f000 fedd 	bl	80158d0 <_Balloc>
 8014b16:	9000      	str	r0, [sp, #0]
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	d14b      	bne.n	8014bb4 <_dtoa_r+0x31c>
 8014b1c:	4b24      	ldr	r3, [pc, #144]	; (8014bb0 <_dtoa_r+0x318>)
 8014b1e:	4602      	mov	r2, r0
 8014b20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b24:	e6d1      	b.n	80148ca <_dtoa_r+0x32>
 8014b26:	2301      	movs	r3, #1
 8014b28:	e7de      	b.n	8014ae8 <_dtoa_r+0x250>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	9308      	str	r3, [sp, #32]
 8014b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b30:	eb0a 0903 	add.w	r9, sl, r3
 8014b34:	f109 0301 	add.w	r3, r9, #1
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	9301      	str	r3, [sp, #4]
 8014b3c:	bfb8      	it	lt
 8014b3e:	2301      	movlt	r3, #1
 8014b40:	e7dd      	b.n	8014afe <_dtoa_r+0x266>
 8014b42:	2301      	movs	r3, #1
 8014b44:	e7f2      	b.n	8014b2c <_dtoa_r+0x294>
 8014b46:	2501      	movs	r5, #1
 8014b48:	2300      	movs	r3, #0
 8014b4a:	9305      	str	r3, [sp, #20]
 8014b4c:	9508      	str	r5, [sp, #32]
 8014b4e:	f04f 39ff 	mov.w	r9, #4294967295
 8014b52:	2200      	movs	r2, #0
 8014b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b58:	2312      	movs	r3, #18
 8014b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8014b5c:	e7cf      	b.n	8014afe <_dtoa_r+0x266>
 8014b5e:	2301      	movs	r3, #1
 8014b60:	9308      	str	r3, [sp, #32]
 8014b62:	e7f4      	b.n	8014b4e <_dtoa_r+0x2b6>
 8014b64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b6c:	464b      	mov	r3, r9
 8014b6e:	e7c6      	b.n	8014afe <_dtoa_r+0x266>
 8014b70:	3101      	adds	r1, #1
 8014b72:	6041      	str	r1, [r0, #4]
 8014b74:	0052      	lsls	r2, r2, #1
 8014b76:	e7c6      	b.n	8014b06 <_dtoa_r+0x26e>
 8014b78:	636f4361 	.word	0x636f4361
 8014b7c:	3fd287a7 	.word	0x3fd287a7
 8014b80:	8b60c8b3 	.word	0x8b60c8b3
 8014b84:	3fc68a28 	.word	0x3fc68a28
 8014b88:	509f79fb 	.word	0x509f79fb
 8014b8c:	3fd34413 	.word	0x3fd34413
 8014b90:	08021f4d 	.word	0x08021f4d
 8014b94:	08021f64 	.word	0x08021f64
 8014b98:	7ff00000 	.word	0x7ff00000
 8014b9c:	08021f49 	.word	0x08021f49
 8014ba0:	08021f40 	.word	0x08021f40
 8014ba4:	08021f1d 	.word	0x08021f1d
 8014ba8:	3ff80000 	.word	0x3ff80000
 8014bac:	080220c0 	.word	0x080220c0
 8014bb0:	08021fc3 	.word	0x08021fc3
 8014bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bb6:	9a00      	ldr	r2, [sp, #0]
 8014bb8:	601a      	str	r2, [r3, #0]
 8014bba:	9b01      	ldr	r3, [sp, #4]
 8014bbc:	2b0e      	cmp	r3, #14
 8014bbe:	f200 80ad 	bhi.w	8014d1c <_dtoa_r+0x484>
 8014bc2:	2d00      	cmp	r5, #0
 8014bc4:	f000 80aa 	beq.w	8014d1c <_dtoa_r+0x484>
 8014bc8:	f1ba 0f00 	cmp.w	sl, #0
 8014bcc:	dd36      	ble.n	8014c3c <_dtoa_r+0x3a4>
 8014bce:	4ac3      	ldr	r2, [pc, #780]	; (8014edc <_dtoa_r+0x644>)
 8014bd0:	f00a 030f 	and.w	r3, sl, #15
 8014bd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014bd8:	ed93 7b00 	vldr	d7, [r3]
 8014bdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014be0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014be4:	eeb0 8a47 	vmov.f32	s16, s14
 8014be8:	eef0 8a67 	vmov.f32	s17, s15
 8014bec:	d016      	beq.n	8014c1c <_dtoa_r+0x384>
 8014bee:	4bbc      	ldr	r3, [pc, #752]	; (8014ee0 <_dtoa_r+0x648>)
 8014bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014bf8:	f7eb fe48 	bl	800088c <__aeabi_ddiv>
 8014bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c00:	f007 070f 	and.w	r7, r7, #15
 8014c04:	2503      	movs	r5, #3
 8014c06:	4eb6      	ldr	r6, [pc, #728]	; (8014ee0 <_dtoa_r+0x648>)
 8014c08:	b957      	cbnz	r7, 8014c20 <_dtoa_r+0x388>
 8014c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c0e:	ec53 2b18 	vmov	r2, r3, d8
 8014c12:	f7eb fe3b 	bl	800088c <__aeabi_ddiv>
 8014c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c1a:	e029      	b.n	8014c70 <_dtoa_r+0x3d8>
 8014c1c:	2502      	movs	r5, #2
 8014c1e:	e7f2      	b.n	8014c06 <_dtoa_r+0x36e>
 8014c20:	07f9      	lsls	r1, r7, #31
 8014c22:	d508      	bpl.n	8014c36 <_dtoa_r+0x39e>
 8014c24:	ec51 0b18 	vmov	r0, r1, d8
 8014c28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c2c:	f7eb fd04 	bl	8000638 <__aeabi_dmul>
 8014c30:	ec41 0b18 	vmov	d8, r0, r1
 8014c34:	3501      	adds	r5, #1
 8014c36:	107f      	asrs	r7, r7, #1
 8014c38:	3608      	adds	r6, #8
 8014c3a:	e7e5      	b.n	8014c08 <_dtoa_r+0x370>
 8014c3c:	f000 80a6 	beq.w	8014d8c <_dtoa_r+0x4f4>
 8014c40:	f1ca 0600 	rsb	r6, sl, #0
 8014c44:	4ba5      	ldr	r3, [pc, #660]	; (8014edc <_dtoa_r+0x644>)
 8014c46:	4fa6      	ldr	r7, [pc, #664]	; (8014ee0 <_dtoa_r+0x648>)
 8014c48:	f006 020f 	and.w	r2, r6, #15
 8014c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c58:	f7eb fcee 	bl	8000638 <__aeabi_dmul>
 8014c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c60:	1136      	asrs	r6, r6, #4
 8014c62:	2300      	movs	r3, #0
 8014c64:	2502      	movs	r5, #2
 8014c66:	2e00      	cmp	r6, #0
 8014c68:	f040 8085 	bne.w	8014d76 <_dtoa_r+0x4de>
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1d2      	bne.n	8014c16 <_dtoa_r+0x37e>
 8014c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	f000 808c 	beq.w	8014d90 <_dtoa_r+0x4f8>
 8014c78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014c7c:	4b99      	ldr	r3, [pc, #612]	; (8014ee4 <_dtoa_r+0x64c>)
 8014c7e:	2200      	movs	r2, #0
 8014c80:	4630      	mov	r0, r6
 8014c82:	4639      	mov	r1, r7
 8014c84:	f7eb ff4a 	bl	8000b1c <__aeabi_dcmplt>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f000 8081 	beq.w	8014d90 <_dtoa_r+0x4f8>
 8014c8e:	9b01      	ldr	r3, [sp, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d07d      	beq.n	8014d90 <_dtoa_r+0x4f8>
 8014c94:	f1b9 0f00 	cmp.w	r9, #0
 8014c98:	dd3c      	ble.n	8014d14 <_dtoa_r+0x47c>
 8014c9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014c9e:	9307      	str	r3, [sp, #28]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	4b91      	ldr	r3, [pc, #580]	; (8014ee8 <_dtoa_r+0x650>)
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	f7eb fcc6 	bl	8000638 <__aeabi_dmul>
 8014cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cb0:	3501      	adds	r5, #1
 8014cb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014cb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	f7eb fc52 	bl	8000564 <__aeabi_i2d>
 8014cc0:	4632      	mov	r2, r6
 8014cc2:	463b      	mov	r3, r7
 8014cc4:	f7eb fcb8 	bl	8000638 <__aeabi_dmul>
 8014cc8:	4b88      	ldr	r3, [pc, #544]	; (8014eec <_dtoa_r+0x654>)
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f7eb fafe 	bl	80002cc <__adddf3>
 8014cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cd8:	9303      	str	r3, [sp, #12]
 8014cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d15c      	bne.n	8014d9a <_dtoa_r+0x502>
 8014ce0:	4b83      	ldr	r3, [pc, #524]	; (8014ef0 <_dtoa_r+0x658>)
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	4639      	mov	r1, r7
 8014ce8:	f7eb faee 	bl	80002c8 <__aeabi_dsub>
 8014cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014cf0:	4606      	mov	r6, r0
 8014cf2:	460f      	mov	r7, r1
 8014cf4:	f7eb ff30 	bl	8000b58 <__aeabi_dcmpgt>
 8014cf8:	2800      	cmp	r0, #0
 8014cfa:	f040 8296 	bne.w	801522a <_dtoa_r+0x992>
 8014cfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014d02:	4630      	mov	r0, r6
 8014d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d08:	4639      	mov	r1, r7
 8014d0a:	f7eb ff07 	bl	8000b1c <__aeabi_dcmplt>
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	f040 8288 	bne.w	8015224 <_dtoa_r+0x98c>
 8014d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f2c0 8158 	blt.w	8014fd4 <_dtoa_r+0x73c>
 8014d24:	f1ba 0f0e 	cmp.w	sl, #14
 8014d28:	f300 8154 	bgt.w	8014fd4 <_dtoa_r+0x73c>
 8014d2c:	4b6b      	ldr	r3, [pc, #428]	; (8014edc <_dtoa_r+0x644>)
 8014d2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f280 80e3 	bge.w	8014f04 <_dtoa_r+0x66c>
 8014d3e:	9b01      	ldr	r3, [sp, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	f300 80df 	bgt.w	8014f04 <_dtoa_r+0x66c>
 8014d46:	f040 826d 	bne.w	8015224 <_dtoa_r+0x98c>
 8014d4a:	4b69      	ldr	r3, [pc, #420]	; (8014ef0 <_dtoa_r+0x658>)
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	4640      	mov	r0, r8
 8014d50:	4649      	mov	r1, r9
 8014d52:	f7eb fc71 	bl	8000638 <__aeabi_dmul>
 8014d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d5a:	f7eb fef3 	bl	8000b44 <__aeabi_dcmpge>
 8014d5e:	9e01      	ldr	r6, [sp, #4]
 8014d60:	4637      	mov	r7, r6
 8014d62:	2800      	cmp	r0, #0
 8014d64:	f040 8243 	bne.w	80151ee <_dtoa_r+0x956>
 8014d68:	9d00      	ldr	r5, [sp, #0]
 8014d6a:	2331      	movs	r3, #49	; 0x31
 8014d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8014d70:	f10a 0a01 	add.w	sl, sl, #1
 8014d74:	e23f      	b.n	80151f6 <_dtoa_r+0x95e>
 8014d76:	07f2      	lsls	r2, r6, #31
 8014d78:	d505      	bpl.n	8014d86 <_dtoa_r+0x4ee>
 8014d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d7e:	f7eb fc5b 	bl	8000638 <__aeabi_dmul>
 8014d82:	3501      	adds	r5, #1
 8014d84:	2301      	movs	r3, #1
 8014d86:	1076      	asrs	r6, r6, #1
 8014d88:	3708      	adds	r7, #8
 8014d8a:	e76c      	b.n	8014c66 <_dtoa_r+0x3ce>
 8014d8c:	2502      	movs	r5, #2
 8014d8e:	e76f      	b.n	8014c70 <_dtoa_r+0x3d8>
 8014d90:	9b01      	ldr	r3, [sp, #4]
 8014d92:	f8cd a01c 	str.w	sl, [sp, #28]
 8014d96:	930c      	str	r3, [sp, #48]	; 0x30
 8014d98:	e78d      	b.n	8014cb6 <_dtoa_r+0x41e>
 8014d9a:	9900      	ldr	r1, [sp, #0]
 8014d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014da0:	4b4e      	ldr	r3, [pc, #312]	; (8014edc <_dtoa_r+0x644>)
 8014da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014da6:	4401      	add	r1, r0
 8014da8:	9102      	str	r1, [sp, #8]
 8014daa:	9908      	ldr	r1, [sp, #32]
 8014dac:	eeb0 8a47 	vmov.f32	s16, s14
 8014db0:	eef0 8a67 	vmov.f32	s17, s15
 8014db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014db8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014dbc:	2900      	cmp	r1, #0
 8014dbe:	d045      	beq.n	8014e4c <_dtoa_r+0x5b4>
 8014dc0:	494c      	ldr	r1, [pc, #304]	; (8014ef4 <_dtoa_r+0x65c>)
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	f7eb fd62 	bl	800088c <__aeabi_ddiv>
 8014dc8:	ec53 2b18 	vmov	r2, r3, d8
 8014dcc:	f7eb fa7c 	bl	80002c8 <__aeabi_dsub>
 8014dd0:	9d00      	ldr	r5, [sp, #0]
 8014dd2:	ec41 0b18 	vmov	d8, r0, r1
 8014dd6:	4639      	mov	r1, r7
 8014dd8:	4630      	mov	r0, r6
 8014dda:	f7eb fedd 	bl	8000b98 <__aeabi_d2iz>
 8014dde:	900c      	str	r0, [sp, #48]	; 0x30
 8014de0:	f7eb fbc0 	bl	8000564 <__aeabi_i2d>
 8014de4:	4602      	mov	r2, r0
 8014de6:	460b      	mov	r3, r1
 8014de8:	4630      	mov	r0, r6
 8014dea:	4639      	mov	r1, r7
 8014dec:	f7eb fa6c 	bl	80002c8 <__aeabi_dsub>
 8014df0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014df2:	3330      	adds	r3, #48	; 0x30
 8014df4:	f805 3b01 	strb.w	r3, [r5], #1
 8014df8:	ec53 2b18 	vmov	r2, r3, d8
 8014dfc:	4606      	mov	r6, r0
 8014dfe:	460f      	mov	r7, r1
 8014e00:	f7eb fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d165      	bne.n	8014ed4 <_dtoa_r+0x63c>
 8014e08:	4632      	mov	r2, r6
 8014e0a:	463b      	mov	r3, r7
 8014e0c:	4935      	ldr	r1, [pc, #212]	; (8014ee4 <_dtoa_r+0x64c>)
 8014e0e:	2000      	movs	r0, #0
 8014e10:	f7eb fa5a 	bl	80002c8 <__aeabi_dsub>
 8014e14:	ec53 2b18 	vmov	r2, r3, d8
 8014e18:	f7eb fe80 	bl	8000b1c <__aeabi_dcmplt>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	f040 80b9 	bne.w	8014f94 <_dtoa_r+0x6fc>
 8014e22:	9b02      	ldr	r3, [sp, #8]
 8014e24:	429d      	cmp	r5, r3
 8014e26:	f43f af75 	beq.w	8014d14 <_dtoa_r+0x47c>
 8014e2a:	4b2f      	ldr	r3, [pc, #188]	; (8014ee8 <_dtoa_r+0x650>)
 8014e2c:	ec51 0b18 	vmov	r0, r1, d8
 8014e30:	2200      	movs	r2, #0
 8014e32:	f7eb fc01 	bl	8000638 <__aeabi_dmul>
 8014e36:	4b2c      	ldr	r3, [pc, #176]	; (8014ee8 <_dtoa_r+0x650>)
 8014e38:	ec41 0b18 	vmov	d8, r0, r1
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	4630      	mov	r0, r6
 8014e40:	4639      	mov	r1, r7
 8014e42:	f7eb fbf9 	bl	8000638 <__aeabi_dmul>
 8014e46:	4606      	mov	r6, r0
 8014e48:	460f      	mov	r7, r1
 8014e4a:	e7c4      	b.n	8014dd6 <_dtoa_r+0x53e>
 8014e4c:	ec51 0b17 	vmov	r0, r1, d7
 8014e50:	f7eb fbf2 	bl	8000638 <__aeabi_dmul>
 8014e54:	9b02      	ldr	r3, [sp, #8]
 8014e56:	9d00      	ldr	r5, [sp, #0]
 8014e58:	930c      	str	r3, [sp, #48]	; 0x30
 8014e5a:	ec41 0b18 	vmov	d8, r0, r1
 8014e5e:	4639      	mov	r1, r7
 8014e60:	4630      	mov	r0, r6
 8014e62:	f7eb fe99 	bl	8000b98 <__aeabi_d2iz>
 8014e66:	9011      	str	r0, [sp, #68]	; 0x44
 8014e68:	f7eb fb7c 	bl	8000564 <__aeabi_i2d>
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	460b      	mov	r3, r1
 8014e70:	4630      	mov	r0, r6
 8014e72:	4639      	mov	r1, r7
 8014e74:	f7eb fa28 	bl	80002c8 <__aeabi_dsub>
 8014e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e7a:	3330      	adds	r3, #48	; 0x30
 8014e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8014e80:	9b02      	ldr	r3, [sp, #8]
 8014e82:	429d      	cmp	r5, r3
 8014e84:	4606      	mov	r6, r0
 8014e86:	460f      	mov	r7, r1
 8014e88:	f04f 0200 	mov.w	r2, #0
 8014e8c:	d134      	bne.n	8014ef8 <_dtoa_r+0x660>
 8014e8e:	4b19      	ldr	r3, [pc, #100]	; (8014ef4 <_dtoa_r+0x65c>)
 8014e90:	ec51 0b18 	vmov	r0, r1, d8
 8014e94:	f7eb fa1a 	bl	80002cc <__adddf3>
 8014e98:	4602      	mov	r2, r0
 8014e9a:	460b      	mov	r3, r1
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	f7eb fe5a 	bl	8000b58 <__aeabi_dcmpgt>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d175      	bne.n	8014f94 <_dtoa_r+0x6fc>
 8014ea8:	ec53 2b18 	vmov	r2, r3, d8
 8014eac:	4911      	ldr	r1, [pc, #68]	; (8014ef4 <_dtoa_r+0x65c>)
 8014eae:	2000      	movs	r0, #0
 8014eb0:	f7eb fa0a 	bl	80002c8 <__aeabi_dsub>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	4630      	mov	r0, r6
 8014eba:	4639      	mov	r1, r7
 8014ebc:	f7eb fe2e 	bl	8000b1c <__aeabi_dcmplt>
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	f43f af27 	beq.w	8014d14 <_dtoa_r+0x47c>
 8014ec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014ec8:	1e6b      	subs	r3, r5, #1
 8014eca:	930c      	str	r3, [sp, #48]	; 0x30
 8014ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ed0:	2b30      	cmp	r3, #48	; 0x30
 8014ed2:	d0f8      	beq.n	8014ec6 <_dtoa_r+0x62e>
 8014ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014ed8:	e04a      	b.n	8014f70 <_dtoa_r+0x6d8>
 8014eda:	bf00      	nop
 8014edc:	080220c0 	.word	0x080220c0
 8014ee0:	08022098 	.word	0x08022098
 8014ee4:	3ff00000 	.word	0x3ff00000
 8014ee8:	40240000 	.word	0x40240000
 8014eec:	401c0000 	.word	0x401c0000
 8014ef0:	40140000 	.word	0x40140000
 8014ef4:	3fe00000 	.word	0x3fe00000
 8014ef8:	4baf      	ldr	r3, [pc, #700]	; (80151b8 <_dtoa_r+0x920>)
 8014efa:	f7eb fb9d 	bl	8000638 <__aeabi_dmul>
 8014efe:	4606      	mov	r6, r0
 8014f00:	460f      	mov	r7, r1
 8014f02:	e7ac      	b.n	8014e5e <_dtoa_r+0x5c6>
 8014f04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014f08:	9d00      	ldr	r5, [sp, #0]
 8014f0a:	4642      	mov	r2, r8
 8014f0c:	464b      	mov	r3, r9
 8014f0e:	4630      	mov	r0, r6
 8014f10:	4639      	mov	r1, r7
 8014f12:	f7eb fcbb 	bl	800088c <__aeabi_ddiv>
 8014f16:	f7eb fe3f 	bl	8000b98 <__aeabi_d2iz>
 8014f1a:	9002      	str	r0, [sp, #8]
 8014f1c:	f7eb fb22 	bl	8000564 <__aeabi_i2d>
 8014f20:	4642      	mov	r2, r8
 8014f22:	464b      	mov	r3, r9
 8014f24:	f7eb fb88 	bl	8000638 <__aeabi_dmul>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	4639      	mov	r1, r7
 8014f30:	f7eb f9ca 	bl	80002c8 <__aeabi_dsub>
 8014f34:	9e02      	ldr	r6, [sp, #8]
 8014f36:	9f01      	ldr	r7, [sp, #4]
 8014f38:	3630      	adds	r6, #48	; 0x30
 8014f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8014f3e:	9e00      	ldr	r6, [sp, #0]
 8014f40:	1bae      	subs	r6, r5, r6
 8014f42:	42b7      	cmp	r7, r6
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	d137      	bne.n	8014fba <_dtoa_r+0x722>
 8014f4a:	f7eb f9bf 	bl	80002cc <__adddf3>
 8014f4e:	4642      	mov	r2, r8
 8014f50:	464b      	mov	r3, r9
 8014f52:	4606      	mov	r6, r0
 8014f54:	460f      	mov	r7, r1
 8014f56:	f7eb fdff 	bl	8000b58 <__aeabi_dcmpgt>
 8014f5a:	b9c8      	cbnz	r0, 8014f90 <_dtoa_r+0x6f8>
 8014f5c:	4642      	mov	r2, r8
 8014f5e:	464b      	mov	r3, r9
 8014f60:	4630      	mov	r0, r6
 8014f62:	4639      	mov	r1, r7
 8014f64:	f7eb fdd0 	bl	8000b08 <__aeabi_dcmpeq>
 8014f68:	b110      	cbz	r0, 8014f70 <_dtoa_r+0x6d8>
 8014f6a:	9b02      	ldr	r3, [sp, #8]
 8014f6c:	07d9      	lsls	r1, r3, #31
 8014f6e:	d40f      	bmi.n	8014f90 <_dtoa_r+0x6f8>
 8014f70:	4620      	mov	r0, r4
 8014f72:	4659      	mov	r1, fp
 8014f74:	f000 fcec 	bl	8015950 <_Bfree>
 8014f78:	2300      	movs	r3, #0
 8014f7a:	702b      	strb	r3, [r5, #0]
 8014f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f7e:	f10a 0001 	add.w	r0, sl, #1
 8014f82:	6018      	str	r0, [r3, #0]
 8014f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	f43f acd8 	beq.w	801493c <_dtoa_r+0xa4>
 8014f8c:	601d      	str	r5, [r3, #0]
 8014f8e:	e4d5      	b.n	801493c <_dtoa_r+0xa4>
 8014f90:	f8cd a01c 	str.w	sl, [sp, #28]
 8014f94:	462b      	mov	r3, r5
 8014f96:	461d      	mov	r5, r3
 8014f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f9c:	2a39      	cmp	r2, #57	; 0x39
 8014f9e:	d108      	bne.n	8014fb2 <_dtoa_r+0x71a>
 8014fa0:	9a00      	ldr	r2, [sp, #0]
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	d1f7      	bne.n	8014f96 <_dtoa_r+0x6fe>
 8014fa6:	9a07      	ldr	r2, [sp, #28]
 8014fa8:	9900      	ldr	r1, [sp, #0]
 8014faa:	3201      	adds	r2, #1
 8014fac:	9207      	str	r2, [sp, #28]
 8014fae:	2230      	movs	r2, #48	; 0x30
 8014fb0:	700a      	strb	r2, [r1, #0]
 8014fb2:	781a      	ldrb	r2, [r3, #0]
 8014fb4:	3201      	adds	r2, #1
 8014fb6:	701a      	strb	r2, [r3, #0]
 8014fb8:	e78c      	b.n	8014ed4 <_dtoa_r+0x63c>
 8014fba:	4b7f      	ldr	r3, [pc, #508]	; (80151b8 <_dtoa_r+0x920>)
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	f7eb fb3b 	bl	8000638 <__aeabi_dmul>
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460f      	mov	r7, r1
 8014fca:	f7eb fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d09b      	beq.n	8014f0a <_dtoa_r+0x672>
 8014fd2:	e7cd      	b.n	8014f70 <_dtoa_r+0x6d8>
 8014fd4:	9a08      	ldr	r2, [sp, #32]
 8014fd6:	2a00      	cmp	r2, #0
 8014fd8:	f000 80c4 	beq.w	8015164 <_dtoa_r+0x8cc>
 8014fdc:	9a05      	ldr	r2, [sp, #20]
 8014fde:	2a01      	cmp	r2, #1
 8014fe0:	f300 80a8 	bgt.w	8015134 <_dtoa_r+0x89c>
 8014fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014fe6:	2a00      	cmp	r2, #0
 8014fe8:	f000 80a0 	beq.w	801512c <_dtoa_r+0x894>
 8014fec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ff0:	9e06      	ldr	r6, [sp, #24]
 8014ff2:	4645      	mov	r5, r8
 8014ff4:	9a04      	ldr	r2, [sp, #16]
 8014ff6:	2101      	movs	r1, #1
 8014ff8:	441a      	add	r2, r3
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	4498      	add	r8, r3
 8014ffe:	9204      	str	r2, [sp, #16]
 8015000:	f000 fd62 	bl	8015ac8 <__i2b>
 8015004:	4607      	mov	r7, r0
 8015006:	2d00      	cmp	r5, #0
 8015008:	dd0b      	ble.n	8015022 <_dtoa_r+0x78a>
 801500a:	9b04      	ldr	r3, [sp, #16]
 801500c:	2b00      	cmp	r3, #0
 801500e:	dd08      	ble.n	8015022 <_dtoa_r+0x78a>
 8015010:	42ab      	cmp	r3, r5
 8015012:	9a04      	ldr	r2, [sp, #16]
 8015014:	bfa8      	it	ge
 8015016:	462b      	movge	r3, r5
 8015018:	eba8 0803 	sub.w	r8, r8, r3
 801501c:	1aed      	subs	r5, r5, r3
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	9304      	str	r3, [sp, #16]
 8015022:	9b06      	ldr	r3, [sp, #24]
 8015024:	b1fb      	cbz	r3, 8015066 <_dtoa_r+0x7ce>
 8015026:	9b08      	ldr	r3, [sp, #32]
 8015028:	2b00      	cmp	r3, #0
 801502a:	f000 809f 	beq.w	801516c <_dtoa_r+0x8d4>
 801502e:	2e00      	cmp	r6, #0
 8015030:	dd11      	ble.n	8015056 <_dtoa_r+0x7be>
 8015032:	4639      	mov	r1, r7
 8015034:	4632      	mov	r2, r6
 8015036:	4620      	mov	r0, r4
 8015038:	f000 fe02 	bl	8015c40 <__pow5mult>
 801503c:	465a      	mov	r2, fp
 801503e:	4601      	mov	r1, r0
 8015040:	4607      	mov	r7, r0
 8015042:	4620      	mov	r0, r4
 8015044:	f000 fd56 	bl	8015af4 <__multiply>
 8015048:	4659      	mov	r1, fp
 801504a:	9007      	str	r0, [sp, #28]
 801504c:	4620      	mov	r0, r4
 801504e:	f000 fc7f 	bl	8015950 <_Bfree>
 8015052:	9b07      	ldr	r3, [sp, #28]
 8015054:	469b      	mov	fp, r3
 8015056:	9b06      	ldr	r3, [sp, #24]
 8015058:	1b9a      	subs	r2, r3, r6
 801505a:	d004      	beq.n	8015066 <_dtoa_r+0x7ce>
 801505c:	4659      	mov	r1, fp
 801505e:	4620      	mov	r0, r4
 8015060:	f000 fdee 	bl	8015c40 <__pow5mult>
 8015064:	4683      	mov	fp, r0
 8015066:	2101      	movs	r1, #1
 8015068:	4620      	mov	r0, r4
 801506a:	f000 fd2d 	bl	8015ac8 <__i2b>
 801506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015070:	2b00      	cmp	r3, #0
 8015072:	4606      	mov	r6, r0
 8015074:	dd7c      	ble.n	8015170 <_dtoa_r+0x8d8>
 8015076:	461a      	mov	r2, r3
 8015078:	4601      	mov	r1, r0
 801507a:	4620      	mov	r0, r4
 801507c:	f000 fde0 	bl	8015c40 <__pow5mult>
 8015080:	9b05      	ldr	r3, [sp, #20]
 8015082:	2b01      	cmp	r3, #1
 8015084:	4606      	mov	r6, r0
 8015086:	dd76      	ble.n	8015176 <_dtoa_r+0x8de>
 8015088:	2300      	movs	r3, #0
 801508a:	9306      	str	r3, [sp, #24]
 801508c:	6933      	ldr	r3, [r6, #16]
 801508e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015092:	6918      	ldr	r0, [r3, #16]
 8015094:	f000 fcc8 	bl	8015a28 <__hi0bits>
 8015098:	f1c0 0020 	rsb	r0, r0, #32
 801509c:	9b04      	ldr	r3, [sp, #16]
 801509e:	4418      	add	r0, r3
 80150a0:	f010 001f 	ands.w	r0, r0, #31
 80150a4:	f000 8086 	beq.w	80151b4 <_dtoa_r+0x91c>
 80150a8:	f1c0 0320 	rsb	r3, r0, #32
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	dd7f      	ble.n	80151b0 <_dtoa_r+0x918>
 80150b0:	f1c0 001c 	rsb	r0, r0, #28
 80150b4:	9b04      	ldr	r3, [sp, #16]
 80150b6:	4403      	add	r3, r0
 80150b8:	4480      	add	r8, r0
 80150ba:	4405      	add	r5, r0
 80150bc:	9304      	str	r3, [sp, #16]
 80150be:	f1b8 0f00 	cmp.w	r8, #0
 80150c2:	dd05      	ble.n	80150d0 <_dtoa_r+0x838>
 80150c4:	4659      	mov	r1, fp
 80150c6:	4642      	mov	r2, r8
 80150c8:	4620      	mov	r0, r4
 80150ca:	f000 fe13 	bl	8015cf4 <__lshift>
 80150ce:	4683      	mov	fp, r0
 80150d0:	9b04      	ldr	r3, [sp, #16]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	dd05      	ble.n	80150e2 <_dtoa_r+0x84a>
 80150d6:	4631      	mov	r1, r6
 80150d8:	461a      	mov	r2, r3
 80150da:	4620      	mov	r0, r4
 80150dc:	f000 fe0a 	bl	8015cf4 <__lshift>
 80150e0:	4606      	mov	r6, r0
 80150e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d069      	beq.n	80151bc <_dtoa_r+0x924>
 80150e8:	4631      	mov	r1, r6
 80150ea:	4658      	mov	r0, fp
 80150ec:	f000 fe6e 	bl	8015dcc <__mcmp>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	da63      	bge.n	80151bc <_dtoa_r+0x924>
 80150f4:	2300      	movs	r3, #0
 80150f6:	4659      	mov	r1, fp
 80150f8:	220a      	movs	r2, #10
 80150fa:	4620      	mov	r0, r4
 80150fc:	f000 fc4a 	bl	8015994 <__multadd>
 8015100:	9b08      	ldr	r3, [sp, #32]
 8015102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015106:	4683      	mov	fp, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	f000 818f 	beq.w	801542c <_dtoa_r+0xb94>
 801510e:	4639      	mov	r1, r7
 8015110:	2300      	movs	r3, #0
 8015112:	220a      	movs	r2, #10
 8015114:	4620      	mov	r0, r4
 8015116:	f000 fc3d 	bl	8015994 <__multadd>
 801511a:	f1b9 0f00 	cmp.w	r9, #0
 801511e:	4607      	mov	r7, r0
 8015120:	f300 808e 	bgt.w	8015240 <_dtoa_r+0x9a8>
 8015124:	9b05      	ldr	r3, [sp, #20]
 8015126:	2b02      	cmp	r3, #2
 8015128:	dc50      	bgt.n	80151cc <_dtoa_r+0x934>
 801512a:	e089      	b.n	8015240 <_dtoa_r+0x9a8>
 801512c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801512e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015132:	e75d      	b.n	8014ff0 <_dtoa_r+0x758>
 8015134:	9b01      	ldr	r3, [sp, #4]
 8015136:	1e5e      	subs	r6, r3, #1
 8015138:	9b06      	ldr	r3, [sp, #24]
 801513a:	42b3      	cmp	r3, r6
 801513c:	bfbf      	itttt	lt
 801513e:	9b06      	ldrlt	r3, [sp, #24]
 8015140:	9606      	strlt	r6, [sp, #24]
 8015142:	1af2      	sublt	r2, r6, r3
 8015144:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015146:	bfb6      	itet	lt
 8015148:	189b      	addlt	r3, r3, r2
 801514a:	1b9e      	subge	r6, r3, r6
 801514c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801514e:	9b01      	ldr	r3, [sp, #4]
 8015150:	bfb8      	it	lt
 8015152:	2600      	movlt	r6, #0
 8015154:	2b00      	cmp	r3, #0
 8015156:	bfb5      	itete	lt
 8015158:	eba8 0503 	sublt.w	r5, r8, r3
 801515c:	9b01      	ldrge	r3, [sp, #4]
 801515e:	2300      	movlt	r3, #0
 8015160:	4645      	movge	r5, r8
 8015162:	e747      	b.n	8014ff4 <_dtoa_r+0x75c>
 8015164:	9e06      	ldr	r6, [sp, #24]
 8015166:	9f08      	ldr	r7, [sp, #32]
 8015168:	4645      	mov	r5, r8
 801516a:	e74c      	b.n	8015006 <_dtoa_r+0x76e>
 801516c:	9a06      	ldr	r2, [sp, #24]
 801516e:	e775      	b.n	801505c <_dtoa_r+0x7c4>
 8015170:	9b05      	ldr	r3, [sp, #20]
 8015172:	2b01      	cmp	r3, #1
 8015174:	dc18      	bgt.n	80151a8 <_dtoa_r+0x910>
 8015176:	9b02      	ldr	r3, [sp, #8]
 8015178:	b9b3      	cbnz	r3, 80151a8 <_dtoa_r+0x910>
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015180:	b9a3      	cbnz	r3, 80151ac <_dtoa_r+0x914>
 8015182:	9b03      	ldr	r3, [sp, #12]
 8015184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015188:	0d1b      	lsrs	r3, r3, #20
 801518a:	051b      	lsls	r3, r3, #20
 801518c:	b12b      	cbz	r3, 801519a <_dtoa_r+0x902>
 801518e:	9b04      	ldr	r3, [sp, #16]
 8015190:	3301      	adds	r3, #1
 8015192:	9304      	str	r3, [sp, #16]
 8015194:	f108 0801 	add.w	r8, r8, #1
 8015198:	2301      	movs	r3, #1
 801519a:	9306      	str	r3, [sp, #24]
 801519c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801519e:	2b00      	cmp	r3, #0
 80151a0:	f47f af74 	bne.w	801508c <_dtoa_r+0x7f4>
 80151a4:	2001      	movs	r0, #1
 80151a6:	e779      	b.n	801509c <_dtoa_r+0x804>
 80151a8:	2300      	movs	r3, #0
 80151aa:	e7f6      	b.n	801519a <_dtoa_r+0x902>
 80151ac:	9b02      	ldr	r3, [sp, #8]
 80151ae:	e7f4      	b.n	801519a <_dtoa_r+0x902>
 80151b0:	d085      	beq.n	80150be <_dtoa_r+0x826>
 80151b2:	4618      	mov	r0, r3
 80151b4:	301c      	adds	r0, #28
 80151b6:	e77d      	b.n	80150b4 <_dtoa_r+0x81c>
 80151b8:	40240000 	.word	0x40240000
 80151bc:	9b01      	ldr	r3, [sp, #4]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	dc38      	bgt.n	8015234 <_dtoa_r+0x99c>
 80151c2:	9b05      	ldr	r3, [sp, #20]
 80151c4:	2b02      	cmp	r3, #2
 80151c6:	dd35      	ble.n	8015234 <_dtoa_r+0x99c>
 80151c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80151cc:	f1b9 0f00 	cmp.w	r9, #0
 80151d0:	d10d      	bne.n	80151ee <_dtoa_r+0x956>
 80151d2:	4631      	mov	r1, r6
 80151d4:	464b      	mov	r3, r9
 80151d6:	2205      	movs	r2, #5
 80151d8:	4620      	mov	r0, r4
 80151da:	f000 fbdb 	bl	8015994 <__multadd>
 80151de:	4601      	mov	r1, r0
 80151e0:	4606      	mov	r6, r0
 80151e2:	4658      	mov	r0, fp
 80151e4:	f000 fdf2 	bl	8015dcc <__mcmp>
 80151e8:	2800      	cmp	r0, #0
 80151ea:	f73f adbd 	bgt.w	8014d68 <_dtoa_r+0x4d0>
 80151ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151f0:	9d00      	ldr	r5, [sp, #0]
 80151f2:	ea6f 0a03 	mvn.w	sl, r3
 80151f6:	f04f 0800 	mov.w	r8, #0
 80151fa:	4631      	mov	r1, r6
 80151fc:	4620      	mov	r0, r4
 80151fe:	f000 fba7 	bl	8015950 <_Bfree>
 8015202:	2f00      	cmp	r7, #0
 8015204:	f43f aeb4 	beq.w	8014f70 <_dtoa_r+0x6d8>
 8015208:	f1b8 0f00 	cmp.w	r8, #0
 801520c:	d005      	beq.n	801521a <_dtoa_r+0x982>
 801520e:	45b8      	cmp	r8, r7
 8015210:	d003      	beq.n	801521a <_dtoa_r+0x982>
 8015212:	4641      	mov	r1, r8
 8015214:	4620      	mov	r0, r4
 8015216:	f000 fb9b 	bl	8015950 <_Bfree>
 801521a:	4639      	mov	r1, r7
 801521c:	4620      	mov	r0, r4
 801521e:	f000 fb97 	bl	8015950 <_Bfree>
 8015222:	e6a5      	b.n	8014f70 <_dtoa_r+0x6d8>
 8015224:	2600      	movs	r6, #0
 8015226:	4637      	mov	r7, r6
 8015228:	e7e1      	b.n	80151ee <_dtoa_r+0x956>
 801522a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801522c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015230:	4637      	mov	r7, r6
 8015232:	e599      	b.n	8014d68 <_dtoa_r+0x4d0>
 8015234:	9b08      	ldr	r3, [sp, #32]
 8015236:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801523a:	2b00      	cmp	r3, #0
 801523c:	f000 80fd 	beq.w	801543a <_dtoa_r+0xba2>
 8015240:	2d00      	cmp	r5, #0
 8015242:	dd05      	ble.n	8015250 <_dtoa_r+0x9b8>
 8015244:	4639      	mov	r1, r7
 8015246:	462a      	mov	r2, r5
 8015248:	4620      	mov	r0, r4
 801524a:	f000 fd53 	bl	8015cf4 <__lshift>
 801524e:	4607      	mov	r7, r0
 8015250:	9b06      	ldr	r3, [sp, #24]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d05c      	beq.n	8015310 <_dtoa_r+0xa78>
 8015256:	6879      	ldr	r1, [r7, #4]
 8015258:	4620      	mov	r0, r4
 801525a:	f000 fb39 	bl	80158d0 <_Balloc>
 801525e:	4605      	mov	r5, r0
 8015260:	b928      	cbnz	r0, 801526e <_dtoa_r+0x9d6>
 8015262:	4b80      	ldr	r3, [pc, #512]	; (8015464 <_dtoa_r+0xbcc>)
 8015264:	4602      	mov	r2, r0
 8015266:	f240 21ea 	movw	r1, #746	; 0x2ea
 801526a:	f7ff bb2e 	b.w	80148ca <_dtoa_r+0x32>
 801526e:	693a      	ldr	r2, [r7, #16]
 8015270:	3202      	adds	r2, #2
 8015272:	0092      	lsls	r2, r2, #2
 8015274:	f107 010c 	add.w	r1, r7, #12
 8015278:	300c      	adds	r0, #12
 801527a:	f7fe fb5f 	bl	801393c <memcpy>
 801527e:	2201      	movs	r2, #1
 8015280:	4629      	mov	r1, r5
 8015282:	4620      	mov	r0, r4
 8015284:	f000 fd36 	bl	8015cf4 <__lshift>
 8015288:	9b00      	ldr	r3, [sp, #0]
 801528a:	3301      	adds	r3, #1
 801528c:	9301      	str	r3, [sp, #4]
 801528e:	9b00      	ldr	r3, [sp, #0]
 8015290:	444b      	add	r3, r9
 8015292:	9307      	str	r3, [sp, #28]
 8015294:	9b02      	ldr	r3, [sp, #8]
 8015296:	f003 0301 	and.w	r3, r3, #1
 801529a:	46b8      	mov	r8, r7
 801529c:	9306      	str	r3, [sp, #24]
 801529e:	4607      	mov	r7, r0
 80152a0:	9b01      	ldr	r3, [sp, #4]
 80152a2:	4631      	mov	r1, r6
 80152a4:	3b01      	subs	r3, #1
 80152a6:	4658      	mov	r0, fp
 80152a8:	9302      	str	r3, [sp, #8]
 80152aa:	f7ff fa67 	bl	801477c <quorem>
 80152ae:	4603      	mov	r3, r0
 80152b0:	3330      	adds	r3, #48	; 0x30
 80152b2:	9004      	str	r0, [sp, #16]
 80152b4:	4641      	mov	r1, r8
 80152b6:	4658      	mov	r0, fp
 80152b8:	9308      	str	r3, [sp, #32]
 80152ba:	f000 fd87 	bl	8015dcc <__mcmp>
 80152be:	463a      	mov	r2, r7
 80152c0:	4681      	mov	r9, r0
 80152c2:	4631      	mov	r1, r6
 80152c4:	4620      	mov	r0, r4
 80152c6:	f000 fd9d 	bl	8015e04 <__mdiff>
 80152ca:	68c2      	ldr	r2, [r0, #12]
 80152cc:	9b08      	ldr	r3, [sp, #32]
 80152ce:	4605      	mov	r5, r0
 80152d0:	bb02      	cbnz	r2, 8015314 <_dtoa_r+0xa7c>
 80152d2:	4601      	mov	r1, r0
 80152d4:	4658      	mov	r0, fp
 80152d6:	f000 fd79 	bl	8015dcc <__mcmp>
 80152da:	9b08      	ldr	r3, [sp, #32]
 80152dc:	4602      	mov	r2, r0
 80152de:	4629      	mov	r1, r5
 80152e0:	4620      	mov	r0, r4
 80152e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80152e6:	f000 fb33 	bl	8015950 <_Bfree>
 80152ea:	9b05      	ldr	r3, [sp, #20]
 80152ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152ee:	9d01      	ldr	r5, [sp, #4]
 80152f0:	ea43 0102 	orr.w	r1, r3, r2
 80152f4:	9b06      	ldr	r3, [sp, #24]
 80152f6:	430b      	orrs	r3, r1
 80152f8:	9b08      	ldr	r3, [sp, #32]
 80152fa:	d10d      	bne.n	8015318 <_dtoa_r+0xa80>
 80152fc:	2b39      	cmp	r3, #57	; 0x39
 80152fe:	d029      	beq.n	8015354 <_dtoa_r+0xabc>
 8015300:	f1b9 0f00 	cmp.w	r9, #0
 8015304:	dd01      	ble.n	801530a <_dtoa_r+0xa72>
 8015306:	9b04      	ldr	r3, [sp, #16]
 8015308:	3331      	adds	r3, #49	; 0x31
 801530a:	9a02      	ldr	r2, [sp, #8]
 801530c:	7013      	strb	r3, [r2, #0]
 801530e:	e774      	b.n	80151fa <_dtoa_r+0x962>
 8015310:	4638      	mov	r0, r7
 8015312:	e7b9      	b.n	8015288 <_dtoa_r+0x9f0>
 8015314:	2201      	movs	r2, #1
 8015316:	e7e2      	b.n	80152de <_dtoa_r+0xa46>
 8015318:	f1b9 0f00 	cmp.w	r9, #0
 801531c:	db06      	blt.n	801532c <_dtoa_r+0xa94>
 801531e:	9905      	ldr	r1, [sp, #20]
 8015320:	ea41 0909 	orr.w	r9, r1, r9
 8015324:	9906      	ldr	r1, [sp, #24]
 8015326:	ea59 0101 	orrs.w	r1, r9, r1
 801532a:	d120      	bne.n	801536e <_dtoa_r+0xad6>
 801532c:	2a00      	cmp	r2, #0
 801532e:	ddec      	ble.n	801530a <_dtoa_r+0xa72>
 8015330:	4659      	mov	r1, fp
 8015332:	2201      	movs	r2, #1
 8015334:	4620      	mov	r0, r4
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	f000 fcdc 	bl	8015cf4 <__lshift>
 801533c:	4631      	mov	r1, r6
 801533e:	4683      	mov	fp, r0
 8015340:	f000 fd44 	bl	8015dcc <__mcmp>
 8015344:	2800      	cmp	r0, #0
 8015346:	9b01      	ldr	r3, [sp, #4]
 8015348:	dc02      	bgt.n	8015350 <_dtoa_r+0xab8>
 801534a:	d1de      	bne.n	801530a <_dtoa_r+0xa72>
 801534c:	07da      	lsls	r2, r3, #31
 801534e:	d5dc      	bpl.n	801530a <_dtoa_r+0xa72>
 8015350:	2b39      	cmp	r3, #57	; 0x39
 8015352:	d1d8      	bne.n	8015306 <_dtoa_r+0xa6e>
 8015354:	9a02      	ldr	r2, [sp, #8]
 8015356:	2339      	movs	r3, #57	; 0x39
 8015358:	7013      	strb	r3, [r2, #0]
 801535a:	462b      	mov	r3, r5
 801535c:	461d      	mov	r5, r3
 801535e:	3b01      	subs	r3, #1
 8015360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015364:	2a39      	cmp	r2, #57	; 0x39
 8015366:	d050      	beq.n	801540a <_dtoa_r+0xb72>
 8015368:	3201      	adds	r2, #1
 801536a:	701a      	strb	r2, [r3, #0]
 801536c:	e745      	b.n	80151fa <_dtoa_r+0x962>
 801536e:	2a00      	cmp	r2, #0
 8015370:	dd03      	ble.n	801537a <_dtoa_r+0xae2>
 8015372:	2b39      	cmp	r3, #57	; 0x39
 8015374:	d0ee      	beq.n	8015354 <_dtoa_r+0xabc>
 8015376:	3301      	adds	r3, #1
 8015378:	e7c7      	b.n	801530a <_dtoa_r+0xa72>
 801537a:	9a01      	ldr	r2, [sp, #4]
 801537c:	9907      	ldr	r1, [sp, #28]
 801537e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015382:	428a      	cmp	r2, r1
 8015384:	d02a      	beq.n	80153dc <_dtoa_r+0xb44>
 8015386:	4659      	mov	r1, fp
 8015388:	2300      	movs	r3, #0
 801538a:	220a      	movs	r2, #10
 801538c:	4620      	mov	r0, r4
 801538e:	f000 fb01 	bl	8015994 <__multadd>
 8015392:	45b8      	cmp	r8, r7
 8015394:	4683      	mov	fp, r0
 8015396:	f04f 0300 	mov.w	r3, #0
 801539a:	f04f 020a 	mov.w	r2, #10
 801539e:	4641      	mov	r1, r8
 80153a0:	4620      	mov	r0, r4
 80153a2:	d107      	bne.n	80153b4 <_dtoa_r+0xb1c>
 80153a4:	f000 faf6 	bl	8015994 <__multadd>
 80153a8:	4680      	mov	r8, r0
 80153aa:	4607      	mov	r7, r0
 80153ac:	9b01      	ldr	r3, [sp, #4]
 80153ae:	3301      	adds	r3, #1
 80153b0:	9301      	str	r3, [sp, #4]
 80153b2:	e775      	b.n	80152a0 <_dtoa_r+0xa08>
 80153b4:	f000 faee 	bl	8015994 <__multadd>
 80153b8:	4639      	mov	r1, r7
 80153ba:	4680      	mov	r8, r0
 80153bc:	2300      	movs	r3, #0
 80153be:	220a      	movs	r2, #10
 80153c0:	4620      	mov	r0, r4
 80153c2:	f000 fae7 	bl	8015994 <__multadd>
 80153c6:	4607      	mov	r7, r0
 80153c8:	e7f0      	b.n	80153ac <_dtoa_r+0xb14>
 80153ca:	f1b9 0f00 	cmp.w	r9, #0
 80153ce:	9a00      	ldr	r2, [sp, #0]
 80153d0:	bfcc      	ite	gt
 80153d2:	464d      	movgt	r5, r9
 80153d4:	2501      	movle	r5, #1
 80153d6:	4415      	add	r5, r2
 80153d8:	f04f 0800 	mov.w	r8, #0
 80153dc:	4659      	mov	r1, fp
 80153de:	2201      	movs	r2, #1
 80153e0:	4620      	mov	r0, r4
 80153e2:	9301      	str	r3, [sp, #4]
 80153e4:	f000 fc86 	bl	8015cf4 <__lshift>
 80153e8:	4631      	mov	r1, r6
 80153ea:	4683      	mov	fp, r0
 80153ec:	f000 fcee 	bl	8015dcc <__mcmp>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	dcb2      	bgt.n	801535a <_dtoa_r+0xac2>
 80153f4:	d102      	bne.n	80153fc <_dtoa_r+0xb64>
 80153f6:	9b01      	ldr	r3, [sp, #4]
 80153f8:	07db      	lsls	r3, r3, #31
 80153fa:	d4ae      	bmi.n	801535a <_dtoa_r+0xac2>
 80153fc:	462b      	mov	r3, r5
 80153fe:	461d      	mov	r5, r3
 8015400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015404:	2a30      	cmp	r2, #48	; 0x30
 8015406:	d0fa      	beq.n	80153fe <_dtoa_r+0xb66>
 8015408:	e6f7      	b.n	80151fa <_dtoa_r+0x962>
 801540a:	9a00      	ldr	r2, [sp, #0]
 801540c:	429a      	cmp	r2, r3
 801540e:	d1a5      	bne.n	801535c <_dtoa_r+0xac4>
 8015410:	f10a 0a01 	add.w	sl, sl, #1
 8015414:	2331      	movs	r3, #49	; 0x31
 8015416:	e779      	b.n	801530c <_dtoa_r+0xa74>
 8015418:	4b13      	ldr	r3, [pc, #76]	; (8015468 <_dtoa_r+0xbd0>)
 801541a:	f7ff baaf 	b.w	801497c <_dtoa_r+0xe4>
 801541e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015420:	2b00      	cmp	r3, #0
 8015422:	f47f aa86 	bne.w	8014932 <_dtoa_r+0x9a>
 8015426:	4b11      	ldr	r3, [pc, #68]	; (801546c <_dtoa_r+0xbd4>)
 8015428:	f7ff baa8 	b.w	801497c <_dtoa_r+0xe4>
 801542c:	f1b9 0f00 	cmp.w	r9, #0
 8015430:	dc03      	bgt.n	801543a <_dtoa_r+0xba2>
 8015432:	9b05      	ldr	r3, [sp, #20]
 8015434:	2b02      	cmp	r3, #2
 8015436:	f73f aec9 	bgt.w	80151cc <_dtoa_r+0x934>
 801543a:	9d00      	ldr	r5, [sp, #0]
 801543c:	4631      	mov	r1, r6
 801543e:	4658      	mov	r0, fp
 8015440:	f7ff f99c 	bl	801477c <quorem>
 8015444:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015448:	f805 3b01 	strb.w	r3, [r5], #1
 801544c:	9a00      	ldr	r2, [sp, #0]
 801544e:	1aaa      	subs	r2, r5, r2
 8015450:	4591      	cmp	r9, r2
 8015452:	ddba      	ble.n	80153ca <_dtoa_r+0xb32>
 8015454:	4659      	mov	r1, fp
 8015456:	2300      	movs	r3, #0
 8015458:	220a      	movs	r2, #10
 801545a:	4620      	mov	r0, r4
 801545c:	f000 fa9a 	bl	8015994 <__multadd>
 8015460:	4683      	mov	fp, r0
 8015462:	e7eb      	b.n	801543c <_dtoa_r+0xba4>
 8015464:	08021fc3 	.word	0x08021fc3
 8015468:	08021f1c 	.word	0x08021f1c
 801546c:	08021f40 	.word	0x08021f40

08015470 <__sflush_r>:
 8015470:	898a      	ldrh	r2, [r1, #12]
 8015472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015476:	4605      	mov	r5, r0
 8015478:	0710      	lsls	r0, r2, #28
 801547a:	460c      	mov	r4, r1
 801547c:	d458      	bmi.n	8015530 <__sflush_r+0xc0>
 801547e:	684b      	ldr	r3, [r1, #4]
 8015480:	2b00      	cmp	r3, #0
 8015482:	dc05      	bgt.n	8015490 <__sflush_r+0x20>
 8015484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015486:	2b00      	cmp	r3, #0
 8015488:	dc02      	bgt.n	8015490 <__sflush_r+0x20>
 801548a:	2000      	movs	r0, #0
 801548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015492:	2e00      	cmp	r6, #0
 8015494:	d0f9      	beq.n	801548a <__sflush_r+0x1a>
 8015496:	2300      	movs	r3, #0
 8015498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801549c:	682f      	ldr	r7, [r5, #0]
 801549e:	602b      	str	r3, [r5, #0]
 80154a0:	d032      	beq.n	8015508 <__sflush_r+0x98>
 80154a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80154a4:	89a3      	ldrh	r3, [r4, #12]
 80154a6:	075a      	lsls	r2, r3, #29
 80154a8:	d505      	bpl.n	80154b6 <__sflush_r+0x46>
 80154aa:	6863      	ldr	r3, [r4, #4]
 80154ac:	1ac0      	subs	r0, r0, r3
 80154ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80154b0:	b10b      	cbz	r3, 80154b6 <__sflush_r+0x46>
 80154b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80154b4:	1ac0      	subs	r0, r0, r3
 80154b6:	2300      	movs	r3, #0
 80154b8:	4602      	mov	r2, r0
 80154ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80154bc:	6a21      	ldr	r1, [r4, #32]
 80154be:	4628      	mov	r0, r5
 80154c0:	47b0      	blx	r6
 80154c2:	1c43      	adds	r3, r0, #1
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	d106      	bne.n	80154d6 <__sflush_r+0x66>
 80154c8:	6829      	ldr	r1, [r5, #0]
 80154ca:	291d      	cmp	r1, #29
 80154cc:	d82c      	bhi.n	8015528 <__sflush_r+0xb8>
 80154ce:	4a2a      	ldr	r2, [pc, #168]	; (8015578 <__sflush_r+0x108>)
 80154d0:	40ca      	lsrs	r2, r1
 80154d2:	07d6      	lsls	r6, r2, #31
 80154d4:	d528      	bpl.n	8015528 <__sflush_r+0xb8>
 80154d6:	2200      	movs	r2, #0
 80154d8:	6062      	str	r2, [r4, #4]
 80154da:	04d9      	lsls	r1, r3, #19
 80154dc:	6922      	ldr	r2, [r4, #16]
 80154de:	6022      	str	r2, [r4, #0]
 80154e0:	d504      	bpl.n	80154ec <__sflush_r+0x7c>
 80154e2:	1c42      	adds	r2, r0, #1
 80154e4:	d101      	bne.n	80154ea <__sflush_r+0x7a>
 80154e6:	682b      	ldr	r3, [r5, #0]
 80154e8:	b903      	cbnz	r3, 80154ec <__sflush_r+0x7c>
 80154ea:	6560      	str	r0, [r4, #84]	; 0x54
 80154ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80154ee:	602f      	str	r7, [r5, #0]
 80154f0:	2900      	cmp	r1, #0
 80154f2:	d0ca      	beq.n	801548a <__sflush_r+0x1a>
 80154f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80154f8:	4299      	cmp	r1, r3
 80154fa:	d002      	beq.n	8015502 <__sflush_r+0x92>
 80154fc:	4628      	mov	r0, r5
 80154fe:	f7fe fa4d 	bl	801399c <_free_r>
 8015502:	2000      	movs	r0, #0
 8015504:	6360      	str	r0, [r4, #52]	; 0x34
 8015506:	e7c1      	b.n	801548c <__sflush_r+0x1c>
 8015508:	6a21      	ldr	r1, [r4, #32]
 801550a:	2301      	movs	r3, #1
 801550c:	4628      	mov	r0, r5
 801550e:	47b0      	blx	r6
 8015510:	1c41      	adds	r1, r0, #1
 8015512:	d1c7      	bne.n	80154a4 <__sflush_r+0x34>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d0c4      	beq.n	80154a4 <__sflush_r+0x34>
 801551a:	2b1d      	cmp	r3, #29
 801551c:	d001      	beq.n	8015522 <__sflush_r+0xb2>
 801551e:	2b16      	cmp	r3, #22
 8015520:	d101      	bne.n	8015526 <__sflush_r+0xb6>
 8015522:	602f      	str	r7, [r5, #0]
 8015524:	e7b1      	b.n	801548a <__sflush_r+0x1a>
 8015526:	89a3      	ldrh	r3, [r4, #12]
 8015528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801552c:	81a3      	strh	r3, [r4, #12]
 801552e:	e7ad      	b.n	801548c <__sflush_r+0x1c>
 8015530:	690f      	ldr	r7, [r1, #16]
 8015532:	2f00      	cmp	r7, #0
 8015534:	d0a9      	beq.n	801548a <__sflush_r+0x1a>
 8015536:	0793      	lsls	r3, r2, #30
 8015538:	680e      	ldr	r6, [r1, #0]
 801553a:	bf08      	it	eq
 801553c:	694b      	ldreq	r3, [r1, #20]
 801553e:	600f      	str	r7, [r1, #0]
 8015540:	bf18      	it	ne
 8015542:	2300      	movne	r3, #0
 8015544:	eba6 0807 	sub.w	r8, r6, r7
 8015548:	608b      	str	r3, [r1, #8]
 801554a:	f1b8 0f00 	cmp.w	r8, #0
 801554e:	dd9c      	ble.n	801548a <__sflush_r+0x1a>
 8015550:	6a21      	ldr	r1, [r4, #32]
 8015552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015554:	4643      	mov	r3, r8
 8015556:	463a      	mov	r2, r7
 8015558:	4628      	mov	r0, r5
 801555a:	47b0      	blx	r6
 801555c:	2800      	cmp	r0, #0
 801555e:	dc06      	bgt.n	801556e <__sflush_r+0xfe>
 8015560:	89a3      	ldrh	r3, [r4, #12]
 8015562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015566:	81a3      	strh	r3, [r4, #12]
 8015568:	f04f 30ff 	mov.w	r0, #4294967295
 801556c:	e78e      	b.n	801548c <__sflush_r+0x1c>
 801556e:	4407      	add	r7, r0
 8015570:	eba8 0800 	sub.w	r8, r8, r0
 8015574:	e7e9      	b.n	801554a <__sflush_r+0xda>
 8015576:	bf00      	nop
 8015578:	20400001 	.word	0x20400001

0801557c <_fflush_r>:
 801557c:	b538      	push	{r3, r4, r5, lr}
 801557e:	690b      	ldr	r3, [r1, #16]
 8015580:	4605      	mov	r5, r0
 8015582:	460c      	mov	r4, r1
 8015584:	b913      	cbnz	r3, 801558c <_fflush_r+0x10>
 8015586:	2500      	movs	r5, #0
 8015588:	4628      	mov	r0, r5
 801558a:	bd38      	pop	{r3, r4, r5, pc}
 801558c:	b118      	cbz	r0, 8015596 <_fflush_r+0x1a>
 801558e:	6983      	ldr	r3, [r0, #24]
 8015590:	b90b      	cbnz	r3, 8015596 <_fflush_r+0x1a>
 8015592:	f000 f887 	bl	80156a4 <__sinit>
 8015596:	4b14      	ldr	r3, [pc, #80]	; (80155e8 <_fflush_r+0x6c>)
 8015598:	429c      	cmp	r4, r3
 801559a:	d11b      	bne.n	80155d4 <_fflush_r+0x58>
 801559c:	686c      	ldr	r4, [r5, #4]
 801559e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d0ef      	beq.n	8015586 <_fflush_r+0xa>
 80155a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80155a8:	07d0      	lsls	r0, r2, #31
 80155aa:	d404      	bmi.n	80155b6 <_fflush_r+0x3a>
 80155ac:	0599      	lsls	r1, r3, #22
 80155ae:	d402      	bmi.n	80155b6 <_fflush_r+0x3a>
 80155b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155b2:	f000 f91a 	bl	80157ea <__retarget_lock_acquire_recursive>
 80155b6:	4628      	mov	r0, r5
 80155b8:	4621      	mov	r1, r4
 80155ba:	f7ff ff59 	bl	8015470 <__sflush_r>
 80155be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155c0:	07da      	lsls	r2, r3, #31
 80155c2:	4605      	mov	r5, r0
 80155c4:	d4e0      	bmi.n	8015588 <_fflush_r+0xc>
 80155c6:	89a3      	ldrh	r3, [r4, #12]
 80155c8:	059b      	lsls	r3, r3, #22
 80155ca:	d4dd      	bmi.n	8015588 <_fflush_r+0xc>
 80155cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155ce:	f000 f90d 	bl	80157ec <__retarget_lock_release_recursive>
 80155d2:	e7d9      	b.n	8015588 <_fflush_r+0xc>
 80155d4:	4b05      	ldr	r3, [pc, #20]	; (80155ec <_fflush_r+0x70>)
 80155d6:	429c      	cmp	r4, r3
 80155d8:	d101      	bne.n	80155de <_fflush_r+0x62>
 80155da:	68ac      	ldr	r4, [r5, #8]
 80155dc:	e7df      	b.n	801559e <_fflush_r+0x22>
 80155de:	4b04      	ldr	r3, [pc, #16]	; (80155f0 <_fflush_r+0x74>)
 80155e0:	429c      	cmp	r4, r3
 80155e2:	bf08      	it	eq
 80155e4:	68ec      	ldreq	r4, [r5, #12]
 80155e6:	e7da      	b.n	801559e <_fflush_r+0x22>
 80155e8:	08021ff4 	.word	0x08021ff4
 80155ec:	08022014 	.word	0x08022014
 80155f0:	08021fd4 	.word	0x08021fd4

080155f4 <std>:
 80155f4:	2300      	movs	r3, #0
 80155f6:	b510      	push	{r4, lr}
 80155f8:	4604      	mov	r4, r0
 80155fa:	e9c0 3300 	strd	r3, r3, [r0]
 80155fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015602:	6083      	str	r3, [r0, #8]
 8015604:	8181      	strh	r1, [r0, #12]
 8015606:	6643      	str	r3, [r0, #100]	; 0x64
 8015608:	81c2      	strh	r2, [r0, #14]
 801560a:	6183      	str	r3, [r0, #24]
 801560c:	4619      	mov	r1, r3
 801560e:	2208      	movs	r2, #8
 8015610:	305c      	adds	r0, #92	; 0x5c
 8015612:	f7fe f9bb 	bl	801398c <memset>
 8015616:	4b05      	ldr	r3, [pc, #20]	; (801562c <std+0x38>)
 8015618:	6263      	str	r3, [r4, #36]	; 0x24
 801561a:	4b05      	ldr	r3, [pc, #20]	; (8015630 <std+0x3c>)
 801561c:	62a3      	str	r3, [r4, #40]	; 0x28
 801561e:	4b05      	ldr	r3, [pc, #20]	; (8015634 <std+0x40>)
 8015620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015622:	4b05      	ldr	r3, [pc, #20]	; (8015638 <std+0x44>)
 8015624:	6224      	str	r4, [r4, #32]
 8015626:	6323      	str	r3, [r4, #48]	; 0x30
 8015628:	bd10      	pop	{r4, pc}
 801562a:	bf00      	nop
 801562c:	08016555 	.word	0x08016555
 8015630:	08016577 	.word	0x08016577
 8015634:	080165af 	.word	0x080165af
 8015638:	080165d3 	.word	0x080165d3

0801563c <_cleanup_r>:
 801563c:	4901      	ldr	r1, [pc, #4]	; (8015644 <_cleanup_r+0x8>)
 801563e:	f000 b8af 	b.w	80157a0 <_fwalk_reent>
 8015642:	bf00      	nop
 8015644:	0801557d 	.word	0x0801557d

08015648 <__sfmoreglue>:
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	1e4a      	subs	r2, r1, #1
 801564c:	2568      	movs	r5, #104	; 0x68
 801564e:	4355      	muls	r5, r2
 8015650:	460e      	mov	r6, r1
 8015652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015656:	f7fe f9f1 	bl	8013a3c <_malloc_r>
 801565a:	4604      	mov	r4, r0
 801565c:	b140      	cbz	r0, 8015670 <__sfmoreglue+0x28>
 801565e:	2100      	movs	r1, #0
 8015660:	e9c0 1600 	strd	r1, r6, [r0]
 8015664:	300c      	adds	r0, #12
 8015666:	60a0      	str	r0, [r4, #8]
 8015668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801566c:	f7fe f98e 	bl	801398c <memset>
 8015670:	4620      	mov	r0, r4
 8015672:	bd70      	pop	{r4, r5, r6, pc}

08015674 <__sfp_lock_acquire>:
 8015674:	4801      	ldr	r0, [pc, #4]	; (801567c <__sfp_lock_acquire+0x8>)
 8015676:	f000 b8b8 	b.w	80157ea <__retarget_lock_acquire_recursive>
 801567a:	bf00      	nop
 801567c:	200025bc 	.word	0x200025bc

08015680 <__sfp_lock_release>:
 8015680:	4801      	ldr	r0, [pc, #4]	; (8015688 <__sfp_lock_release+0x8>)
 8015682:	f000 b8b3 	b.w	80157ec <__retarget_lock_release_recursive>
 8015686:	bf00      	nop
 8015688:	200025bc 	.word	0x200025bc

0801568c <__sinit_lock_acquire>:
 801568c:	4801      	ldr	r0, [pc, #4]	; (8015694 <__sinit_lock_acquire+0x8>)
 801568e:	f000 b8ac 	b.w	80157ea <__retarget_lock_acquire_recursive>
 8015692:	bf00      	nop
 8015694:	200025b7 	.word	0x200025b7

08015698 <__sinit_lock_release>:
 8015698:	4801      	ldr	r0, [pc, #4]	; (80156a0 <__sinit_lock_release+0x8>)
 801569a:	f000 b8a7 	b.w	80157ec <__retarget_lock_release_recursive>
 801569e:	bf00      	nop
 80156a0:	200025b7 	.word	0x200025b7

080156a4 <__sinit>:
 80156a4:	b510      	push	{r4, lr}
 80156a6:	4604      	mov	r4, r0
 80156a8:	f7ff fff0 	bl	801568c <__sinit_lock_acquire>
 80156ac:	69a3      	ldr	r3, [r4, #24]
 80156ae:	b11b      	cbz	r3, 80156b8 <__sinit+0x14>
 80156b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156b4:	f7ff bff0 	b.w	8015698 <__sinit_lock_release>
 80156b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80156bc:	6523      	str	r3, [r4, #80]	; 0x50
 80156be:	4b13      	ldr	r3, [pc, #76]	; (801570c <__sinit+0x68>)
 80156c0:	4a13      	ldr	r2, [pc, #76]	; (8015710 <__sinit+0x6c>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80156c6:	42a3      	cmp	r3, r4
 80156c8:	bf04      	itt	eq
 80156ca:	2301      	moveq	r3, #1
 80156cc:	61a3      	streq	r3, [r4, #24]
 80156ce:	4620      	mov	r0, r4
 80156d0:	f000 f820 	bl	8015714 <__sfp>
 80156d4:	6060      	str	r0, [r4, #4]
 80156d6:	4620      	mov	r0, r4
 80156d8:	f000 f81c 	bl	8015714 <__sfp>
 80156dc:	60a0      	str	r0, [r4, #8]
 80156de:	4620      	mov	r0, r4
 80156e0:	f000 f818 	bl	8015714 <__sfp>
 80156e4:	2200      	movs	r2, #0
 80156e6:	60e0      	str	r0, [r4, #12]
 80156e8:	2104      	movs	r1, #4
 80156ea:	6860      	ldr	r0, [r4, #4]
 80156ec:	f7ff ff82 	bl	80155f4 <std>
 80156f0:	68a0      	ldr	r0, [r4, #8]
 80156f2:	2201      	movs	r2, #1
 80156f4:	2109      	movs	r1, #9
 80156f6:	f7ff ff7d 	bl	80155f4 <std>
 80156fa:	68e0      	ldr	r0, [r4, #12]
 80156fc:	2202      	movs	r2, #2
 80156fe:	2112      	movs	r1, #18
 8015700:	f7ff ff78 	bl	80155f4 <std>
 8015704:	2301      	movs	r3, #1
 8015706:	61a3      	str	r3, [r4, #24]
 8015708:	e7d2      	b.n	80156b0 <__sinit+0xc>
 801570a:	bf00      	nop
 801570c:	08021f08 	.word	0x08021f08
 8015710:	0801563d 	.word	0x0801563d

08015714 <__sfp>:
 8015714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015716:	4607      	mov	r7, r0
 8015718:	f7ff ffac 	bl	8015674 <__sfp_lock_acquire>
 801571c:	4b1e      	ldr	r3, [pc, #120]	; (8015798 <__sfp+0x84>)
 801571e:	681e      	ldr	r6, [r3, #0]
 8015720:	69b3      	ldr	r3, [r6, #24]
 8015722:	b913      	cbnz	r3, 801572a <__sfp+0x16>
 8015724:	4630      	mov	r0, r6
 8015726:	f7ff ffbd 	bl	80156a4 <__sinit>
 801572a:	3648      	adds	r6, #72	; 0x48
 801572c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015730:	3b01      	subs	r3, #1
 8015732:	d503      	bpl.n	801573c <__sfp+0x28>
 8015734:	6833      	ldr	r3, [r6, #0]
 8015736:	b30b      	cbz	r3, 801577c <__sfp+0x68>
 8015738:	6836      	ldr	r6, [r6, #0]
 801573a:	e7f7      	b.n	801572c <__sfp+0x18>
 801573c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015740:	b9d5      	cbnz	r5, 8015778 <__sfp+0x64>
 8015742:	4b16      	ldr	r3, [pc, #88]	; (801579c <__sfp+0x88>)
 8015744:	60e3      	str	r3, [r4, #12]
 8015746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801574a:	6665      	str	r5, [r4, #100]	; 0x64
 801574c:	f000 f84c 	bl	80157e8 <__retarget_lock_init_recursive>
 8015750:	f7ff ff96 	bl	8015680 <__sfp_lock_release>
 8015754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801575c:	6025      	str	r5, [r4, #0]
 801575e:	61a5      	str	r5, [r4, #24]
 8015760:	2208      	movs	r2, #8
 8015762:	4629      	mov	r1, r5
 8015764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015768:	f7fe f910 	bl	801398c <memset>
 801576c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015774:	4620      	mov	r0, r4
 8015776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015778:	3468      	adds	r4, #104	; 0x68
 801577a:	e7d9      	b.n	8015730 <__sfp+0x1c>
 801577c:	2104      	movs	r1, #4
 801577e:	4638      	mov	r0, r7
 8015780:	f7ff ff62 	bl	8015648 <__sfmoreglue>
 8015784:	4604      	mov	r4, r0
 8015786:	6030      	str	r0, [r6, #0]
 8015788:	2800      	cmp	r0, #0
 801578a:	d1d5      	bne.n	8015738 <__sfp+0x24>
 801578c:	f7ff ff78 	bl	8015680 <__sfp_lock_release>
 8015790:	230c      	movs	r3, #12
 8015792:	603b      	str	r3, [r7, #0]
 8015794:	e7ee      	b.n	8015774 <__sfp+0x60>
 8015796:	bf00      	nop
 8015798:	08021f08 	.word	0x08021f08
 801579c:	ffff0001 	.word	0xffff0001

080157a0 <_fwalk_reent>:
 80157a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157a4:	4606      	mov	r6, r0
 80157a6:	4688      	mov	r8, r1
 80157a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80157ac:	2700      	movs	r7, #0
 80157ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80157b2:	f1b9 0901 	subs.w	r9, r9, #1
 80157b6:	d505      	bpl.n	80157c4 <_fwalk_reent+0x24>
 80157b8:	6824      	ldr	r4, [r4, #0]
 80157ba:	2c00      	cmp	r4, #0
 80157bc:	d1f7      	bne.n	80157ae <_fwalk_reent+0xe>
 80157be:	4638      	mov	r0, r7
 80157c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157c4:	89ab      	ldrh	r3, [r5, #12]
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d907      	bls.n	80157da <_fwalk_reent+0x3a>
 80157ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80157ce:	3301      	adds	r3, #1
 80157d0:	d003      	beq.n	80157da <_fwalk_reent+0x3a>
 80157d2:	4629      	mov	r1, r5
 80157d4:	4630      	mov	r0, r6
 80157d6:	47c0      	blx	r8
 80157d8:	4307      	orrs	r7, r0
 80157da:	3568      	adds	r5, #104	; 0x68
 80157dc:	e7e9      	b.n	80157b2 <_fwalk_reent+0x12>
	...

080157e0 <_localeconv_r>:
 80157e0:	4800      	ldr	r0, [pc, #0]	; (80157e4 <_localeconv_r+0x4>)
 80157e2:	4770      	bx	lr
 80157e4:	200002e4 	.word	0x200002e4

080157e8 <__retarget_lock_init_recursive>:
 80157e8:	4770      	bx	lr

080157ea <__retarget_lock_acquire_recursive>:
 80157ea:	4770      	bx	lr

080157ec <__retarget_lock_release_recursive>:
 80157ec:	4770      	bx	lr

080157ee <__swhatbuf_r>:
 80157ee:	b570      	push	{r4, r5, r6, lr}
 80157f0:	460e      	mov	r6, r1
 80157f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157f6:	2900      	cmp	r1, #0
 80157f8:	b096      	sub	sp, #88	; 0x58
 80157fa:	4614      	mov	r4, r2
 80157fc:	461d      	mov	r5, r3
 80157fe:	da07      	bge.n	8015810 <__swhatbuf_r+0x22>
 8015800:	2300      	movs	r3, #0
 8015802:	602b      	str	r3, [r5, #0]
 8015804:	89b3      	ldrh	r3, [r6, #12]
 8015806:	061a      	lsls	r2, r3, #24
 8015808:	d410      	bmi.n	801582c <__swhatbuf_r+0x3e>
 801580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801580e:	e00e      	b.n	801582e <__swhatbuf_r+0x40>
 8015810:	466a      	mov	r2, sp
 8015812:	f000 ff35 	bl	8016680 <_fstat_r>
 8015816:	2800      	cmp	r0, #0
 8015818:	dbf2      	blt.n	8015800 <__swhatbuf_r+0x12>
 801581a:	9a01      	ldr	r2, [sp, #4]
 801581c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015824:	425a      	negs	r2, r3
 8015826:	415a      	adcs	r2, r3
 8015828:	602a      	str	r2, [r5, #0]
 801582a:	e7ee      	b.n	801580a <__swhatbuf_r+0x1c>
 801582c:	2340      	movs	r3, #64	; 0x40
 801582e:	2000      	movs	r0, #0
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	b016      	add	sp, #88	; 0x58
 8015834:	bd70      	pop	{r4, r5, r6, pc}
	...

08015838 <__smakebuf_r>:
 8015838:	898b      	ldrh	r3, [r1, #12]
 801583a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801583c:	079d      	lsls	r5, r3, #30
 801583e:	4606      	mov	r6, r0
 8015840:	460c      	mov	r4, r1
 8015842:	d507      	bpl.n	8015854 <__smakebuf_r+0x1c>
 8015844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015848:	6023      	str	r3, [r4, #0]
 801584a:	6123      	str	r3, [r4, #16]
 801584c:	2301      	movs	r3, #1
 801584e:	6163      	str	r3, [r4, #20]
 8015850:	b002      	add	sp, #8
 8015852:	bd70      	pop	{r4, r5, r6, pc}
 8015854:	ab01      	add	r3, sp, #4
 8015856:	466a      	mov	r2, sp
 8015858:	f7ff ffc9 	bl	80157ee <__swhatbuf_r>
 801585c:	9900      	ldr	r1, [sp, #0]
 801585e:	4605      	mov	r5, r0
 8015860:	4630      	mov	r0, r6
 8015862:	f7fe f8eb 	bl	8013a3c <_malloc_r>
 8015866:	b948      	cbnz	r0, 801587c <__smakebuf_r+0x44>
 8015868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801586c:	059a      	lsls	r2, r3, #22
 801586e:	d4ef      	bmi.n	8015850 <__smakebuf_r+0x18>
 8015870:	f023 0303 	bic.w	r3, r3, #3
 8015874:	f043 0302 	orr.w	r3, r3, #2
 8015878:	81a3      	strh	r3, [r4, #12]
 801587a:	e7e3      	b.n	8015844 <__smakebuf_r+0xc>
 801587c:	4b0d      	ldr	r3, [pc, #52]	; (80158b4 <__smakebuf_r+0x7c>)
 801587e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015880:	89a3      	ldrh	r3, [r4, #12]
 8015882:	6020      	str	r0, [r4, #0]
 8015884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015888:	81a3      	strh	r3, [r4, #12]
 801588a:	9b00      	ldr	r3, [sp, #0]
 801588c:	6163      	str	r3, [r4, #20]
 801588e:	9b01      	ldr	r3, [sp, #4]
 8015890:	6120      	str	r0, [r4, #16]
 8015892:	b15b      	cbz	r3, 80158ac <__smakebuf_r+0x74>
 8015894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015898:	4630      	mov	r0, r6
 801589a:	f000 ff03 	bl	80166a4 <_isatty_r>
 801589e:	b128      	cbz	r0, 80158ac <__smakebuf_r+0x74>
 80158a0:	89a3      	ldrh	r3, [r4, #12]
 80158a2:	f023 0303 	bic.w	r3, r3, #3
 80158a6:	f043 0301 	orr.w	r3, r3, #1
 80158aa:	81a3      	strh	r3, [r4, #12]
 80158ac:	89a0      	ldrh	r0, [r4, #12]
 80158ae:	4305      	orrs	r5, r0
 80158b0:	81a5      	strh	r5, [r4, #12]
 80158b2:	e7cd      	b.n	8015850 <__smakebuf_r+0x18>
 80158b4:	0801563d 	.word	0x0801563d

080158b8 <__malloc_lock>:
 80158b8:	4801      	ldr	r0, [pc, #4]	; (80158c0 <__malloc_lock+0x8>)
 80158ba:	f7ff bf96 	b.w	80157ea <__retarget_lock_acquire_recursive>
 80158be:	bf00      	nop
 80158c0:	200025b8 	.word	0x200025b8

080158c4 <__malloc_unlock>:
 80158c4:	4801      	ldr	r0, [pc, #4]	; (80158cc <__malloc_unlock+0x8>)
 80158c6:	f7ff bf91 	b.w	80157ec <__retarget_lock_release_recursive>
 80158ca:	bf00      	nop
 80158cc:	200025b8 	.word	0x200025b8

080158d0 <_Balloc>:
 80158d0:	b570      	push	{r4, r5, r6, lr}
 80158d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80158d4:	4604      	mov	r4, r0
 80158d6:	460d      	mov	r5, r1
 80158d8:	b976      	cbnz	r6, 80158f8 <_Balloc+0x28>
 80158da:	2010      	movs	r0, #16
 80158dc:	f7fe f810 	bl	8013900 <malloc>
 80158e0:	4602      	mov	r2, r0
 80158e2:	6260      	str	r0, [r4, #36]	; 0x24
 80158e4:	b920      	cbnz	r0, 80158f0 <_Balloc+0x20>
 80158e6:	4b18      	ldr	r3, [pc, #96]	; (8015948 <_Balloc+0x78>)
 80158e8:	4818      	ldr	r0, [pc, #96]	; (801594c <_Balloc+0x7c>)
 80158ea:	2166      	movs	r1, #102	; 0x66
 80158ec:	f000 fe88 	bl	8016600 <__assert_func>
 80158f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158f4:	6006      	str	r6, [r0, #0]
 80158f6:	60c6      	str	r6, [r0, #12]
 80158f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80158fa:	68f3      	ldr	r3, [r6, #12]
 80158fc:	b183      	cbz	r3, 8015920 <_Balloc+0x50>
 80158fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015906:	b9b8      	cbnz	r0, 8015938 <_Balloc+0x68>
 8015908:	2101      	movs	r1, #1
 801590a:	fa01 f605 	lsl.w	r6, r1, r5
 801590e:	1d72      	adds	r2, r6, #5
 8015910:	0092      	lsls	r2, r2, #2
 8015912:	4620      	mov	r0, r4
 8015914:	f000 fb5a 	bl	8015fcc <_calloc_r>
 8015918:	b160      	cbz	r0, 8015934 <_Balloc+0x64>
 801591a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801591e:	e00e      	b.n	801593e <_Balloc+0x6e>
 8015920:	2221      	movs	r2, #33	; 0x21
 8015922:	2104      	movs	r1, #4
 8015924:	4620      	mov	r0, r4
 8015926:	f000 fb51 	bl	8015fcc <_calloc_r>
 801592a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801592c:	60f0      	str	r0, [r6, #12]
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d1e4      	bne.n	80158fe <_Balloc+0x2e>
 8015934:	2000      	movs	r0, #0
 8015936:	bd70      	pop	{r4, r5, r6, pc}
 8015938:	6802      	ldr	r2, [r0, #0]
 801593a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801593e:	2300      	movs	r3, #0
 8015940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015944:	e7f7      	b.n	8015936 <_Balloc+0x66>
 8015946:	bf00      	nop
 8015948:	08021f4d 	.word	0x08021f4d
 801594c:	08022034 	.word	0x08022034

08015950 <_Bfree>:
 8015950:	b570      	push	{r4, r5, r6, lr}
 8015952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015954:	4605      	mov	r5, r0
 8015956:	460c      	mov	r4, r1
 8015958:	b976      	cbnz	r6, 8015978 <_Bfree+0x28>
 801595a:	2010      	movs	r0, #16
 801595c:	f7fd ffd0 	bl	8013900 <malloc>
 8015960:	4602      	mov	r2, r0
 8015962:	6268      	str	r0, [r5, #36]	; 0x24
 8015964:	b920      	cbnz	r0, 8015970 <_Bfree+0x20>
 8015966:	4b09      	ldr	r3, [pc, #36]	; (801598c <_Bfree+0x3c>)
 8015968:	4809      	ldr	r0, [pc, #36]	; (8015990 <_Bfree+0x40>)
 801596a:	218a      	movs	r1, #138	; 0x8a
 801596c:	f000 fe48 	bl	8016600 <__assert_func>
 8015970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015974:	6006      	str	r6, [r0, #0]
 8015976:	60c6      	str	r6, [r0, #12]
 8015978:	b13c      	cbz	r4, 801598a <_Bfree+0x3a>
 801597a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801597c:	6862      	ldr	r2, [r4, #4]
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015984:	6021      	str	r1, [r4, #0]
 8015986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801598a:	bd70      	pop	{r4, r5, r6, pc}
 801598c:	08021f4d 	.word	0x08021f4d
 8015990:	08022034 	.word	0x08022034

08015994 <__multadd>:
 8015994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015998:	690e      	ldr	r6, [r1, #16]
 801599a:	4607      	mov	r7, r0
 801599c:	4698      	mov	r8, r3
 801599e:	460c      	mov	r4, r1
 80159a0:	f101 0014 	add.w	r0, r1, #20
 80159a4:	2300      	movs	r3, #0
 80159a6:	6805      	ldr	r5, [r0, #0]
 80159a8:	b2a9      	uxth	r1, r5
 80159aa:	fb02 8101 	mla	r1, r2, r1, r8
 80159ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80159b2:	0c2d      	lsrs	r5, r5, #16
 80159b4:	fb02 c505 	mla	r5, r2, r5, ip
 80159b8:	b289      	uxth	r1, r1
 80159ba:	3301      	adds	r3, #1
 80159bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80159c0:	429e      	cmp	r6, r3
 80159c2:	f840 1b04 	str.w	r1, [r0], #4
 80159c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80159ca:	dcec      	bgt.n	80159a6 <__multadd+0x12>
 80159cc:	f1b8 0f00 	cmp.w	r8, #0
 80159d0:	d022      	beq.n	8015a18 <__multadd+0x84>
 80159d2:	68a3      	ldr	r3, [r4, #8]
 80159d4:	42b3      	cmp	r3, r6
 80159d6:	dc19      	bgt.n	8015a0c <__multadd+0x78>
 80159d8:	6861      	ldr	r1, [r4, #4]
 80159da:	4638      	mov	r0, r7
 80159dc:	3101      	adds	r1, #1
 80159de:	f7ff ff77 	bl	80158d0 <_Balloc>
 80159e2:	4605      	mov	r5, r0
 80159e4:	b928      	cbnz	r0, 80159f2 <__multadd+0x5e>
 80159e6:	4602      	mov	r2, r0
 80159e8:	4b0d      	ldr	r3, [pc, #52]	; (8015a20 <__multadd+0x8c>)
 80159ea:	480e      	ldr	r0, [pc, #56]	; (8015a24 <__multadd+0x90>)
 80159ec:	21b5      	movs	r1, #181	; 0xb5
 80159ee:	f000 fe07 	bl	8016600 <__assert_func>
 80159f2:	6922      	ldr	r2, [r4, #16]
 80159f4:	3202      	adds	r2, #2
 80159f6:	f104 010c 	add.w	r1, r4, #12
 80159fa:	0092      	lsls	r2, r2, #2
 80159fc:	300c      	adds	r0, #12
 80159fe:	f7fd ff9d 	bl	801393c <memcpy>
 8015a02:	4621      	mov	r1, r4
 8015a04:	4638      	mov	r0, r7
 8015a06:	f7ff ffa3 	bl	8015950 <_Bfree>
 8015a0a:	462c      	mov	r4, r5
 8015a0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015a10:	3601      	adds	r6, #1
 8015a12:	f8c3 8014 	str.w	r8, [r3, #20]
 8015a16:	6126      	str	r6, [r4, #16]
 8015a18:	4620      	mov	r0, r4
 8015a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a1e:	bf00      	nop
 8015a20:	08021fc3 	.word	0x08021fc3
 8015a24:	08022034 	.word	0x08022034

08015a28 <__hi0bits>:
 8015a28:	0c03      	lsrs	r3, r0, #16
 8015a2a:	041b      	lsls	r3, r3, #16
 8015a2c:	b9d3      	cbnz	r3, 8015a64 <__hi0bits+0x3c>
 8015a2e:	0400      	lsls	r0, r0, #16
 8015a30:	2310      	movs	r3, #16
 8015a32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015a36:	bf04      	itt	eq
 8015a38:	0200      	lsleq	r0, r0, #8
 8015a3a:	3308      	addeq	r3, #8
 8015a3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015a40:	bf04      	itt	eq
 8015a42:	0100      	lsleq	r0, r0, #4
 8015a44:	3304      	addeq	r3, #4
 8015a46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015a4a:	bf04      	itt	eq
 8015a4c:	0080      	lsleq	r0, r0, #2
 8015a4e:	3302      	addeq	r3, #2
 8015a50:	2800      	cmp	r0, #0
 8015a52:	db05      	blt.n	8015a60 <__hi0bits+0x38>
 8015a54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a58:	f103 0301 	add.w	r3, r3, #1
 8015a5c:	bf08      	it	eq
 8015a5e:	2320      	moveq	r3, #32
 8015a60:	4618      	mov	r0, r3
 8015a62:	4770      	bx	lr
 8015a64:	2300      	movs	r3, #0
 8015a66:	e7e4      	b.n	8015a32 <__hi0bits+0xa>

08015a68 <__lo0bits>:
 8015a68:	6803      	ldr	r3, [r0, #0]
 8015a6a:	f013 0207 	ands.w	r2, r3, #7
 8015a6e:	4601      	mov	r1, r0
 8015a70:	d00b      	beq.n	8015a8a <__lo0bits+0x22>
 8015a72:	07da      	lsls	r2, r3, #31
 8015a74:	d424      	bmi.n	8015ac0 <__lo0bits+0x58>
 8015a76:	0798      	lsls	r0, r3, #30
 8015a78:	bf49      	itett	mi
 8015a7a:	085b      	lsrmi	r3, r3, #1
 8015a7c:	089b      	lsrpl	r3, r3, #2
 8015a7e:	2001      	movmi	r0, #1
 8015a80:	600b      	strmi	r3, [r1, #0]
 8015a82:	bf5c      	itt	pl
 8015a84:	600b      	strpl	r3, [r1, #0]
 8015a86:	2002      	movpl	r0, #2
 8015a88:	4770      	bx	lr
 8015a8a:	b298      	uxth	r0, r3
 8015a8c:	b9b0      	cbnz	r0, 8015abc <__lo0bits+0x54>
 8015a8e:	0c1b      	lsrs	r3, r3, #16
 8015a90:	2010      	movs	r0, #16
 8015a92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015a96:	bf04      	itt	eq
 8015a98:	0a1b      	lsreq	r3, r3, #8
 8015a9a:	3008      	addeq	r0, #8
 8015a9c:	071a      	lsls	r2, r3, #28
 8015a9e:	bf04      	itt	eq
 8015aa0:	091b      	lsreq	r3, r3, #4
 8015aa2:	3004      	addeq	r0, #4
 8015aa4:	079a      	lsls	r2, r3, #30
 8015aa6:	bf04      	itt	eq
 8015aa8:	089b      	lsreq	r3, r3, #2
 8015aaa:	3002      	addeq	r0, #2
 8015aac:	07da      	lsls	r2, r3, #31
 8015aae:	d403      	bmi.n	8015ab8 <__lo0bits+0x50>
 8015ab0:	085b      	lsrs	r3, r3, #1
 8015ab2:	f100 0001 	add.w	r0, r0, #1
 8015ab6:	d005      	beq.n	8015ac4 <__lo0bits+0x5c>
 8015ab8:	600b      	str	r3, [r1, #0]
 8015aba:	4770      	bx	lr
 8015abc:	4610      	mov	r0, r2
 8015abe:	e7e8      	b.n	8015a92 <__lo0bits+0x2a>
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	4770      	bx	lr
 8015ac4:	2020      	movs	r0, #32
 8015ac6:	4770      	bx	lr

08015ac8 <__i2b>:
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	460c      	mov	r4, r1
 8015acc:	2101      	movs	r1, #1
 8015ace:	f7ff feff 	bl	80158d0 <_Balloc>
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	b928      	cbnz	r0, 8015ae2 <__i2b+0x1a>
 8015ad6:	4b05      	ldr	r3, [pc, #20]	; (8015aec <__i2b+0x24>)
 8015ad8:	4805      	ldr	r0, [pc, #20]	; (8015af0 <__i2b+0x28>)
 8015ada:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015ade:	f000 fd8f 	bl	8016600 <__assert_func>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	6144      	str	r4, [r0, #20]
 8015ae6:	6103      	str	r3, [r0, #16]
 8015ae8:	bd10      	pop	{r4, pc}
 8015aea:	bf00      	nop
 8015aec:	08021fc3 	.word	0x08021fc3
 8015af0:	08022034 	.word	0x08022034

08015af4 <__multiply>:
 8015af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af8:	4614      	mov	r4, r2
 8015afa:	690a      	ldr	r2, [r1, #16]
 8015afc:	6923      	ldr	r3, [r4, #16]
 8015afe:	429a      	cmp	r2, r3
 8015b00:	bfb8      	it	lt
 8015b02:	460b      	movlt	r3, r1
 8015b04:	460d      	mov	r5, r1
 8015b06:	bfbc      	itt	lt
 8015b08:	4625      	movlt	r5, r4
 8015b0a:	461c      	movlt	r4, r3
 8015b0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015b10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b14:	68ab      	ldr	r3, [r5, #8]
 8015b16:	6869      	ldr	r1, [r5, #4]
 8015b18:	eb0a 0709 	add.w	r7, sl, r9
 8015b1c:	42bb      	cmp	r3, r7
 8015b1e:	b085      	sub	sp, #20
 8015b20:	bfb8      	it	lt
 8015b22:	3101      	addlt	r1, #1
 8015b24:	f7ff fed4 	bl	80158d0 <_Balloc>
 8015b28:	b930      	cbnz	r0, 8015b38 <__multiply+0x44>
 8015b2a:	4602      	mov	r2, r0
 8015b2c:	4b42      	ldr	r3, [pc, #264]	; (8015c38 <__multiply+0x144>)
 8015b2e:	4843      	ldr	r0, [pc, #268]	; (8015c3c <__multiply+0x148>)
 8015b30:	f240 115d 	movw	r1, #349	; 0x15d
 8015b34:	f000 fd64 	bl	8016600 <__assert_func>
 8015b38:	f100 0614 	add.w	r6, r0, #20
 8015b3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015b40:	4633      	mov	r3, r6
 8015b42:	2200      	movs	r2, #0
 8015b44:	4543      	cmp	r3, r8
 8015b46:	d31e      	bcc.n	8015b86 <__multiply+0x92>
 8015b48:	f105 0c14 	add.w	ip, r5, #20
 8015b4c:	f104 0314 	add.w	r3, r4, #20
 8015b50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015b54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015b58:	9202      	str	r2, [sp, #8]
 8015b5a:	ebac 0205 	sub.w	r2, ip, r5
 8015b5e:	3a15      	subs	r2, #21
 8015b60:	f022 0203 	bic.w	r2, r2, #3
 8015b64:	3204      	adds	r2, #4
 8015b66:	f105 0115 	add.w	r1, r5, #21
 8015b6a:	458c      	cmp	ip, r1
 8015b6c:	bf38      	it	cc
 8015b6e:	2204      	movcc	r2, #4
 8015b70:	9201      	str	r2, [sp, #4]
 8015b72:	9a02      	ldr	r2, [sp, #8]
 8015b74:	9303      	str	r3, [sp, #12]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d808      	bhi.n	8015b8c <__multiply+0x98>
 8015b7a:	2f00      	cmp	r7, #0
 8015b7c:	dc55      	bgt.n	8015c2a <__multiply+0x136>
 8015b7e:	6107      	str	r7, [r0, #16]
 8015b80:	b005      	add	sp, #20
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	f843 2b04 	str.w	r2, [r3], #4
 8015b8a:	e7db      	b.n	8015b44 <__multiply+0x50>
 8015b8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8015b90:	f1ba 0f00 	cmp.w	sl, #0
 8015b94:	d020      	beq.n	8015bd8 <__multiply+0xe4>
 8015b96:	f105 0e14 	add.w	lr, r5, #20
 8015b9a:	46b1      	mov	r9, r6
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015ba2:	f8d9 b000 	ldr.w	fp, [r9]
 8015ba6:	b2a1      	uxth	r1, r4
 8015ba8:	fa1f fb8b 	uxth.w	fp, fp
 8015bac:	fb0a b101 	mla	r1, sl, r1, fp
 8015bb0:	4411      	add	r1, r2
 8015bb2:	f8d9 2000 	ldr.w	r2, [r9]
 8015bb6:	0c24      	lsrs	r4, r4, #16
 8015bb8:	0c12      	lsrs	r2, r2, #16
 8015bba:	fb0a 2404 	mla	r4, sl, r4, r2
 8015bbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015bc2:	b289      	uxth	r1, r1
 8015bc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015bc8:	45f4      	cmp	ip, lr
 8015bca:	f849 1b04 	str.w	r1, [r9], #4
 8015bce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015bd2:	d8e4      	bhi.n	8015b9e <__multiply+0xaa>
 8015bd4:	9901      	ldr	r1, [sp, #4]
 8015bd6:	5072      	str	r2, [r6, r1]
 8015bd8:	9a03      	ldr	r2, [sp, #12]
 8015bda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015bde:	3304      	adds	r3, #4
 8015be0:	f1b9 0f00 	cmp.w	r9, #0
 8015be4:	d01f      	beq.n	8015c26 <__multiply+0x132>
 8015be6:	6834      	ldr	r4, [r6, #0]
 8015be8:	f105 0114 	add.w	r1, r5, #20
 8015bec:	46b6      	mov	lr, r6
 8015bee:	f04f 0a00 	mov.w	sl, #0
 8015bf2:	880a      	ldrh	r2, [r1, #0]
 8015bf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015bf8:	fb09 b202 	mla	r2, r9, r2, fp
 8015bfc:	4492      	add	sl, r2
 8015bfe:	b2a4      	uxth	r4, r4
 8015c00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015c04:	f84e 4b04 	str.w	r4, [lr], #4
 8015c08:	f851 4b04 	ldr.w	r4, [r1], #4
 8015c0c:	f8be 2000 	ldrh.w	r2, [lr]
 8015c10:	0c24      	lsrs	r4, r4, #16
 8015c12:	fb09 2404 	mla	r4, r9, r4, r2
 8015c16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015c1a:	458c      	cmp	ip, r1
 8015c1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015c20:	d8e7      	bhi.n	8015bf2 <__multiply+0xfe>
 8015c22:	9a01      	ldr	r2, [sp, #4]
 8015c24:	50b4      	str	r4, [r6, r2]
 8015c26:	3604      	adds	r6, #4
 8015c28:	e7a3      	b.n	8015b72 <__multiply+0x7e>
 8015c2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d1a5      	bne.n	8015b7e <__multiply+0x8a>
 8015c32:	3f01      	subs	r7, #1
 8015c34:	e7a1      	b.n	8015b7a <__multiply+0x86>
 8015c36:	bf00      	nop
 8015c38:	08021fc3 	.word	0x08021fc3
 8015c3c:	08022034 	.word	0x08022034

08015c40 <__pow5mult>:
 8015c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c44:	4615      	mov	r5, r2
 8015c46:	f012 0203 	ands.w	r2, r2, #3
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	460f      	mov	r7, r1
 8015c4e:	d007      	beq.n	8015c60 <__pow5mult+0x20>
 8015c50:	4c25      	ldr	r4, [pc, #148]	; (8015ce8 <__pow5mult+0xa8>)
 8015c52:	3a01      	subs	r2, #1
 8015c54:	2300      	movs	r3, #0
 8015c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c5a:	f7ff fe9b 	bl	8015994 <__multadd>
 8015c5e:	4607      	mov	r7, r0
 8015c60:	10ad      	asrs	r5, r5, #2
 8015c62:	d03d      	beq.n	8015ce0 <__pow5mult+0xa0>
 8015c64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c66:	b97c      	cbnz	r4, 8015c88 <__pow5mult+0x48>
 8015c68:	2010      	movs	r0, #16
 8015c6a:	f7fd fe49 	bl	8013900 <malloc>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	6270      	str	r0, [r6, #36]	; 0x24
 8015c72:	b928      	cbnz	r0, 8015c80 <__pow5mult+0x40>
 8015c74:	4b1d      	ldr	r3, [pc, #116]	; (8015cec <__pow5mult+0xac>)
 8015c76:	481e      	ldr	r0, [pc, #120]	; (8015cf0 <__pow5mult+0xb0>)
 8015c78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015c7c:	f000 fcc0 	bl	8016600 <__assert_func>
 8015c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c84:	6004      	str	r4, [r0, #0]
 8015c86:	60c4      	str	r4, [r0, #12]
 8015c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c90:	b94c      	cbnz	r4, 8015ca6 <__pow5mult+0x66>
 8015c92:	f240 2171 	movw	r1, #625	; 0x271
 8015c96:	4630      	mov	r0, r6
 8015c98:	f7ff ff16 	bl	8015ac8 <__i2b>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	6003      	str	r3, [r0, #0]
 8015ca6:	f04f 0900 	mov.w	r9, #0
 8015caa:	07eb      	lsls	r3, r5, #31
 8015cac:	d50a      	bpl.n	8015cc4 <__pow5mult+0x84>
 8015cae:	4639      	mov	r1, r7
 8015cb0:	4622      	mov	r2, r4
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f7ff ff1e 	bl	8015af4 <__multiply>
 8015cb8:	4639      	mov	r1, r7
 8015cba:	4680      	mov	r8, r0
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f7ff fe47 	bl	8015950 <_Bfree>
 8015cc2:	4647      	mov	r7, r8
 8015cc4:	106d      	asrs	r5, r5, #1
 8015cc6:	d00b      	beq.n	8015ce0 <__pow5mult+0xa0>
 8015cc8:	6820      	ldr	r0, [r4, #0]
 8015cca:	b938      	cbnz	r0, 8015cdc <__pow5mult+0x9c>
 8015ccc:	4622      	mov	r2, r4
 8015cce:	4621      	mov	r1, r4
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f7ff ff0f 	bl	8015af4 <__multiply>
 8015cd6:	6020      	str	r0, [r4, #0]
 8015cd8:	f8c0 9000 	str.w	r9, [r0]
 8015cdc:	4604      	mov	r4, r0
 8015cde:	e7e4      	b.n	8015caa <__pow5mult+0x6a>
 8015ce0:	4638      	mov	r0, r7
 8015ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ce6:	bf00      	nop
 8015ce8:	08022188 	.word	0x08022188
 8015cec:	08021f4d 	.word	0x08021f4d
 8015cf0:	08022034 	.word	0x08022034

08015cf4 <__lshift>:
 8015cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	6849      	ldr	r1, [r1, #4]
 8015cfc:	6923      	ldr	r3, [r4, #16]
 8015cfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d02:	68a3      	ldr	r3, [r4, #8]
 8015d04:	4607      	mov	r7, r0
 8015d06:	4691      	mov	r9, r2
 8015d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d0c:	f108 0601 	add.w	r6, r8, #1
 8015d10:	42b3      	cmp	r3, r6
 8015d12:	db0b      	blt.n	8015d2c <__lshift+0x38>
 8015d14:	4638      	mov	r0, r7
 8015d16:	f7ff fddb 	bl	80158d0 <_Balloc>
 8015d1a:	4605      	mov	r5, r0
 8015d1c:	b948      	cbnz	r0, 8015d32 <__lshift+0x3e>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	4b28      	ldr	r3, [pc, #160]	; (8015dc4 <__lshift+0xd0>)
 8015d22:	4829      	ldr	r0, [pc, #164]	; (8015dc8 <__lshift+0xd4>)
 8015d24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015d28:	f000 fc6a 	bl	8016600 <__assert_func>
 8015d2c:	3101      	adds	r1, #1
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	e7ee      	b.n	8015d10 <__lshift+0x1c>
 8015d32:	2300      	movs	r3, #0
 8015d34:	f100 0114 	add.w	r1, r0, #20
 8015d38:	f100 0210 	add.w	r2, r0, #16
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	4553      	cmp	r3, sl
 8015d40:	db33      	blt.n	8015daa <__lshift+0xb6>
 8015d42:	6920      	ldr	r0, [r4, #16]
 8015d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d48:	f104 0314 	add.w	r3, r4, #20
 8015d4c:	f019 091f 	ands.w	r9, r9, #31
 8015d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d58:	d02b      	beq.n	8015db2 <__lshift+0xbe>
 8015d5a:	f1c9 0e20 	rsb	lr, r9, #32
 8015d5e:	468a      	mov	sl, r1
 8015d60:	2200      	movs	r2, #0
 8015d62:	6818      	ldr	r0, [r3, #0]
 8015d64:	fa00 f009 	lsl.w	r0, r0, r9
 8015d68:	4302      	orrs	r2, r0
 8015d6a:	f84a 2b04 	str.w	r2, [sl], #4
 8015d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d72:	459c      	cmp	ip, r3
 8015d74:	fa22 f20e 	lsr.w	r2, r2, lr
 8015d78:	d8f3      	bhi.n	8015d62 <__lshift+0x6e>
 8015d7a:	ebac 0304 	sub.w	r3, ip, r4
 8015d7e:	3b15      	subs	r3, #21
 8015d80:	f023 0303 	bic.w	r3, r3, #3
 8015d84:	3304      	adds	r3, #4
 8015d86:	f104 0015 	add.w	r0, r4, #21
 8015d8a:	4584      	cmp	ip, r0
 8015d8c:	bf38      	it	cc
 8015d8e:	2304      	movcc	r3, #4
 8015d90:	50ca      	str	r2, [r1, r3]
 8015d92:	b10a      	cbz	r2, 8015d98 <__lshift+0xa4>
 8015d94:	f108 0602 	add.w	r6, r8, #2
 8015d98:	3e01      	subs	r6, #1
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	612e      	str	r6, [r5, #16]
 8015d9e:	4621      	mov	r1, r4
 8015da0:	f7ff fdd6 	bl	8015950 <_Bfree>
 8015da4:	4628      	mov	r0, r5
 8015da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8015dae:	3301      	adds	r3, #1
 8015db0:	e7c5      	b.n	8015d3e <__lshift+0x4a>
 8015db2:	3904      	subs	r1, #4
 8015db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015dbc:	459c      	cmp	ip, r3
 8015dbe:	d8f9      	bhi.n	8015db4 <__lshift+0xc0>
 8015dc0:	e7ea      	b.n	8015d98 <__lshift+0xa4>
 8015dc2:	bf00      	nop
 8015dc4:	08021fc3 	.word	0x08021fc3
 8015dc8:	08022034 	.word	0x08022034

08015dcc <__mcmp>:
 8015dcc:	b530      	push	{r4, r5, lr}
 8015dce:	6902      	ldr	r2, [r0, #16]
 8015dd0:	690c      	ldr	r4, [r1, #16]
 8015dd2:	1b12      	subs	r2, r2, r4
 8015dd4:	d10e      	bne.n	8015df4 <__mcmp+0x28>
 8015dd6:	f100 0314 	add.w	r3, r0, #20
 8015dda:	3114      	adds	r1, #20
 8015ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015dec:	42a5      	cmp	r5, r4
 8015dee:	d003      	beq.n	8015df8 <__mcmp+0x2c>
 8015df0:	d305      	bcc.n	8015dfe <__mcmp+0x32>
 8015df2:	2201      	movs	r2, #1
 8015df4:	4610      	mov	r0, r2
 8015df6:	bd30      	pop	{r4, r5, pc}
 8015df8:	4283      	cmp	r3, r0
 8015dfa:	d3f3      	bcc.n	8015de4 <__mcmp+0x18>
 8015dfc:	e7fa      	b.n	8015df4 <__mcmp+0x28>
 8015dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8015e02:	e7f7      	b.n	8015df4 <__mcmp+0x28>

08015e04 <__mdiff>:
 8015e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e08:	460c      	mov	r4, r1
 8015e0a:	4606      	mov	r6, r0
 8015e0c:	4611      	mov	r1, r2
 8015e0e:	4620      	mov	r0, r4
 8015e10:	4617      	mov	r7, r2
 8015e12:	f7ff ffdb 	bl	8015dcc <__mcmp>
 8015e16:	1e05      	subs	r5, r0, #0
 8015e18:	d110      	bne.n	8015e3c <__mdiff+0x38>
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	4630      	mov	r0, r6
 8015e1e:	f7ff fd57 	bl	80158d0 <_Balloc>
 8015e22:	b930      	cbnz	r0, 8015e32 <__mdiff+0x2e>
 8015e24:	4b39      	ldr	r3, [pc, #228]	; (8015f0c <__mdiff+0x108>)
 8015e26:	4602      	mov	r2, r0
 8015e28:	f240 2132 	movw	r1, #562	; 0x232
 8015e2c:	4838      	ldr	r0, [pc, #224]	; (8015f10 <__mdiff+0x10c>)
 8015e2e:	f000 fbe7 	bl	8016600 <__assert_func>
 8015e32:	2301      	movs	r3, #1
 8015e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3c:	bfa4      	itt	ge
 8015e3e:	463b      	movge	r3, r7
 8015e40:	4627      	movge	r7, r4
 8015e42:	4630      	mov	r0, r6
 8015e44:	6879      	ldr	r1, [r7, #4]
 8015e46:	bfa6      	itte	ge
 8015e48:	461c      	movge	r4, r3
 8015e4a:	2500      	movge	r5, #0
 8015e4c:	2501      	movlt	r5, #1
 8015e4e:	f7ff fd3f 	bl	80158d0 <_Balloc>
 8015e52:	b920      	cbnz	r0, 8015e5e <__mdiff+0x5a>
 8015e54:	4b2d      	ldr	r3, [pc, #180]	; (8015f0c <__mdiff+0x108>)
 8015e56:	4602      	mov	r2, r0
 8015e58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015e5c:	e7e6      	b.n	8015e2c <__mdiff+0x28>
 8015e5e:	693e      	ldr	r6, [r7, #16]
 8015e60:	60c5      	str	r5, [r0, #12]
 8015e62:	6925      	ldr	r5, [r4, #16]
 8015e64:	f107 0114 	add.w	r1, r7, #20
 8015e68:	f104 0914 	add.w	r9, r4, #20
 8015e6c:	f100 0e14 	add.w	lr, r0, #20
 8015e70:	f107 0210 	add.w	r2, r7, #16
 8015e74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015e78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015e7c:	46f2      	mov	sl, lr
 8015e7e:	2700      	movs	r7, #0
 8015e80:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015e88:	fa1f f883 	uxth.w	r8, r3
 8015e8c:	fa17 f78b 	uxtah	r7, r7, fp
 8015e90:	0c1b      	lsrs	r3, r3, #16
 8015e92:	eba7 0808 	sub.w	r8, r7, r8
 8015e96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015e9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015e9e:	fa1f f888 	uxth.w	r8, r8
 8015ea2:	141f      	asrs	r7, r3, #16
 8015ea4:	454d      	cmp	r5, r9
 8015ea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015eaa:	f84a 3b04 	str.w	r3, [sl], #4
 8015eae:	d8e7      	bhi.n	8015e80 <__mdiff+0x7c>
 8015eb0:	1b2b      	subs	r3, r5, r4
 8015eb2:	3b15      	subs	r3, #21
 8015eb4:	f023 0303 	bic.w	r3, r3, #3
 8015eb8:	3304      	adds	r3, #4
 8015eba:	3415      	adds	r4, #21
 8015ebc:	42a5      	cmp	r5, r4
 8015ebe:	bf38      	it	cc
 8015ec0:	2304      	movcc	r3, #4
 8015ec2:	4419      	add	r1, r3
 8015ec4:	4473      	add	r3, lr
 8015ec6:	469e      	mov	lr, r3
 8015ec8:	460d      	mov	r5, r1
 8015eca:	4565      	cmp	r5, ip
 8015ecc:	d30e      	bcc.n	8015eec <__mdiff+0xe8>
 8015ece:	f10c 0203 	add.w	r2, ip, #3
 8015ed2:	1a52      	subs	r2, r2, r1
 8015ed4:	f022 0203 	bic.w	r2, r2, #3
 8015ed8:	3903      	subs	r1, #3
 8015eda:	458c      	cmp	ip, r1
 8015edc:	bf38      	it	cc
 8015ede:	2200      	movcc	r2, #0
 8015ee0:	441a      	add	r2, r3
 8015ee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015ee6:	b17b      	cbz	r3, 8015f08 <__mdiff+0x104>
 8015ee8:	6106      	str	r6, [r0, #16]
 8015eea:	e7a5      	b.n	8015e38 <__mdiff+0x34>
 8015eec:	f855 8b04 	ldr.w	r8, [r5], #4
 8015ef0:	fa17 f488 	uxtah	r4, r7, r8
 8015ef4:	1422      	asrs	r2, r4, #16
 8015ef6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015efa:	b2a4      	uxth	r4, r4
 8015efc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015f00:	f84e 4b04 	str.w	r4, [lr], #4
 8015f04:	1417      	asrs	r7, r2, #16
 8015f06:	e7e0      	b.n	8015eca <__mdiff+0xc6>
 8015f08:	3e01      	subs	r6, #1
 8015f0a:	e7ea      	b.n	8015ee2 <__mdiff+0xde>
 8015f0c:	08021fc3 	.word	0x08021fc3
 8015f10:	08022034 	.word	0x08022034

08015f14 <__d2b>:
 8015f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f18:	4689      	mov	r9, r1
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	ec57 6b10 	vmov	r6, r7, d0
 8015f20:	4690      	mov	r8, r2
 8015f22:	f7ff fcd5 	bl	80158d0 <_Balloc>
 8015f26:	4604      	mov	r4, r0
 8015f28:	b930      	cbnz	r0, 8015f38 <__d2b+0x24>
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	4b25      	ldr	r3, [pc, #148]	; (8015fc4 <__d2b+0xb0>)
 8015f2e:	4826      	ldr	r0, [pc, #152]	; (8015fc8 <__d2b+0xb4>)
 8015f30:	f240 310a 	movw	r1, #778	; 0x30a
 8015f34:	f000 fb64 	bl	8016600 <__assert_func>
 8015f38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015f3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015f40:	bb35      	cbnz	r5, 8015f90 <__d2b+0x7c>
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	9301      	str	r3, [sp, #4]
 8015f46:	d028      	beq.n	8015f9a <__d2b+0x86>
 8015f48:	4668      	mov	r0, sp
 8015f4a:	9600      	str	r6, [sp, #0]
 8015f4c:	f7ff fd8c 	bl	8015a68 <__lo0bits>
 8015f50:	9900      	ldr	r1, [sp, #0]
 8015f52:	b300      	cbz	r0, 8015f96 <__d2b+0x82>
 8015f54:	9a01      	ldr	r2, [sp, #4]
 8015f56:	f1c0 0320 	rsb	r3, r0, #32
 8015f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f5e:	430b      	orrs	r3, r1
 8015f60:	40c2      	lsrs	r2, r0
 8015f62:	6163      	str	r3, [r4, #20]
 8015f64:	9201      	str	r2, [sp, #4]
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	61a3      	str	r3, [r4, #24]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	bf14      	ite	ne
 8015f6e:	2202      	movne	r2, #2
 8015f70:	2201      	moveq	r2, #1
 8015f72:	6122      	str	r2, [r4, #16]
 8015f74:	b1d5      	cbz	r5, 8015fac <__d2b+0x98>
 8015f76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015f7a:	4405      	add	r5, r0
 8015f7c:	f8c9 5000 	str.w	r5, [r9]
 8015f80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015f84:	f8c8 0000 	str.w	r0, [r8]
 8015f88:	4620      	mov	r0, r4
 8015f8a:	b003      	add	sp, #12
 8015f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f94:	e7d5      	b.n	8015f42 <__d2b+0x2e>
 8015f96:	6161      	str	r1, [r4, #20]
 8015f98:	e7e5      	b.n	8015f66 <__d2b+0x52>
 8015f9a:	a801      	add	r0, sp, #4
 8015f9c:	f7ff fd64 	bl	8015a68 <__lo0bits>
 8015fa0:	9b01      	ldr	r3, [sp, #4]
 8015fa2:	6163      	str	r3, [r4, #20]
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	6122      	str	r2, [r4, #16]
 8015fa8:	3020      	adds	r0, #32
 8015faa:	e7e3      	b.n	8015f74 <__d2b+0x60>
 8015fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015fb4:	f8c9 0000 	str.w	r0, [r9]
 8015fb8:	6918      	ldr	r0, [r3, #16]
 8015fba:	f7ff fd35 	bl	8015a28 <__hi0bits>
 8015fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015fc2:	e7df      	b.n	8015f84 <__d2b+0x70>
 8015fc4:	08021fc3 	.word	0x08021fc3
 8015fc8:	08022034 	.word	0x08022034

08015fcc <_calloc_r>:
 8015fcc:	b513      	push	{r0, r1, r4, lr}
 8015fce:	434a      	muls	r2, r1
 8015fd0:	4611      	mov	r1, r2
 8015fd2:	9201      	str	r2, [sp, #4]
 8015fd4:	f7fd fd32 	bl	8013a3c <_malloc_r>
 8015fd8:	4604      	mov	r4, r0
 8015fda:	b118      	cbz	r0, 8015fe4 <_calloc_r+0x18>
 8015fdc:	9a01      	ldr	r2, [sp, #4]
 8015fde:	2100      	movs	r1, #0
 8015fe0:	f7fd fcd4 	bl	801398c <memset>
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	b002      	add	sp, #8
 8015fe8:	bd10      	pop	{r4, pc}

08015fea <__ssputs_r>:
 8015fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fee:	688e      	ldr	r6, [r1, #8]
 8015ff0:	429e      	cmp	r6, r3
 8015ff2:	4682      	mov	sl, r0
 8015ff4:	460c      	mov	r4, r1
 8015ff6:	4690      	mov	r8, r2
 8015ff8:	461f      	mov	r7, r3
 8015ffa:	d838      	bhi.n	801606e <__ssputs_r+0x84>
 8015ffc:	898a      	ldrh	r2, [r1, #12]
 8015ffe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016002:	d032      	beq.n	801606a <__ssputs_r+0x80>
 8016004:	6825      	ldr	r5, [r4, #0]
 8016006:	6909      	ldr	r1, [r1, #16]
 8016008:	eba5 0901 	sub.w	r9, r5, r1
 801600c:	6965      	ldr	r5, [r4, #20]
 801600e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016016:	3301      	adds	r3, #1
 8016018:	444b      	add	r3, r9
 801601a:	106d      	asrs	r5, r5, #1
 801601c:	429d      	cmp	r5, r3
 801601e:	bf38      	it	cc
 8016020:	461d      	movcc	r5, r3
 8016022:	0553      	lsls	r3, r2, #21
 8016024:	d531      	bpl.n	801608a <__ssputs_r+0xa0>
 8016026:	4629      	mov	r1, r5
 8016028:	f7fd fd08 	bl	8013a3c <_malloc_r>
 801602c:	4606      	mov	r6, r0
 801602e:	b950      	cbnz	r0, 8016046 <__ssputs_r+0x5c>
 8016030:	230c      	movs	r3, #12
 8016032:	f8ca 3000 	str.w	r3, [sl]
 8016036:	89a3      	ldrh	r3, [r4, #12]
 8016038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801603c:	81a3      	strh	r3, [r4, #12]
 801603e:	f04f 30ff 	mov.w	r0, #4294967295
 8016042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016046:	6921      	ldr	r1, [r4, #16]
 8016048:	464a      	mov	r2, r9
 801604a:	f7fd fc77 	bl	801393c <memcpy>
 801604e:	89a3      	ldrh	r3, [r4, #12]
 8016050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016058:	81a3      	strh	r3, [r4, #12]
 801605a:	6126      	str	r6, [r4, #16]
 801605c:	6165      	str	r5, [r4, #20]
 801605e:	444e      	add	r6, r9
 8016060:	eba5 0509 	sub.w	r5, r5, r9
 8016064:	6026      	str	r6, [r4, #0]
 8016066:	60a5      	str	r5, [r4, #8]
 8016068:	463e      	mov	r6, r7
 801606a:	42be      	cmp	r6, r7
 801606c:	d900      	bls.n	8016070 <__ssputs_r+0x86>
 801606e:	463e      	mov	r6, r7
 8016070:	4632      	mov	r2, r6
 8016072:	6820      	ldr	r0, [r4, #0]
 8016074:	4641      	mov	r1, r8
 8016076:	f7fd fc6f 	bl	8013958 <memmove>
 801607a:	68a3      	ldr	r3, [r4, #8]
 801607c:	6822      	ldr	r2, [r4, #0]
 801607e:	1b9b      	subs	r3, r3, r6
 8016080:	4432      	add	r2, r6
 8016082:	60a3      	str	r3, [r4, #8]
 8016084:	6022      	str	r2, [r4, #0]
 8016086:	2000      	movs	r0, #0
 8016088:	e7db      	b.n	8016042 <__ssputs_r+0x58>
 801608a:	462a      	mov	r2, r5
 801608c:	f000 fb3e 	bl	801670c <_realloc_r>
 8016090:	4606      	mov	r6, r0
 8016092:	2800      	cmp	r0, #0
 8016094:	d1e1      	bne.n	801605a <__ssputs_r+0x70>
 8016096:	6921      	ldr	r1, [r4, #16]
 8016098:	4650      	mov	r0, sl
 801609a:	f7fd fc7f 	bl	801399c <_free_r>
 801609e:	e7c7      	b.n	8016030 <__ssputs_r+0x46>

080160a0 <_svfiprintf_r>:
 80160a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	4698      	mov	r8, r3
 80160a6:	898b      	ldrh	r3, [r1, #12]
 80160a8:	061b      	lsls	r3, r3, #24
 80160aa:	b09d      	sub	sp, #116	; 0x74
 80160ac:	4607      	mov	r7, r0
 80160ae:	460d      	mov	r5, r1
 80160b0:	4614      	mov	r4, r2
 80160b2:	d50e      	bpl.n	80160d2 <_svfiprintf_r+0x32>
 80160b4:	690b      	ldr	r3, [r1, #16]
 80160b6:	b963      	cbnz	r3, 80160d2 <_svfiprintf_r+0x32>
 80160b8:	2140      	movs	r1, #64	; 0x40
 80160ba:	f7fd fcbf 	bl	8013a3c <_malloc_r>
 80160be:	6028      	str	r0, [r5, #0]
 80160c0:	6128      	str	r0, [r5, #16]
 80160c2:	b920      	cbnz	r0, 80160ce <_svfiprintf_r+0x2e>
 80160c4:	230c      	movs	r3, #12
 80160c6:	603b      	str	r3, [r7, #0]
 80160c8:	f04f 30ff 	mov.w	r0, #4294967295
 80160cc:	e0d1      	b.n	8016272 <_svfiprintf_r+0x1d2>
 80160ce:	2340      	movs	r3, #64	; 0x40
 80160d0:	616b      	str	r3, [r5, #20]
 80160d2:	2300      	movs	r3, #0
 80160d4:	9309      	str	r3, [sp, #36]	; 0x24
 80160d6:	2320      	movs	r3, #32
 80160d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80160e0:	2330      	movs	r3, #48	; 0x30
 80160e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801628c <_svfiprintf_r+0x1ec>
 80160e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160ea:	f04f 0901 	mov.w	r9, #1
 80160ee:	4623      	mov	r3, r4
 80160f0:	469a      	mov	sl, r3
 80160f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160f6:	b10a      	cbz	r2, 80160fc <_svfiprintf_r+0x5c>
 80160f8:	2a25      	cmp	r2, #37	; 0x25
 80160fa:	d1f9      	bne.n	80160f0 <_svfiprintf_r+0x50>
 80160fc:	ebba 0b04 	subs.w	fp, sl, r4
 8016100:	d00b      	beq.n	801611a <_svfiprintf_r+0x7a>
 8016102:	465b      	mov	r3, fp
 8016104:	4622      	mov	r2, r4
 8016106:	4629      	mov	r1, r5
 8016108:	4638      	mov	r0, r7
 801610a:	f7ff ff6e 	bl	8015fea <__ssputs_r>
 801610e:	3001      	adds	r0, #1
 8016110:	f000 80aa 	beq.w	8016268 <_svfiprintf_r+0x1c8>
 8016114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016116:	445a      	add	r2, fp
 8016118:	9209      	str	r2, [sp, #36]	; 0x24
 801611a:	f89a 3000 	ldrb.w	r3, [sl]
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 80a2 	beq.w	8016268 <_svfiprintf_r+0x1c8>
 8016124:	2300      	movs	r3, #0
 8016126:	f04f 32ff 	mov.w	r2, #4294967295
 801612a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801612e:	f10a 0a01 	add.w	sl, sl, #1
 8016132:	9304      	str	r3, [sp, #16]
 8016134:	9307      	str	r3, [sp, #28]
 8016136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801613a:	931a      	str	r3, [sp, #104]	; 0x68
 801613c:	4654      	mov	r4, sl
 801613e:	2205      	movs	r2, #5
 8016140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016144:	4851      	ldr	r0, [pc, #324]	; (801628c <_svfiprintf_r+0x1ec>)
 8016146:	f7ea f863 	bl	8000210 <memchr>
 801614a:	9a04      	ldr	r2, [sp, #16]
 801614c:	b9d8      	cbnz	r0, 8016186 <_svfiprintf_r+0xe6>
 801614e:	06d0      	lsls	r0, r2, #27
 8016150:	bf44      	itt	mi
 8016152:	2320      	movmi	r3, #32
 8016154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016158:	0711      	lsls	r1, r2, #28
 801615a:	bf44      	itt	mi
 801615c:	232b      	movmi	r3, #43	; 0x2b
 801615e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016162:	f89a 3000 	ldrb.w	r3, [sl]
 8016166:	2b2a      	cmp	r3, #42	; 0x2a
 8016168:	d015      	beq.n	8016196 <_svfiprintf_r+0xf6>
 801616a:	9a07      	ldr	r2, [sp, #28]
 801616c:	4654      	mov	r4, sl
 801616e:	2000      	movs	r0, #0
 8016170:	f04f 0c0a 	mov.w	ip, #10
 8016174:	4621      	mov	r1, r4
 8016176:	f811 3b01 	ldrb.w	r3, [r1], #1
 801617a:	3b30      	subs	r3, #48	; 0x30
 801617c:	2b09      	cmp	r3, #9
 801617e:	d94e      	bls.n	801621e <_svfiprintf_r+0x17e>
 8016180:	b1b0      	cbz	r0, 80161b0 <_svfiprintf_r+0x110>
 8016182:	9207      	str	r2, [sp, #28]
 8016184:	e014      	b.n	80161b0 <_svfiprintf_r+0x110>
 8016186:	eba0 0308 	sub.w	r3, r0, r8
 801618a:	fa09 f303 	lsl.w	r3, r9, r3
 801618e:	4313      	orrs	r3, r2
 8016190:	9304      	str	r3, [sp, #16]
 8016192:	46a2      	mov	sl, r4
 8016194:	e7d2      	b.n	801613c <_svfiprintf_r+0x9c>
 8016196:	9b03      	ldr	r3, [sp, #12]
 8016198:	1d19      	adds	r1, r3, #4
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	9103      	str	r1, [sp, #12]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	bfbb      	ittet	lt
 80161a2:	425b      	neglt	r3, r3
 80161a4:	f042 0202 	orrlt.w	r2, r2, #2
 80161a8:	9307      	strge	r3, [sp, #28]
 80161aa:	9307      	strlt	r3, [sp, #28]
 80161ac:	bfb8      	it	lt
 80161ae:	9204      	strlt	r2, [sp, #16]
 80161b0:	7823      	ldrb	r3, [r4, #0]
 80161b2:	2b2e      	cmp	r3, #46	; 0x2e
 80161b4:	d10c      	bne.n	80161d0 <_svfiprintf_r+0x130>
 80161b6:	7863      	ldrb	r3, [r4, #1]
 80161b8:	2b2a      	cmp	r3, #42	; 0x2a
 80161ba:	d135      	bne.n	8016228 <_svfiprintf_r+0x188>
 80161bc:	9b03      	ldr	r3, [sp, #12]
 80161be:	1d1a      	adds	r2, r3, #4
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	9203      	str	r2, [sp, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	bfb8      	it	lt
 80161c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80161cc:	3402      	adds	r4, #2
 80161ce:	9305      	str	r3, [sp, #20]
 80161d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801629c <_svfiprintf_r+0x1fc>
 80161d4:	7821      	ldrb	r1, [r4, #0]
 80161d6:	2203      	movs	r2, #3
 80161d8:	4650      	mov	r0, sl
 80161da:	f7ea f819 	bl	8000210 <memchr>
 80161de:	b140      	cbz	r0, 80161f2 <_svfiprintf_r+0x152>
 80161e0:	2340      	movs	r3, #64	; 0x40
 80161e2:	eba0 000a 	sub.w	r0, r0, sl
 80161e6:	fa03 f000 	lsl.w	r0, r3, r0
 80161ea:	9b04      	ldr	r3, [sp, #16]
 80161ec:	4303      	orrs	r3, r0
 80161ee:	3401      	adds	r4, #1
 80161f0:	9304      	str	r3, [sp, #16]
 80161f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161f6:	4826      	ldr	r0, [pc, #152]	; (8016290 <_svfiprintf_r+0x1f0>)
 80161f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161fc:	2206      	movs	r2, #6
 80161fe:	f7ea f807 	bl	8000210 <memchr>
 8016202:	2800      	cmp	r0, #0
 8016204:	d038      	beq.n	8016278 <_svfiprintf_r+0x1d8>
 8016206:	4b23      	ldr	r3, [pc, #140]	; (8016294 <_svfiprintf_r+0x1f4>)
 8016208:	bb1b      	cbnz	r3, 8016252 <_svfiprintf_r+0x1b2>
 801620a:	9b03      	ldr	r3, [sp, #12]
 801620c:	3307      	adds	r3, #7
 801620e:	f023 0307 	bic.w	r3, r3, #7
 8016212:	3308      	adds	r3, #8
 8016214:	9303      	str	r3, [sp, #12]
 8016216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016218:	4433      	add	r3, r6
 801621a:	9309      	str	r3, [sp, #36]	; 0x24
 801621c:	e767      	b.n	80160ee <_svfiprintf_r+0x4e>
 801621e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016222:	460c      	mov	r4, r1
 8016224:	2001      	movs	r0, #1
 8016226:	e7a5      	b.n	8016174 <_svfiprintf_r+0xd4>
 8016228:	2300      	movs	r3, #0
 801622a:	3401      	adds	r4, #1
 801622c:	9305      	str	r3, [sp, #20]
 801622e:	4619      	mov	r1, r3
 8016230:	f04f 0c0a 	mov.w	ip, #10
 8016234:	4620      	mov	r0, r4
 8016236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801623a:	3a30      	subs	r2, #48	; 0x30
 801623c:	2a09      	cmp	r2, #9
 801623e:	d903      	bls.n	8016248 <_svfiprintf_r+0x1a8>
 8016240:	2b00      	cmp	r3, #0
 8016242:	d0c5      	beq.n	80161d0 <_svfiprintf_r+0x130>
 8016244:	9105      	str	r1, [sp, #20]
 8016246:	e7c3      	b.n	80161d0 <_svfiprintf_r+0x130>
 8016248:	fb0c 2101 	mla	r1, ip, r1, r2
 801624c:	4604      	mov	r4, r0
 801624e:	2301      	movs	r3, #1
 8016250:	e7f0      	b.n	8016234 <_svfiprintf_r+0x194>
 8016252:	ab03      	add	r3, sp, #12
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	462a      	mov	r2, r5
 8016258:	4b0f      	ldr	r3, [pc, #60]	; (8016298 <_svfiprintf_r+0x1f8>)
 801625a:	a904      	add	r1, sp, #16
 801625c:	4638      	mov	r0, r7
 801625e:	f7fd fce7 	bl	8013c30 <_printf_float>
 8016262:	1c42      	adds	r2, r0, #1
 8016264:	4606      	mov	r6, r0
 8016266:	d1d6      	bne.n	8016216 <_svfiprintf_r+0x176>
 8016268:	89ab      	ldrh	r3, [r5, #12]
 801626a:	065b      	lsls	r3, r3, #25
 801626c:	f53f af2c 	bmi.w	80160c8 <_svfiprintf_r+0x28>
 8016270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016272:	b01d      	add	sp, #116	; 0x74
 8016274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016278:	ab03      	add	r3, sp, #12
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	462a      	mov	r2, r5
 801627e:	4b06      	ldr	r3, [pc, #24]	; (8016298 <_svfiprintf_r+0x1f8>)
 8016280:	a904      	add	r1, sp, #16
 8016282:	4638      	mov	r0, r7
 8016284:	f7fd ff78 	bl	8014178 <_printf_i>
 8016288:	e7eb      	b.n	8016262 <_svfiprintf_r+0x1c2>
 801628a:	bf00      	nop
 801628c:	08022194 	.word	0x08022194
 8016290:	0802219e 	.word	0x0802219e
 8016294:	08013c31 	.word	0x08013c31
 8016298:	08015feb 	.word	0x08015feb
 801629c:	0802219a 	.word	0x0802219a

080162a0 <__sfputc_r>:
 80162a0:	6893      	ldr	r3, [r2, #8]
 80162a2:	3b01      	subs	r3, #1
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	b410      	push	{r4}
 80162a8:	6093      	str	r3, [r2, #8]
 80162aa:	da08      	bge.n	80162be <__sfputc_r+0x1e>
 80162ac:	6994      	ldr	r4, [r2, #24]
 80162ae:	42a3      	cmp	r3, r4
 80162b0:	db01      	blt.n	80162b6 <__sfputc_r+0x16>
 80162b2:	290a      	cmp	r1, #10
 80162b4:	d103      	bne.n	80162be <__sfputc_r+0x1e>
 80162b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162ba:	f7fe b99f 	b.w	80145fc <__swbuf_r>
 80162be:	6813      	ldr	r3, [r2, #0]
 80162c0:	1c58      	adds	r0, r3, #1
 80162c2:	6010      	str	r0, [r2, #0]
 80162c4:	7019      	strb	r1, [r3, #0]
 80162c6:	4608      	mov	r0, r1
 80162c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162cc:	4770      	bx	lr

080162ce <__sfputs_r>:
 80162ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162d0:	4606      	mov	r6, r0
 80162d2:	460f      	mov	r7, r1
 80162d4:	4614      	mov	r4, r2
 80162d6:	18d5      	adds	r5, r2, r3
 80162d8:	42ac      	cmp	r4, r5
 80162da:	d101      	bne.n	80162e0 <__sfputs_r+0x12>
 80162dc:	2000      	movs	r0, #0
 80162de:	e007      	b.n	80162f0 <__sfputs_r+0x22>
 80162e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162e4:	463a      	mov	r2, r7
 80162e6:	4630      	mov	r0, r6
 80162e8:	f7ff ffda 	bl	80162a0 <__sfputc_r>
 80162ec:	1c43      	adds	r3, r0, #1
 80162ee:	d1f3      	bne.n	80162d8 <__sfputs_r+0xa>
 80162f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080162f4 <_vfiprintf_r>:
 80162f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f8:	460d      	mov	r5, r1
 80162fa:	b09d      	sub	sp, #116	; 0x74
 80162fc:	4614      	mov	r4, r2
 80162fe:	4698      	mov	r8, r3
 8016300:	4606      	mov	r6, r0
 8016302:	b118      	cbz	r0, 801630c <_vfiprintf_r+0x18>
 8016304:	6983      	ldr	r3, [r0, #24]
 8016306:	b90b      	cbnz	r3, 801630c <_vfiprintf_r+0x18>
 8016308:	f7ff f9cc 	bl	80156a4 <__sinit>
 801630c:	4b89      	ldr	r3, [pc, #548]	; (8016534 <_vfiprintf_r+0x240>)
 801630e:	429d      	cmp	r5, r3
 8016310:	d11b      	bne.n	801634a <_vfiprintf_r+0x56>
 8016312:	6875      	ldr	r5, [r6, #4]
 8016314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016316:	07d9      	lsls	r1, r3, #31
 8016318:	d405      	bmi.n	8016326 <_vfiprintf_r+0x32>
 801631a:	89ab      	ldrh	r3, [r5, #12]
 801631c:	059a      	lsls	r2, r3, #22
 801631e:	d402      	bmi.n	8016326 <_vfiprintf_r+0x32>
 8016320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016322:	f7ff fa62 	bl	80157ea <__retarget_lock_acquire_recursive>
 8016326:	89ab      	ldrh	r3, [r5, #12]
 8016328:	071b      	lsls	r3, r3, #28
 801632a:	d501      	bpl.n	8016330 <_vfiprintf_r+0x3c>
 801632c:	692b      	ldr	r3, [r5, #16]
 801632e:	b9eb      	cbnz	r3, 801636c <_vfiprintf_r+0x78>
 8016330:	4629      	mov	r1, r5
 8016332:	4630      	mov	r0, r6
 8016334:	f7fe f9b4 	bl	80146a0 <__swsetup_r>
 8016338:	b1c0      	cbz	r0, 801636c <_vfiprintf_r+0x78>
 801633a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801633c:	07dc      	lsls	r4, r3, #31
 801633e:	d50e      	bpl.n	801635e <_vfiprintf_r+0x6a>
 8016340:	f04f 30ff 	mov.w	r0, #4294967295
 8016344:	b01d      	add	sp, #116	; 0x74
 8016346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634a:	4b7b      	ldr	r3, [pc, #492]	; (8016538 <_vfiprintf_r+0x244>)
 801634c:	429d      	cmp	r5, r3
 801634e:	d101      	bne.n	8016354 <_vfiprintf_r+0x60>
 8016350:	68b5      	ldr	r5, [r6, #8]
 8016352:	e7df      	b.n	8016314 <_vfiprintf_r+0x20>
 8016354:	4b79      	ldr	r3, [pc, #484]	; (801653c <_vfiprintf_r+0x248>)
 8016356:	429d      	cmp	r5, r3
 8016358:	bf08      	it	eq
 801635a:	68f5      	ldreq	r5, [r6, #12]
 801635c:	e7da      	b.n	8016314 <_vfiprintf_r+0x20>
 801635e:	89ab      	ldrh	r3, [r5, #12]
 8016360:	0598      	lsls	r0, r3, #22
 8016362:	d4ed      	bmi.n	8016340 <_vfiprintf_r+0x4c>
 8016364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016366:	f7ff fa41 	bl	80157ec <__retarget_lock_release_recursive>
 801636a:	e7e9      	b.n	8016340 <_vfiprintf_r+0x4c>
 801636c:	2300      	movs	r3, #0
 801636e:	9309      	str	r3, [sp, #36]	; 0x24
 8016370:	2320      	movs	r3, #32
 8016372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016376:	f8cd 800c 	str.w	r8, [sp, #12]
 801637a:	2330      	movs	r3, #48	; 0x30
 801637c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016540 <_vfiprintf_r+0x24c>
 8016380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016384:	f04f 0901 	mov.w	r9, #1
 8016388:	4623      	mov	r3, r4
 801638a:	469a      	mov	sl, r3
 801638c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016390:	b10a      	cbz	r2, 8016396 <_vfiprintf_r+0xa2>
 8016392:	2a25      	cmp	r2, #37	; 0x25
 8016394:	d1f9      	bne.n	801638a <_vfiprintf_r+0x96>
 8016396:	ebba 0b04 	subs.w	fp, sl, r4
 801639a:	d00b      	beq.n	80163b4 <_vfiprintf_r+0xc0>
 801639c:	465b      	mov	r3, fp
 801639e:	4622      	mov	r2, r4
 80163a0:	4629      	mov	r1, r5
 80163a2:	4630      	mov	r0, r6
 80163a4:	f7ff ff93 	bl	80162ce <__sfputs_r>
 80163a8:	3001      	adds	r0, #1
 80163aa:	f000 80aa 	beq.w	8016502 <_vfiprintf_r+0x20e>
 80163ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163b0:	445a      	add	r2, fp
 80163b2:	9209      	str	r2, [sp, #36]	; 0x24
 80163b4:	f89a 3000 	ldrb.w	r3, [sl]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	f000 80a2 	beq.w	8016502 <_vfiprintf_r+0x20e>
 80163be:	2300      	movs	r3, #0
 80163c0:	f04f 32ff 	mov.w	r2, #4294967295
 80163c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163c8:	f10a 0a01 	add.w	sl, sl, #1
 80163cc:	9304      	str	r3, [sp, #16]
 80163ce:	9307      	str	r3, [sp, #28]
 80163d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163d4:	931a      	str	r3, [sp, #104]	; 0x68
 80163d6:	4654      	mov	r4, sl
 80163d8:	2205      	movs	r2, #5
 80163da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163de:	4858      	ldr	r0, [pc, #352]	; (8016540 <_vfiprintf_r+0x24c>)
 80163e0:	f7e9 ff16 	bl	8000210 <memchr>
 80163e4:	9a04      	ldr	r2, [sp, #16]
 80163e6:	b9d8      	cbnz	r0, 8016420 <_vfiprintf_r+0x12c>
 80163e8:	06d1      	lsls	r1, r2, #27
 80163ea:	bf44      	itt	mi
 80163ec:	2320      	movmi	r3, #32
 80163ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163f2:	0713      	lsls	r3, r2, #28
 80163f4:	bf44      	itt	mi
 80163f6:	232b      	movmi	r3, #43	; 0x2b
 80163f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80163fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016400:	2b2a      	cmp	r3, #42	; 0x2a
 8016402:	d015      	beq.n	8016430 <_vfiprintf_r+0x13c>
 8016404:	9a07      	ldr	r2, [sp, #28]
 8016406:	4654      	mov	r4, sl
 8016408:	2000      	movs	r0, #0
 801640a:	f04f 0c0a 	mov.w	ip, #10
 801640e:	4621      	mov	r1, r4
 8016410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016414:	3b30      	subs	r3, #48	; 0x30
 8016416:	2b09      	cmp	r3, #9
 8016418:	d94e      	bls.n	80164b8 <_vfiprintf_r+0x1c4>
 801641a:	b1b0      	cbz	r0, 801644a <_vfiprintf_r+0x156>
 801641c:	9207      	str	r2, [sp, #28]
 801641e:	e014      	b.n	801644a <_vfiprintf_r+0x156>
 8016420:	eba0 0308 	sub.w	r3, r0, r8
 8016424:	fa09 f303 	lsl.w	r3, r9, r3
 8016428:	4313      	orrs	r3, r2
 801642a:	9304      	str	r3, [sp, #16]
 801642c:	46a2      	mov	sl, r4
 801642e:	e7d2      	b.n	80163d6 <_vfiprintf_r+0xe2>
 8016430:	9b03      	ldr	r3, [sp, #12]
 8016432:	1d19      	adds	r1, r3, #4
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	9103      	str	r1, [sp, #12]
 8016438:	2b00      	cmp	r3, #0
 801643a:	bfbb      	ittet	lt
 801643c:	425b      	neglt	r3, r3
 801643e:	f042 0202 	orrlt.w	r2, r2, #2
 8016442:	9307      	strge	r3, [sp, #28]
 8016444:	9307      	strlt	r3, [sp, #28]
 8016446:	bfb8      	it	lt
 8016448:	9204      	strlt	r2, [sp, #16]
 801644a:	7823      	ldrb	r3, [r4, #0]
 801644c:	2b2e      	cmp	r3, #46	; 0x2e
 801644e:	d10c      	bne.n	801646a <_vfiprintf_r+0x176>
 8016450:	7863      	ldrb	r3, [r4, #1]
 8016452:	2b2a      	cmp	r3, #42	; 0x2a
 8016454:	d135      	bne.n	80164c2 <_vfiprintf_r+0x1ce>
 8016456:	9b03      	ldr	r3, [sp, #12]
 8016458:	1d1a      	adds	r2, r3, #4
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	9203      	str	r2, [sp, #12]
 801645e:	2b00      	cmp	r3, #0
 8016460:	bfb8      	it	lt
 8016462:	f04f 33ff 	movlt.w	r3, #4294967295
 8016466:	3402      	adds	r4, #2
 8016468:	9305      	str	r3, [sp, #20]
 801646a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016550 <_vfiprintf_r+0x25c>
 801646e:	7821      	ldrb	r1, [r4, #0]
 8016470:	2203      	movs	r2, #3
 8016472:	4650      	mov	r0, sl
 8016474:	f7e9 fecc 	bl	8000210 <memchr>
 8016478:	b140      	cbz	r0, 801648c <_vfiprintf_r+0x198>
 801647a:	2340      	movs	r3, #64	; 0x40
 801647c:	eba0 000a 	sub.w	r0, r0, sl
 8016480:	fa03 f000 	lsl.w	r0, r3, r0
 8016484:	9b04      	ldr	r3, [sp, #16]
 8016486:	4303      	orrs	r3, r0
 8016488:	3401      	adds	r4, #1
 801648a:	9304      	str	r3, [sp, #16]
 801648c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016490:	482c      	ldr	r0, [pc, #176]	; (8016544 <_vfiprintf_r+0x250>)
 8016492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016496:	2206      	movs	r2, #6
 8016498:	f7e9 feba 	bl	8000210 <memchr>
 801649c:	2800      	cmp	r0, #0
 801649e:	d03f      	beq.n	8016520 <_vfiprintf_r+0x22c>
 80164a0:	4b29      	ldr	r3, [pc, #164]	; (8016548 <_vfiprintf_r+0x254>)
 80164a2:	bb1b      	cbnz	r3, 80164ec <_vfiprintf_r+0x1f8>
 80164a4:	9b03      	ldr	r3, [sp, #12]
 80164a6:	3307      	adds	r3, #7
 80164a8:	f023 0307 	bic.w	r3, r3, #7
 80164ac:	3308      	adds	r3, #8
 80164ae:	9303      	str	r3, [sp, #12]
 80164b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b2:	443b      	add	r3, r7
 80164b4:	9309      	str	r3, [sp, #36]	; 0x24
 80164b6:	e767      	b.n	8016388 <_vfiprintf_r+0x94>
 80164b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80164bc:	460c      	mov	r4, r1
 80164be:	2001      	movs	r0, #1
 80164c0:	e7a5      	b.n	801640e <_vfiprintf_r+0x11a>
 80164c2:	2300      	movs	r3, #0
 80164c4:	3401      	adds	r4, #1
 80164c6:	9305      	str	r3, [sp, #20]
 80164c8:	4619      	mov	r1, r3
 80164ca:	f04f 0c0a 	mov.w	ip, #10
 80164ce:	4620      	mov	r0, r4
 80164d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164d4:	3a30      	subs	r2, #48	; 0x30
 80164d6:	2a09      	cmp	r2, #9
 80164d8:	d903      	bls.n	80164e2 <_vfiprintf_r+0x1ee>
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d0c5      	beq.n	801646a <_vfiprintf_r+0x176>
 80164de:	9105      	str	r1, [sp, #20]
 80164e0:	e7c3      	b.n	801646a <_vfiprintf_r+0x176>
 80164e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80164e6:	4604      	mov	r4, r0
 80164e8:	2301      	movs	r3, #1
 80164ea:	e7f0      	b.n	80164ce <_vfiprintf_r+0x1da>
 80164ec:	ab03      	add	r3, sp, #12
 80164ee:	9300      	str	r3, [sp, #0]
 80164f0:	462a      	mov	r2, r5
 80164f2:	4b16      	ldr	r3, [pc, #88]	; (801654c <_vfiprintf_r+0x258>)
 80164f4:	a904      	add	r1, sp, #16
 80164f6:	4630      	mov	r0, r6
 80164f8:	f7fd fb9a 	bl	8013c30 <_printf_float>
 80164fc:	4607      	mov	r7, r0
 80164fe:	1c78      	adds	r0, r7, #1
 8016500:	d1d6      	bne.n	80164b0 <_vfiprintf_r+0x1bc>
 8016502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016504:	07d9      	lsls	r1, r3, #31
 8016506:	d405      	bmi.n	8016514 <_vfiprintf_r+0x220>
 8016508:	89ab      	ldrh	r3, [r5, #12]
 801650a:	059a      	lsls	r2, r3, #22
 801650c:	d402      	bmi.n	8016514 <_vfiprintf_r+0x220>
 801650e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016510:	f7ff f96c 	bl	80157ec <__retarget_lock_release_recursive>
 8016514:	89ab      	ldrh	r3, [r5, #12]
 8016516:	065b      	lsls	r3, r3, #25
 8016518:	f53f af12 	bmi.w	8016340 <_vfiprintf_r+0x4c>
 801651c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801651e:	e711      	b.n	8016344 <_vfiprintf_r+0x50>
 8016520:	ab03      	add	r3, sp, #12
 8016522:	9300      	str	r3, [sp, #0]
 8016524:	462a      	mov	r2, r5
 8016526:	4b09      	ldr	r3, [pc, #36]	; (801654c <_vfiprintf_r+0x258>)
 8016528:	a904      	add	r1, sp, #16
 801652a:	4630      	mov	r0, r6
 801652c:	f7fd fe24 	bl	8014178 <_printf_i>
 8016530:	e7e4      	b.n	80164fc <_vfiprintf_r+0x208>
 8016532:	bf00      	nop
 8016534:	08021ff4 	.word	0x08021ff4
 8016538:	08022014 	.word	0x08022014
 801653c:	08021fd4 	.word	0x08021fd4
 8016540:	08022194 	.word	0x08022194
 8016544:	0802219e 	.word	0x0802219e
 8016548:	08013c31 	.word	0x08013c31
 801654c:	080162cf 	.word	0x080162cf
 8016550:	0802219a 	.word	0x0802219a

08016554 <__sread>:
 8016554:	b510      	push	{r4, lr}
 8016556:	460c      	mov	r4, r1
 8016558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801655c:	f000 f8fc 	bl	8016758 <_read_r>
 8016560:	2800      	cmp	r0, #0
 8016562:	bfab      	itete	ge
 8016564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016566:	89a3      	ldrhlt	r3, [r4, #12]
 8016568:	181b      	addge	r3, r3, r0
 801656a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801656e:	bfac      	ite	ge
 8016570:	6563      	strge	r3, [r4, #84]	; 0x54
 8016572:	81a3      	strhlt	r3, [r4, #12]
 8016574:	bd10      	pop	{r4, pc}

08016576 <__swrite>:
 8016576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801657a:	461f      	mov	r7, r3
 801657c:	898b      	ldrh	r3, [r1, #12]
 801657e:	05db      	lsls	r3, r3, #23
 8016580:	4605      	mov	r5, r0
 8016582:	460c      	mov	r4, r1
 8016584:	4616      	mov	r6, r2
 8016586:	d505      	bpl.n	8016594 <__swrite+0x1e>
 8016588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801658c:	2302      	movs	r3, #2
 801658e:	2200      	movs	r2, #0
 8016590:	f000 f898 	bl	80166c4 <_lseek_r>
 8016594:	89a3      	ldrh	r3, [r4, #12]
 8016596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801659a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801659e:	81a3      	strh	r3, [r4, #12]
 80165a0:	4632      	mov	r2, r6
 80165a2:	463b      	mov	r3, r7
 80165a4:	4628      	mov	r0, r5
 80165a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165aa:	f000 b817 	b.w	80165dc <_write_r>

080165ae <__sseek>:
 80165ae:	b510      	push	{r4, lr}
 80165b0:	460c      	mov	r4, r1
 80165b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165b6:	f000 f885 	bl	80166c4 <_lseek_r>
 80165ba:	1c43      	adds	r3, r0, #1
 80165bc:	89a3      	ldrh	r3, [r4, #12]
 80165be:	bf15      	itete	ne
 80165c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80165c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80165c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80165ca:	81a3      	strheq	r3, [r4, #12]
 80165cc:	bf18      	it	ne
 80165ce:	81a3      	strhne	r3, [r4, #12]
 80165d0:	bd10      	pop	{r4, pc}

080165d2 <__sclose>:
 80165d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d6:	f000 b831 	b.w	801663c <_close_r>
	...

080165dc <_write_r>:
 80165dc:	b538      	push	{r3, r4, r5, lr}
 80165de:	4d07      	ldr	r5, [pc, #28]	; (80165fc <_write_r+0x20>)
 80165e0:	4604      	mov	r4, r0
 80165e2:	4608      	mov	r0, r1
 80165e4:	4611      	mov	r1, r2
 80165e6:	2200      	movs	r2, #0
 80165e8:	602a      	str	r2, [r5, #0]
 80165ea:	461a      	mov	r2, r3
 80165ec:	f7f0 fd3c 	bl	8007068 <_write>
 80165f0:	1c43      	adds	r3, r0, #1
 80165f2:	d102      	bne.n	80165fa <_write_r+0x1e>
 80165f4:	682b      	ldr	r3, [r5, #0]
 80165f6:	b103      	cbz	r3, 80165fa <_write_r+0x1e>
 80165f8:	6023      	str	r3, [r4, #0]
 80165fa:	bd38      	pop	{r3, r4, r5, pc}
 80165fc:	200025c0 	.word	0x200025c0

08016600 <__assert_func>:
 8016600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016602:	4614      	mov	r4, r2
 8016604:	461a      	mov	r2, r3
 8016606:	4b09      	ldr	r3, [pc, #36]	; (801662c <__assert_func+0x2c>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4605      	mov	r5, r0
 801660c:	68d8      	ldr	r0, [r3, #12]
 801660e:	b14c      	cbz	r4, 8016624 <__assert_func+0x24>
 8016610:	4b07      	ldr	r3, [pc, #28]	; (8016630 <__assert_func+0x30>)
 8016612:	9100      	str	r1, [sp, #0]
 8016614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016618:	4906      	ldr	r1, [pc, #24]	; (8016634 <__assert_func+0x34>)
 801661a:	462b      	mov	r3, r5
 801661c:	f000 f81e 	bl	801665c <fiprintf>
 8016620:	f7fd f93d 	bl	801389e <abort>
 8016624:	4b04      	ldr	r3, [pc, #16]	; (8016638 <__assert_func+0x38>)
 8016626:	461c      	mov	r4, r3
 8016628:	e7f3      	b.n	8016612 <__assert_func+0x12>
 801662a:	bf00      	nop
 801662c:	20000190 	.word	0x20000190
 8016630:	080221a5 	.word	0x080221a5
 8016634:	080221b2 	.word	0x080221b2
 8016638:	080221e0 	.word	0x080221e0

0801663c <_close_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4d06      	ldr	r5, [pc, #24]	; (8016658 <_close_r+0x1c>)
 8016640:	2300      	movs	r3, #0
 8016642:	4604      	mov	r4, r0
 8016644:	4608      	mov	r0, r1
 8016646:	602b      	str	r3, [r5, #0]
 8016648:	f7f1 fe9d 	bl	8008386 <_close>
 801664c:	1c43      	adds	r3, r0, #1
 801664e:	d102      	bne.n	8016656 <_close_r+0x1a>
 8016650:	682b      	ldr	r3, [r5, #0]
 8016652:	b103      	cbz	r3, 8016656 <_close_r+0x1a>
 8016654:	6023      	str	r3, [r4, #0]
 8016656:	bd38      	pop	{r3, r4, r5, pc}
 8016658:	200025c0 	.word	0x200025c0

0801665c <fiprintf>:
 801665c:	b40e      	push	{r1, r2, r3}
 801665e:	b503      	push	{r0, r1, lr}
 8016660:	4601      	mov	r1, r0
 8016662:	ab03      	add	r3, sp, #12
 8016664:	4805      	ldr	r0, [pc, #20]	; (801667c <fiprintf+0x20>)
 8016666:	f853 2b04 	ldr.w	r2, [r3], #4
 801666a:	6800      	ldr	r0, [r0, #0]
 801666c:	9301      	str	r3, [sp, #4]
 801666e:	f7ff fe41 	bl	80162f4 <_vfiprintf_r>
 8016672:	b002      	add	sp, #8
 8016674:	f85d eb04 	ldr.w	lr, [sp], #4
 8016678:	b003      	add	sp, #12
 801667a:	4770      	bx	lr
 801667c:	20000190 	.word	0x20000190

08016680 <_fstat_r>:
 8016680:	b538      	push	{r3, r4, r5, lr}
 8016682:	4d07      	ldr	r5, [pc, #28]	; (80166a0 <_fstat_r+0x20>)
 8016684:	2300      	movs	r3, #0
 8016686:	4604      	mov	r4, r0
 8016688:	4608      	mov	r0, r1
 801668a:	4611      	mov	r1, r2
 801668c:	602b      	str	r3, [r5, #0]
 801668e:	f7f1 fe86 	bl	800839e <_fstat>
 8016692:	1c43      	adds	r3, r0, #1
 8016694:	d102      	bne.n	801669c <_fstat_r+0x1c>
 8016696:	682b      	ldr	r3, [r5, #0]
 8016698:	b103      	cbz	r3, 801669c <_fstat_r+0x1c>
 801669a:	6023      	str	r3, [r4, #0]
 801669c:	bd38      	pop	{r3, r4, r5, pc}
 801669e:	bf00      	nop
 80166a0:	200025c0 	.word	0x200025c0

080166a4 <_isatty_r>:
 80166a4:	b538      	push	{r3, r4, r5, lr}
 80166a6:	4d06      	ldr	r5, [pc, #24]	; (80166c0 <_isatty_r+0x1c>)
 80166a8:	2300      	movs	r3, #0
 80166aa:	4604      	mov	r4, r0
 80166ac:	4608      	mov	r0, r1
 80166ae:	602b      	str	r3, [r5, #0]
 80166b0:	f7f1 fe85 	bl	80083be <_isatty>
 80166b4:	1c43      	adds	r3, r0, #1
 80166b6:	d102      	bne.n	80166be <_isatty_r+0x1a>
 80166b8:	682b      	ldr	r3, [r5, #0]
 80166ba:	b103      	cbz	r3, 80166be <_isatty_r+0x1a>
 80166bc:	6023      	str	r3, [r4, #0]
 80166be:	bd38      	pop	{r3, r4, r5, pc}
 80166c0:	200025c0 	.word	0x200025c0

080166c4 <_lseek_r>:
 80166c4:	b538      	push	{r3, r4, r5, lr}
 80166c6:	4d07      	ldr	r5, [pc, #28]	; (80166e4 <_lseek_r+0x20>)
 80166c8:	4604      	mov	r4, r0
 80166ca:	4608      	mov	r0, r1
 80166cc:	4611      	mov	r1, r2
 80166ce:	2200      	movs	r2, #0
 80166d0:	602a      	str	r2, [r5, #0]
 80166d2:	461a      	mov	r2, r3
 80166d4:	f7f1 fe7e 	bl	80083d4 <_lseek>
 80166d8:	1c43      	adds	r3, r0, #1
 80166da:	d102      	bne.n	80166e2 <_lseek_r+0x1e>
 80166dc:	682b      	ldr	r3, [r5, #0]
 80166de:	b103      	cbz	r3, 80166e2 <_lseek_r+0x1e>
 80166e0:	6023      	str	r3, [r4, #0]
 80166e2:	bd38      	pop	{r3, r4, r5, pc}
 80166e4:	200025c0 	.word	0x200025c0

080166e8 <__ascii_mbtowc>:
 80166e8:	b082      	sub	sp, #8
 80166ea:	b901      	cbnz	r1, 80166ee <__ascii_mbtowc+0x6>
 80166ec:	a901      	add	r1, sp, #4
 80166ee:	b142      	cbz	r2, 8016702 <__ascii_mbtowc+0x1a>
 80166f0:	b14b      	cbz	r3, 8016706 <__ascii_mbtowc+0x1e>
 80166f2:	7813      	ldrb	r3, [r2, #0]
 80166f4:	600b      	str	r3, [r1, #0]
 80166f6:	7812      	ldrb	r2, [r2, #0]
 80166f8:	1e10      	subs	r0, r2, #0
 80166fa:	bf18      	it	ne
 80166fc:	2001      	movne	r0, #1
 80166fe:	b002      	add	sp, #8
 8016700:	4770      	bx	lr
 8016702:	4610      	mov	r0, r2
 8016704:	e7fb      	b.n	80166fe <__ascii_mbtowc+0x16>
 8016706:	f06f 0001 	mvn.w	r0, #1
 801670a:	e7f8      	b.n	80166fe <__ascii_mbtowc+0x16>

0801670c <_realloc_r>:
 801670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801670e:	4607      	mov	r7, r0
 8016710:	4614      	mov	r4, r2
 8016712:	460e      	mov	r6, r1
 8016714:	b921      	cbnz	r1, 8016720 <_realloc_r+0x14>
 8016716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801671a:	4611      	mov	r1, r2
 801671c:	f7fd b98e 	b.w	8013a3c <_malloc_r>
 8016720:	b922      	cbnz	r2, 801672c <_realloc_r+0x20>
 8016722:	f7fd f93b 	bl	801399c <_free_r>
 8016726:	4625      	mov	r5, r4
 8016728:	4628      	mov	r0, r5
 801672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801672c:	f000 f833 	bl	8016796 <_malloc_usable_size_r>
 8016730:	42a0      	cmp	r0, r4
 8016732:	d20f      	bcs.n	8016754 <_realloc_r+0x48>
 8016734:	4621      	mov	r1, r4
 8016736:	4638      	mov	r0, r7
 8016738:	f7fd f980 	bl	8013a3c <_malloc_r>
 801673c:	4605      	mov	r5, r0
 801673e:	2800      	cmp	r0, #0
 8016740:	d0f2      	beq.n	8016728 <_realloc_r+0x1c>
 8016742:	4631      	mov	r1, r6
 8016744:	4622      	mov	r2, r4
 8016746:	f7fd f8f9 	bl	801393c <memcpy>
 801674a:	4631      	mov	r1, r6
 801674c:	4638      	mov	r0, r7
 801674e:	f7fd f925 	bl	801399c <_free_r>
 8016752:	e7e9      	b.n	8016728 <_realloc_r+0x1c>
 8016754:	4635      	mov	r5, r6
 8016756:	e7e7      	b.n	8016728 <_realloc_r+0x1c>

08016758 <_read_r>:
 8016758:	b538      	push	{r3, r4, r5, lr}
 801675a:	4d07      	ldr	r5, [pc, #28]	; (8016778 <_read_r+0x20>)
 801675c:	4604      	mov	r4, r0
 801675e:	4608      	mov	r0, r1
 8016760:	4611      	mov	r1, r2
 8016762:	2200      	movs	r2, #0
 8016764:	602a      	str	r2, [r5, #0]
 8016766:	461a      	mov	r2, r3
 8016768:	f7f1 fdf0 	bl	800834c <_read>
 801676c:	1c43      	adds	r3, r0, #1
 801676e:	d102      	bne.n	8016776 <_read_r+0x1e>
 8016770:	682b      	ldr	r3, [r5, #0]
 8016772:	b103      	cbz	r3, 8016776 <_read_r+0x1e>
 8016774:	6023      	str	r3, [r4, #0]
 8016776:	bd38      	pop	{r3, r4, r5, pc}
 8016778:	200025c0 	.word	0x200025c0

0801677c <__ascii_wctomb>:
 801677c:	b149      	cbz	r1, 8016792 <__ascii_wctomb+0x16>
 801677e:	2aff      	cmp	r2, #255	; 0xff
 8016780:	bf85      	ittet	hi
 8016782:	238a      	movhi	r3, #138	; 0x8a
 8016784:	6003      	strhi	r3, [r0, #0]
 8016786:	700a      	strbls	r2, [r1, #0]
 8016788:	f04f 30ff 	movhi.w	r0, #4294967295
 801678c:	bf98      	it	ls
 801678e:	2001      	movls	r0, #1
 8016790:	4770      	bx	lr
 8016792:	4608      	mov	r0, r1
 8016794:	4770      	bx	lr

08016796 <_malloc_usable_size_r>:
 8016796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801679a:	1f18      	subs	r0, r3, #4
 801679c:	2b00      	cmp	r3, #0
 801679e:	bfbc      	itt	lt
 80167a0:	580b      	ldrlt	r3, [r1, r0]
 80167a2:	18c0      	addlt	r0, r0, r3
 80167a4:	4770      	bx	lr
	...

080167a8 <_init>:
 80167a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167aa:	bf00      	nop
 80167ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ae:	bc08      	pop	{r3}
 80167b0:	469e      	mov	lr, r3
 80167b2:	4770      	bx	lr

080167b4 <_fini>:
 80167b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167b6:	bf00      	nop
 80167b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167ba:	bc08      	pop	{r3}
 80167bc:	469e      	mov	lr, r3
 80167be:	4770      	bx	lr
